"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@azure";
exports.ids = ["vendor-chunks/@azure"];
exports.modules = {

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stubbedPublicClientApplication: () => (/* binding */ stubbedPublicClientApplication)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const stubbedPublicClientApplication = {\n    initialize: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    acquireTokenPopup: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    acquireTokenRedirect: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    acquireTokenSilent: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    acquireTokenByCode: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    getAllAccounts: ()=>{\n        return [];\n    },\n    getAccount: ()=>{\n        return null;\n    },\n    getAccountByHomeId: ()=>{\n        return null;\n    },\n    getAccountByUsername: ()=>{\n        return null;\n    },\n    getAccountByLocalId: ()=>{\n        return null;\n    },\n    handleRedirectPromise: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    loginPopup: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    loginRedirect: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    logout: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    logoutRedirect: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    logoutPopup: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    ssoSilent: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    addEventCallback: ()=>{\n        return null;\n    },\n    removeEventCallback: ()=>{\n        return;\n    },\n    addPerformanceCallback: ()=>{\n        return \"\";\n    },\n    removePerformanceCallback: ()=>{\n        return false;\n    },\n    enableAccountStorageEvents: ()=>{\n        return;\n    },\n    disableAccountStorageEvents: ()=>{\n        return;\n    },\n    getTokenCache: ()=>{\n        throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled);\n    },\n    getLogger: ()=>{\n        throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled);\n    },\n    setLogger: ()=>{\n        return;\n    },\n    setActiveAccount: ()=>{\n        return;\n    },\n    getActiveAccount: ()=>{\n        return null;\n    },\n    initializeWrapperLibrary: ()=>{\n        return;\n    },\n    setNavigationClient: ()=>{\n        return;\n    },\n    getConfiguration: ()=>{\n        throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled);\n    },\n    hydrateCache: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    },\n    clearCache: ()=>{\n        return Promise.reject((0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplicationCalled));\n    }\n};\n //# sourceMappingURL=IPublicClientApplication.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicClientApplication: () => (/* binding */ PublicClientApplication),\n/* harmony export */   createNestablePublicClientApplication: () => (/* binding */ createNestablePublicClientApplication),\n/* harmony export */   createStandardPublicClientApplication: () => (/* binding */ createStandardPublicClientApplication)\n/* harmony export */ });\n/* harmony import */ var _controllers_ControllerFactory_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/ControllerFactory.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs\");\n/* harmony import */ var _controllers_StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers/StandardController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs\");\n/* harmony import */ var _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operatingcontext/StandardOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs\");\n/* harmony import */ var _controllers_NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../controllers/NestedAppAuthController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs\");\n/* harmony import */ var _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operatingcontext/NestedAppOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */ class PublicClientApplication {\n    /**\r\n     * Creates StandardController and passes it to the PublicClientApplication\r\n     *\r\n     * @param configuration {Configuration}\r\n     */ static async createPublicClientApplication(configuration) {\n        const controller = await (0,_controllers_ControllerFactory_mjs__WEBPACK_IMPORTED_MODULE_0__.createV3Controller)(configuration);\n        const pca = new PublicClientApplication(configuration, controller);\n        return pca;\n    }\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration Object for the MSAL PublicClientApplication instance\r\n     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)\r\n     */ constructor(configuration, controller){\n        this.controller = controller || new _controllers_StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__.StandardController(new _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__.StandardOperatingContext(configuration));\n    }\n    /**\r\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\r\n     * @param request {?InitializeApplicationRequest}\r\n     */ async initialize(request) {\n        return this.controller.initialize(request);\n    }\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async acquireTokenPopup(request) {\n        return this.controller.acquireTokenPopup(request);\n    }\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\r\n     * the page, so any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ acquireTokenRedirect(request) {\n        return this.controller.acquireTokenRedirect(request);\n    }\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object\r\n     */ acquireTokenSilent(silentRequest) {\n        return this.controller.acquireTokenSilent(silentRequest);\n    }\n    /**\r\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\r\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\r\n     * This API is not indended for normal authorization code acquisition and redemption.\r\n     *\r\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\r\n     *\r\n     * @param request {@link AuthorizationCodeRequest}\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ acquireTokenByCode(request) {\n        return this.controller.acquireTokenByCode(request);\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     * @param eventTypes\r\n     */ addEventCallback(callback, eventTypes) {\n        return this.controller.addEventCallback(callback, eventTypes);\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        return this.controller.removeEventCallback(callbackId);\n    }\n    /**\r\n     * Registers a callback to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */ addPerformanceCallback(callback) {\n        return this.controller.addPerformanceCallback(callback);\n    }\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */ removePerformanceCallback(callbackId) {\n        return this.controller.removePerformanceCallback(callbackId);\n    }\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ enableAccountStorageEvents() {\n        this.controller.enableAccountStorageEvents();\n    }\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ disableAccountStorageEvents() {\n        this.controller.disableAccountStorageEvents();\n    }\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */ getAccount(accountFilter) {\n        return this.controller.getAccount(accountFilter);\n    }\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */ getAccountByHomeId(homeAccountId) {\n        return this.controller.getAccountByHomeId(homeAccountId);\n    }\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */ getAccountByLocalId(localId) {\n        return this.controller.getAccountByLocalId(localId);\n    }\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param userName\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */ getAccountByUsername(userName) {\n        return this.controller.getAccountByUsername(userName);\n    }\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return this.controller.getAllAccounts(accountFilter);\n    }\n    /**\r\n     * Event handler function which allows users to fire events after the PublicClientApplication object\r\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\r\n     * auth flows.\r\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\r\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\r\n     */ handleRedirectPromise(hash) {\n        return this.controller.handleRedirectPromise(hash);\n    }\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ loginPopup(request) {\n        return this.controller.loginPopup(request);\n    }\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ loginRedirect(request) {\n        return this.controller.loginRedirect(request);\n    }\n    /**\r\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\r\n     * @param logoutRequest\r\n     * @deprecated\r\n     */ logout(logoutRequest) {\n        return this.controller.logout(logoutRequest);\n    }\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */ logoutRedirect(logoutRequest) {\n        return this.controller.logoutRedirect(logoutRequest);\n    }\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */ logoutPopup(logoutRequest) {\n        return this.controller.logoutPopup(logoutRequest);\n    }\n    /**\r\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\r\n     * - Any browser using a form of Intelligent Tracking Prevention\r\n     * - If there is not an established session with the service\r\n     *\r\n     * In these cases, the request must be done inside a popup or full frame redirect.\r\n     *\r\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\r\n     *\r\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\r\n     * you session on the server still exists.\r\n     * @param request {@link SsoSilentRequest}\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ ssoSilent(request) {\n        return this.controller.ssoSilent(request);\n    }\n    /**\r\n     * Gets the token cache for the application.\r\n     */ getTokenCache() {\n        return this.controller.getTokenCache();\n    }\n    /**\r\n     * Returns the logger instance\r\n     */ getLogger() {\n        return this.controller.getLogger();\n    }\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */ setLogger(logger) {\n        this.controller.setLogger(logger);\n    }\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        this.controller.setActiveAccount(account);\n    }\n    /**\r\n     * Gets the currently active account\r\n     */ getActiveAccount() {\n        return this.controller.getActiveAccount();\n    }\n    /**\r\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\r\n     * @param sku\r\n     * @param version\r\n     */ initializeWrapperLibrary(sku, version) {\n        return this.controller.initializeWrapperLibrary(sku, version);\n    }\n    /**\r\n     * Sets navigation client\r\n     * @param navigationClient\r\n     */ setNavigationClient(navigationClient) {\n        this.controller.setNavigationClient(navigationClient);\n    }\n    /**\r\n     * Returns the configuration object\r\n     * @internal\r\n     */ getConfiguration() {\n        return this.controller.getConfiguration();\n    }\n    /**\r\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\r\n     * @param result\r\n     * @param request - The request object that was used to obtain the AuthenticationResult\r\n     * @returns\r\n     */ async hydrateCache(result, request) {\n        return this.controller.hydrateCache(result, request);\n    }\n    /**\r\n     * Clears tokens and account from the browser cache.\r\n     * @param logoutRequest\r\n     */ clearCache(logoutRequest) {\n        return this.controller.clearCache(logoutRequest);\n    }\n}\n/**\r\n * creates NestedAppAuthController and passes it to the PublicClientApplication,\r\n * falls back to StandardController if NestedAppAuthController is not available\r\n *\r\n * @param configuration\r\n * @returns IPublicClientApplication\r\n *\r\n */ async function createNestablePublicClientApplication(configuration) {\n    const nestedAppAuth = new _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_3__.NestedAppOperatingContext(configuration);\n    await nestedAppAuth.initialize();\n    if (nestedAppAuth.isAvailable()) {\n        const controller = new _controllers_NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_4__.NestedAppAuthController(nestedAppAuth);\n        return new PublicClientApplication(configuration, controller);\n    }\n    return createStandardPublicClientApplication(configuration);\n}\n/**\r\n * creates PublicClientApplication using StandardController\r\n *\r\n * @param configuration\r\n * @returns IPublicClientApplication\r\n *\r\n */ async function createStandardPublicClientApplication(configuration) {\n    const pca = new PublicClientApplication(configuration);\n    await pca.initialize();\n    return pca;\n}\n //# sourceMappingURL=PublicClientApplication.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NativeMessageHandler: () => (/* binding */ NativeMessageHandler)\n/* harmony export */ });\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/NativeAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NativeMessageHandler {\n    constructor(logger, handshakeTimeoutMs, performanceClient, extensionId){\n        this.logger = logger;\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\n        this.extensionId = extensionId;\n        this.resolvers = new Map(); // Used for non-handshake messages\n        this.handshakeResolvers = new Map(); // Used for handshake messages\n        this.messageChannel = new MessageChannel();\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n        this.performanceClient = performanceClient;\n        this.handshakeEvent = performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.NativeMessageHandlerHandshake);\n    }\n    /**\r\n     * Sends a given message to the extension and resolves with the extension response\r\n     * @param body\r\n     */ async sendMessage(body) {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        const req = {\n            channel: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.createNewGuid)(),\n            body: body\n        };\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);\n        this.messageChannel.port1.postMessage(req);\n        return new Promise((resolve, reject)=>{\n            this.resolvers.set(req.responseId, {\n                resolve,\n                reject\n            });\n        });\n    }\n    /**\r\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n     * @param {Logger} logger\r\n     * @param {number} handshakeTimeoutMs\r\n     * @param {IPerformanceClient} performanceClient\r\n     * @param {ICrypto} crypto\r\n     */ static async createProvider(logger, handshakeTimeoutMs, performanceClient) {\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\n        try {\n            const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.PREFERRED_EXTENSION_ID);\n            await preferredProvider.sendHandshakeRequest();\n            return preferredProvider;\n        } catch (e) {\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\n            const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\n            await backupProvider.sendHandshakeRequest();\n            return backupProvider;\n        }\n    }\n    /**\r\n     * Send handshake request helper.\r\n     */ async sendHandshakeRequest() {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n        const req = {\n            channel: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.createNewGuid)(),\n            body: {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.HandshakeRequest\n            }\n        };\n        this.handshakeEvent.add({\n            extensionId: this.extensionId,\n            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n        });\n        this.messageChannel.port1.onmessage = (event)=>{\n            this.onChannelMessage(event);\n        };\n        window.postMessage(req, window.origin, [\n            this.messageChannel.port2\n        ]);\n        return new Promise((resolve, reject)=>{\n            this.handshakeResolvers.set(req.responseId, {\n                resolve,\n                reject\n            });\n            this.timeoutId = window.setTimeout(()=>{\n                /*\r\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n                 */ window.removeEventListener(\"message\", this.windowListener, false);\n                this.messageChannel.port1.close();\n                this.messageChannel.port2.close();\n                this.handshakeEvent.end({\n                    extensionHandshakeTimedOut: true,\n                    success: false\n                });\n                reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.nativeHandshakeTimeout));\n                this.handshakeResolvers.delete(req.responseId);\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        });\n    }\n    /**\r\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n     * @param event\r\n     */ onWindowMessage(event) {\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n        const request = event.data;\n        if (!request.channel || request.channel !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.CHANNEL_ID) {\n            return;\n        }\n        if (request.extensionId && request.extensionId !== this.extensionId) {\n            return;\n        }\n        if (request.body.method === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.HandshakeRequest) {\n            const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n            /*\r\n             * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\r\n             * the proper response.\r\n             */ if (!handshakeResolver) {\n                this.logger.trace(`NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`);\n                return;\n            }\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n            this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\n            clearTimeout(this.timeoutId);\n            this.messageChannel.port1.close();\n            this.messageChannel.port2.close();\n            window.removeEventListener(\"message\", this.windowListener, false);\n            this.handshakeEvent.end({\n                success: false,\n                extensionInstalled: false\n            });\n            handshakeResolver.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.nativeExtensionNotInstalled));\n        }\n    }\n    /**\r\n     * Invoked when a message is received from the extension on the MessageChannel port\r\n     * @param event\r\n     */ onChannelMessage(event) {\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n        const request = event.data;\n        const resolver = this.resolvers.get(request.responseId);\n        const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n        try {\n            const method = request.body.method;\n            if (method === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.Response) {\n                if (!resolver) {\n                    return;\n                }\n                const response = request.body.response;\n                this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n                this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);\n                if (response.status !== \"Success\") {\n                    resolver.reject((0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createNativeAuthError)(response.code, response.description, response.ext));\n                } else if (response.result) {\n                    if (response.result[\"code\"] && response.result[\"description\"]) {\n                        resolver.reject((0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createNativeAuthError)(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n                    } else {\n                        resolver.resolve(response.result);\n                    }\n                } else {\n                    throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.createAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.unexpectedError, \"Event does not contain result.\");\n                }\n                this.resolvers.delete(request.responseId);\n            } else if (method === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.HandshakeResponse) {\n                if (!handshakeResolver) {\n                    this.logger.trace(`NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`);\n                    return;\n                }\n                clearTimeout(this.timeoutId); // Clear setTimeout\n                window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n                this.extensionId = request.extensionId;\n                this.extensionVersion = request.body.version;\n                this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);\n                this.handshakeEvent.end({\n                    extensionInstalled: true,\n                    success: true\n                });\n                handshakeResolver.resolve();\n                this.handshakeResolvers.delete(request.responseId);\n            }\n        // Do nothing if method is not Response or HandshakeResponse\n        } catch (err) {\n            this.logger.error(\"Error parsing response from WAM Extension\");\n            this.logger.errorPii(`Error parsing response from WAM Extension: ${err}`);\n            this.logger.errorPii(`Unable to parse ${event}`);\n            if (resolver) {\n                resolver.reject(err);\n            } else if (handshakeResolver) {\n                handshakeResolver.reject(err);\n            }\n        }\n    }\n    /**\r\n     * Returns the Id for the browser extension this handler is communicating with\r\n     * @returns\r\n     */ getExtensionId() {\n        return this.extensionId;\n    }\n    /**\r\n     * Returns the version for the browser extension this handler is communicating with\r\n     * @returns\r\n     */ getExtensionVersion() {\n        return this.extensionVersion;\n    }\n    /**\r\n     * Returns boolean indicating whether or not the request should attempt to use native broker\r\n     * @param logger\r\n     * @param config\r\n     * @param nativeExtensionProvider\r\n     * @param authenticationScheme\r\n     */ static isNativeAvailable(config, logger, nativeExtensionProvider, authenticationScheme) {\n        logger.trace(\"isNativeAvailable called\");\n        if (!config.system.allowNativeBroker) {\n            logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\n            // Developer disabled WAM\n            return false;\n        }\n        if (!nativeExtensionProvider) {\n            logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\n            // Extension is not available\n            return false;\n        }\n        if (authenticationScheme) {\n            switch(authenticationScheme){\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.POP:\n                    logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n                    return true;\n                default:\n                    logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n                    return false;\n            }\n        }\n        return true;\n    }\n}\n //# sourceMappingURL=NativeMessageHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_UNAVAILABLE: () => (/* binding */ ACCOUNT_UNAVAILABLE),\n/* harmony export */   DISABLED: () => (/* binding */ DISABLED),\n/* harmony export */   NO_NETWORK: () => (/* binding */ NO_NETWORK),\n/* harmony export */   PERSISTENT_ERROR: () => (/* binding */ PERSISTENT_ERROR),\n/* harmony export */   USER_CANCEL: () => (/* binding */ USER_CANCEL),\n/* harmony export */   USER_INTERACTION_REQUIRED: () => (/* binding */ USER_INTERACTION_REQUIRED)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Status Codes that can be thrown by WAM\nconst USER_INTERACTION_REQUIRED = \"USER_INTERACTION_REQUIRED\";\nconst USER_CANCEL = \"USER_CANCEL\";\nconst NO_NETWORK = \"NO_NETWORK\";\nconst PERSISTENT_ERROR = \"PERSISTENT_ERROR\";\nconst DISABLED = \"DISABLED\";\nconst ACCOUNT_UNAVAILABLE = \"ACCOUNT_UNAVAILABLE\";\n //# sourceMappingURL=NativeStatusCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Jyb2tlci9uYXRpdmVCcm9rZXIvTmF0aXZlU3RhdHVzQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELHlDQUF5QztBQUN6QyxNQUFNQSw0QkFBNEI7QUFDbEMsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLG1CQUFtQjtBQUN6QixNQUFNQyxXQUFXO0FBQ2pCLE1BQU1DLHNCQUFzQjtBQUVtRixDQUMvRyw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvYnJva2VyL25hdGl2ZUJyb2tlci9OYXRpdmVTdGF0dXNDb2Rlcy5tanM/NjJhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBTdGF0dXMgQ29kZXMgdGhhdCBjYW4gYmUgdGhyb3duIGJ5IFdBTVxyXG5jb25zdCBVU0VSX0lOVEVSQUNUSU9OX1JFUVVJUkVEID0gXCJVU0VSX0lOVEVSQUNUSU9OX1JFUVVJUkVEXCI7XHJcbmNvbnN0IFVTRVJfQ0FOQ0VMID0gXCJVU0VSX0NBTkNFTFwiO1xyXG5jb25zdCBOT19ORVRXT1JLID0gXCJOT19ORVRXT1JLXCI7XHJcbmNvbnN0IFBFUlNJU1RFTlRfRVJST1IgPSBcIlBFUlNJU1RFTlRfRVJST1JcIjtcclxuY29uc3QgRElTQUJMRUQgPSBcIkRJU0FCTEVEXCI7XHJcbmNvbnN0IEFDQ09VTlRfVU5BVkFJTEFCTEUgPSBcIkFDQ09VTlRfVU5BVkFJTEFCTEVcIjtcblxuZXhwb3J0IHsgQUNDT1VOVF9VTkFWQUlMQUJMRSwgRElTQUJMRUQsIE5PX05FVFdPUkssIFBFUlNJU1RFTlRfRVJST1IsIFVTRVJfQ0FOQ0VMLCBVU0VSX0lOVEVSQUNUSU9OX1JFUVVJUkVEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OYXRpdmVTdGF0dXNDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsiVVNFUl9JTlRFUkFDVElPTl9SRVFVSVJFRCIsIlVTRVJfQ0FOQ0VMIiwiTk9fTkVUV09SSyIsIlBFUlNJU1RFTlRfRVJST1IiLCJESVNBQkxFRCIsIkFDQ09VTlRfVU5BVkFJTEFCTEUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAccount: () => (/* binding */ getAccount),\n/* harmony export */   getAccountByHomeId: () => (/* binding */ getAccountByHomeId),\n/* harmony export */   getAccountByLocalId: () => (/* binding */ getAccountByLocalId),\n/* harmony export */   getAccountByUsername: () => (/* binding */ getAccountByUsername),\n/* harmony export */   getActiveAccount: () => (/* binding */ getActiveAccount),\n/* harmony export */   getAllAccounts: () => (/* binding */ getAllAccounts),\n/* harmony export */   setActiveAccount: () => (/* binding */ setActiveAccount)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n * @returns Array of AccountInfo objects in cache\r\n */ function getAllAccounts(logger, browserStorage, isInBrowser, accountFilter) {\n    logger.verbose(\"getAllAccounts called\");\n    return isInBrowser ? browserStorage.getAllAccounts(accountFilter) : [];\n}\n/**\r\n * Returns the first account found in the cache that matches the account filter passed in.\r\n * @param accountFilter\r\n * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n */ function getAccount(accountFilter, logger, browserStorage) {\n    logger.trace(\"getAccount called\");\n    if (Object.keys(accountFilter).length === 0) {\n        logger.warning(\"getAccount: No accountFilter provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy(accountFilter);\n    if (account) {\n        logger.verbose(\"getAccount: Account matching provided filter found, returning\");\n        return account;\n    } else {\n        logger.verbose(\"getAccount: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Returns the signed in account matching username.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found.\r\n * This API is provided for convenience but getAccountById should be used for best reliability\r\n * @param username\r\n * @returns The account object stored in MSAL\r\n */ function getAccountByUsername(username, logger, browserStorage) {\n    logger.trace(\"getAccountByUsername called\");\n    if (!username) {\n        logger.warning(\"getAccountByUsername: No username provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy({\n        username\n    });\n    if (account) {\n        logger.verbose(\"getAccountByUsername: Account matching username found, returning\");\n        logger.verbosePii(`getAccountByUsername: Returning signed-in accounts matching username: ${username}`);\n        return account;\n    } else {\n        logger.verbose(\"getAccountByUsername: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Returns the signed in account matching homeAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param homeAccountId\r\n * @returns The account object stored in MSAL\r\n */ function getAccountByHomeId(homeAccountId, logger, browserStorage) {\n    logger.trace(\"getAccountByHomeId called\");\n    if (!homeAccountId) {\n        logger.warning(\"getAccountByHomeId: No homeAccountId provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy({\n        homeAccountId\n    });\n    if (account) {\n        logger.verbose(\"getAccountByHomeId: Account matching homeAccountId found, returning\");\n        logger.verbosePii(`getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`);\n        return account;\n    } else {\n        logger.verbose(\"getAccountByHomeId: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Returns the signed in account matching localAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param localAccountId\r\n * @returns The account object stored in MSAL\r\n */ function getAccountByLocalId(localAccountId, logger, browserStorage) {\n    logger.trace(\"getAccountByLocalId called\");\n    if (!localAccountId) {\n        logger.warning(\"getAccountByLocalId: No localAccountId provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy({\n        localAccountId\n    });\n    if (account) {\n        logger.verbose(\"getAccountByLocalId: Account matching localAccountId found, returning\");\n        logger.verbosePii(`getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`);\n        return account;\n    } else {\n        logger.verbose(\"getAccountByLocalId: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n * @param account\r\n */ function setActiveAccount(account, browserStorage) {\n    browserStorage.setActiveAccount(account);\n}\n/**\r\n * Gets the currently active account\r\n */ function getActiveAccount(browserStorage) {\n    return browserStorage.getActiveAccount();\n}\n //# sourceMappingURL=AccountManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncMemoryStorage: () => (/* binding */ AsyncMemoryStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _DatabaseStorage_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DatabaseStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs\");\n/* harmony import */ var _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MemoryStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */ class AsyncMemoryStorage {\n    constructor(logger){\n        this.inMemoryCache = new _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_0__.MemoryStorage();\n        this.indexedDBCache = new _DatabaseStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.DatabaseStorage();\n        this.logger = logger;\n    }\n    handleDatabaseAccessError(error) {\n        if (error instanceof _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError && error.errorCode === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.databaseUnavailable) {\n            this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n        } else {\n            throw error;\n        }\n    }\n    /**\r\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n     * storage object if item isn't found in-memory.\r\n     * @param key\r\n     */ async getItem(key) {\n        const item = this.inMemoryCache.getItem(key);\n        if (!item) {\n            try {\n                this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.getItem(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return item;\n    }\n    /**\r\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n     * storage object with the given key.\r\n     * @param key\r\n     * @param value\r\n     */ async setItem(key, value) {\n        this.inMemoryCache.setItem(key, value);\n        try {\n            await this.indexedDBCache.setItem(key, value);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n    /**\r\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n     * @param key\r\n     */ async removeItem(key) {\n        this.inMemoryCache.removeItem(key);\n        try {\n            await this.indexedDBCache.removeItem(key);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n    /**\r\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n     * asynchronous storage object.\r\n     */ async getKeys() {\n        const cacheKeys = this.inMemoryCache.getKeys();\n        if (cacheKeys.length === 0) {\n            try {\n                this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n                return await this.indexedDBCache.getKeys();\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return cacheKeys;\n    }\n    /**\r\n     * Returns true or false if the given key is present in the cache.\r\n     * @param key\r\n     */ async containsKey(key) {\n        const containsKey = this.inMemoryCache.containsKey(key);\n        if (!containsKey) {\n            try {\n                this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.containsKey(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return containsKey;\n    }\n    /**\r\n     * Clears in-memory Map\r\n     */ clearInMemory() {\n        // InMemory cache is a Map instance, clear is straightforward\n        this.logger.verbose(`Deleting in-memory keystore`);\n        this.inMemoryCache.clear();\n        this.logger.verbose(`In-memory keystore deleted`);\n    }\n    /**\r\n     * Tries to delete the IndexedDB database\r\n     * @returns\r\n     */ async clearPersistent() {\n        try {\n            this.logger.verbose(\"Deleting persistent keystore\");\n            const dbDeleted = await this.indexedDBCache.deleteDatabase();\n            if (dbDeleted) {\n                this.logger.verbose(\"Persistent keystore deleted\");\n            }\n            return dbDeleted;\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n            return false;\n        }\n    }\n}\n //# sourceMappingURL=AsyncMemoryStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserCacheManager: () => (/* binding */ BrowserCacheManager),\n/* harmony export */   DEFAULT_BROWSER_CACHE_MANAGER: () => (/* binding */ DEFAULT_BROWSER_CACHE_MANAGER)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _LocalStorage_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LocalStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs\");\n/* harmony import */ var _SessionStorage_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SessionStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs\");\n/* harmony import */ var _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MemoryStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs\");\n/* harmony import */ var _utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/BrowserProtocolUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _CookieStorage_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CookieStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */ class BrowserCacheManager extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.CacheManager {\n    constructor(clientId, cacheConfig, cryptoImpl, logger, staticAuthorityOptions, performanceClient){\n        super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\n        this.temporaryCacheStorage = this.setupBrowserStorage(this.cacheConfig.temporaryCacheLocation);\n        this.cookieStorage = new _CookieStorage_mjs__WEBPACK_IMPORTED_MODULE_2__.CookieStorage();\n        // Migrate cache entries from older versions of MSAL.\n        if (cacheConfig.cacheMigrationEnabled) {\n            this.migrateCacheEntries();\n            this.createKeyMaps();\n        }\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n     * @param cacheLocation\r\n     */ setupBrowserStorage(cacheLocation) {\n        try {\n            switch(cacheLocation){\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.LocalStorage:\n                    return new _LocalStorage_mjs__WEBPACK_IMPORTED_MODULE_4__.LocalStorage();\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.SessionStorage:\n                    return new _SessionStorage_mjs__WEBPACK_IMPORTED_MODULE_5__.SessionStorage();\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage:\n                default:\n                    break;\n            }\n        } catch (e) {\n            this.logger.error(e);\n        }\n        this.cacheConfig.cacheLocation = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage;\n        return new _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage();\n    }\n    /**\r\n     * Migrate all old cache entries to new schema. No rollback supported.\r\n     * @param storeAuthStateInCookie\r\n     */ migrateCacheEntries() {\n        const idTokenKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR_DESC}`;\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n        const values = [\n            idTokenValue,\n            clientInfoValue,\n            errorValue,\n            errorDescValue\n        ];\n        const keysToMigrate = [\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN,\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.CLIENT_INFO,\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR,\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR_DESC\n        ];\n        keysToMigrate.forEach((cacheKey, index)=>{\n            const value = values[index];\n            if (value) {\n                this.setTemporaryCache(cacheKey, value, true);\n            }\n        });\n    }\n    /**\r\n     * Searches all cache entries for MSAL accounts and creates the account key map\r\n     * This is used to migrate users from older versions of MSAL which did not create the map.\r\n     * @returns\r\n     */ createKeyMaps() {\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n        const accountKeys = this.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS);\n        const tokenKeys = this.getItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n        if (accountKeys && tokenKeys) {\n            this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\n            // Key maps already exist, no need to iterate through cache\n            return;\n        }\n        const allKeys = this.browserStorage.getKeys();\n        allKeys.forEach((key)=>{\n            if (this.isCredentialKey(key)) {\n                // Get item, parse, validate and write key to map\n                const value = this.getItem(key);\n                if (value) {\n                    const credObj = this.validateAndParseJson(value);\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n                        switch(credObj[\"credentialType\"]){\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN:\n                                if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isIdTokenEntity(credObj)) {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);\n                                    const idTokenEntity = credObj;\n                                    const newKey = this.updateCredentialCacheKey(key, idTokenEntity);\n                                    this.addTokenKey(newKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n                                    return;\n                                } else {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);\n                                }\n                                break;\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                                if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAccessTokenEntity(credObj)) {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);\n                                    const accessTokenEntity = credObj;\n                                    const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);\n                                    this.addTokenKey(newKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n                                    return;\n                                } else {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);\n                                }\n                                break;\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN:\n                                if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isRefreshTokenEntity(credObj)) {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);\n                                    const refreshTokenEntity = credObj;\n                                    const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);\n                                    this.addTokenKey(newKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n                                    return;\n                                } else {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);\n                                }\n                                break;\n                        }\n                    }\n                }\n            }\n            if (this.isAccountKey(key)) {\n                const value = this.getItem(key);\n                if (value) {\n                    const accountObj = this.validateAndParseJson(value);\n                    if (accountObj && _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.isAccountEntity(accountObj)) {\n                        this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\n                        this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);\n                        this.addAccountKeyToMap(key);\n                    }\n                }\n            }\n        });\n    }\n    /**\r\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n     * @param input\r\n     */ validateAndParseJson(jsonValue) {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\r\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n             *\r\n             */ return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n        } catch (error) {\n            return null;\n        }\n    }\n    /**\r\n     * fetches the entry from the browser storage based off the key\r\n     * @param key\r\n     */ getItem(key) {\n        return this.browserStorage.getItem(key);\n    }\n    /**\r\n     * sets the entry in the browser storage\r\n     * @param key\r\n     * @param value\r\n     */ setItem(key, value) {\n        this.browserStorage.setItem(key, value);\n    }\n    /**\r\n     * fetch the account entity from the platform cache\r\n     * @param accountKey\r\n     */ getAccount(accountKey, logger) {\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\n        const accountEntity = this.getCachedAccountEntity(accountKey);\n        return this.updateOutdatedCachedAccount(accountKey, accountEntity, logger);\n    }\n    /**\r\n     * Reads account from cache, deserializes it into an account entity and returns it.\r\n     * If account is not found from the key, returns null and removes key from map.\r\n     * @param accountKey\r\n     * @returns\r\n     */ getCachedAccountEntity(accountKey) {\n        const serializedAccount = this.getItem(accountKey);\n        if (!serializedAccount) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n        const parsedAccount = this.validateAndParseJson(serializedAccount);\n        if (!parsedAccount || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.isAccountEntity(parsedAccount)) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n        return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.CacheManager.toObject(new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AccountEntity(), parsedAccount);\n    }\n    /**\r\n     * set account entity in the platform cache\r\n     * @param account\r\n     */ setAccount(account) {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n        this.addAccountKeyToMap(key);\n    }\n    /**\r\n     * Returns the array of account keys currently cached\r\n     * @returns\r\n     */ getAccountKeys() {\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n        const accountKeys = this.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS);\n        if (accountKeys) {\n            return JSON.parse(accountKeys);\n        }\n        this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\n        return [];\n    }\n    /**\r\n     * Add a new account to the key map\r\n     * @param key\r\n     */ addAccountKeyToMap(key) {\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n        this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);\n        const accountKeys = this.getAccountKeys();\n        if (accountKeys.indexOf(key) === -1) {\n            // Only add key if it does not already exist in the map\n            accountKeys.push(key);\n            this.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\n        } else {\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\n        }\n    }\n    /**\r\n     * Remove an account from the key map\r\n     * @param key\r\n     */ removeAccountKeyFromMap(key) {\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n        this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);\n        const accountKeys = this.getAccountKeys();\n        const removalIndex = accountKeys.indexOf(key);\n        if (removalIndex > -1) {\n            accountKeys.splice(removalIndex, 1);\n            this.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\n        } else {\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\n        }\n    }\n    /**\r\n     * Extends inherited removeAccount function to include removal of the account key from the map\r\n     * @param key\r\n     */ async removeAccount(key) {\n        void super.removeAccount(key);\n        this.removeAccountKeyFromMap(key);\n    }\n    /**\r\n     * Remove account entity from the platform cache if it's outdated\r\n     * @param accountKey\r\n     */ removeOutdatedAccount(accountKey) {\n        this.removeItem(accountKey);\n        this.removeAccountKeyFromMap(accountKey);\n    }\n    /**\r\n     * Removes given idToken from the cache and from the key map\r\n     * @param key\r\n     */ removeIdToken(key) {\n        super.removeIdToken(key);\n        this.removeTokenKey(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n    }\n    /**\r\n     * Removes given accessToken from the cache and from the key map\r\n     * @param key\r\n     */ async removeAccessToken(key) {\n        void super.removeAccessToken(key);\n        this.removeTokenKey(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n    }\n    /**\r\n     * Removes given refreshToken from the cache and from the key map\r\n     * @param key\r\n     */ removeRefreshToken(key) {\n        super.removeRefreshToken(key);\n        this.removeTokenKey(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n    }\n    /**\r\n     * Gets the keys for the cached tokens associated with this clientId\r\n     * @returns\r\n     */ getTokenKeys() {\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n        const item = this.getItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n        if (item) {\n            const tokenKeys = this.validateAndParseJson(item);\n            if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n                return tokenKeys;\n            } else {\n                this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\n            }\n        } else {\n            this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\n        }\n        return {\n            idToken: [],\n            accessToken: [],\n            refreshToken: []\n        };\n    }\n    /**\r\n     * Adds the given key to the token key map\r\n     * @param key\r\n     * @param type\r\n     */ addTokenKey(key, type) {\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n        switch(type){\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN:\n                if (tokenKeys.idToken.indexOf(key) === -1) {\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\n                    tokenKeys.idToken.push(key);\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\n                    tokenKeys.accessToken.push(key);\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN:\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\n                    tokenKeys.refreshToken.push(key);\n                }\n                break;\n            default:\n                this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.unexpectedCredentialType);\n        }\n        this.setItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n    }\n    /**\r\n     * Removes the given key from the token key map\r\n     * @param key\r\n     * @param type\r\n     */ removeTokenKey(key, type) {\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n        switch(type){\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN:\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);\n                const idRemoval = tokenKeys.idToken.indexOf(key);\n                if (idRemoval > -1) {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\n                    tokenKeys.idToken.splice(idRemoval, 1);\n                } else {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\n                if (accessRemoval > -1) {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\n                } else {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN:\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n                if (refreshRemoval > -1) {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\n                } else {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\n                }\n                break;\n            default:\n                this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.unexpectedCredentialType);\n        }\n        this.setItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n    }\n    /**\r\n     * generates idToken entity from a string\r\n     * @param idTokenKey\r\n     */ getIdTokenCredential(idTokenKey) {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            this.removeTokenKey(idTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n            return null;\n        }\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            this.removeTokenKey(idTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n        return parsedIdToken;\n    }\n    /**\r\n     * set IdToken credential to the platform cache\r\n     * @param idToken\r\n     */ setIdTokenCredential(idToken) {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(idToken);\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n        this.addTokenKey(idTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n    }\n    /**\r\n     * generates accessToken entity from a string\r\n     * @param key\r\n     */ getAccessTokenCredential(accessTokenKey) {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            this.removeTokenKey(accessTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (!parsedAccessToken || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAccessTokenEntity(parsedAccessToken)) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            this.removeTokenKey(accessTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n        return parsedAccessToken;\n    }\n    /**\r\n     * set accessToken credential to the platform cache\r\n     * @param accessToken\r\n     */ setAccessTokenCredential(accessToken) {\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n        const accessTokenKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(accessToken);\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n        this.addTokenKey(accessTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n    }\n    /**\r\n     * generates refreshToken entity from a string\r\n     * @param refreshTokenKey\r\n     */ getRefreshTokenCredential(refreshTokenKey) {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            this.removeTokenKey(refreshTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (!parsedRefreshToken || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isRefreshTokenEntity(parsedRefreshToken)) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            this.removeTokenKey(refreshTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n        return parsedRefreshToken;\n    }\n    /**\r\n     * set refreshToken credential to the platform cache\r\n     * @param refreshToken\r\n     */ setRefreshTokenCredential(refreshToken) {\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n        const refreshTokenKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(refreshToken);\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n        this.addTokenKey(refreshTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n    }\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */ getAppMetadata(appMetadataKey) {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (!parsedMetadata || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return parsedMetadata;\n    }\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */ setAppMetadata(appMetadata) {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateAppMetadataKey(appMetadata);\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */ getServerTelemetry(serverTelemetryKey) {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n        const parsedEntity = this.validateAndParseJson(value);\n        if (!parsedEntity || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isServerTelemetryEntity(serverTelemetryKey, parsedEntity)) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return parsedEntity;\n    }\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */ setServerTelemetry(serverTelemetryKey, serverTelemetry) {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n    /**\r\n     *\r\n     */ getAuthorityMetadata(key) {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (parsedMetadata && _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAuthorityMetadataEntity(key, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n            return parsedMetadata;\n        }\n        return null;\n    }\n    /**\r\n     *\r\n     */ getAuthorityMetadataKeys() {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key)=>{\n            return this.isAuthorityMetadata(key);\n        });\n    }\n    /**\r\n     * Sets wrapper metadata in memory\r\n     * @param wrapperSKU\r\n     * @param wrapperVersion\r\n     */ setWrapperMetadata(wrapperSKU, wrapperVersion) {\n        this.internalStorage.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n    }\n    /**\r\n     * Returns wrapper metadata from in-memory storage\r\n     */ getWrapperMetadata() {\n        const sku = this.internalStorage.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_SKU) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING;\n        const version = this.internalStorage.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_VER) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING;\n        return [\n            sku,\n            version\n        ];\n    }\n    /**\r\n     *\r\n     * @param entity\r\n     */ setAuthorityMetadata(key, entity) {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n    /**\r\n     * Gets the active account\r\n     */ getActiveAccount() {\n        const activeAccountKeyFilters = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n        if (!activeAccountValueFilters) {\n            // if new active account cache type isn't found, it's an old version, so look for that instead\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\n            const activeAccountKeyLocal = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT);\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n            if (!activeAccountValueLocal) {\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n                return null;\n            }\n            const activeAccount = this.getAccountInfoFilteredBy({\n                localAccountId: activeAccountValueLocal\n            });\n            if (activeAccount) {\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\n                this.setActiveAccount(activeAccount);\n                return activeAccount;\n            }\n            return null;\n        }\n        const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n        if (activeAccountValueObj) {\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\n            return this.getAccountInfoFilteredBy({\n                homeAccountId: activeAccountValueObj.homeAccountId,\n                localAccountId: activeAccountValueObj.localAccountId,\n                tenantId: activeAccountValueObj.tenantId\n            });\n        }\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n        return null;\n    }\n    /**\r\n     * Sets the active account's localAccountId in cache\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        const activeAccountKey = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n        const activeAccountKeyLocal = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT);\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            const activeAccountValue = {\n                homeAccountId: account.homeAccountId,\n                localAccountId: account.localAccountId,\n                tenantId: account.tenantId\n            };\n            this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n            this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n        } else {\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n            this.browserStorage.removeItem(activeAccountKey);\n            this.browserStorage.removeItem(activeAccountKeyLocal);\n        }\n    }\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */ getThrottlingCache(throttlingCacheKey) {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (!parsedThrottlingCache || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return parsedThrottlingCache;\n    }\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */ setThrottlingCache(throttlingCacheKey, throttlingCache) {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n    /**\r\n     * Gets cache item with given key.\r\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */ getTemporaryCache(cacheKey, generateKey) {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.cookieStorage.getItem(key);\n            if (itemCookie) {\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n                return itemCookie;\n            }\n        }\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (this.cacheConfig.cacheLocation === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.LocalStorage) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n                    return item;\n                }\n            }\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n        return value;\n    }\n    /**\r\n     * Sets the cache item with the key and value given.\r\n     * Stores in cookie if storeAuthStateInCookie is set to true.\r\n     * This can cause cookie overflow if used incorrectly.\r\n     * @param key\r\n     * @param value\r\n     */ setTemporaryCache(cacheKey, value, generateKey) {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n            this.cookieStorage.setItem(key, value, undefined, this.cacheConfig.secureCookies);\n        }\n    }\n    /**\r\n     * Removes the cache item with the given key.\r\n     * @param key\r\n     */ removeItem(key) {\n        this.browserStorage.removeItem(key);\n    }\n    /**\r\n     * Removes the temporary cache item with the given key.\r\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */ removeTemporaryItem(key) {\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n            this.cookieStorage.removeItem(key);\n        }\n    }\n    /**\r\n     * Gets all keys in window.\r\n     */ getKeys() {\n        return this.browserStorage.getKeys();\n    }\n    /**\r\n     * Clears all cache entries created by MSAL.\r\n     */ async clear() {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n        // Remove temp storage first to make sure any cookies are cleared\n        this.temporaryCacheStorage.getKeys().forEach((cacheKey)=>{\n            if (cacheKey.indexOf(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {\n                this.removeTemporaryItem(cacheKey);\n            }\n        });\n        // Removes all remaining MSAL cache items\n        this.browserStorage.getKeys().forEach((cacheKey)=>{\n            if (cacheKey.indexOf(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {\n                this.browserStorage.removeItem(cacheKey);\n            }\n        });\n        this.internalStorage.clear();\n    }\n    /**\r\n     * Clears all access tokes that have claims prior to saving the current one\r\n     * @param performanceClient {IPerformanceClient}\r\n     * @param correlationId {string} correlation id\r\n     * @returns\r\n     */ async clearTokensAndKeysWithClaims(performanceClient, correlationId) {\n        performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.PerformanceEvents.ClearTokensAndKeysWithClaims, correlationId);\n        const tokenKeys = this.getTokenKeys();\n        const removedAccessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            // if the access token has claims in its key, remove the token key and the token\n            const credential = this.getAccessTokenCredential(key);\n            if (credential?.requestedClaimsHash && key.includes(credential.requestedClaimsHash.toLowerCase())) {\n                removedAccessTokens.push(this.removeAccessToken(key));\n            }\n        });\n        await Promise.all(removedAccessTokens);\n        // warn if any access tokens are removed\n        if (removedAccessTokens.length > 0) {\n            this.logger.warning(`${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`);\n        }\n    }\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */ generateCacheKey(key) {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.StringUtils.startsWith(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.StringUtils.startsWith(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ADAL_ID_TOKEN)) {\n                return key;\n            }\n            return `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n        return JSON.stringify(key);\n    }\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */ generateAuthorityKey(stateString) {\n        const { libraryState: { id: stateId } } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.AUTHORITY}.${stateId}`);\n    }\n    /**\r\n     * Create Nonce key to cache nonce\r\n     * @param state\r\n     */ generateNonceKey(stateString) {\n        const { libraryState: { id: stateId } } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\n    }\n    /**\r\n     * Creates full cache key for the request state\r\n     * @param stateString State string for the request\r\n     */ generateStateKey(stateString) {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const { libraryState: { id: stateId } } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\n    }\n    /**\r\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n     */ getCachedAuthority(cachedState) {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n    /**\r\n     * Updates account, authority, and state in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     */ updateCacheEntries(state, nonce, authorityInstance, loginHint, account) {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n        if (account) {\n            const ccsCredential = {\n                credential: account.homeAccountId,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.CcsCredentialType.HOME_ACCOUNT_ID\n            };\n            this.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        } else if (loginHint) {\n            const ccsCredential = {\n                credential: loginHint,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.CcsCredentialType.UPN\n            };\n            this.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        }\n    }\n    /**\r\n     * Reset all temporary cache items\r\n     * @param state\r\n     */ resetRequestCache(state) {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (state) {\n            this.temporaryCacheStorage.getKeys().forEach((key)=>{\n                if (key.indexOf(state) !== -1) {\n                    this.removeTemporaryItem(key);\n                }\n            });\n            // delete generic interactive request parameters\n            this.removeTemporaryItem(this.generateStateKey(state));\n            this.removeTemporaryItem(this.generateNonceKey(state));\n            this.removeTemporaryItem(this.generateAuthorityKey(state));\n        }\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.ORIGIN_URI));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CORRELATION_ID));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CCS_CREDENTIAL));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.NATIVE_REQUEST));\n        this.setInteractionInProgress(false);\n    }\n    /**\r\n     * Removes temporary cache for the provided state\r\n     * @param stateString\r\n     */ cleanRequestByState(stateString) {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\n            this.resetRequestCache(cachedState || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING);\n        }\n    }\n    /**\r\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n     * @param interactionType\r\n     */ cleanRequestByInteractionType(interactionType) {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n        // Loop through all keys to find state key\n        this.temporaryCacheStorage.getKeys().forEach((key)=>{\n            // If this key is not the state key, move on\n            if (key.indexOf(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = (0,_utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_15__.extractBrowserRequestState)(this.cryptoImpl, stateValue);\n            if (parsedState && parsedState.interactionType === interactionType) {\n                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.setInteractionInProgress(false);\n    }\n    cacheCodeRequest(authCodeRequest) {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n        const encodedValue = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_16__.base64Encode)(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n    }\n    /**\r\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n     */ getCachedRequest(state) {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS, true);\n        if (!encodedTokenRequest) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.noTokenRequestCacheError);\n        }\n        let parsedRequest;\n        try {\n            parsedRequest = JSON.parse((0,_encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__.base64Decode)(encodedTokenRequest));\n        } catch (e) {\n            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n            this.logger.error(`Parsing cached token request threw with error: ${e}`);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.unableToParseTokenRequestCacheError);\n        }\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS));\n        // Get cached authority and use if no authority is cached with request.\n        if (!parsedRequest.authority) {\n            const authorityCacheKey = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.noCachedAuthorityError);\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n        return parsedRequest;\n    }\n    /**\r\n     * Gets cached native request for redirect flows\r\n     */ getCachedNativeRequest() {\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n        const cachedRequest = this.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.NATIVE_REQUEST, true);\n        if (!cachedRequest) {\n            this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n            return null;\n        }\n        const parsedRequest = this.validateAndParseJson(cachedRequest);\n        if (!parsedRequest) {\n            this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n            return null;\n        }\n        return parsedRequest;\n    }\n    isInteractionInProgress(matchClientId) {\n        const clientId = this.getInteractionInProgress();\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n    getInteractionInProgress() {\n        const key = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n    setInteractionInProgress(inProgress) {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.interactionInProgress);\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n            this.removeTemporaryItem(key);\n        }\n    }\n    /**\r\n     * Returns username retrieved from ADAL or MSAL v1 idToken\r\n     * @deprecated\r\n     */ getLegacyLoginHint() {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ADAL_ID_TOKEN);\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN, true);\n        if (msalIdTokenString) {\n            this.browserStorage.removeItem(this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN));\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.extractTokenClaims(cachedIdTokenString, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__.base64Decode);\n            if (idTokenClaims.preferred_username) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n                return idTokenClaims.preferred_username;\n            } else if (idTokenClaims.upn) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n                return idTokenClaims.upn;\n            } else {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Updates a credential's cache key if the current cache key is outdated\r\n     */ updateCredentialCacheKey(currentCacheKey, credential) {\n        const updatedCacheKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(credential);\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.browserStorage.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n                return updatedCacheKey;\n            } else {\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n            }\n        }\n        return currentCacheKey;\n    }\n    /**\r\n     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\r\n     * @param result\r\n     * @param request\r\n     */ async hydrateCache(result, request) {\n        const idTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.createIdTokenEntity(result.account?.homeAccountId, result.account?.environment, result.idToken, this.clientId, result.tenantId);\n        let claimsHash;\n        if (request.claims) {\n            claimsHash = await this.cryptoImpl.hashString(request.claims);\n        }\n        /**\r\n         * meta data for cache stores time in seconds from epoch\r\n         * AuthenticationResult returns expiresOn and extExpiresOn in milliseconds (as a Date object which is in ms)\r\n         * We need to map these for the cache when building tokens from AuthenticationResult\r\n         *\r\n         * The next MSAL VFuture should map these both to same value if possible\r\n         */ const accessTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.createAccessTokenEntity(result.account?.homeAccountId, result.account.environment, result.accessToken, this.clientId, result.tenantId, result.scopes.join(\" \"), result.expiresOn ? result.expiresOn.getTime() / 1000 : 0, result.extExpiresOn ? result.extExpiresOn.getTime() / 1000 : 0, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__.base64Decode, undefined, result.tokenType, undefined, request.sshKid, request.claims, claimsHash);\n        const cacheRecord = {\n            idToken: idTokenEntity,\n            accessToken: accessTokenEntity\n        };\n        return this.saveCacheRecord(cacheRecord);\n    }\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */ async saveCacheRecord(cacheRecord, storeInCache, correlationId) {\n        try {\n            await super.saveCacheRecord(cacheRecord, storeInCache, correlationId);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.CacheError && this.performanceClient && correlationId) {\n                try {\n                    const tokenKeys = this.getTokenKeys();\n                    this.performanceClient.addFields({\n                        cacheRtCount: tokenKeys.refreshToken.length,\n                        cacheIdCount: tokenKeys.idToken.length,\n                        cacheAtCount: tokenKeys.accessToken.length\n                    }, correlationId);\n                } catch (e) {}\n            }\n            throw e;\n        }\n    }\n}\nconst DEFAULT_BROWSER_CACHE_MANAGER = (clientId, logger)=>{\n    const cacheOptions = {\n        cacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage,\n        temporaryCacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        cacheMigrationEnabled: false,\n        claimsBasedCachingEnabled: false\n    };\n    return new BrowserCacheManager(clientId, cacheOptions, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__.DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\n //# sourceMappingURL=BrowserCacheManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL0Jyb3dzZXJDYWNoZU1hbmFnZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNFM7QUFDck87QUFDc0Q7QUFDM0U7QUFDSTtBQUNGO0FBQzJCO0FBQ3JCO0FBQ0E7QUFDTjtBQUM4RztBQUVsSzs7O0NBR0MsR0FDRDs7OztDQUlDLEdBQ0QsTUFBTStCLDRCQUE0Qi9CLG9FQUFZQTtJQUMxQ2dDLFlBQVlDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsc0JBQXNCLEVBQUVDLGlCQUFpQixDQUFFO1FBQzlGLEtBQUssQ0FBQ0wsVUFBVUUsWUFBWUMsUUFBUUM7UUFDcEMsSUFBSSxDQUFDSCxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0UsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0csZUFBZSxHQUFHLElBQUlqQiw2REFBYUE7UUFDeEMsSUFBSSxDQUFDa0IsY0FBYyxHQUFHLElBQUksQ0FBQ0MsbUJBQW1CLENBQUMsSUFBSSxDQUFDUCxXQUFXLENBQUNRLGFBQWE7UUFDN0UsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxJQUFJLENBQUNGLG1CQUFtQixDQUFDLElBQUksQ0FBQ1AsV0FBVyxDQUFDVSxzQkFBc0I7UUFDN0YsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSW5CLDZEQUFhQTtRQUN0QyxxREFBcUQ7UUFDckQsSUFBSVEsWUFBWVkscUJBQXFCLEVBQUU7WUFDbkMsSUFBSSxDQUFDQyxtQkFBbUI7WUFDeEIsSUFBSSxDQUFDQyxhQUFhO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDVixpQkFBaUIsR0FBR0E7SUFDN0I7SUFDQTs7O0tBR0MsR0FDREcsb0JBQW9CQyxhQUFhLEVBQUU7UUFDL0IsSUFBSTtZQUNBLE9BQVFBO2dCQUNKLEtBQUsxQiw2RUFBb0JBLENBQUNJ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Q1Y7SUFDSjtBQUNKO0FBQ0EsTUFBTWtSLGdDQUFnQyxDQUFDbFMsVUFBVUc7SUFDN0MsTUFBTWdTLGVBQWU7UUFDakIxUixlQUFlMUIsNkVBQW9CQSxDQUFDTSxhQUFhO1FBQ2pEc0Isd0JBQXdCNUIsNkVBQW9CQSxDQUFDTSxhQUFhO1FBQzFENEwsd0JBQXdCO1FBQ3hCRyxlQUFlO1FBQ2Z2Syx1QkFBdUI7UUFDdkJ1UiwyQkFBMkI7SUFDL0I7SUFDQSxPQUFPLElBQUl0UyxvQkFBb0JFLFVBQVVtUyxjQUFjdlQsc0ZBQTZCQSxFQUFFdUI7QUFDMUY7QUFFOEQsQ0FDOUQsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL0Jyb3dzZXJDYWNoZU1hbmFnZXIubWpzPzhhMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBDYWNoZU1hbmFnZXIsIENyZWRlbnRpYWxUeXBlLCBDYWNoZUhlbHBlcnMsIEFjY291bnRFbnRpdHksIGNyZWF0ZUNsaWVudEF1dGhFcnJvciwgQ2xpZW50QXV0aEVycm9yQ29kZXMsIENvbnN0YW50cywgUGVyc2lzdGVudENhY2hlS2V5cywgUGVyZm9ybWFuY2VFdmVudHMsIFN0cmluZ1V0aWxzLCBQcm90b2NvbFV0aWxzLCBBdXRoVG9rZW4sIENhY2hlRXJyb3IsIERFRkFVTFRfQ1JZUFRPX0lNUExFTUVOVEFUSU9OLCBDY3NDcmVkZW50aWFsVHlwZSB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBCcm93c2VyQ2FjaGVMb2NhdGlvbiwgU3RhdGljQ2FjaGVLZXlzLCBJbk1lbW9yeUNhY2hlS2V5cywgVGVtcG9yYXJ5Q2FjaGVLZXlzIH0gZnJvbSAnLi4vdXRpbHMvQnJvd3NlckNvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlIH0gZnJvbSAnLi9Mb2NhbFN0b3JhZ2UubWpzJztcbmltcG9ydCB7IFNlc3Npb25TdG9yYWdlIH0gZnJvbSAnLi9TZXNzaW9uU3RvcmFnZS5tanMnO1xuaW1wb3J0IHsgTWVtb3J5U3RvcmFnZSB9IGZyb20gJy4vTWVtb3J5U3RvcmFnZS5tanMnO1xuaW1wb3J0IHsgZXh0cmFjdEJyb3dzZXJSZXF1ZXN0U3RhdGUgfSBmcm9tICcuLi91dGlscy9Ccm93c2VyUHJvdG9jb2xVdGlscy5tanMnO1xuaW1wb3J0IHsgYmFzZTY0RGVjb2RlIH0gZnJvbSAnLi4vZW5jb2RlL0Jhc2U2NERlY29kZS5tanMnO1xuaW1wb3J0IHsgYmFzZTY0RW5jb2RlIH0gZnJvbSAnLi4vZW5jb2RlL0Jhc2U2NEVuY29kZS5tanMnO1xuaW1wb3J0IHsgQ29va2llU3RvcmFnZSB9IGZyb20gJy4vQ29va2llU3RvcmFnZS5tanMnO1xuaW1wb3J0IHsgbm9Ub2tlblJlcXVlc3RDYWNoZUVycm9yLCB1bmFibGVUb1BhcnNlVG9rZW5SZXF1ZXN0Q2FjaGVFcnJvciwgbm9DYWNoZWRBdXRob3JpdHlFcnJvciwgaW50ZXJhY3Rpb25JblByb2dyZXNzIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhpcyBjbGFzcyBpbXBsZW1lbnRzIHRoZSBjYWNoZSBzdG9yYWdlIGludGVyZmFjZSBmb3IgTVNBTCB0aHJvdWdoIGJyb3dzZXIgbG9jYWwgb3Igc2Vzc2lvbiBzdG9yYWdlLlxyXG4gKiBDb29raWVzIGFyZSBvbmx5IHVzZWQgaWYgc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSBpcyB0cnVlLCBhbmQgYXJlIG9ubHkgdXNlZCBmb3JcclxuICogcGFyYW1ldGVycyBzdWNoIGFzIHN0YXRlIGFuZCBub25jZSwgZ2VuZXJhbGx5LlxyXG4gKi9cclxuY2xhc3MgQnJvd3NlckNhY2hlTWFuYWdlciBleHRlbmRzIENhY2hlTWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihjbGllbnRJZCwgY2FjaGVDb25maWcsIGNyeXB0b0ltcGwsIGxvZ2dlciwgc3RhdGljQXV0aG9yaXR5T3B0aW9ucywgcGVyZm9ybWFuY2VDbGllbnQpIHtcclxuICAgICAgICBzdXBlcihjbGllbnRJZCwgY3J5cHRvSW1wbCwgbG9nZ2VyLCBzdGF0aWNBdXRob3JpdHlPcHRpb25zKTtcclxuICAgICAgICB0aGlzLmNhY2hlQ29uZmlnID0gY2FjaGVDb25maWc7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbFN0b3JhZ2UgPSBuZXcgTWVtb3J5U3RvcmFnZSgpO1xyXG4gICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2UgPSB0aGlzLnNldHVwQnJvd3NlclN0b3JhZ2UodGhpcy5jYWNoZUNvbmZpZy5jYWNoZUxvY2F0aW9uKTtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeUNhY2hlU3RvcmFnZSA9IHRoaXMuc2V0dXBCcm93c2VyU3RvcmFnZSh0aGlzLmNhY2hlQ29uZmlnLnRlbXBvcmFyeUNhY2hlTG9jYXRpb24pO1xyXG4gICAgICAgIHRoaXMuY29va2llU3RvcmFnZSA9IG5ldyBDb29raWVTdG9yYWdlKCk7XHJcbiAgICAgICAgLy8gTWlncmF0ZSBjYWNoZSBlbnRyaWVzIGZyb20gb2xkZXIgdmVyc2lvbnMgb2YgTVNBTC5cclxuICAgICAgICBpZiAoY2FjaGVDb25maWcuY2FjaGVNaWdyYXRpb25FbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWlncmF0ZUNhY2hlRW50cmllcygpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUtleU1hcHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCA9IHBlcmZvcm1hbmNlQ2xpZW50O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgd2luZG93IHN0b3JhZ2UgY2xhc3MgaW1wbGVtZW50aW5nIHRoZSBJV2luZG93U3RvcmFnZSBpbnRlcmZhY2UgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY29uZmlndXJlZCBjYWNoZUxvY2F0aW9uLlxyXG4gICAgICogQHBhcmFtIGNhY2hlTG9jYXRpb25cclxuICAgICAqL1xyXG4gICAgc2V0dXBCcm93c2VyU3RvcmFnZShjYWNoZUxvY2F0aW9uKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc3dpdGNoIChjYWNoZUxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEJyb3dzZXJDYWNoZUxvY2F0aW9uLkxvY2FsU3RvcmFnZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExvY2FsU3RvcmFnZSgpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBCcm93c2VyQ2FjaGVMb2NhdGlvbi5TZXNzaW9uU3RvcmFnZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNlc3Npb25TdG9yYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEJyb3dzZXJDYWNoZUxvY2F0aW9uLk1lbW9yeVN0b3JhZ2U6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhY2hlQ29uZmlnLmNhY2hlTG9jYXRpb24gPSBCcm93c2VyQ2FjaGVMb2NhdGlvbi5NZW1vcnlTdG9yYWdlO1xyXG4gICAgICAgIHJldHVybiBuZXcgTWVtb3J5U3RvcmFnZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNaWdyYXRlIGFsbCBvbGQgY2FjaGUgZW50cmllcyB0byBuZXcgc2NoZW1hLiBObyByb2xsYmFjayBzdXBwb3J0ZWQuXHJcbiAgICAgKiBAcGFyYW0gc3RvcmVBdXRoU3RhdGVJbkNvb2tpZVxyXG4gICAgICovXHJcbiAgICBtaWdyYXRlQ2FjaGVFbnRyaWVzKCkge1xyXG4gICAgICAgIGNvbnN0IGlkVG9rZW5LZXkgPSBgJHtDb25zdGFudHMuQ0FDSEVfUFJFRklYfS4ke1BlcnNpc3RlbnRDYWNoZUtleXMuSURfVE9LRU59YDtcclxuICAgICAgICBjb25zdCBjbGllbnRJbmZvS2V5ID0gYCR7Q29uc3RhbnRzLkNBQ0hFX1BSRUZJWH0uJHtQZXJzaXN0ZW50Q2FjaGVLZXlzLkNMSUVOVF9JTkZPfWA7XHJcbiAgICAgICAgY29uc3QgZXJyb3JLZXkgPSBgJHtDb25zdGFudHMuQ0FDSEVfUFJFRklYfS4ke1BlcnNpc3RlbnRDYWNoZUtleXMuRVJST1J9YDtcclxuICAgICAgICBjb25zdCBlcnJvckRlc2NLZXkgPSBgJHtDb25zdGFudHMuQ0FDSEVfUFJFRklYfS4ke1BlcnNpc3RlbnRDYWNoZUtleXMuRVJST1JfREVTQ31gO1xyXG4gICAgICAgIGNvbnN0IGlkVG9rZW5WYWx1ZSA9IHRoaXMuYnJvd3NlclN0b3JhZ2UuZ2V0SXRlbShpZFRva2VuS2V5KTtcclxuICAgICAgICBjb25zdCBjbGllbnRJbmZvVmFsdWUgPSB0aGlzLmJyb3dzZXJTdG9yYWdlLmdldEl0ZW0oY2xpZW50SW5mb0tleSk7XHJcbiAgICAgICAgY29uc3QgZXJyb3JWYWx1ZSA9IHRoaXMuYnJvd3NlclN0b3JhZ2UuZ2V0SXRlbShlcnJvcktleSk7XHJcbiAgICAgICAgY29uc3QgZXJyb3JEZXNjVmFsdWUgPSB0aGlzLmJyb3dzZXJTdG9yYWdlLmdldEl0ZW0oZXJyb3JEZXNjS2V5KTtcclxuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXHJcbiAgICAgICAgICAgIGlkVG9rZW5WYWx1ZSxcclxuICAgICAgICAgICAgY2xpZW50SW5mb1ZhbHVlLFxyXG4gICAgICAgICAgICBlcnJvclZhbHVlLFxyXG4gICAgICAgICAgICBlcnJvckRlc2NWYWx1ZSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGtleXNUb01pZ3JhdGUgPSBbXHJcbiAgICAgICAgICAgIFBlcnNpc3RlbnRDYWNoZUtleXMuSURfVE9LRU4sXHJcbiAgICAgICAgICAgIFBlcnNpc3RlbnRDYWNoZUtleXMuQ0xJRU5UX0lORk8sXHJcbiAgICAgICAgICAgIFBlcnNpc3RlbnRDYWNoZUtleXMuRVJST1IsXHJcbiAgICAgICAgICAgIFBlcnNpc3RlbnRDYWNoZUtleXMuRVJST1JfREVTQyxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGtleXNUb01pZ3JhdGUuZm9yRWFjaCgoY2FjaGVLZXksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBvcmFyeUNhY2hlKGNhY2hlS2V5LCB2YWx1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VhcmNoZXMgYWxsIGNhY2hlIGVudHJpZXMgZm9yIE1TQUwgYWNjb3VudHMgYW5kIGNyZWF0ZXMgdGhlIGFjY291bnQga2V5IG1hcFxyXG4gICAgICogVGhpcyBpcyB1c2VkIHRvIG1pZ3JhdGUgdXNlcnMgZnJvbSBvbGRlciB2ZXJzaW9ucyBvZiBNU0FMIHdoaWNoIGRpZCBub3QgY3JlYXRlIHRoZSBtYXAuXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBjcmVhdGVLZXlNYXBzKCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlciAtIGNyZWF0ZUtleU1hcHMgY2FsbGVkLlwiKTtcclxuICAgICAgICBjb25zdCBhY2NvdW50S2V5cyA9IHRoaXMuZ2V0SXRlbShTdGF0aWNDYWNoZUtleXMuQUNDT1VOVF9LRVlTKTtcclxuICAgICAgICBjb25zdCB0b2tlbktleXMgPSB0aGlzLmdldEl0ZW0oYCR7U3RhdGljQ2FjaGVLZXlzLlRPS0VOX0tFWVN9LiR7dGhpcy5jbGllbnRJZH1gKTtcclxuICAgICAgICBpZiAoYWNjb3VudEtleXMgJiYgdG9rZW5LZXlzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSBhY2NvdW50IGFuZCB0b2tlbiBrZXkgbWFwcyBhbHJlYWR5IGV4aXN0LCBza2lwcGluZyBtaWdyYXRpb24uXCIpO1xyXG4gICAgICAgICAgICAvLyBLZXkgbWFwcyBhbHJlYWR5IGV4aXN0LCBubyBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCBjYWNoZVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFsbEtleXMgPSB0aGlzLmJyb3dzZXJTdG9yYWdlLmdldEtleXMoKTtcclxuICAgICAgICBhbGxLZXlzLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0NyZWRlbnRpYWxLZXkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gR2V0IGl0ZW0sIHBhcnNlLCB2YWxpZGF0ZSBhbmQgd3JpdGUga2V5IHRvIG1hcFxyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNyZWRPYmogPSB0aGlzLnZhbGlkYXRlQW5kUGFyc2VKc29uKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3JlZE9iaiAmJiBjcmVkT2JqLmhhc093blByb3BlcnR5KFwiY3JlZGVudGlhbFR5cGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjcmVkT2JqW1wiY3JlZGVudGlhbFR5cGVcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ3JlZGVudGlhbFR5cGUuSURfVE9LRU46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENhY2hlSGVscGVycy5pc0lkVG9rZW5FbnRpdHkoY3JlZE9iaikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSBpZFRva2VuIGZvdW5kLCBzYXZpbmcga2V5IHRvIHRva2VuIGtleSBtYXBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlUGlpKGBCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSBpZFRva2VuIHdpdGgga2V5OiAke2tleX0gZm91bmQsIHNhdmluZyBrZXkgdG8gdG9rZW4ga2V5IG1hcGApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpZFRva2VuRW50aXR5ID0gY3JlZE9iajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3S2V5ID0gdGhpcy51cGRhdGVDcmVkZW50aWFsQ2FjaGVLZXkoa2V5LCBpZFRva2VuRW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUb2tlbktleShuZXdLZXksIENyZWRlbnRpYWxUeXBlLklEX1RPS0VOKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSBrZXkgZm91bmQgbWF0Y2hpbmcgaWRUb2tlbiBzY2hlbWEgd2l0aCB2YWx1ZSBjb250YWluaW5nIGlkVG9rZW4gY3JlZGVudGlhbFR5cGUgZmllbGQgYnV0IHZhbHVlIGZhaWxlZCBJZFRva2VuRW50aXR5IHZhbGlkYXRpb24sIHNraXBwaW5nLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2VQaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6Y3JlYXRlS2V5TWFwcyAtIGZhaWxlZCBpZFRva2VuIHZhbGlkYXRpb24gb24ga2V5OiAke2tleX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENyZWRlbnRpYWxUeXBlLkFDQ0VTU19UT0tFTjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOX1dJVEhfQVVUSF9TQ0hFTUU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENhY2hlSGVscGVycy5pc0FjY2Vzc1Rva2VuRW50aXR5KGNyZWRPYmopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlcjpjcmVhdGVLZXlNYXBzIC0gYWNjZXNzVG9rZW4gZm91bmQsIHNhdmluZyBrZXkgdG8gdG9rZW4ga2V5IG1hcFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2VQaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6Y3JlYXRlS2V5TWFwcyAtIGFjY2Vzc1Rva2VuIHdpdGgga2V5OiAke2tleX0gZm91bmQsIHNhdmluZyBrZXkgdG8gdG9rZW4ga2V5IG1hcGApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbkVudGl0eSA9IGNyZWRPYmo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0tleSA9IHRoaXMudXBkYXRlQ3JlZGVudGlhbENhY2hlS2V5KGtleSwgYWNjZXNzVG9rZW5FbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRva2VuS2V5KG5ld0tleSwgQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSBrZXkgZm91bmQgbWF0Y2hpbmcgYWNjZXNzVG9rZW4gc2NoZW1hIHdpdGggdmFsdWUgY29udGFpbmluZyBhY2Nlc3NUb2tlbiBjcmVkZW50aWFsVHlwZSBmaWVsZCBidXQgdmFsdWUgZmFpbGVkIEFjY2Vzc1Rva2VuRW50aXR5IHZhbGlkYXRpb24sIHNraXBwaW5nLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2VQaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6Y3JlYXRlS2V5TWFwcyAtIGZhaWxlZCBhY2Nlc3NUb2tlbiB2YWxpZGF0aW9uIG9uIGtleTogJHtrZXl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDcmVkZW50aWFsVHlwZS5SRUZSRVNIX1RPS0VOOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDYWNoZUhlbHBlcnMuaXNSZWZyZXNoVG9rZW5FbnRpdHkoY3JlZE9iaikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSByZWZyZXNoVG9rZW4gZm91bmQsIHNhdmluZyBrZXkgdG8gdG9rZW4ga2V5IG1hcFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2VQaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6Y3JlYXRlS2V5TWFwcyAtIHJlZnJlc2hUb2tlbiB3aXRoIGtleTogJHtrZXl9IGZvdW5kLCBzYXZpbmcga2V5IHRvIHRva2VuIGtleSBtYXBgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuRW50aXR5ID0gY3JlZE9iajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3S2V5ID0gdGhpcy51cGRhdGVDcmVkZW50aWFsQ2FjaGVLZXkoa2V5LCByZWZyZXNoVG9rZW5FbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRva2VuS2V5KG5ld0tleSwgQ3JlZGVudGlhbFR5cGUuUkVGUkVTSF9UT0tFTik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlcjpjcmVhdGVLZXlNYXBzIC0ga2V5IGZvdW5kIG1hdGNoaW5nIHJlZnJlc2hUb2tlbiBzY2hlbWEgd2l0aCB2YWx1ZSBjb250YWluaW5nIHJlZnJlc2hUb2tlbiBjcmVkZW50aWFsVHlwZSBmaWVsZCBidXQgdmFsdWUgZmFpbGVkIFJlZnJlc2hUb2tlbkVudGl0eSB2YWxpZGF0aW9uLCBza2lwcGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlUGlpKGBCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSBmYWlsZWQgcmVmcmVzaFRva2VuIHZhbGlkYXRpb24gb24ga2V5OiAke2tleX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBjcmVkZW50aWFsVHlwZSBpc24ndCBvbmUgb2Ygb3VyIHByZWRlZmluZWQgb25lcywgaXQgbWF5IG5vdCBiZSBhbiBNU0FMIGNhY2hlIHZhbHVlLiBJZ25vcmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNBY2NvdW50S2V5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50T2JqID0gdGhpcy52YWxpZGF0ZUFuZFBhcnNlSnNvbih2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjY291bnRPYmogJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgQWNjb3VudEVudGl0eS5pc0FjY291bnRFbnRpdHkoYWNjb3VudE9iaikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOmNyZWF0ZUtleU1hcHMgLSBhY2NvdW50IGZvdW5kLCBzYXZpbmcga2V5IHRvIGFjY291bnQga2V5IG1hcFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2VQaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6Y3JlYXRlS2V5TWFwcyAtIGFjY291bnQgd2l0aCBrZXk6ICR7a2V5fSBmb3VuZCwgc2F2aW5nIGtleSB0byBhY2NvdW50IGtleSBtYXBgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRBY2NvdW50S2V5VG9NYXAoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIHBhc3NlZCB2YWx1ZSBhcyBKU09OIG9iamVjdCwgSlNPTi5wYXJzZSgpIHdpbGwgdGhyb3cgYW4gZXJyb3IuXHJcbiAgICAgKiBAcGFyYW0gaW5wdXRcclxuICAgICAqL1xyXG4gICAgdmFsaWRhdGVBbmRQYXJzZUpzb24oanNvblZhbHVlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkSnNvbiA9IEpTT04ucGFyc2UoanNvblZhbHVlKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFRoZXJlIGFyZSBlZGdlIGNhc2VzIGluIHdoaWNoIEpTT04ucGFyc2Ugd2lsbCBzdWNjZXNzZnVsbHkgcGFyc2UgYSBub24tdmFsaWQgSlNPTiBvYmplY3RcclxuICAgICAgICAgICAgICogKGUuZy4gSlNPTi5wYXJzZSB3aWxsIHBhcnNlIGFuIGVzY2FwZWQgc3RyaW5nIGludG8gYW4gdW5lc2NhcGVkIHN0cmluZyksIHNvIGFkZGluZyBhIHR5cGUgY2hlY2tcclxuICAgICAgICAgICAgICogb2YgdGhlIHBhcnNlZCB2YWx1ZSBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gYmUgY2VydGFpbiB0aGF0IHRoZSBzdHJpbmcgcmVwcmVzZW50cyBhIHZhbGlkIEpTT04gb2JqZWN0LlxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZEpzb24gJiYgdHlwZW9mIHBhcnNlZEpzb24gPT09IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgID8gcGFyc2VkSnNvblxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBmZXRjaGVzIHRoZSBlbnRyeSBmcm9tIHRoZSBicm93c2VyIHN0b3JhZ2UgYmFzZWQgb2ZmIHRoZSBrZXlcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgZ2V0SXRlbShrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5icm93c2VyU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHNldHMgdGhlIGVudHJ5IGluIHRoZSBicm93c2VyIHN0b3JhZ2VcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRJdGVtKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGZldGNoIHRoZSBhY2NvdW50IGVudGl0eSBmcm9tIHRoZSBwbGF0Zm9ybSBjYWNoZVxyXG4gICAgICogQHBhcmFtIGFjY291bnRLZXlcclxuICAgICAqL1xyXG4gICAgZ2V0QWNjb3VudChhY2NvdW50S2V5LCBsb2dnZXIpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0QWNjb3VudCBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgYWNjb3VudEVudGl0eSA9IHRoaXMuZ2V0Q2FjaGVkQWNjb3VudEVudGl0eShhY2NvdW50S2V5KTtcclxuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVPdXRkYXRlZENhY2hlZEFjY291bnQoYWNjb3VudEtleSwgYWNjb3VudEVudGl0eSwgbG9nZ2VyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYWNjb3VudCBmcm9tIGNhY2hlLCBkZXNlcmlhbGl6ZXMgaXQgaW50byBhbiBhY2NvdW50IGVudGl0eSBhbmQgcmV0dXJucyBpdC5cclxuICAgICAqIElmIGFjY291bnQgaXMgbm90IGZvdW5kIGZyb20gdGhlIGtleSwgcmV0dXJucyBudWxsIGFuZCByZW1vdmVzIGtleSBmcm9tIG1hcC5cclxuICAgICAqIEBwYXJhbSBhY2NvdW50S2V5XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZXRDYWNoZWRBY2NvdW50RW50aXR5KGFjY291bnRLZXkpIHtcclxuICAgICAgICBjb25zdCBzZXJpYWxpemVkQWNjb3VudCA9IHRoaXMuZ2V0SXRlbShhY2NvdW50S2V5KTtcclxuICAgICAgICBpZiAoIXNlcmlhbGl6ZWRBY2NvdW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWNjb3VudEtleUZyb21NYXAoYWNjb3VudEtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJzZWRBY2NvdW50ID0gdGhpcy52YWxpZGF0ZUFuZFBhcnNlSnNvbihzZXJpYWxpemVkQWNjb3VudCk7XHJcbiAgICAgICAgaWYgKCFwYXJzZWRBY2NvdW50IHx8ICFBY2NvdW50RW50aXR5LmlzQWNjb3VudEVudGl0eShwYXJzZWRBY2NvdW50KSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFjY291bnRLZXlGcm9tTWFwKGFjY291bnRLZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIENhY2hlTWFuYWdlci50b09iamVjdChuZXcgQWNjb3VudEVudGl0eSgpLCBwYXJzZWRBY2NvdW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogc2V0IGFjY291bnQgZW50aXR5IGluIHRoZSBwbGF0Zm9ybSBjYWNoZVxyXG4gICAgICogQHBhcmFtIGFjY291bnRcclxuICAgICAqL1xyXG4gICAgc2V0QWNjb3VudChhY2NvdW50KSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLnNldEFjY291bnQgY2FsbGVkXCIpO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGFjY291bnQuZ2VuZXJhdGVBY2NvdW50S2V5KCk7XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoYWNjb3VudCkpO1xyXG4gICAgICAgIHRoaXMuYWRkQWNjb3VudEtleVRvTWFwKGtleSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGFycmF5IG9mIGFjY291bnQga2V5cyBjdXJyZW50bHkgY2FjaGVkXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZXRBY2NvdW50S2V5cygpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0QWNjb3VudEtleXMgY2FsbGVkXCIpO1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRLZXlzID0gdGhpcy5nZXRJdGVtKFN0YXRpY0NhY2hlS2V5cy5BQ0NPVU5UX0tFWVMpO1xyXG4gICAgICAgIGlmIChhY2NvdW50S2V5cykge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShhY2NvdW50S2V5cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldEFjY291bnRLZXlzIC0gTm8gYWNjb3VudCBrZXlzIGZvdW5kXCIpO1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IGFjY291bnQgdG8gdGhlIGtleSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgYWRkQWNjb3VudEtleVRvTWFwKGtleSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5hZGRBY2NvdW50S2V5VG9NYXAgY2FsbGVkXCIpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlUGlpKGBCcm93c2VyQ2FjaGVNYW5hZ2VyLmFkZEFjY291bnRLZXlUb01hcCBjYWxsZWQgd2l0aCBrZXk6ICR7a2V5fWApO1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRLZXlzID0gdGhpcy5nZXRBY2NvdW50S2V5cygpO1xyXG4gICAgICAgIGlmIChhY2NvdW50S2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIC8vIE9ubHkgYWRkIGtleSBpZiBpdCBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0IGluIHRoZSBtYXBcclxuICAgICAgICAgICAgYWNjb3VudEtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB0aGlzLnNldEl0ZW0oU3RhdGljQ2FjaGVLZXlzLkFDQ09VTlRfS0VZUywgSlNPTi5zdHJpbmdpZnkoYWNjb3VudEtleXMpKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuYWRkQWNjb3VudEtleVRvTWFwIGFjY291bnQga2V5IGFkZGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuYWRkQWNjb3VudEtleVRvTWFwIGFjY291bnQga2V5IGFscmVhZHkgZXhpc3RzIGluIG1hcFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhbiBhY2NvdW50IGZyb20gdGhlIGtleSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQWNjb3VudEtleUZyb21NYXAoa2V5KSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLnJlbW92ZUFjY291bnRLZXlGcm9tTWFwIGNhbGxlZFwiKTtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZVBpaShgQnJvd3NlckNhY2hlTWFuYWdlci5yZW1vdmVBY2NvdW50S2V5RnJvbU1hcCBjYWxsZWQgd2l0aCBrZXk6ICR7a2V5fWApO1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRLZXlzID0gdGhpcy5nZXRBY2NvdW50S2V5cygpO1xyXG4gICAgICAgIGNvbnN0IHJlbW92YWxJbmRleCA9IGFjY291bnRLZXlzLmluZGV4T2Yoa2V5KTtcclxuICAgICAgICBpZiAocmVtb3ZhbEluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgYWNjb3VudEtleXMuc3BsaWNlKHJlbW92YWxJbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0SXRlbShTdGF0aWNDYWNoZUtleXMuQUNDT1VOVF9LRVlTLCBKU09OLnN0cmluZ2lmeShhY2NvdW50S2V5cykpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIucmVtb3ZlQWNjb3VudEtleUZyb21NYXAgYWNjb3VudCBrZXkgcmVtb3ZlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5yZW1vdmVBY2NvdW50S2V5RnJvbU1hcCBrZXkgbm90IGZvdW5kIGluIGV4aXN0aW5nIG1hcFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEV4dGVuZHMgaW5oZXJpdGVkIHJlbW92ZUFjY291bnQgZnVuY3Rpb24gdG8gaW5jbHVkZSByZW1vdmFsIG9mIHRoZSBhY2NvdW50IGtleSBmcm9tIHRoZSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgYXN5bmMgcmVtb3ZlQWNjb3VudChrZXkpIHtcclxuICAgICAgICB2b2lkIHN1cGVyLnJlbW92ZUFjY291bnQoa2V5KTtcclxuICAgICAgICB0aGlzLnJlbW92ZUFjY291bnRLZXlGcm9tTWFwKGtleSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhY2NvdW50IGVudGl0eSBmcm9tIHRoZSBwbGF0Zm9ybSBjYWNoZSBpZiBpdCdzIG91dGRhdGVkXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudEtleVxyXG4gICAgICovXHJcbiAgICByZW1vdmVPdXRkYXRlZEFjY291bnQoYWNjb3VudEtleSkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbShhY2NvdW50S2V5KTtcclxuICAgICAgICB0aGlzLnJlbW92ZUFjY291bnRLZXlGcm9tTWFwKGFjY291bnRLZXkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGdpdmVuIGlkVG9rZW4gZnJvbSB0aGUgY2FjaGUgYW5kIGZyb20gdGhlIGtleSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlSWRUb2tlbihrZXkpIHtcclxuICAgICAgICBzdXBlci5yZW1vdmVJZFRva2VuKGtleSk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVUb2tlbktleShrZXksIENyZWRlbnRpYWxUeXBlLklEX1RPS0VOKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBnaXZlbiBhY2Nlc3NUb2tlbiBmcm9tIHRoZSBjYWNoZSBhbmQgZnJvbSB0aGUga2V5IG1hcFxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICovXHJcbiAgICBhc3luYyByZW1vdmVBY2Nlc3NUb2tlbihrZXkpIHtcclxuICAgICAgICB2b2lkIHN1cGVyLnJlbW92ZUFjY2Vzc1Rva2VuKGtleSk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVUb2tlbktleShrZXksIENyZWRlbnRpYWxUeXBlLkFDQ0VTU19UT0tFTik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgZ2l2ZW4gcmVmcmVzaFRva2VuIGZyb20gdGhlIGNhY2hlIGFuZCBmcm9tIHRoZSBrZXkgbWFwXHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVJlZnJlc2hUb2tlbihrZXkpIHtcclxuICAgICAgICBzdXBlci5yZW1vdmVSZWZyZXNoVG9rZW4oa2V5KTtcclxuICAgICAgICB0aGlzLnJlbW92ZVRva2VuS2V5KGtleSwgQ3JlZGVudGlhbFR5cGUuUkVGUkVTSF9UT0tFTik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGtleXMgZm9yIHRoZSBjYWNoZWQgdG9rZW5zIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNsaWVudElkXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZXRUb2tlbktleXMoKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldFRva2VuS2V5cyBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbShgJHtTdGF0aWNDYWNoZUtleXMuVE9LRU5fS0VZU30uJHt0aGlzLmNsaWVudElkfWApO1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRva2VuS2V5cyA9IHRoaXMudmFsaWRhdGVBbmRQYXJzZUpzb24oaXRlbSk7XHJcbiAgICAgICAgICAgIGlmICh0b2tlbktleXMgJiZcclxuICAgICAgICAgICAgICAgIHRva2VuS2V5cy5oYXNPd25Qcm9wZXJ0eShcImlkVG9rZW5cIikgJiZcclxuICAgICAgICAgICAgICAgIHRva2VuS2V5cy5oYXNPd25Qcm9wZXJ0eShcImFjY2Vzc1Rva2VuXCIpICYmXHJcbiAgICAgICAgICAgICAgICB0b2tlbktleXMuaGFzT3duUHJvcGVydHkoXCJyZWZyZXNoVG9rZW5cIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbktleXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0VG9rZW5LZXlzIC0gVG9rZW4ga2V5cyBmb3VuZCBidXQgaW4gYW4gdW5rbm93biBmb3JtYXQuIFJldHVybmluZyBlbXB0eSBrZXkgbWFwLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0VG9rZW5LZXlzIC0gTm8gdG9rZW4ga2V5cyBmb3VuZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWRUb2tlbjogW10sXHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBbXSxcclxuICAgICAgICAgICAgcmVmcmVzaFRva2VuOiBbXSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBnaXZlbiBrZXkgdG8gdGhlIHRva2VuIGtleSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqIEBwYXJhbSB0eXBlXHJcbiAgICAgKi9cclxuICAgIGFkZFRva2VuS2V5KGtleSwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlciBhZGRUb2tlbktleSBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgdG9rZW5LZXlzID0gdGhpcy5nZXRUb2tlbktleXMoKTtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDcmVkZW50aWFsVHlwZS5JRF9UT0tFTjpcclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbktleXMuaWRUb2tlbi5pbmRleE9mKGtleSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcIkJyb3dzZXJDYWNoZU1hbmFnZXI6IGFkZFRva2VuS2V5IC0gaWRUb2tlbiBhZGRlZCB0byBtYXBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5LZXlzLmlkVG9rZW4ucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuS2V5cy5hY2Nlc3NUb2tlbi5pbmRleE9mKGtleSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcIkJyb3dzZXJDYWNoZU1hbmFnZXI6IGFkZFRva2VuS2V5IC0gYWNjZXNzVG9rZW4gYWRkZWQgdG8gbWFwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRva2VuS2V5cy5hY2Nlc3NUb2tlbi5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDcmVkZW50aWFsVHlwZS5SRUZSRVNIX1RPS0VOOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuS2V5cy5yZWZyZXNoVG9rZW4uaW5kZXhPZihrZXkpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOiBhZGRUb2tlbktleSAtIHJlZnJlc2hUb2tlbiBhZGRlZCB0byBtYXBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5LZXlzLnJlZnJlc2hUb2tlbi5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBCcm93c2VyQ2FjaGVNYW5hZ2VyOmFkZFRva2VuS2V5IC0gQ3JlZGVudGlhbFR5cGUgcHJvdmlkZWQgaW52YWxpZC4gQ3JlZGVudGlhbFR5cGU6ICR7dHlwZX1gKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JDb2Rlcy51bmV4cGVjdGVkQ3JlZGVudGlhbFR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldEl0ZW0oYCR7U3RhdGljQ2FjaGVLZXlzLlRPS0VOX0tFWVN9LiR7dGhpcy5jbGllbnRJZH1gLCBKU09OLnN0cmluZ2lmeSh0b2tlbktleXMpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4ga2V5IGZyb20gdGhlIHRva2VuIGtleSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqIEBwYXJhbSB0eXBlXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVRva2VuS2V5KGtleSwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlciByZW1vdmVUb2tlbktleSBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgdG9rZW5LZXlzID0gdGhpcy5nZXRUb2tlbktleXMoKTtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDcmVkZW50aWFsVHlwZS5JRF9UT0tFTjpcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm9QaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6IHJlbW92ZVRva2VuS2V5IC0gYXR0ZW1wdGluZyB0byByZW1vdmUgaWRUb2tlbiB3aXRoIGtleTogJHtrZXl9IGZyb20gbWFwYCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZFJlbW92YWwgPSB0b2tlbktleXMuaWRUb2tlbi5pbmRleE9mKGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWRSZW1vdmFsID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFwiQnJvd3NlckNhY2hlTWFuYWdlcjogcmVtb3ZlVG9rZW5LZXkgLSBpZFRva2VuIHJlbW92ZWQgZnJvbSBtYXBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5LZXlzLmlkVG9rZW4uc3BsaWNlKGlkUmVtb3ZhbCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFwiQnJvd3NlckNhY2hlTWFuYWdlcjogcmVtb3ZlVG9rZW5LZXkgLSBpZFRva2VuIGRvZXMgbm90IGV4aXN0IGluIG1hcC4gRWl0aGVyIGl0IHdhcyBwcmV2aW91c2x5IHJlbW92ZWQgb3IgaXQgd2FzIG5ldmVyIGFkZGVkLlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENyZWRlbnRpYWxUeXBlLkFDQ0VTU19UT0tFTjpcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm9QaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6IHJlbW92ZVRva2VuS2V5IC0gYXR0ZW1wdGluZyB0byByZW1vdmUgYWNjZXNzVG9rZW4gd2l0aCBrZXk6ICR7a2V5fSBmcm9tIG1hcGApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjZXNzUmVtb3ZhbCA9IHRva2VuS2V5cy5hY2Nlc3NUb2tlbi5pbmRleE9mKGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWNjZXNzUmVtb3ZhbCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcIkJyb3dzZXJDYWNoZU1hbmFnZXI6IHJlbW92ZVRva2VuS2V5IC0gYWNjZXNzVG9rZW4gcmVtb3ZlZCBmcm9tIG1hcFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0b2tlbktleXMuYWNjZXNzVG9rZW4uc3BsaWNlKGFjY2Vzc1JlbW92YWwsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcIkJyb3dzZXJDYWNoZU1hbmFnZXI6IHJlbW92ZVRva2VuS2V5IC0gYWNjZXNzVG9rZW4gZG9lcyBub3QgZXhpc3QgaW4gbWFwLiBFaXRoZXIgaXQgd2FzIHByZXZpb3VzbHkgcmVtb3ZlZCBvciBpdCB3YXMgbmV2ZXIgYWRkZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ3JlZGVudGlhbFR5cGUuUkVGUkVTSF9UT0tFTjpcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm9QaWkoYEJyb3dzZXJDYWNoZU1hbmFnZXI6IHJlbW92ZVRva2VuS2V5IC0gYXR0ZW1wdGluZyB0byByZW1vdmUgcmVmcmVzaFRva2VuIHdpdGgga2V5OiAke2tleX0gZnJvbSBtYXBgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZnJlc2hSZW1vdmFsID0gdG9rZW5LZXlzLnJlZnJlc2hUb2tlbi5pbmRleE9mKGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVmcmVzaFJlbW92YWwgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOiByZW1vdmVUb2tlbktleSAtIHJlZnJlc2hUb2tlbiByZW1vdmVkIGZyb20gbWFwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRva2VuS2V5cy5yZWZyZXNoVG9rZW4uc3BsaWNlKHJlZnJlc2hSZW1vdmFsLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJCcm93c2VyQ2FjaGVNYW5hZ2VyOiByZW1vdmVUb2tlbktleSAtIHJlZnJlc2hUb2tlbiBkb2VzIG5vdCBleGlzdCBpbiBtYXAuIEVpdGhlciBpdCB3YXMgcHJldmlvdXNseSByZW1vdmVkIG9yIGl0IHdhcyBuZXZlciBhZGRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBCcm93c2VyQ2FjaGVNYW5hZ2VyOnJlbW92ZVRva2VuS2V5IC0gQ3JlZGVudGlhbFR5cGUgcHJvdmlkZWQgaW52YWxpZC4gQ3JlZGVudGlhbFR5cGU6ICR7dHlwZX1gKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JDb2Rlcy51bmV4cGVjdGVkQ3JlZGVudGlhbFR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldEl0ZW0oYCR7U3RhdGljQ2FjaGVLZXlzLlRPS0VOX0tFWVN9LiR7dGhpcy5jbGllbnRJZH1gLCBKU09OLnN0cmluZ2lmeSh0b2tlbktleXMpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGVzIGlkVG9rZW4gZW50aXR5IGZyb20gYSBzdHJpbmdcclxuICAgICAqIEBwYXJhbSBpZFRva2VuS2V5XHJcbiAgICAgKi9cclxuICAgIGdldElkVG9rZW5DcmVkZW50aWFsKGlkVG9rZW5LZXkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0SXRlbShpZFRva2VuS2V5KTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRJZFRva2VuQ3JlZGVudGlhbDogY2FsbGVkLCBubyBjYWNoZSBoaXRcIik7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVG9rZW5LZXkoaWRUb2tlbktleSwgQ3JlZGVudGlhbFR5cGUuSURfVE9LRU4pO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyc2VkSWRUb2tlbiA9IHRoaXMudmFsaWRhdGVBbmRQYXJzZUpzb24odmFsdWUpO1xyXG4gICAgICAgIGlmICghcGFyc2VkSWRUb2tlbiB8fCAhQ2FjaGVIZWxwZXJzLmlzSWRUb2tlbkVudGl0eShwYXJzZWRJZFRva2VuKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0SWRUb2tlbkNyZWRlbnRpYWw6IGNhbGxlZCwgbm8gY2FjaGUgaGl0XCIpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRva2VuS2V5KGlkVG9rZW5LZXksIENyZWRlbnRpYWxUeXBlLklEX1RPS0VOKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRJZFRva2VuQ3JlZGVudGlhbDogY2FjaGUgaGl0XCIpO1xyXG4gICAgICAgIHJldHVybiBwYXJzZWRJZFRva2VuO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgSWRUb2tlbiBjcmVkZW50aWFsIHRvIHRoZSBwbGF0Zm9ybSBjYWNoZVxyXG4gICAgICogQHBhcmFtIGlkVG9rZW5cclxuICAgICAqL1xyXG4gICAgc2V0SWRUb2tlbkNyZWRlbnRpYWwoaWRUb2tlbikge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5zZXRJZFRva2VuQ3JlZGVudGlhbCBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgaWRUb2tlbktleSA9IENhY2hlSGVscGVycy5nZW5lcmF0ZUNyZWRlbnRpYWxLZXkoaWRUb2tlbik7XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKGlkVG9rZW5LZXksIEpTT04uc3RyaW5naWZ5KGlkVG9rZW4pKTtcclxuICAgICAgICB0aGlzLmFkZFRva2VuS2V5KGlkVG9rZW5LZXksIENyZWRlbnRpYWxUeXBlLklEX1RPS0VOKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGVzIGFjY2Vzc1Rva2VuIGVudGl0eSBmcm9tIGEgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIGdldEFjY2Vzc1Rva2VuQ3JlZGVudGlhbChhY2Nlc3NUb2tlbktleSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRJdGVtKGFjY2Vzc1Rva2VuS2V5KTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRBY2Nlc3NUb2tlbkNyZWRlbnRpYWw6IGNhbGxlZCwgbm8gY2FjaGUgaGl0XCIpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRva2VuS2V5KGFjY2Vzc1Rva2VuS2V5LCBDcmVkZW50aWFsVHlwZS5BQ0NFU1NfVE9LRU4pO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyc2VkQWNjZXNzVG9rZW4gPSB0aGlzLnZhbGlkYXRlQW5kUGFyc2VKc29uKHZhbHVlKTtcclxuICAgICAgICBpZiAoIXBhcnNlZEFjY2Vzc1Rva2VuIHx8XHJcbiAgICAgICAgICAgICFDYWNoZUhlbHBlcnMuaXNBY2Nlc3NUb2tlbkVudGl0eShwYXJzZWRBY2Nlc3NUb2tlbikpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldEFjY2Vzc1Rva2VuQ3JlZGVudGlhbDogY2FsbGVkLCBubyBjYWNoZSBoaXRcIik7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVG9rZW5LZXkoYWNjZXNzVG9rZW5LZXksIENyZWRlbnRpYWxUeXBlLkFDQ0VTU19UT0tFTik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0QWNjZXNzVG9rZW5DcmVkZW50aWFsOiBjYWNoZSBoaXRcIik7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlZEFjY2Vzc1Rva2VuO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgYWNjZXNzVG9rZW4gY3JlZGVudGlhbCB0byB0aGUgcGxhdGZvcm0gY2FjaGVcclxuICAgICAqIEBwYXJhbSBhY2Nlc3NUb2tlblxyXG4gICAgICovXHJcbiAgICBzZXRBY2Nlc3NUb2tlbkNyZWRlbnRpYWwoYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuc2V0QWNjZXNzVG9rZW5DcmVkZW50aWFsIGNhbGxlZFwiKTtcclxuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbktleSA9IENhY2hlSGVscGVycy5nZW5lcmF0ZUNyZWRlbnRpYWxLZXkoYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIHRoaXMuc2V0SXRlbShhY2Nlc3NUb2tlbktleSwgSlNPTi5zdHJpbmdpZnkoYWNjZXNzVG9rZW4pKTtcclxuICAgICAgICB0aGlzLmFkZFRva2VuS2V5KGFjY2Vzc1Rva2VuS2V5LCBDcmVkZW50aWFsVHlwZS5BQ0NFU1NfVE9LRU4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBnZW5lcmF0ZXMgcmVmcmVzaFRva2VuIGVudGl0eSBmcm9tIGEgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0gcmVmcmVzaFRva2VuS2V5XHJcbiAgICAgKi9cclxuICAgIGdldFJlZnJlc2hUb2tlbkNyZWRlbnRpYWwocmVmcmVzaFRva2VuS2V5KSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldEl0ZW0ocmVmcmVzaFRva2VuS2V5KTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRSZWZyZXNoVG9rZW5DcmVkZW50aWFsOiBjYWxsZWQsIG5vIGNhY2hlIGhpdFwiKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUb2tlbktleShyZWZyZXNoVG9rZW5LZXksIENyZWRlbnRpYWxUeXBlLlJFRlJFU0hfVE9LRU4pO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyc2VkUmVmcmVzaFRva2VuID0gdGhpcy52YWxpZGF0ZUFuZFBhcnNlSnNvbih2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCFwYXJzZWRSZWZyZXNoVG9rZW4gfHxcclxuICAgICAgICAgICAgIUNhY2hlSGVscGVycy5pc1JlZnJlc2hUb2tlbkVudGl0eShwYXJzZWRSZWZyZXNoVG9rZW4pKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRSZWZyZXNoVG9rZW5DcmVkZW50aWFsOiBjYWxsZWQsIG5vIGNhY2hlIGhpdFwiKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUb2tlbktleShyZWZyZXNoVG9rZW5LZXksIENyZWRlbnRpYWxUeXBlLlJFRlJFU0hfVE9LRU4pO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldFJlZnJlc2hUb2tlbkNyZWRlbnRpYWw6IGNhY2hlIGhpdFwiKTtcclxuICAgICAgICByZXR1cm4gcGFyc2VkUmVmcmVzaFRva2VuO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgcmVmcmVzaFRva2VuIGNyZWRlbnRpYWwgdG8gdGhlIHBsYXRmb3JtIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gcmVmcmVzaFRva2VuXHJcbiAgICAgKi9cclxuICAgIHNldFJlZnJlc2hUb2tlbkNyZWRlbnRpYWwocmVmcmVzaFRva2VuKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLnNldFJlZnJlc2hUb2tlbkNyZWRlbnRpYWwgY2FsbGVkXCIpO1xyXG4gICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbktleSA9IENhY2hlSGVscGVycy5nZW5lcmF0ZUNyZWRlbnRpYWxLZXkocmVmcmVzaFRva2VuKTtcclxuICAgICAgICB0aGlzLnNldEl0ZW0ocmVmcmVzaFRva2VuS2V5LCBKU09OLnN0cmluZ2lmeShyZWZyZXNoVG9rZW4pKTtcclxuICAgICAgICB0aGlzLmFkZFRva2VuS2V5KHJlZnJlc2hUb2tlbktleSwgQ3JlZGVudGlhbFR5cGUuUkVGUkVTSF9UT0tFTik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGZldGNoIGFwcE1ldGFkYXRhIGVudGl0eSBmcm9tIHRoZSBwbGF0Zm9ybSBjYWNoZVxyXG4gICAgICogQHBhcmFtIGFwcE1ldGFkYXRhS2V5XHJcbiAgICAgKi9cclxuICAgIGdldEFwcE1ldGFkYXRhKGFwcE1ldGFkYXRhS2V5KSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldEl0ZW0oYXBwTWV0YWRhdGFLZXkpO1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldEFwcE1ldGFkYXRhOiBjYWxsZWQsIG5vIGNhY2hlIGhpdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcnNlZE1ldGFkYXRhID0gdGhpcy52YWxpZGF0ZUFuZFBhcnNlSnNvbih2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCFwYXJzZWRNZXRhZGF0YSB8fFxyXG4gICAgICAgICAgICAhQ2FjaGVIZWxwZXJzLmlzQXBwTWV0YWRhdGFFbnRpdHkoYXBwTWV0YWRhdGFLZXksIHBhcnNlZE1ldGFkYXRhKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0QXBwTWV0YWRhdGE6IGNhbGxlZCwgbm8gY2FjaGUgaGl0XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldEFwcE1ldGFkYXRhOiBjYWNoZSBoaXRcIik7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlZE1ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgYXBwTWV0YWRhdGEgZW50aXR5IHRvIHRoZSBwbGF0Zm9ybSBjYWNoZVxyXG4gICAgICogQHBhcmFtIGFwcE1ldGFkYXRhXHJcbiAgICAgKi9cclxuICAgIHNldEFwcE1ldGFkYXRhKGFwcE1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLnNldEFwcE1ldGFkYXRhIGNhbGxlZFwiKTtcclxuICAgICAgICBjb25zdCBhcHBNZXRhZGF0YUtleSA9IENhY2hlSGVscGVycy5nZW5lcmF0ZUFwcE1ldGFkYXRhS2V5KGFwcE1ldGFkYXRhKTtcclxuICAgICAgICB0aGlzLnNldEl0ZW0oYXBwTWV0YWRhdGFLZXksIEpTT04uc3RyaW5naWZ5KGFwcE1ldGFkYXRhKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGZldGNoIHNlcnZlciB0ZWxlbWV0cnkgZW50aXR5IGZyb20gdGhlIHBsYXRmb3JtIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gc2VydmVyVGVsZW1ldHJ5S2V5XHJcbiAgICAgKi9cclxuICAgIGdldFNlcnZlclRlbGVtZXRyeShzZXJ2ZXJUZWxlbWV0cnlLZXkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0SXRlbShzZXJ2ZXJUZWxlbWV0cnlLZXkpO1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldFNlcnZlclRlbGVtZXRyeTogY2FsbGVkLCBubyBjYWNoZSBoaXRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJzZWRFbnRpdHkgPSB0aGlzLnZhbGlkYXRlQW5kUGFyc2VKc29uKHZhbHVlKTtcclxuICAgICAgICBpZiAoIXBhcnNlZEVudGl0eSB8fFxyXG4gICAgICAgICAgICAhQ2FjaGVIZWxwZXJzLmlzU2VydmVyVGVsZW1ldHJ5RW50aXR5KHNlcnZlclRlbGVtZXRyeUtleSwgcGFyc2VkRW50aXR5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0U2VydmVyVGVsZW1ldHJ5OiBjYWxsZWQsIG5vIGNhY2hlIGhpdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRTZXJ2ZXJUZWxlbWV0cnk6IGNhY2hlIGhpdFwiKTtcclxuICAgICAgICByZXR1cm4gcGFyc2VkRW50aXR5O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgc2VydmVyIHRlbGVtZXRyeSBlbnRpdHkgdG8gdGhlIHBsYXRmb3JtIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gc2VydmVyVGVsZW1ldHJ5S2V5XHJcbiAgICAgKiBAcGFyYW0gc2VydmVyVGVsZW1ldHJ5XHJcbiAgICAgKi9cclxuICAgIHNldFNlcnZlclRlbGVtZXRyeShzZXJ2ZXJUZWxlbWV0cnlLZXksIHNlcnZlclRlbGVtZXRyeSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5zZXRTZXJ2ZXJUZWxlbWV0cnkgY2FsbGVkXCIpO1xyXG4gICAgICAgIHRoaXMuc2V0SXRlbShzZXJ2ZXJUZWxlbWV0cnlLZXksIEpTT04uc3RyaW5naWZ5KHNlcnZlclRlbGVtZXRyeSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBnZXRBdXRob3JpdHlNZXRhZGF0YShrZXkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW50ZXJuYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRBdXRob3JpdHlNZXRhZGF0YTogY2FsbGVkLCBubyBjYWNoZSBoaXRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJzZWRNZXRhZGF0YSA9IHRoaXMudmFsaWRhdGVBbmRQYXJzZUpzb24odmFsdWUpO1xyXG4gICAgICAgIGlmIChwYXJzZWRNZXRhZGF0YSAmJlxyXG4gICAgICAgICAgICBDYWNoZUhlbHBlcnMuaXNBdXRob3JpdHlNZXRhZGF0YUVudGl0eShrZXksIHBhcnNlZE1ldGFkYXRhKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0QXV0aG9yaXR5TWV0YWRhdGE6IGNhY2hlIGhpdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZE1ldGFkYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgZ2V0QXV0aG9yaXR5TWV0YWRhdGFLZXlzKCkge1xyXG4gICAgICAgIGNvbnN0IGFsbEtleXMgPSB0aGlzLmludGVybmFsU3RvcmFnZS5nZXRLZXlzKCk7XHJcbiAgICAgICAgcmV0dXJuIGFsbEtleXMuZmlsdGVyKChrZXkpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNBdXRob3JpdHlNZXRhZGF0YShrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHdyYXBwZXIgbWV0YWRhdGEgaW4gbWVtb3J5XHJcbiAgICAgKiBAcGFyYW0gd3JhcHBlclNLVVxyXG4gICAgICogQHBhcmFtIHdyYXBwZXJWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIHNldFdyYXBwZXJNZXRhZGF0YSh3cmFwcGVyU0tVLCB3cmFwcGVyVmVyc2lvbikge1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxTdG9yYWdlLnNldEl0ZW0oSW5NZW1vcnlDYWNoZUtleXMuV1JBUFBFUl9TS1UsIHdyYXBwZXJTS1UpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxTdG9yYWdlLnNldEl0ZW0oSW5NZW1vcnlDYWNoZUtleXMuV1JBUFBFUl9WRVIsIHdyYXBwZXJWZXJzaW9uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3cmFwcGVyIG1ldGFkYXRhIGZyb20gaW4tbWVtb3J5IHN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgZ2V0V3JhcHBlck1ldGFkYXRhKCkge1xyXG4gICAgICAgIGNvbnN0IHNrdSA9IHRoaXMuaW50ZXJuYWxTdG9yYWdlLmdldEl0ZW0oSW5NZW1vcnlDYWNoZUtleXMuV1JBUFBFUl9TS1UpIHx8XHJcbiAgICAgICAgICAgIENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMuaW50ZXJuYWxTdG9yYWdlLmdldEl0ZW0oSW5NZW1vcnlDYWNoZUtleXMuV1JBUFBFUl9WRVIpIHx8XHJcbiAgICAgICAgICAgIENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgcmV0dXJuIFtza3UsIHZlcnNpb25dO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVudGl0eVxyXG4gICAgICovXHJcbiAgICBzZXRBdXRob3JpdHlNZXRhZGF0YShrZXksIGVudGl0eSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5zZXRBdXRob3JpdHlNZXRhZGF0YSBjYWxsZWRcIik7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KGVudGl0eSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBhY3RpdmUgYWNjb3VudFxyXG4gICAgICovXHJcbiAgICBnZXRBY3RpdmVBY2NvdW50KCkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUFjY291bnRLZXlGaWx0ZXJzID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KFBlcnNpc3RlbnRDYWNoZUtleXMuQUNUSVZFX0FDQ09VTlRfRklMVEVSUyk7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlQWNjb3VudFZhbHVlRmlsdGVycyA9IHRoaXMuZ2V0SXRlbShhY3RpdmVBY2NvdW50S2V5RmlsdGVycyk7XHJcbiAgICAgICAgaWYgKCFhY3RpdmVBY2NvdW50VmFsdWVGaWx0ZXJzKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIG5ldyBhY3RpdmUgYWNjb3VudCBjYWNoZSB0eXBlIGlzbid0IGZvdW5kLCBpdCdzIGFuIG9sZCB2ZXJzaW9uLCBzbyBsb29rIGZvciB0aGF0IGluc3RlYWRcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldEFjdGl2ZUFjY291bnQ6IE5vIGFjdGl2ZSBhY2NvdW50IGZpbHRlcnMgY2FjaGUgc2NoZW1hIGZvdW5kLCBsb29raW5nIGZvciBsZWdhY3kgc2NoZW1hXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVBY2NvdW50S2V5TG9jYWwgPSB0aGlzLmdlbmVyYXRlQ2FjaGVLZXkoUGVyc2lzdGVudENhY2hlS2V5cy5BQ1RJVkVfQUNDT1VOVCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUFjY291bnRWYWx1ZUxvY2FsID0gdGhpcy5nZXRJdGVtKGFjdGl2ZUFjY291bnRLZXlMb2NhbCk7XHJcbiAgICAgICAgICAgIGlmICghYWN0aXZlQWNjb3VudFZhbHVlTG9jYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRBY3RpdmVBY2NvdW50OiBObyBhY3RpdmUgYWNjb3VudCBmb3VuZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUFjY291bnQgPSB0aGlzLmdldEFjY291bnRJbmZvRmlsdGVyZWRCeSh7XHJcbiAgICAgICAgICAgICAgICBsb2NhbEFjY291bnRJZDogYWN0aXZlQWNjb3VudFZhbHVlTG9jYWwsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlQWNjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldEFjdGl2ZUFjY291bnQ6IExlZ2FjeSBhY3RpdmUgYWNjb3VudCBjYWNoZSBzY2hlbWEgZm91bmRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0QWN0aXZlQWNjb3VudDogQWRkaW5nIGFjdGl2ZSBhY2NvdW50IGZpbHRlcnMgY2FjaGUgc2NoZW1hXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVBY2NvdW50KGFjdGl2ZUFjY291bnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUFjY291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUFjY291bnRWYWx1ZU9iaiA9IHRoaXMudmFsaWRhdGVBbmRQYXJzZUpzb24oYWN0aXZlQWNjb3VudFZhbHVlRmlsdGVycyk7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUFjY291bnRWYWx1ZU9iaikge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0QWN0aXZlQWNjb3VudDogQWN0aXZlIGFjY291bnQgZmlsdGVycyBzY2hlbWEgZm91bmRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFjY291bnRJbmZvRmlsdGVyZWRCeSh7XHJcbiAgICAgICAgICAgICAgICBob21lQWNjb3VudElkOiBhY3RpdmVBY2NvdW50VmFsdWVPYmouaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgICAgIGxvY2FsQWNjb3VudElkOiBhY3RpdmVBY2NvdW50VmFsdWVPYmoubG9jYWxBY2NvdW50SWQsXHJcbiAgICAgICAgICAgICAgICB0ZW5hbnRJZDogYWN0aXZlQWNjb3VudFZhbHVlT2JqLnRlbmFudElkLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldEFjdGl2ZUFjY291bnQ6IE5vIGFjdGl2ZSBhY2NvdW50IGZvdW5kXCIpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBhY3RpdmUgYWNjb3VudCdzIGxvY2FsQWNjb3VudElkIGluIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudFxyXG4gICAgICovXHJcbiAgICBzZXRBY3RpdmVBY2NvdW50KGFjY291bnQpIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVBY2NvdW50S2V5ID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KFBlcnNpc3RlbnRDYWNoZUtleXMuQUNUSVZFX0FDQ09VTlRfRklMVEVSUyk7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlQWNjb3VudEtleUxvY2FsID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KFBlcnNpc3RlbnRDYWNoZUtleXMuQUNUSVZFX0FDQ09VTlQpO1xyXG4gICAgICAgIGlmIChhY2NvdW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJzZXRBY3RpdmVBY2NvdW50OiBBY3RpdmUgYWNjb3VudCBzZXRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUFjY291bnRWYWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgIGhvbWVBY2NvdW50SWQ6IGFjY291bnQuaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgICAgIGxvY2FsQWNjb3VudElkOiBhY2NvdW50LmxvY2FsQWNjb3VudElkLFxyXG4gICAgICAgICAgICAgICAgdGVuYW50SWQ6IGFjY291bnQudGVuYW50SWQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2Uuc2V0SXRlbShhY3RpdmVBY2NvdW50S2V5LCBKU09OLnN0cmluZ2lmeShhY3RpdmVBY2NvdW50VmFsdWUpKTtcclxuICAgICAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5zZXRJdGVtKGFjdGl2ZUFjY291bnRLZXlMb2NhbCwgYWNjb3VudC5sb2NhbEFjY291bnRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwic2V0QWN0aXZlQWNjb3VudDogTm8gYWNjb3VudCBwYXNzZWQsIGFjdGl2ZSBhY2NvdW50IG5vdCBzZXRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2UucmVtb3ZlSXRlbShhY3RpdmVBY2NvdW50S2V5KTtcclxuICAgICAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5yZW1vdmVJdGVtKGFjdGl2ZUFjY291bnRLZXlMb2NhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBmZXRjaCB0aHJvdHRsaW5nIGVudGl0eSBmcm9tIHRoZSBwbGF0Zm9ybSBjYWNoZVxyXG4gICAgICogQHBhcmFtIHRocm90dGxpbmdDYWNoZUtleVxyXG4gICAgICovXHJcbiAgICBnZXRUaHJvdHRsaW5nQ2FjaGUodGhyb3R0bGluZ0NhY2hlS2V5KSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldEl0ZW0odGhyb3R0bGluZ0NhY2hlS2V5KTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRUaHJvdHRsaW5nQ2FjaGU6IGNhbGxlZCwgbm8gY2FjaGUgaGl0XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVGhyb3R0bGluZ0NhY2hlID0gdGhpcy52YWxpZGF0ZUFuZFBhcnNlSnNvbih2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCFwYXJzZWRUaHJvdHRsaW5nQ2FjaGUgfHxcclxuICAgICAgICAgICAgIUNhY2hlSGVscGVycy5pc1Rocm90dGxpbmdFbnRpdHkodGhyb3R0bGluZ0NhY2hlS2V5LCBwYXJzZWRUaHJvdHRsaW5nQ2FjaGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRUaHJvdHRsaW5nQ2FjaGU6IGNhbGxlZCwgbm8gY2FjaGUgaGl0XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldFRocm90dGxpbmdDYWNoZTogY2FjaGUgaGl0XCIpO1xyXG4gICAgICAgIHJldHVybiBwYXJzZWRUaHJvdHRsaW5nQ2FjaGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHNldCB0aHJvdHRsaW5nIGVudGl0eSB0byB0aGUgcGxhdGZvcm0gY2FjaGVcclxuICAgICAqIEBwYXJhbSB0aHJvdHRsaW5nQ2FjaGVLZXlcclxuICAgICAqIEBwYXJhbSB0aHJvdHRsaW5nQ2FjaGVcclxuICAgICAqL1xyXG4gICAgc2V0VGhyb3R0bGluZ0NhY2hlKHRocm90dGxpbmdDYWNoZUtleSwgdGhyb3R0bGluZ0NhY2hlKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLnNldFRocm90dGxpbmdDYWNoZSBjYWxsZWRcIik7XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKHRocm90dGxpbmdDYWNoZUtleSwgSlNPTi5zdHJpbmdpZnkodGhyb3R0bGluZ0NhY2hlKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgY2FjaGUgaXRlbSB3aXRoIGdpdmVuIGtleS5cclxuICAgICAqIFdpbGwgcmV0cmlldmUgZnJvbSBjb29raWVzIGlmIHN0b3JlQXV0aFN0YXRlSW5Db29raWUgaXMgc2V0IHRvIHRydWUuXHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIGdldFRlbXBvcmFyeUNhY2hlKGNhY2hlS2V5LCBnZW5lcmF0ZUtleSkge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGdlbmVyYXRlS2V5ID8gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KGNhY2hlS2V5KSA6IGNhY2hlS2V5O1xyXG4gICAgICAgIGlmICh0aGlzLmNhY2hlQ29uZmlnLnN0b3JlQXV0aFN0YXRlSW5Db29raWUpIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbUNvb2tpZSA9IHRoaXMuY29va2llU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgICAgIGlmIChpdGVtQ29va2llKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0VGVtcG9yYXJ5Q2FjaGU6IHN0b3JlQXV0aFN0YXRlSW5Db29raWVzIHNldCB0byB0cnVlLCByZXRyaWV2aW5nIGZyb20gY29va2llc1wiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtQ29va2llO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy50ZW1wb3JhcnlDYWNoZVN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGVtcCBjYWNoZSBpdGVtIG5vdCBmb3VuZCBpbiBzZXNzaW9uL21lbW9yeSwgY2hlY2sgbG9jYWwgc3RvcmFnZSBmb3IgaXRlbXMgc2V0IGJ5IG9sZCB2ZXJzaW9uc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jYWNoZUNvbmZpZy5jYWNoZUxvY2F0aW9uID09PVxyXG4gICAgICAgICAgICAgICAgQnJvd3NlckNhY2hlTG9jYXRpb24uTG9jYWxTdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5icm93c2VyU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRUZW1wb3JhcnlDYWNoZTogVGVtcG9yYXJ5IGNhY2hlIGl0ZW0gZm91bmQgaW4gbG9jYWwgc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuZ2V0VGVtcG9yYXJ5Q2FjaGU6IE5vIGNhY2hlIGl0ZW0gZm91bmQgaW4gbG9jYWwgc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRUZW1wb3JhcnlDYWNoZTogVGVtcG9yYXJ5IGNhY2hlIGl0ZW0gcmV0dXJuZWRcIik7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjYWNoZSBpdGVtIHdpdGggdGhlIGtleSBhbmQgdmFsdWUgZ2l2ZW4uXHJcbiAgICAgKiBTdG9yZXMgaW4gY29va2llIGlmIHN0b3JlQXV0aFN0YXRlSW5Db29raWUgaXMgc2V0IHRvIHRydWUuXHJcbiAgICAgKiBUaGlzIGNhbiBjYXVzZSBjb29raWUgb3ZlcmZsb3cgaWYgdXNlZCBpbmNvcnJlY3RseS5cclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRUZW1wb3JhcnlDYWNoZShjYWNoZUtleSwgdmFsdWUsIGdlbmVyYXRlS2V5KSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gZ2VuZXJhdGVLZXkgPyB0aGlzLmdlbmVyYXRlQ2FjaGVLZXkoY2FjaGVLZXkpIDogY2FjaGVLZXk7XHJcbiAgICAgICAgdGhpcy50ZW1wb3JhcnlDYWNoZVN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcclxuICAgICAgICBpZiAodGhpcy5jYWNoZUNvbmZpZy5zdG9yZUF1dGhTdGF0ZUluQ29va2llKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5zZXRUZW1wb3JhcnlDYWNoZTogc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSBzZXQgdG8gdHJ1ZSwgc2V0dGluZyBpdGVtIGNvb2tpZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5jb29raWVTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSwgdW5kZWZpbmVkLCB0aGlzLmNhY2hlQ29uZmlnLnNlY3VyZUNvb2tpZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyB0aGUgY2FjaGUgaXRlbSB3aXRoIHRoZSBnaXZlbiBrZXkuXHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUl0ZW0oa2V5KSB7XHJcbiAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgdGhlIHRlbXBvcmFyeSBjYWNoZSBpdGVtIHdpdGggdGhlIGdpdmVuIGtleS5cclxuICAgICAqIFdpbGwgYWxzbyBjbGVhciB0aGUgY29va2llIGl0ZW0gaWYgc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSBpcyBzZXQgdG8gdHJ1ZS5cclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlVGVtcG9yYXJ5SXRlbShrZXkpIHtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeUNhY2hlU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVDb25maWcuc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIucmVtb3ZlSXRlbTogc3RvcmVBdXRoU3RhdGVJbkNvb2tpZSBpcyB0cnVlLCBjbGVhcmluZyBpdGVtIGNvb2tpZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5jb29raWVTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYWxsIGtleXMgaW4gd2luZG93LlxyXG4gICAgICovXHJcbiAgICBnZXRLZXlzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJyb3dzZXJTdG9yYWdlLmdldEtleXMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXJzIGFsbCBjYWNoZSBlbnRyaWVzIGNyZWF0ZWQgYnkgTVNBTC5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgY2xlYXIoKSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlcyBhbGwgYWNjb3VudHMgYW5kIHRoZWlyIGNyZWRlbnRpYWxzXHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZW1vdmVBbGxBY2NvdW50cygpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQXBwTWV0YWRhdGEoKTtcclxuICAgICAgICAvLyBSZW1vdmUgdGVtcCBzdG9yYWdlIGZpcnN0IHRvIG1ha2Ugc3VyZSBhbnkgY29va2llcyBhcmUgY2xlYXJlZFxyXG4gICAgICAgIHRoaXMudGVtcG9yYXJ5Q2FjaGVTdG9yYWdlLmdldEtleXMoKS5mb3JFYWNoKChjYWNoZUtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVLZXkuaW5kZXhPZihDb25zdGFudHMuQ0FDSEVfUFJFRklYKSAhPT0gLTEgfHxcclxuICAgICAgICAgICAgICAgIGNhY2hlS2V5LmluZGV4T2YodGhpcy5jbGllbnRJZCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVRlbXBvcmFyeUl0ZW0oY2FjaGVLZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gUmVtb3ZlcyBhbGwgcmVtYWluaW5nIE1TQUwgY2FjaGUgaXRlbXNcclxuICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlLmdldEtleXMoKS5mb3JFYWNoKChjYWNoZUtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVLZXkuaW5kZXhPZihDb25zdGFudHMuQ0FDSEVfUFJFRklYKSAhPT0gLTEgfHxcclxuICAgICAgICAgICAgICAgIGNhY2hlS2V5LmluZGV4T2YodGhpcy5jbGllbnRJZCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlLnJlbW92ZUl0ZW0oY2FjaGVLZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbFN0b3JhZ2UuY2xlYXIoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXJzIGFsbCBhY2Nlc3MgdG9rZXMgdGhhdCBoYXZlIGNsYWltcyBwcmlvciB0byBzYXZpbmcgdGhlIGN1cnJlbnQgb25lXHJcbiAgICAgKiBAcGFyYW0gcGVyZm9ybWFuY2VDbGllbnQge0lQZXJmb3JtYW5jZUNsaWVudH1cclxuICAgICAqIEBwYXJhbSBjb3JyZWxhdGlvbklkIHtzdHJpbmd9IGNvcnJlbGF0aW9uIGlkXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBhc3luYyBjbGVhclRva2Vuc0FuZEtleXNXaXRoQ2xhaW1zKHBlcmZvcm1hbmNlQ2xpZW50LCBjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgcGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5DbGVhclRva2Vuc0FuZEtleXNXaXRoQ2xhaW1zLCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICBjb25zdCB0b2tlbktleXMgPSB0aGlzLmdldFRva2VuS2V5cygpO1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZWRBY2Nlc3NUb2tlbnMgPSBbXTtcclxuICAgICAgICB0b2tlbktleXMuYWNjZXNzVG9rZW4uZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSBhY2Nlc3MgdG9rZW4gaGFzIGNsYWltcyBpbiBpdHMga2V5LCByZW1vdmUgdGhlIHRva2VuIGtleSBhbmQgdGhlIHRva2VuXHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWwgPSB0aGlzLmdldEFjY2Vzc1Rva2VuQ3JlZGVudGlhbChrZXkpO1xyXG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbD8ucmVxdWVzdGVkQ2xhaW1zSGFzaCAmJlxyXG4gICAgICAgICAgICAgICAga2V5LmluY2x1ZGVzKGNyZWRlbnRpYWwucmVxdWVzdGVkQ2xhaW1zSGFzaC50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZEFjY2Vzc1Rva2Vucy5wdXNoKHRoaXMucmVtb3ZlQWNjZXNzVG9rZW4oa2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChyZW1vdmVkQWNjZXNzVG9rZW5zKTtcclxuICAgICAgICAvLyB3YXJuIGlmIGFueSBhY2Nlc3MgdG9rZW5zIGFyZSByZW1vdmVkXHJcbiAgICAgICAgaWYgKHJlbW92ZWRBY2Nlc3NUb2tlbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuaW5nKGAke3JlbW92ZWRBY2Nlc3NUb2tlbnMubGVuZ3RofSBhY2Nlc3MgdG9rZW5zIHdpdGggY2xhaW1zIGluIHRoZSBjYWNoZSBrZXlzIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIGNhY2hlLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJlcGVuZCBtc2FsLjxjbGllbnQtaWQ+IHRvIGVhY2gga2V5OyBTa2lwIGZvciBhbnkgSlNPTiBvYmplY3QgYXMgS2V5IChkZWZpbmVkIHNjaGVtYXMgZG8gbm90IG5lZWQgdGhlIGtleSBhcHBlbmRlZDogQWNjZXNzVG9rZW4gS2V5cyBvciB0aGUgdXBjb21pbmcgc2NoZW1hKVxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICogQHBhcmFtIGFkZEluc3RhbmNlSWRcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVDYWNoZUtleShrZXkpIHtcclxuICAgICAgICBjb25zdCBnZW5lcmF0ZWRLZXkgPSB0aGlzLnZhbGlkYXRlQW5kUGFyc2VKc29uKGtleSk7XHJcbiAgICAgICAgaWYgKCFnZW5lcmF0ZWRLZXkpIHtcclxuICAgICAgICAgICAgaWYgKFN0cmluZ1V0aWxzLnN0YXJ0c1dpdGgoa2V5LCBDb25zdGFudHMuQ0FDSEVfUFJFRklYKSB8fFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nVXRpbHMuc3RhcnRzV2l0aChrZXksIFBlcnNpc3RlbnRDYWNoZUtleXMuQURBTF9JRF9UT0tFTikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGAke0NvbnN0YW50cy5DQUNIRV9QUkVGSVh9LiR7dGhpcy5jbGllbnRJZH0uJHtrZXl9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGtleSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhdXRob3JpdHlLZXkgdG8gY2FjaGUgYXV0aG9yaXR5XHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVBdXRob3JpdHlLZXkoc3RhdGVTdHJpbmcpIHtcclxuICAgICAgICBjb25zdCB7IGxpYnJhcnlTdGF0ZTogeyBpZDogc3RhdGVJZCB9LCB9ID0gUHJvdG9jb2xVdGlscy5wYXJzZVJlcXVlc3RTdGF0ZSh0aGlzLmNyeXB0b0ltcGwsIHN0YXRlU3RyaW5nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KGAke1RlbXBvcmFyeUNhY2hlS2V5cy5BVVRIT1JJVFl9LiR7c3RhdGVJZH1gKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIE5vbmNlIGtleSB0byBjYWNoZSBub25jZVxyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlTm9uY2VLZXkoc3RhdGVTdHJpbmcpIHtcclxuICAgICAgICBjb25zdCB7IGxpYnJhcnlTdGF0ZTogeyBpZDogc3RhdGVJZCB9LCB9ID0gUHJvdG9jb2xVdGlscy5wYXJzZVJlcXVlc3RTdGF0ZSh0aGlzLmNyeXB0b0ltcGwsIHN0YXRlU3RyaW5nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KGAke1RlbXBvcmFyeUNhY2hlS2V5cy5OT05DRV9JRFRPS0VOfS4ke3N0YXRlSWR9YCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgZnVsbCBjYWNoZSBrZXkgZm9yIHRoZSByZXF1ZXN0IHN0YXRlXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVTdHJpbmcgU3RhdGUgc3RyaW5nIGZvciB0aGUgcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZVN0YXRlS2V5KHN0YXRlU3RyaW5nKSB7XHJcbiAgICAgICAgLy8gVXNlIHRoZSBsaWJyYXJ5IHN0YXRlIGlkIHRvIGtleSB0ZW1wIHN0b3JhZ2UgZm9yIHVuaXF1ZW5lc3MgZm9yIG11bHRpcGxlIGNvbmN1cnJlbnQgcmVxdWVzdHNcclxuICAgICAgICBjb25zdCB7IGxpYnJhcnlTdGF0ZTogeyBpZDogc3RhdGVJZCB9LCB9ID0gUHJvdG9jb2xVdGlscy5wYXJzZVJlcXVlc3RTdGF0ZSh0aGlzLmNyeXB0b0ltcGwsIHN0YXRlU3RyaW5nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KGAke1RlbXBvcmFyeUNhY2hlS2V5cy5SRVFVRVNUX1NUQVRFfS4ke3N0YXRlSWR9YCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGNhY2hlZCBhdXRob3JpdHkgYmFzZWQgb24gdGhlIGNhY2hlZCBzdGF0ZS4gUmV0dXJucyBlbXB0eSBpZiBubyBjYWNoZWQgc3RhdGUgZm91bmQuXHJcbiAgICAgKi9cclxuICAgIGdldENhY2hlZEF1dGhvcml0eShjYWNoZWRTdGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlQ2FjaGVLZXkgPSB0aGlzLmdlbmVyYXRlU3RhdGVLZXkoY2FjaGVkU3RhdGUpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRUZW1wb3JhcnlDYWNoZShzdGF0ZUNhY2hlS2V5KTtcclxuICAgICAgICBpZiAoIXN0YXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhdXRob3JpdHlDYWNoZUtleSA9IHRoaXMuZ2VuZXJhdGVBdXRob3JpdHlLZXkoc3RhdGUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFRlbXBvcmFyeUNhY2hlKGF1dGhvcml0eUNhY2hlS2V5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBhY2NvdW50LCBhdXRob3JpdHksIGFuZCBzdGF0ZSBpbiBjYWNoZVxyXG4gICAgICogQHBhcmFtIHNlcnZlckF1dGhlbnRpY2F0aW9uUmVxdWVzdFxyXG4gICAgICogQHBhcmFtIGFjY291bnRcclxuICAgICAqL1xyXG4gICAgdXBkYXRlQ2FjaGVFbnRyaWVzKHN0YXRlLCBub25jZSwgYXV0aG9yaXR5SW5zdGFuY2UsIGxvZ2luSGludCwgYWNjb3VudCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci51cGRhdGVDYWNoZUVudHJpZXMgY2FsbGVkXCIpO1xyXG4gICAgICAgIC8vIENhY2hlIHRoZSByZXF1ZXN0IHN0YXRlXHJcbiAgICAgICAgY29uc3Qgc3RhdGVDYWNoZUtleSA9IHRoaXMuZ2VuZXJhdGVTdGF0ZUtleShzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5zZXRUZW1wb3JhcnlDYWNoZShzdGF0ZUNhY2hlS2V5LCBzdGF0ZSwgZmFsc2UpO1xyXG4gICAgICAgIC8vIENhY2hlIHRoZSBub25jZVxyXG4gICAgICAgIGNvbnN0IG5vbmNlQ2FjaGVLZXkgPSB0aGlzLmdlbmVyYXRlTm9uY2VLZXkoc3RhdGUpO1xyXG4gICAgICAgIHRoaXMuc2V0VGVtcG9yYXJ5Q2FjaGUobm9uY2VDYWNoZUtleSwgbm9uY2UsIGZhbHNlKTtcclxuICAgICAgICAvLyBDYWNoZSBhdXRob3JpdHlLZXlcclxuICAgICAgICBjb25zdCBhdXRob3JpdHlDYWNoZUtleSA9IHRoaXMuZ2VuZXJhdGVBdXRob3JpdHlLZXkoc3RhdGUpO1xyXG4gICAgICAgIHRoaXMuc2V0VGVtcG9yYXJ5Q2FjaGUoYXV0aG9yaXR5Q2FjaGVLZXksIGF1dGhvcml0eUluc3RhbmNlLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKGFjY291bnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY2NzQ3JlZGVudGlhbCA9IHtcclxuICAgICAgICAgICAgICAgIGNyZWRlbnRpYWw6IGFjY291bnQuaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IENjc0NyZWRlbnRpYWxUeXBlLkhPTUVfQUNDT1VOVF9JRCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5zZXRUZW1wb3JhcnlDYWNoZShUZW1wb3JhcnlDYWNoZUtleXMuQ0NTX0NSRURFTlRJQUwsIEpTT04uc3RyaW5naWZ5KGNjc0NyZWRlbnRpYWwpLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobG9naW5IaW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNjc0NyZWRlbnRpYWwgPSB7XHJcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsOiBsb2dpbkhpbnQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBDY3NDcmVkZW50aWFsVHlwZS5VUE4sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VGVtcG9yYXJ5Q2FjaGUoVGVtcG9yYXJ5Q2FjaGVLZXlzLkNDU19DUkVERU5USUFMLCBKU09OLnN0cmluZ2lmeShjY3NDcmVkZW50aWFsKSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldCBhbGwgdGVtcG9yYXJ5IGNhY2hlIGl0ZW1zXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgcmVzZXRSZXF1ZXN0Q2FjaGUoc3RhdGUpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIucmVzZXRSZXF1ZXN0Q2FjaGUgY2FsbGVkXCIpO1xyXG4gICAgICAgIC8vIGNoZWNrIHN0YXRlIGFuZCByZW1vdmUgYXNzb2NpYXRlZCBjYWNoZSBpdGVtc1xyXG4gICAgICAgIGlmIChzdGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBvcmFyeUNhY2hlU3RvcmFnZS5nZXRLZXlzKCkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmluZGV4T2Yoc3RhdGUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlVGVtcG9yYXJ5SXRlbShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gZGVsZXRlIGdlbmVyaWMgaW50ZXJhY3RpdmUgcmVxdWVzdCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVGVtcG9yYXJ5SXRlbSh0aGlzLmdlbmVyYXRlU3RhdGVLZXkoc3RhdGUpKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUZW1wb3JhcnlJdGVtKHRoaXMuZ2VuZXJhdGVOb25jZUtleShzdGF0ZSkpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRlbXBvcmFyeUl0ZW0odGhpcy5nZW5lcmF0ZUF1dGhvcml0eUtleShzdGF0ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbW92ZVRlbXBvcmFyeUl0ZW0odGhpcy5nZW5lcmF0ZUNhY2hlS2V5KFRlbXBvcmFyeUNhY2hlS2V5cy5SRVFVRVNUX1BBUkFNUykpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlVGVtcG9yYXJ5SXRlbSh0aGlzLmdlbmVyYXRlQ2FjaGVLZXkoVGVtcG9yYXJ5Q2FjaGVLZXlzLk9SSUdJTl9VUkkpKTtcclxuICAgICAgICB0aGlzLnJlbW92ZVRlbXBvcmFyeUl0ZW0odGhpcy5nZW5lcmF0ZUNhY2hlS2V5KFRlbXBvcmFyeUNhY2hlS2V5cy5VUkxfSEFTSCkpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlVGVtcG9yYXJ5SXRlbSh0aGlzLmdlbmVyYXRlQ2FjaGVLZXkoVGVtcG9yYXJ5Q2FjaGVLZXlzLkNPUlJFTEFUSU9OX0lEKSk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVUZW1wb3JhcnlJdGVtKHRoaXMuZ2VuZXJhdGVDYWNoZUtleShUZW1wb3JhcnlDYWNoZUtleXMuQ0NTX0NSRURFTlRJQUwpKTtcclxuICAgICAgICB0aGlzLnJlbW92ZVRlbXBvcmFyeUl0ZW0odGhpcy5nZW5lcmF0ZUNhY2hlS2V5KFRlbXBvcmFyeUNhY2hlS2V5cy5OQVRJVkVfUkVRVUVTVCkpO1xyXG4gICAgICAgIHRoaXMuc2V0SW50ZXJhY3Rpb25JblByb2dyZXNzKGZhbHNlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyB0ZW1wb3JhcnkgY2FjaGUgZm9yIHRoZSBwcm92aWRlZCBzdGF0ZVxyXG4gICAgICogQHBhcmFtIHN0YXRlU3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGNsZWFuUmVxdWVzdEJ5U3RhdGUoc3RhdGVTdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuY2xlYW5SZXF1ZXN0QnlTdGF0ZSBjYWxsZWRcIik7XHJcbiAgICAgICAgLy8gSW50ZXJhY3Rpb24gaXMgY29tcGxldGVkIC0gcmVtb3ZlIGludGVyYWN0aW9uIHN0YXR1cy5cclxuICAgICAgICBpZiAoc3RhdGVTdHJpbmcpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdGVLZXkgPSB0aGlzLmdlbmVyYXRlU3RhdGVLZXkoc3RhdGVTdHJpbmcpO1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRTdGF0ZSA9IHRoaXMudGVtcG9yYXJ5Q2FjaGVTdG9yYWdlLmdldEl0ZW0oc3RhdGVLZXkpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvUGlpKGBCcm93c2VyQ2FjaGVNYW5hZ2VyLmNsZWFuUmVxdWVzdEJ5U3RhdGU6IFJlbW92aW5nIHRlbXBvcmFyeSBjYWNoZSBpdGVtcyBmb3Igc3RhdGU6ICR7Y2FjaGVkU3RhdGV9YCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRSZXF1ZXN0Q2FjaGUoY2FjaGVkU3RhdGUgfHwgQ29uc3RhbnRzLkVNUFRZX1NUUklORyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBMb29rcyBpbiB0ZW1wb3JhcnkgY2FjaGUgZm9yIGFueSBzdGF0ZSB2YWx1ZXMgd2l0aCB0aGUgcHJvdmlkZWQgaW50ZXJhY3Rpb25UeXBlIGFuZCByZW1vdmVzIGFsbCB0ZW1wb3JhcnkgY2FjaGUgaXRlbXMgZm9yIHRoYXQgc3RhdGVcclxuICAgICAqIFVzZWQgaW4gc2NlbmFyaW9zIHdoZXJlIHRlbXAgY2FjaGUgbmVlZHMgdG8gYmUgY2xlYW5lZCBidXQgc3RhdGUgaXMgbm90IGtub3duLCBzdWNoIGFzIGNsaWNraW5nIGJyb3dzZXIgYmFjayBidXR0b24uXHJcbiAgICAgKiBAcGFyYW0gaW50ZXJhY3Rpb25UeXBlXHJcbiAgICAgKi9cclxuICAgIGNsZWFuUmVxdWVzdEJ5SW50ZXJhY3Rpb25UeXBlKGludGVyYWN0aW9uVHlwZSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5jbGVhblJlcXVlc3RCeUludGVyYWN0aW9uVHlwZSBjYWxsZWRcIik7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBrZXlzIHRvIGZpbmQgc3RhdGUga2V5XHJcbiAgICAgICAgdGhpcy50ZW1wb3JhcnlDYWNoZVN0b3JhZ2UuZ2V0S2V5cygpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBJZiB0aGlzIGtleSBpcyBub3QgdGhlIHN0YXRlIGtleSwgbW92ZSBvblxyXG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoVGVtcG9yYXJ5Q2FjaGVLZXlzLlJFUVVFU1RfU1RBVEUpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIHN0YXRlIHZhbHVlLCByZXR1cm4gaWYgbm90IGEgdmFsaWQgdmFsdWVcclxuICAgICAgICAgICAgY29uc3Qgc3RhdGVWYWx1ZSA9IHRoaXMudGVtcG9yYXJ5Q2FjaGVTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRXh0cmFjdCBzdGF0ZSBhbmQgZW5zdXJlIGl0IG1hdGNoZXMgZ2l2ZW4gSW50ZXJhY3Rpb25UeXBlLCB0aGVuIGNsZWFuIHJlcXVlc3QgY2FjaGVcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkU3RhdGUgPSBleHRyYWN0QnJvd3NlclJlcXVlc3RTdGF0ZSh0aGlzLmNyeXB0b0ltcGwsIHN0YXRlVmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAocGFyc2VkU3RhdGUgJiZcclxuICAgICAgICAgICAgICAgIHBhcnNlZFN0YXRlLmludGVyYWN0aW9uVHlwZSA9PT0gaW50ZXJhY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvUGlpKGBCcm93c2VyQ2FjaGVNYW5hZ2VyLmNsZWFuUmVxdWVzdEJ5SW50ZXJhY3Rpb25UeXBlOiBSZW1vdmluZyB0ZW1wb3JhcnkgY2FjaGUgaXRlbXMgZm9yIHN0YXRlOiAke3N0YXRlVmFsdWV9YCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0UmVxdWVzdENhY2hlKHN0YXRlVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXRJbnRlcmFjdGlvbkluUHJvZ3Jlc3MoZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgY2FjaGVDb2RlUmVxdWVzdChhdXRoQ29kZVJlcXVlc3QpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIkJyb3dzZXJDYWNoZU1hbmFnZXIuY2FjaGVDb2RlUmVxdWVzdCBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgZW5jb2RlZFZhbHVlID0gYmFzZTY0RW5jb2RlKEpTT04uc3RyaW5naWZ5KGF1dGhDb2RlUmVxdWVzdCkpO1xyXG4gICAgICAgIHRoaXMuc2V0VGVtcG9yYXJ5Q2FjaGUoVGVtcG9yYXJ5Q2FjaGVLZXlzLlJFUVVFU1RfUEFSQU1TLCBlbmNvZGVkVmFsdWUsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSB0b2tlbiBleGNoYW5nZSBwYXJhbWV0ZXJzIGZyb20gdGhlIGNhY2hlLiBUaHJvd3MgYW4gZXJyb3IgaWYgbm90aGluZyBpcyBmb3VuZC5cclxuICAgICAqL1xyXG4gICAgZ2V0Q2FjaGVkUmVxdWVzdChzdGF0ZSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRDYWNoZWRSZXF1ZXN0IGNhbGxlZFwiKTtcclxuICAgICAgICAvLyBHZXQgdG9rZW4gcmVxdWVzdCBmcm9tIGNhY2hlIGFuZCBwYXJzZSBhcyBUb2tlbkV4Y2hhbmdlUGFyYW1ldGVycy5cclxuICAgICAgICBjb25zdCBlbmNvZGVkVG9rZW5SZXF1ZXN0ID0gdGhpcy5nZXRUZW1wb3JhcnlDYWNoZShUZW1wb3JhcnlDYWNoZUtleXMuUkVRVUVTVF9QQVJBTVMsIHRydWUpO1xyXG4gICAgICAgIGlmICghZW5jb2RlZFRva2VuUmVxdWVzdCkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKG5vVG9rZW5SZXF1ZXN0Q2FjaGVFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwYXJzZWRSZXF1ZXN0O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHBhcnNlZFJlcXVlc3QgPSBKU09OLnBhcnNlKGJhc2U2NERlY29kZShlbmNvZGVkVG9rZW5SZXF1ZXN0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yUGlpKGBBdHRlbXB0ZWQgdG8gcGFyc2U6ICR7ZW5jb2RlZFRva2VuUmVxdWVzdH1gKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYFBhcnNpbmcgY2FjaGVkIHRva2VuIHJlcXVlc3QgdGhyZXcgd2l0aCBlcnJvcjogJHtlfWApO1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKHVuYWJsZVRvUGFyc2VUb2tlblJlcXVlc3RDYWNoZUVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW1vdmVUZW1wb3JhcnlJdGVtKHRoaXMuZ2VuZXJhdGVDYWNoZUtleShUZW1wb3JhcnlDYWNoZUtleXMuUkVRVUVTVF9QQVJBTVMpKTtcclxuICAgICAgICAvLyBHZXQgY2FjaGVkIGF1dGhvcml0eSBhbmQgdXNlIGlmIG5vIGF1dGhvcml0eSBpcyBjYWNoZWQgd2l0aCByZXF1ZXN0LlxyXG4gICAgICAgIGlmICghcGFyc2VkUmVxdWVzdC5hdXRob3JpdHkpIHtcclxuICAgICAgICAgICAgY29uc3QgYXV0aG9yaXR5Q2FjaGVLZXkgPSB0aGlzLmdlbmVyYXRlQXV0aG9yaXR5S2V5KHN0YXRlKTtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkQXV0aG9yaXR5ID0gdGhpcy5nZXRUZW1wb3JhcnlDYWNoZShhdXRob3JpdHlDYWNoZUtleSk7XHJcbiAgICAgICAgICAgIGlmICghY2FjaGVkQXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKG5vQ2FjaGVkQXV0aG9yaXR5RXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhcnNlZFJlcXVlc3QuYXV0aG9yaXR5ID0gY2FjaGVkQXV0aG9yaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyc2VkUmVxdWVzdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBjYWNoZWQgbmF0aXZlIHJlcXVlc3QgZm9yIHJlZGlyZWN0IGZsb3dzXHJcbiAgICAgKi9cclxuICAgIGdldENhY2hlZE5hdGl2ZVJlcXVlc3QoKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldENhY2hlZE5hdGl2ZVJlcXVlc3QgY2FsbGVkXCIpO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZFJlcXVlc3QgPSB0aGlzLmdldFRlbXBvcmFyeUNhY2hlKFRlbXBvcmFyeUNhY2hlS2V5cy5OQVRJVkVfUkVRVUVTVCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKCFjYWNoZWRSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiQnJvd3NlckNhY2hlTWFuYWdlci5nZXRDYWNoZWROYXRpdmVSZXF1ZXN0OiBObyBjYWNoZWQgbmF0aXZlIHJlcXVlc3QgZm91bmRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJzZWRSZXF1ZXN0ID0gdGhpcy52YWxpZGF0ZUFuZFBhcnNlSnNvbihjYWNoZWRSZXF1ZXN0KTtcclxuICAgICAgICBpZiAoIXBhcnNlZFJlcXVlc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJCcm93c2VyQ2FjaGVNYW5hZ2VyLmdldENhY2hlZE5hdGl2ZVJlcXVlc3Q6IFVuYWJsZSB0byBwYXJzZSBuYXRpdmUgcmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJzZWRSZXF1ZXN0O1xyXG4gICAgfVxyXG4gICAgaXNJbnRlcmFjdGlvbkluUHJvZ3Jlc3MobWF0Y2hDbGllbnRJZCkge1xyXG4gICAgICAgIGNvbnN0IGNsaWVudElkID0gdGhpcy5nZXRJbnRlcmFjdGlvbkluUHJvZ3Jlc3MoKTtcclxuICAgICAgICBpZiAobWF0Y2hDbGllbnRJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2xpZW50SWQgPT09IHRoaXMuY2xpZW50SWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gISFjbGllbnRJZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRJbnRlcmFjdGlvbkluUHJvZ3Jlc3MoKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7Q29uc3RhbnRzLkNBQ0hFX1BSRUZJWH0uJHtUZW1wb3JhcnlDYWNoZUtleXMuSU5URVJBQ1RJT05fU1RBVFVTX0tFWX1gO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFRlbXBvcmFyeUNhY2hlKGtleSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgc2V0SW50ZXJhY3Rpb25JblByb2dyZXNzKGluUHJvZ3Jlc3MpIHtcclxuICAgICAgICAvLyBFbnN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIGludGVyYWN0aW9uIGluIHByb2dyZXNzIGZvciBhIGRpZmZlcmVudCBjbGllbnRJZFxyXG4gICAgICAgIGNvbnN0IGtleSA9IGAke0NvbnN0YW50cy5DQUNIRV9QUkVGSVh9LiR7VGVtcG9yYXJ5Q2FjaGVLZXlzLklOVEVSQUNUSU9OX1NUQVRVU19LRVl9YDtcclxuICAgICAgICBpZiAoaW5Qcm9ncmVzcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRJbnRlcmFjdGlvbkluUHJvZ3Jlc3MoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcihpbnRlcmFjdGlvbkluUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTm8gaW50ZXJhY3Rpb24gaXMgaW4gcHJvZ3Jlc3NcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcG9yYXJ5Q2FjaGUoa2V5LCB0aGlzLmNsaWVudElkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWluUHJvZ3Jlc3MgJiZcclxuICAgICAgICAgICAgdGhpcy5nZXRJbnRlcmFjdGlvbkluUHJvZ3Jlc3MoKSA9PT0gdGhpcy5jbGllbnRJZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRlbXBvcmFyeUl0ZW0oa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdXNlcm5hbWUgcmV0cmlldmVkIGZyb20gQURBTCBvciBNU0FMIHYxIGlkVG9rZW5cclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgKi9cclxuICAgIGdldExlZ2FjeUxvZ2luSGludCgpIHtcclxuICAgICAgICAvLyBPbmx5IGNoZWNrIGZvciBhZGFsL21zYWwgdG9rZW4gaWYgbm8gU1NPIHBhcmFtcyBhcmUgYmVpbmcgdXNlZFxyXG4gICAgICAgIGNvbnN0IGFkYWxJZFRva2VuU3RyaW5nID0gdGhpcy5nZXRUZW1wb3JhcnlDYWNoZShQZXJzaXN0ZW50Q2FjaGVLZXlzLkFEQUxfSURfVE9LRU4pO1xyXG4gICAgICAgIGlmIChhZGFsSWRUb2tlblN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlLnJlbW92ZUl0ZW0oUGVyc2lzdGVudENhY2hlS2V5cy5BREFMX0lEX1RPS0VOKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIkNhY2hlZCBBREFMIGlkIHRva2VuIHJldHJpZXZlZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENoZWNrIGZvciBjYWNoZWQgTVNBTCB2MSBpZCB0b2tlblxyXG4gICAgICAgIGNvbnN0IG1zYWxJZFRva2VuU3RyaW5nID0gdGhpcy5nZXRUZW1wb3JhcnlDYWNoZShQZXJzaXN0ZW50Q2FjaGVLZXlzLklEX1RPS0VOLCB0cnVlKTtcclxuICAgICAgICBpZiAobXNhbElkVG9rZW5TdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuZ2VuZXJhdGVDYWNoZUtleShQZXJzaXN0ZW50Q2FjaGVLZXlzLklEX1RPS0VOKSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJDYWNoZWQgTVNBTC5qcyB2MSBpZCB0b2tlbiByZXRyaWV2ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNhY2hlZElkVG9rZW5TdHJpbmcgPSBtc2FsSWRUb2tlblN0cmluZyB8fCBhZGFsSWRUb2tlblN0cmluZztcclxuICAgICAgICBpZiAoY2FjaGVkSWRUb2tlblN0cmluZykge1xyXG4gICAgICAgICAgICBjb25zdCBpZFRva2VuQ2xhaW1zID0gQXV0aFRva2VuLmV4dHJhY3RUb2tlbkNsYWltcyhjYWNoZWRJZFRva2VuU3RyaW5nLCBiYXNlNjREZWNvZGUpO1xyXG4gICAgICAgICAgICBpZiAoaWRUb2tlbkNsYWltcy5wcmVmZXJyZWRfdXNlcm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJObyBTU08gcGFyYW1zIHVzZWQgYW5kIEFEQUwvTVNBTCB2MSB0b2tlbiByZXRyaWV2ZWQsIHNldHRpbmcgQURBTC9NU0FMIHYxIHByZWZlcnJlZF91c2VybmFtZSBhcyBsb2dpbkhpbnRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaWRUb2tlbkNsYWltcy5wcmVmZXJyZWRfdXNlcm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaWRUb2tlbkNsYWltcy51cG4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJObyBTU08gcGFyYW1zIHVzZWQgYW5kIEFEQUwvTVNBTCB2MSB0b2tlbiByZXRyaWV2ZWQsIHNldHRpbmcgQURBTC9NU0FMIHYxIHVwbiBhcyBsb2dpbkhpbnRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaWRUb2tlbkNsYWltcy51cG47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiTm8gU1NPIHBhcmFtcyB1c2VkIGFuZCBBREFML01TQUwgdjEgdG9rZW4gcmV0cmlldmVkLCBob3dldmVyLCBubyBhY2NvdW50IGhpbnQgY2xhaW0gZm91bmQuIEVuYWJsZSBwcmVmZXJyZWRfdXNlcm5hbWUgb3IgdXBuIGlkIHRva2VuIGNsYWltIHRvIGdldCBTU08uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGEgY3JlZGVudGlhbCdzIGNhY2hlIGtleSBpZiB0aGUgY3VycmVudCBjYWNoZSBrZXkgaXMgb3V0ZGF0ZWRcclxuICAgICAqL1xyXG4gICAgdXBkYXRlQ3JlZGVudGlhbENhY2hlS2V5KGN1cnJlbnRDYWNoZUtleSwgY3JlZGVudGlhbCkge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRDYWNoZUtleSA9IENhY2hlSGVscGVycy5nZW5lcmF0ZUNyZWRlbnRpYWxLZXkoY3JlZGVudGlhbCk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRDYWNoZUtleSAhPT0gdXBkYXRlZENhY2hlS2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlSXRlbSA9IHRoaXMuZ2V0SXRlbShjdXJyZW50Q2FjaGVLZXkpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlLnJlbW92ZUl0ZW0oY3VycmVudENhY2hlS2V5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXRlbSh1cGRhdGVkQ2FjaGVLZXksIGNhY2hlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKGBVcGRhdGVkIGFuIG91dGRhdGVkICR7Y3JlZGVudGlhbC5jcmVkZW50aWFsVHlwZX0gY2FjaGUga2V5YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZENhY2hlS2V5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEF0dGVtcHRlZCB0byB1cGRhdGUgYW4gb3V0ZGF0ZWQgJHtjcmVkZW50aWFsLmNyZWRlbnRpYWxUeXBlfSBjYWNoZSBrZXkgYnV0IG5vIGl0ZW0gbWF0Y2hpbmcgdGhlIG91dGRhdGVkIGtleSB3YXMgZm91bmQgaW4gc3RvcmFnZWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50Q2FjaGVLZXk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEJ1aWxkcyBjcmVkZW50aWFsIGVudGl0aWVzIGZyb20gQXV0aGVudGljYXRpb25SZXN1bHQgb2JqZWN0IGFuZCBzYXZlcyB0aGUgcmVzdWx0aW5nIGNyZWRlbnRpYWxzIHRvIHRoZSBjYWNoZVxyXG4gICAgICogQHBhcmFtIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgYXN5bmMgaHlkcmF0ZUNhY2hlKHJlc3VsdCwgcmVxdWVzdCkge1xyXG4gICAgICAgIGNvbnN0IGlkVG9rZW5FbnRpdHkgPSBDYWNoZUhlbHBlcnMuY3JlYXRlSWRUb2tlbkVudGl0eShyZXN1bHQuYWNjb3VudD8uaG9tZUFjY291bnRJZCwgcmVzdWx0LmFjY291bnQ/LmVudmlyb25tZW50LCByZXN1bHQuaWRUb2tlbiwgdGhpcy5jbGllbnRJZCwgcmVzdWx0LnRlbmFudElkKTtcclxuICAgICAgICBsZXQgY2xhaW1zSGFzaDtcclxuICAgICAgICBpZiAocmVxdWVzdC5jbGFpbXMpIHtcclxuICAgICAgICAgICAgY2xhaW1zSGFzaCA9IGF3YWl0IHRoaXMuY3J5cHRvSW1wbC5oYXNoU3RyaW5nKHJlcXVlc3QuY2xhaW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogbWV0YSBkYXRhIGZvciBjYWNoZSBzdG9yZXMgdGltZSBpbiBzZWNvbmRzIGZyb20gZXBvY2hcclxuICAgICAgICAgKiBBdXRoZW50aWNhdGlvblJlc3VsdCByZXR1cm5zIGV4cGlyZXNPbiBhbmQgZXh0RXhwaXJlc09uIGluIG1pbGxpc2Vjb25kcyAoYXMgYSBEYXRlIG9iamVjdCB3aGljaCBpcyBpbiBtcylcclxuICAgICAgICAgKiBXZSBuZWVkIHRvIG1hcCB0aGVzZSBmb3IgdGhlIGNhY2hlIHdoZW4gYnVpbGRpbmcgdG9rZW5zIGZyb20gQXV0aGVudGljYXRpb25SZXN1bHRcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRoZSBuZXh0IE1TQUwgVkZ1dHVyZSBzaG91bGQgbWFwIHRoZXNlIGJvdGggdG8gc2FtZSB2YWx1ZSBpZiBwb3NzaWJsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuRW50aXR5ID0gQ2FjaGVIZWxwZXJzLmNyZWF0ZUFjY2Vzc1Rva2VuRW50aXR5KHJlc3VsdC5hY2NvdW50Py5ob21lQWNjb3VudElkLCByZXN1bHQuYWNjb3VudC5lbnZpcm9ubWVudCwgcmVzdWx0LmFjY2Vzc1Rva2VuLCB0aGlzLmNsaWVudElkLCByZXN1bHQudGVuYW50SWQsIHJlc3VsdC5zY29wZXMuam9pbihcIiBcIiksIHJlc3VsdC5leHBpcmVzT24gPyByZXN1bHQuZXhwaXJlc09uLmdldFRpbWUoKSAvIDEwMDAgOiAwLCByZXN1bHQuZXh0RXhwaXJlc09uID8gcmVzdWx0LmV4dEV4cGlyZXNPbi5nZXRUaW1lKCkgLyAxMDAwIDogMCwgYmFzZTY0RGVjb2RlLCB1bmRlZmluZWQsIC8vIHJlZnJlc2hPblxyXG4gICAgICAgIHJlc3VsdC50b2tlblR5cGUsIHVuZGVmaW5lZCwgLy8gdXNlckFzc2VydGlvbkhhc2hcclxuICAgICAgICByZXF1ZXN0LnNzaEtpZCwgcmVxdWVzdC5jbGFpbXMsIGNsYWltc0hhc2gpO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlUmVjb3JkID0ge1xyXG4gICAgICAgICAgICBpZFRva2VuOiBpZFRva2VuRW50aXR5LFxyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW5FbnRpdHksXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zYXZlQ2FjaGVSZWNvcmQoY2FjaGVSZWNvcmQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzYXZlcyBhIGNhY2hlIHJlY29yZFxyXG4gICAgICogQHBhcmFtIGNhY2hlUmVjb3JkIHtDYWNoZVJlY29yZH1cclxuICAgICAqIEBwYXJhbSBzdG9yZUluQ2FjaGUgez9TdG9yZUluQ2FjaGV9XHJcbiAgICAgKiBAcGFyYW0gY29ycmVsYXRpb25JZCB7P3N0cmluZ30gY29ycmVsYXRpb24gaWRcclxuICAgICAqL1xyXG4gICAgYXN5bmMgc2F2ZUNhY2hlUmVjb3JkKGNhY2hlUmVjb3JkLCBzdG9yZUluQ2FjaGUsIGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCBzdXBlci5zYXZlQ2FjaGVSZWNvcmQoY2FjaGVSZWNvcmQsIHN0b3JlSW5DYWNoZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQ2FjaGVFcnJvciAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCAmJlxyXG4gICAgICAgICAgICAgICAgY29ycmVsYXRpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbktleXMgPSB0aGlzLmdldFRva2VuS2V5cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQuYWRkRmllbGRzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVSdENvdW50OiB0b2tlbktleXMucmVmcmVzaFRva2VuLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVJZENvdW50OiB0b2tlbktleXMuaWRUb2tlbi5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlQXRDb3VudDogdG9rZW5LZXlzLmFjY2Vzc1Rva2VuLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICB9LCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBERUZBVUxUX0JST1dTRVJfQ0FDSEVfTUFOQUdFUiA9IChjbGllbnRJZCwgbG9nZ2VyKSA9PiB7XHJcbiAgICBjb25zdCBjYWNoZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgY2FjaGVMb2NhdGlvbjogQnJvd3NlckNhY2hlTG9jYXRpb24uTWVtb3J5U3RvcmFnZSxcclxuICAgICAgICB0ZW1wb3JhcnlDYWNoZUxvY2F0aW9uOiBCcm93c2VyQ2FjaGVMb2NhdGlvbi5NZW1vcnlTdG9yYWdlLFxyXG4gICAgICAgIHN0b3JlQXV0aFN0YXRlSW5Db29raWU6IGZhbHNlLFxyXG4gICAgICAgIHNlY3VyZUNvb2tpZXM6IGZhbHNlLFxyXG4gICAgICAgIGNhY2hlTWlncmF0aW9uRW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgY2xhaW1zQmFzZWRDYWNoaW5nRW5hYmxlZDogZmFsc2UsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG5ldyBCcm93c2VyQ2FjaGVNYW5hZ2VyKGNsaWVudElkLCBjYWNoZU9wdGlvbnMsIERFRkFVTFRfQ1JZUFRPX0lNUExFTUVOVEFUSU9OLCBsb2dnZXIpO1xyXG59O1xuXG5leHBvcnQgeyBCcm93c2VyQ2FjaGVNYW5hZ2VyLCBERUZBVUxUX0JST1dTRVJfQ0FDSEVfTUFOQUdFUiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnJvd3NlckNhY2hlTWFuYWdlci5tanMubWFwXG4iXSwibmFtZXMiOlsiQ2FjaGVNYW5hZ2VyIiwiQ3JlZGVudGlhbFR5cGUiLCJDYWNoZUhlbHBlcnMiLCJBY2NvdW50RW50aXR5IiwiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwiQ2xpZW50QXV0aEVycm9yQ29kZXMiLCJDb25zdGFudHMiLCJQZXJzaXN0ZW50Q2FjaGVLZXlzIiwiUGVyZm9ybWFuY2VFdmVudHMiLCJTdHJpbmdVdGlscyIsIlByb3RvY29sVXRpbHMiLCJBdXRoVG9rZW4iLCJDYWNoZUVycm9yIiwiREVGQVVMVF9DUllQVE9fSU1QTEVNRU5UQVRJT04iLCJDY3NDcmVkZW50aWFsVHlwZSIsImNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IiLCJCcm93c2VyQ2FjaGVMb2NhdGlvbiIsIlN0YXRpY0NhY2hlS2V5cyIsIkluTWVtb3J5Q2FjaGVLZXlzIiwiVGVtcG9yYXJ5Q2FjaGVLZXlzIiwiTG9jYWxTdG9yYWdlIiwiU2Vzc2lvblN0b3JhZ2UiLCJNZW1vcnlTdG9yYWdlIiwiZXh0cmFjdEJyb3dzZXJSZXF1ZXN0U3RhdGUiLCJiYXNlNjREZWNvZGUiLCJiYXNlNjRFbmNvZGUiLCJDb29raWVTdG9yYWdlIiwibm9Ub2tlblJlcXVlc3RDYWNoZUVycm9yIiwidW5hYmxlVG9QYXJzZVRva2VuUmVxdWVzdENhY2hlRXJyb3IiLCJub0NhY2hlZEF1dGhvcml0eUVycm9yIiwiaW50ZXJhY3Rpb25JblByb2dyZXNzIiwiQnJvd3NlckNhY2hlTWFuYWdlciIsImNvbnN0cnVjdG9yIiwiY2xpZW50SWQiLCJjYWNoZUNvbmZpZyIsImNyeXB0b0ltcGwiLCJsb2dnZXIiLCJzdGF0aWNBdXRob3JpdHlPcHRpb25zIiwicGVyZm9ybWFuY2VDbGllbnQiLCJpbnRlcm5hbFN0b3JhZ2UiLCJicm93c2VyU3RvcmFnZSIsInNldHVwQnJvd3NlclN0b3JhZ2UiLCJjYWNoZUxvY2F0aW9uIiwidGVtcG9yYXJ5Q2FjaGVTdG9yYWdlIiwidGVtcG9yYXJ5Q2FjaGVMb2NhdGlvbiIsImNvb2tpZVN0b3JhZ2UiLCJjYWNoZU1pZ3JhdGlvbkVuYWJsZWQiLCJtaWdyYXRlQ2FjaGVFbnRyaWVzIiwiY3JlYXRlS2V5TWFwcyIsImUiLCJlcnJvciIsImlkVG9rZW5LZXkiLCJDQUNIRV9QUkVGSVgiLCJJRF9UT0tFTiIsImNsaWVudEluZm9LZXkiLCJDTElFTlRfSU5GTyIsImVycm9yS2V5IiwiRVJST1IiLCJlcnJvckRlc2NLZXkiLCJFUlJPUl9ERVNDIiwiaWRUb2tlblZhbHVlIiwiZ2V0SXRlbSIsImNsaWVudEluZm9WYWx1ZSIsImVycm9yVmFsdWUiLCJlcnJvckRlc2NWYWx1ZSIsInZhbHVlcyIsImtleXNUb01pZ3JhdGUiLCJmb3JFYWNoIiwiY2FjaGVLZXkiLCJpbmRleCIsInZhbHVlIiwic2V0VGVtcG9yYXJ5Q2FjaGUiLCJ0cmFjZSIsImFjY291bnRLZXlzIiwiQUNDT1VOVF9LRVlTIiwidG9rZW5LZXlzIiwiVE9LRU5fS0VZUyIsInZlcmJvc2UiLCJhbGxLZXlzIiwiZ2V0S2V5cyIsImtleSIsImlzQ3JlZGVudGlhbEtleSIsImNyZWRPYmoiLCJ2YWxpZGF0ZUFuZFBhcnNlSnNvbiIsImhhc093blByb3BlcnR5IiwiaXNJZFRva2VuRW50aXR5IiwidHJhY2VQaWkiLCJpZFRva2VuRW50aXR5IiwibmV3S2V5IiwidXBkYXRlQ3JlZGVudGlhbENhY2hlS2V5IiwiYWRkVG9rZW5LZXkiLCJBQ0NFU1NfVE9LRU4iLCJBQ0NFU1NfVE9LRU5fV0lUSF9BVVRIX1NDSEVNRSIsImlzQWNjZXNzVG9rZW5FbnRpdHkiLCJhY2Nlc3NUb2tlbkVudGl0eSIsIlJFRlJFU0hfVE9LRU4iLCJpc1JlZnJlc2hUb2tlbkVudGl0eSIsInJlZnJlc2hUb2tlbkVudGl0eSIsImlzQWNjb3VudEtleSIsImFjY291bnRPYmoiLCJpc0FjY291bnRFbnRpdHkiLCJhZGRBY2NvdW50S2V5VG9NYXAiLCJqc29uVmFsdWUiLCJwYXJzZWRKc29uIiwiSlNPTiIsInBhcnNlIiwic2V0SXRlbSIsImdldEFjY291bnQiLCJhY2NvdW50S2V5IiwiYWNjb3VudEVudGl0eSIsImdldENhY2hlZEFjY291bnRFbnRpdHkiLCJ1cGRhdGVPdXRkYXRlZENhY2hlZEFjY291bnQiLCJzZXJpYWxpemVkQWNjb3VudCIsInJlbW92ZUFjY291bnRLZXlGcm9tTWFwIiwicGFyc2VkQWNjb3VudCIsInRvT2JqZWN0Iiwic2V0QWNjb3VudCIsImFjY291bnQiLCJnZW5lcmF0ZUFjY291bnRLZXkiLCJzdHJpbmdpZnkiLCJnZXRBY2NvdW50S2V5cyIsImluZGV4T2YiLCJwdXNoIiwicmVtb3ZhbEluZGV4Iiwic3BsaWNlIiwicmVtb3ZlQWNjb3VudCIsInJlbW92ZU91dGRhdGVkQWNjb3VudCIsInJlbW92ZUl0ZW0iLCJyZW1vdmVJZFRva2VuIiwicmVtb3ZlVG9rZW5LZXkiLCJyZW1vdmVBY2Nlc3NUb2tlbiIsInJlbW92ZVJlZnJlc2hUb2tlbiIsImdldFRva2VuS2V5cyIsIml0ZW0iLCJpZFRva2VuIiwiYWNjZXNzVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJ0eXBlIiwiaW5mbyIsInVuZXhwZWN0ZWRDcmVkZW50aWFsVHlwZSIsImluZm9QaWkiLCJpZFJlbW92YWwiLCJhY2Nlc3NSZW1vdmFsIiwicmVmcmVzaFJlbW92YWwiLCJnZXRJZFRva2VuQ3JlZGVudGlhbCIsInBhcnNlZElkVG9rZW4iLCJzZXRJZFRva2VuQ3JlZGVudGlhbCIsImdlbmVyYXRlQ3JlZGVudGlhbEtleSIsImdldEFjY2Vzc1Rva2VuQ3JlZGVudGlhbCIsImFjY2Vzc1Rva2VuS2V5IiwicGFyc2VkQWNjZXNzVG9rZW4iLCJzZXRBY2Nlc3NUb2tlbkNyZWRlbnRpYWwiLCJnZXRSZWZyZXNoVG9rZW5DcmVkZW50aWFsIiwicmVmcmVzaFRva2VuS2V5IiwicGFyc2VkUmVmcmVzaFRva2VuIiwic2V0UmVmcmVzaFRva2VuQ3JlZGVudGlhbCIsImdldEFwcE1ldGFkYXRhIiwiYXBwTWV0YWRhdGFLZXkiLCJwYXJzZWRNZXRhZGF0YSIsImlzQXBwTWV0YWRhdGFFbnRpdHkiLCJzZXRBcHBNZXRhZGF0YSIsImFwcE1ldGFkYXRhIiwiZ2VuZXJhdGVBcHBNZXRhZGF0YUtleSIsImdldFNlcnZlclRlbGVtZXRyeSIsInNlcnZlclRlbGVtZXRyeUtleSIsInBhcnNlZEVudGl0eSIsImlzU2VydmVyVGVsZW1ldHJ5RW50aXR5Iiwic2V0U2VydmVyVGVsZW1ldHJ5Iiwic2VydmVyVGVsZW1ldHJ5IiwiZ2V0QXV0aG9yaXR5TWV0YWRhdGEiLCJpc0F1dGhvcml0eU1ldGFkYXRhRW50aXR5IiwiZ2V0QXV0aG9yaXR5TWV0YWRhdGFLZXlzIiwiZmlsdGVyIiwiaXNBdXRob3JpdHlNZXRhZGF0YSIsInNldFdyYXBwZXJNZXRhZGF0YSIsIndyYXBwZXJTS1UiLCJ3cmFwcGVyVmVyc2lvbiIsIldSQVBQRVJfU0tVIiwiV1JBUFBFUl9WRVIiLCJnZXRXcmFwcGVyTWV0YWRhdGEiLCJza3UiLCJFTVBUWV9TVFJJTkciLCJ2ZXJzaW9uIiwic2V0QXV0aG9yaXR5TWV0YWRhdGEiLCJlbnRpdHkiLCJnZXRBY3RpdmVBY2NvdW50IiwiYWN0aXZlQWNjb3VudEtleUZpbHRlcnMiLCJnZW5lcmF0ZUNhY2hlS2V5IiwiQUNUSVZFX0FDQ09VTlRfRklMVEVSUyIsImFjdGl2ZUFjY291bnRWYWx1ZUZpbHRlcnMiLCJhY3RpdmVBY2NvdW50S2V5TG9jYWwiLCJBQ1RJVkVfQUNDT1VOVCIsImFjdGl2ZUFjY291bnRWYWx1ZUxvY2FsIiwiYWN0aXZlQWNjb3VudCIsImdldEFjY291bnRJbmZvRmlsdGVyZWRCeSIsImxvY2FsQWNjb3VudElkIiwic2V0QWN0aXZlQWNjb3VudCIsImFjdGl2ZUFjY291bnRWYWx1ZU9iaiIsImhvbWVBY2NvdW50SWQiLCJ0ZW5hbnRJZCIsImFjdGl2ZUFjY291bnRLZXkiLCJhY3RpdmVBY2NvdW50VmFsdWUiLCJnZXRUaHJvdHRsaW5nQ2FjaGUiLCJ0aHJvdHRsaW5nQ2FjaGVLZXkiLCJwYXJzZWRUaHJvdHRsaW5nQ2FjaGUiLCJpc1Rocm90dGxpbmdFbnRpdHkiLCJzZXRUaHJvdHRsaW5nQ2FjaGUiLCJ0aHJvdHRsaW5nQ2FjaGUiLCJnZXRUZW1wb3JhcnlDYWNoZSIsImdlbmVyYXRlS2V5Iiwic3RvcmVBdXRoU3RhdGVJbkNvb2tpZSIsIml0ZW1Db29raWUiLCJ1bmRlZmluZWQiLCJzZWN1cmVDb29raWVzIiwicmVtb3ZlVGVtcG9yYXJ5SXRlbSIsImNsZWFyIiwicmVtb3ZlQWxsQWNjb3VudHMiLCJyZW1vdmVBcHBNZXRhZGF0YSIsImNsZWFyVG9rZW5zQW5kS2V5c1dpdGhDbGFpbXMiLCJjb3JyZWxhdGlvbklkIiwiYWRkUXVldWVNZWFzdXJlbWVudCIsIkNsZWFyVG9rZW5zQW5kS2V5c1dpdGhDbGFpbXMiLCJyZW1vdmVkQWNjZXNzVG9rZW5zIiwiY3JlZGVudGlhbCIsInJlcXVlc3RlZENsYWltc0hhc2giLCJpbmNsdWRlcyIsInRvTG93ZXJDYXNlIiwiUHJvbWlzZSIsImFsbCIsImxlbmd0aCIsIndhcm5pbmciLCJnZW5lcmF0ZWRLZXkiLCJzdGFydHNXaXRoIiwiQURBTF9JRF9UT0tFTiIsImdlbmVyYXRlQXV0aG9yaXR5S2V5Iiwic3RhdGVTdHJpbmciLCJsaWJyYXJ5U3RhdGUiLCJpZCIsInN0YXRlSWQiLCJwYXJzZVJlcXVlc3RTdGF0ZSIsIkFVVEhPUklUWSIsImdlbmVyYXRlTm9uY2VLZXkiLCJOT05DRV9JRFRPS0VOIiwiZ2VuZXJhdGVTdGF0ZUtleSIsIlJFUVVFU1RfU1RBVEUiLCJnZXRDYWNoZWRBdXRob3JpdHkiLCJjYWNoZWRTdGF0ZSIsInN0YXRlQ2FjaGVLZXkiLCJzdGF0ZSIsImF1dGhvcml0eUNhY2hlS2V5IiwidXBkYXRlQ2FjaGVFbnRyaWVzIiwibm9uY2UiLCJhdXRob3JpdHlJbnN0YW5jZSIsImxvZ2luSGludCIsIm5vbmNlQ2FjaGVLZXkiLCJjY3NDcmVkZW50aWFsIiwiSE9NRV9BQ0NPVU5UX0lEIiwiQ0NTX0NSRURFTlRJQUwiLCJVUE4iLCJyZXNldFJlcXVlc3RDYWNoZSIsIlJFUVVFU1RfUEFSQU1TIiwiT1JJR0lOX1VSSSIsIlVSTF9IQVNIIiwiQ09SUkVMQVRJT05fSUQiLCJOQVRJVkVfUkVRVUVTVCIsInNldEludGVyYWN0aW9uSW5Qcm9ncmVzcyIsImNsZWFuUmVxdWVzdEJ5U3RhdGUiLCJzdGF0ZUtleSIsImNsZWFuUmVxdWVzdEJ5SW50ZXJhY3Rpb25UeXBlIiwiaW50ZXJhY3Rpb25UeXBlIiwic3RhdGVWYWx1ZSIsInBhcnNlZFN0YXRlIiwiY2FjaGVDb2RlUmVxdWVzdCIsImF1dGhDb2RlUmVxdWVzdCIsImVuY29kZWRWYWx1ZSIsImdldENhY2hlZFJlcXVlc3QiLCJlbmNvZGVkVG9rZW5SZXF1ZXN0IiwicGFyc2VkUmVxdWVzdCIsImVycm9yUGlpIiwiYXV0aG9yaXR5IiwiY2FjaGVkQXV0aG9yaXR5IiwiZ2V0Q2FjaGVkTmF0aXZlUmVxdWVzdCIsImNhY2hlZFJlcXVlc3QiLCJpc0ludGVyYWN0aW9uSW5Qcm9ncmVzcyIsIm1hdGNoQ2xpZW50SWQiLCJnZXRJbnRlcmFjdGlvbkluUHJvZ3Jlc3MiLCJJTlRFUkFDVElPTl9TVEFUVVNfS0VZIiwiaW5Qcm9ncmVzcyIsImdldExlZ2FjeUxvZ2luSGludCIsImFkYWxJZFRva2VuU3RyaW5nIiwibXNhbElkVG9rZW5TdHJpbmciLCJjYWNoZWRJZFRva2VuU3RyaW5nIiwiaWRUb2tlbkNsYWltcyIsImV4dHJhY3RUb2tlbkNsYWltcyIsInByZWZlcnJlZF91c2VybmFtZSIsInVwbiIsImN1cnJlbnRDYWNoZUtleSIsInVwZGF0ZWRDYWNoZUtleSIsImNhY2hlSXRlbSIsImNyZWRlbnRpYWxUeXBlIiwiaHlkcmF0ZUNhY2hlIiwicmVzdWx0IiwicmVxdWVzdCIsImNyZWF0ZUlkVG9rZW5FbnRpdHkiLCJlbnZpcm9ubWVudCIsImNsYWltc0hhc2giLCJjbGFpbXMiLCJoYXNoU3RyaW5nIiwiY3JlYXRlQWNjZXNzVG9rZW5FbnRpdHkiLCJzY29wZXMiLCJqb2luIiwiZXhwaXJlc09uIiwiZ2V0VGltZSIsImV4dEV4cGlyZXNPbiIsInRva2VuVHlwZSIsInNzaEtpZCIsImNhY2hlUmVjb3JkIiwic2F2ZUNhY2hlUmVjb3JkIiwic3RvcmVJbkNhY2hlIiwiYWRkRmllbGRzIiwiY2FjaGVSdENvdW50IiwiY2FjaGVJZENvdW50IiwiY2FjaGVBdENvdW50IiwiREVGQVVMVF9CUk9XU0VSX0NBQ0hFX01BTkFHRVIiLCJjYWNoZU9wdGlvbnMiLCJjbGFpbXNCYXNlZENhY2hpbmdFbmFibGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CookieStorage: () => (/* binding */ CookieStorage),\n/* harmony export */   getCookieExpirationTime: () => (/* binding */ getCookieExpirationTime)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Cookie life calculation (hours * minutes * seconds * ms)\nconst COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\nclass CookieStorage {\n    getItem(key) {\n        const name = `${encodeURIComponent(key)}`;\n        const cookieList = document.cookie.split(\";\");\n        for(let i = 0; i < cookieList.length; i++){\n            const cookie = cookieList[i];\n            const [key, ...rest] = decodeURIComponent(cookie).trim().split(\"=\");\n            const value = rest.join(\"=\");\n            if (key === name) {\n                return value;\n            }\n        }\n        return \"\";\n    }\n    setItem(key, value, cookieLifeDays, secure = true) {\n        let cookieStr = `${encodeURIComponent(key)}=${encodeURIComponent(value)};path=/;SameSite=Lax;`;\n        if (cookieLifeDays) {\n            const expireTime = getCookieExpirationTime(cookieLifeDays);\n            cookieStr += `expires=${expireTime};`;\n        }\n        if (secure) {\n            cookieStr += \"Secure;\";\n        }\n        document.cookie = cookieStr;\n    }\n    removeItem(key) {\n        // Setting expiration to -1 removes it\n        this.setItem(key, \"\", -1);\n    }\n    getKeys() {\n        const cookieList = document.cookie.split(\";\");\n        const keys = [];\n        cookieList.forEach((cookie)=>{\n            const cookieParts = decodeURIComponent(cookie).trim().split(\"=\");\n            keys.push(cookieParts[0]);\n        });\n        return keys;\n    }\n    containsKey(key) {\n        return this.getKeys().includes(key);\n    }\n}\n/**\r\n * Get cookie expiration time\r\n * @param cookieLifeDays\r\n */ function getCookieExpirationTime(cookieLifeDays) {\n    const today = new Date();\n    const expr = new Date(today.getTime() + cookieLifeDays * COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n}\n //# sourceMappingURL=CookieStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL0Nvb2tpZVN0b3JhZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsMkRBQTJEO0FBQzNELE1BQU1BLHlCQUF5QixLQUFLLEtBQUssS0FBSztBQUM5QyxNQUFNQztJQUNGQyxRQUFRQyxHQUFHLEVBQUU7UUFDVCxNQUFNQyxPQUFPLENBQUMsRUFBRUMsbUJBQW1CRixLQUFLLENBQUM7UUFDekMsTUFBTUcsYUFBYUMsU0FBU0MsTUFBTSxDQUFDQyxLQUFLLENBQUM7UUFDekMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLFdBQVdLLE1BQU0sRUFBRUQsSUFBSztZQUN4QyxNQUFNRixTQUFTRixVQUFVLENBQUNJLEVBQUU7WUFDNUIsTUFBTSxDQUFDUCxLQUFLLEdBQUdTLEtBQUssR0FBR0MsbUJBQW1CTCxRQUFRTSxJQUFJLEdBQUdMLEtBQUssQ0FBQztZQUMvRCxNQUFNTSxRQUFRSCxLQUFLSSxJQUFJLENBQUM7WUFDeEIsSUFBSWIsUUFBUUMsTUFBTTtnQkFDZCxPQUFPVztZQUNYO1FBQ0o7UUFDQSxPQUFPO0lBQ1g7SUFDQUUsUUFBUWQsR0FBRyxFQUFFWSxLQUFLLEVBQUVHLGNBQWMsRUFBRUMsU0FBUyxJQUFJLEVBQUU7UUFDL0MsSUFBSUMsWUFBWSxDQUFDLEVBQUVmLG1CQUFtQkYsS0FBSyxDQUFDLEVBQUVFLG1CQUFtQlUsT0FBTyxxQkFBcUIsQ0FBQztRQUM5RixJQUFJRyxnQkFBZ0I7WUFDaEIsTUFBTUcsYUFBYUMsd0JBQXdCSjtZQUMzQ0UsYUFBYSxDQUFDLFFBQVEsRUFBRUMsV0FBVyxDQUFDLENBQUM7UUFDekM7UUFDQSxJQUFJRixRQUFRO1lBQ1JDLGFBQWE7UUFDakI7UUFDQWIsU0FBU0MsTUFBTSxHQUFHWTtJQUN0QjtJQUNBRyxXQUFXcEIsR0FBRyxFQUFFO1FBQ1osc0NBQXNDO1FBQ3RDLElBQUksQ0FBQ2MsT0FBTyxDQUFDZCxLQUFLLElBQUksQ0FBQztJQUMzQjtJQUNBcUIsVUFBVTtRQUNOLE1BQU1sQixhQUFhQyxTQUFTQyxNQUFNLENBQUNDLEtBQUssQ0FBQztRQUN6QyxNQUFNZ0IsT0FBTyxFQUFFO1FBQ2ZuQixXQUFXb0IsT0FBTyxDQUFDLENBQUNsQjtZQUNoQixNQUFNbUIsY0FBY2QsbUJBQW1CTCxRQUFRTSxJQUFJLEdBQUdMLEtBQUssQ0FBQztZQUM1RGdCLEtBQUtHLElBQUksQ0FBQ0QsV0FBVyxDQUFDLEVBQUU7UUFDNUI7UUFDQSxPQUFPRjtJQUNYO0lBQ0FJLFlBQVkxQixHQUFHLEVBQUU7UUFDYixPQUFPLElBQUksQ0FBQ3FCLE9BQU8sR0FBR00sUUFBUSxDQUFDM0I7SUFDbkM7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNtQix3QkFBd0JKLGNBQWM7SUFDM0MsTUFBTWEsUUFBUSxJQUFJQztJQUNsQixNQUFNQyxPQUFPLElBQUlELEtBQUtELE1BQU1HLE9BQU8sS0FBS2hCLGlCQUFpQmxCO0lBQ3pELE9BQU9pQyxLQUFLRSxXQUFXO0FBQzNCO0FBRWtELENBQ2xELDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9jYWNoZS9Db29raWVTdG9yYWdlLm1qcz85NTlhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8vIENvb2tpZSBsaWZlIGNhbGN1bGF0aW9uIChob3VycyAqIG1pbnV0ZXMgKiBzZWNvbmRzICogbXMpXHJcbmNvbnN0IENPT0tJRV9MSUZFX01VTFRJUExJRVIgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xyXG5jbGFzcyBDb29raWVTdG9yYWdlIHtcclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfWA7XHJcbiAgICAgICAgY29uc3QgY29va2llTGlzdCA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdChcIjtcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvb2tpZSA9IGNvb2tpZUxpc3RbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZSkudHJpbSgpLnNwbGl0KFwiPVwiKTtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXN0LmpvaW4oXCI9XCIpO1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcbiAgICBzZXRJdGVtKGtleSwgdmFsdWUsIGNvb2tpZUxpZmVEYXlzLCBzZWN1cmUgPSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IGNvb2tpZVN0ciA9IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9O3BhdGg9LztTYW1lU2l0ZT1MYXg7YDtcclxuICAgICAgICBpZiAoY29va2llTGlmZURheXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZXhwaXJlVGltZSA9IGdldENvb2tpZUV4cGlyYXRpb25UaW1lKGNvb2tpZUxpZmVEYXlzKTtcclxuICAgICAgICAgICAgY29va2llU3RyICs9IGBleHBpcmVzPSR7ZXhwaXJlVGltZX07YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNlY3VyZSkge1xyXG4gICAgICAgICAgICBjb29raWVTdHIgKz0gXCJTZWN1cmU7XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVN0cjtcclxuICAgIH1cclxuICAgIHJlbW92ZUl0ZW0oa2V5KSB7XHJcbiAgICAgICAgLy8gU2V0dGluZyBleHBpcmF0aW9uIHRvIC0xIHJlbW92ZXMgaXRcclxuICAgICAgICB0aGlzLnNldEl0ZW0oa2V5LCBcIlwiLCAtMSk7XHJcbiAgICB9XHJcbiAgICBnZXRLZXlzKCkge1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZUxpc3QgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoXCI7XCIpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBbXTtcclxuICAgICAgICBjb29raWVMaXN0LmZvckVhY2goKGNvb2tpZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb29raWVQYXJ0cyA9IGRlY29kZVVSSUNvbXBvbmVudChjb29raWUpLnRyaW0oKS5zcGxpdChcIj1cIik7XHJcbiAgICAgICAgICAgIGtleXMucHVzaChjb29raWVQYXJ0c1swXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICB9XHJcbiAgICBjb250YWluc0tleShrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRLZXlzKCkuaW5jbHVkZXMoa2V5KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogR2V0IGNvb2tpZSBleHBpcmF0aW9uIHRpbWVcclxuICogQHBhcmFtIGNvb2tpZUxpZmVEYXlzXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb29raWVFeHBpcmF0aW9uVGltZShjb29raWVMaWZlRGF5cykge1xyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgZXhwciA9IG5ldyBEYXRlKHRvZGF5LmdldFRpbWUoKSArIGNvb2tpZUxpZmVEYXlzICogQ09PS0lFX0xJRkVfTVVMVElQTElFUik7XHJcbiAgICByZXR1cm4gZXhwci50b1VUQ1N0cmluZygpO1xyXG59XG5cbmV4cG9ydCB7IENvb2tpZVN0b3JhZ2UsIGdldENvb2tpZUV4cGlyYXRpb25UaW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db29raWVTdG9yYWdlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDT09LSUVfTElGRV9NVUxUSVBMSUVSIiwiQ29va2llU3RvcmFnZSIsImdldEl0ZW0iLCJrZXkiLCJuYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29va2llTGlzdCIsImRvY3VtZW50IiwiY29va2llIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwicmVzdCIsImRlY29kZVVSSUNvbXBvbmVudCIsInRyaW0iLCJ2YWx1ZSIsImpvaW4iLCJzZXRJdGVtIiwiY29va2llTGlmZURheXMiLCJzZWN1cmUiLCJjb29raWVTdHIiLCJleHBpcmVUaW1lIiwiZ2V0Q29va2llRXhwaXJhdGlvblRpbWUiLCJyZW1vdmVJdGVtIiwiZ2V0S2V5cyIsImtleXMiLCJmb3JFYWNoIiwiY29va2llUGFydHMiLCJwdXNoIiwiY29udGFpbnNLZXkiLCJpbmNsdWRlcyIsInRvZGF5IiwiRGF0ZSIsImV4cHIiLCJnZXRUaW1lIiwidG9VVENTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseStorage: () => (/* binding */ DatabaseStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */ class DatabaseStorage {\n    constructor(){\n        this.dbName = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_NAME;\n        this.version = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_VERSION;\n        this.tableName = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n    /**\r\n     * Opens IndexedDB instance.\r\n     */ async open() {\n        return new Promise((resolve, reject)=>{\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\"upgradeneeded\", (e)=>{\n                const event = e;\n                event.target.result.createObjectStore(this.tableName);\n            });\n            openDB.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\", ()=>reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseUnavailable)));\n        });\n    }\n    /**\r\n     * Closes the connection to IndexedDB database when all pending transactions\r\n     * complete.\r\n     */ closeConnection() {\n        const db = this.db;\n        if (db && this.dbOpen) {\n            db.close();\n            this.dbOpen = false;\n        }\n    }\n    /**\r\n     * Opens database if it's not already open\r\n     */ async validateDbIsOpen() {\n        if (!this.dbOpen) {\n            return this.open();\n        }\n    }\n    /**\r\n     * Retrieves item from IndexedDB instance.\r\n     * @param key\r\n     */ async getItem(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n            dbGet.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n            dbGet.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Adds item to IndexedDB under given key\r\n     * @param key\r\n     * @param payload\r\n     */ async setItem(key, payload) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbPut = objectStore.put(payload, key);\n            dbPut.addEventListener(\"success\", ()=>{\n                this.closeConnection();\n                resolve();\n            });\n            dbPut.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Removes item from IndexedDB under given key\r\n     * @param key\r\n     */ async removeItem(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n            dbDelete.addEventListener(\"success\", ()=>{\n                this.closeConnection();\n                resolve();\n            });\n            dbDelete.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Get all the keys from the storage object as an iterable array of strings.\r\n     */ async getKeys() {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n            dbGetKeys.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n            dbGetKeys.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     *\r\n     * Checks whether there is an object under the search key in the object store\r\n     */ async containsKey(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n            dbContainsKey.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result === 1);\n            });\n            dbContainsKey.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n     * with IndexedDB database versions.\r\n     */ async deleteDatabase() {\n        // Check if database being deleted exists\n        if (this.db && this.dbOpen) {\n            this.closeConnection();\n        }\n        return new Promise((resolve, reject)=>{\n            const deleteDbRequest = window.indexedDB.deleteDatabase(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_NAME);\n            const id = setTimeout(()=>reject(false), 200); // Reject if events aren't raised within 200ms\n            deleteDbRequest.addEventListener(\"success\", ()=>{\n                clearTimeout(id);\n                return resolve(true);\n            });\n            deleteDbRequest.addEventListener(\"blocked\", ()=>{\n                clearTimeout(id);\n                return resolve(true);\n            });\n            deleteDbRequest.addEventListener(\"error\", ()=>{\n                clearTimeout(id);\n                return reject(false);\n            });\n        });\n    }\n}\n //# sourceMappingURL=DatabaseStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalStorage: () => (/* binding */ LocalStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class LocalStorage {\n    constructor(){\n        if (!window.localStorage) {\n            throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.storageNotSupported);\n        }\n    }\n    getItem(key) {\n        return window.localStorage.getItem(key);\n    }\n    setItem(key, value) {\n        window.localStorage.setItem(key, value);\n    }\n    removeItem(key) {\n        window.localStorage.removeItem(key);\n    }\n    getKeys() {\n        return Object.keys(window.localStorage);\n    }\n    containsKey(key) {\n        return window.localStorage.hasOwnProperty(key);\n    }\n}\n //# sourceMappingURL=LocalStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL0xvY2FsU3RvcmFnZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ2lHO0FBQ1g7QUFFdEY7OztDQUdDLEdBQ0QsTUFBTUU7SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsT0FBT0MsWUFBWSxFQUFFO1lBQ3RCLE1BQU1MLDZHQUFtQ0EsQ0FBQ0MsOEZBQW1CQTtRQUNqRTtJQUNKO0lBQ0FLLFFBQVFDLEdBQUcsRUFBRTtRQUNULE9BQU9ILE9BQU9DLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQztJQUN2QztJQUNBQyxRQUFRRCxHQUFHLEVBQUVFLEtBQUssRUFBRTtRQUNoQkwsT0FBT0MsWUFBWSxDQUFDRyxPQUFPLENBQUNELEtBQUtFO0lBQ3JDO0lBQ0FDLFdBQVdILEdBQUcsRUFBRTtRQUNaSCxPQUFPQyxZQUFZLENBQUNLLFVBQVUsQ0FBQ0g7SUFDbkM7SUFDQUksVUFBVTtRQUNOLE9BQU9DLE9BQU9DLElBQUksQ0FBQ1QsT0FBT0MsWUFBWTtJQUMxQztJQUNBUyxZQUFZUCxHQUFHLEVBQUU7UUFDYixPQUFPSCxPQUFPQyxZQUFZLENBQUNVLGNBQWMsQ0FBQ1I7SUFDOUM7QUFDSjtBQUV3QixDQUN4Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvY2FjaGUvTG9jYWxTdG9yYWdlLm1qcz9kMDYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgc3RvcmFnZU5vdFN1cHBvcnRlZCB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIExvY2FsU3RvcmFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5sb2NhbFN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3Ioc3RvcmFnZU5vdFN1cHBvcnRlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0SXRlbShrZXkpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICB9XHJcbiAgICBzZXRJdGVtKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVJdGVtKGtleSkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5cygpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMod2luZG93LmxvY2FsU3RvcmFnZSk7XHJcbiAgICB9XHJcbiAgICBjb250YWluc0tleShrZXkpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IExvY2FsU3RvcmFnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9jYWxTdG9yYWdlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvciIsInN0b3JhZ2VOb3RTdXBwb3J0ZWQiLCJMb2NhbFN0b3JhZ2UiLCJjb25zdHJ1Y3RvciIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJrZXkiLCJzZXRJdGVtIiwidmFsdWUiLCJyZW1vdmVJdGVtIiwiZ2V0S2V5cyIsIk9iamVjdCIsImtleXMiLCJjb250YWluc0tleSIsImhhc093blByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoryStorage: () => (/* binding */ MemoryStorage)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class MemoryStorage {\n    constructor(){\n        this.cache = new Map();\n    }\n    getItem(key) {\n        return this.cache.get(key) || null;\n    }\n    setItem(key, value) {\n        this.cache.set(key, value);\n    }\n    removeItem(key) {\n        this.cache.delete(key);\n    }\n    getKeys() {\n        const cacheKeys = [];\n        this.cache.forEach((value, key)=>{\n            cacheKeys.push(key);\n        });\n        return cacheKeys;\n    }\n    containsKey(key) {\n        return this.cache.has(key);\n    }\n    clear() {\n        this.cache.clear();\n    }\n}\n //# sourceMappingURL=MemoryStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL01lbW9yeVN0b3JhZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUM7SUFDckI7SUFDQUMsUUFBUUMsR0FBRyxFQUFFO1FBQ1QsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0ksR0FBRyxDQUFDRCxRQUFRO0lBQ2xDO0lBQ0FFLFFBQVFGLEdBQUcsRUFBRUcsS0FBSyxFQUFFO1FBQ2hCLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxHQUFHLENBQUNKLEtBQUtHO0lBQ3hCO0lBQ0FFLFdBQVdMLEdBQUcsRUFBRTtRQUNaLElBQUksQ0FBQ0gsS0FBSyxDQUFDUyxNQUFNLENBQUNOO0lBQ3RCO0lBQ0FPLFVBQVU7UUFDTixNQUFNQyxZQUFZLEVBQUU7UUFDcEIsSUFBSSxDQUFDWCxLQUFLLENBQUNZLE9BQU8sQ0FBQyxDQUFDTixPQUFPSDtZQUN2QlEsVUFBVUUsSUFBSSxDQUFDVjtRQUNuQjtRQUNBLE9BQU9RO0lBQ1g7SUFDQUcsWUFBWVgsR0FBRyxFQUFFO1FBQ2IsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ2UsR0FBRyxDQUFDWjtJQUMxQjtJQUNBYSxRQUFRO1FBQ0osSUFBSSxDQUFDaEIsS0FBSyxDQUFDZ0IsS0FBSztJQUNwQjtBQUNKO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9jYWNoZS9NZW1vcnlTdG9yYWdlLm1qcz9jMDE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIE1lbW9yeVN0b3JhZ2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSkgfHwgbnVsbDtcclxuICAgIH1cclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlSXRlbShrZXkpIHtcclxuICAgICAgICB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5cygpIHtcclxuICAgICAgICBjb25zdCBjYWNoZUtleXMgPSBbXTtcclxuICAgICAgICB0aGlzLmNhY2hlLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgY2FjaGVLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2FjaGVLZXlzO1xyXG4gICAgfVxyXG4gICAgY29udGFpbnNLZXkoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSk7XHJcbiAgICB9XHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTWVtb3J5U3RvcmFnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVtb3J5U3RvcmFnZS5tanMubWFwXG4iXSwibmFtZXMiOlsiTWVtb3J5U3RvcmFnZSIsImNvbnN0cnVjdG9yIiwiY2FjaGUiLCJNYXAiLCJnZXRJdGVtIiwia2V5IiwiZ2V0Iiwic2V0SXRlbSIsInZhbHVlIiwic2V0IiwicmVtb3ZlSXRlbSIsImRlbGV0ZSIsImdldEtleXMiLCJjYWNoZUtleXMiLCJmb3JFYWNoIiwicHVzaCIsImNvbnRhaW5zS2V5IiwiaGFzIiwiY2xlYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionStorage: () => (/* binding */ SessionStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SessionStorage {\n    constructor(){\n        if (!window.sessionStorage) {\n            throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.storageNotSupported);\n        }\n    }\n    getItem(key) {\n        return window.sessionStorage.getItem(key);\n    }\n    setItem(key, value) {\n        window.sessionStorage.setItem(key, value);\n    }\n    removeItem(key) {\n        window.sessionStorage.removeItem(key);\n    }\n    getKeys() {\n        return Object.keys(window.sessionStorage);\n    }\n    containsKey(key) {\n        return window.sessionStorage.hasOwnProperty(key);\n    }\n}\n //# sourceMappingURL=SessionStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL1Nlc3Npb25TdG9yYWdlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDaUc7QUFDWDtBQUV0Rjs7O0NBR0MsR0FDRCxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxPQUFPQyxjQUFjLEVBQUU7WUFDeEIsTUFBTUwsNkdBQW1DQSxDQUFDQyw4RkFBbUJBO1FBQ2pFO0lBQ0o7SUFDQUssUUFBUUMsR0FBRyxFQUFFO1FBQ1QsT0FBT0gsT0FBT0MsY0FBYyxDQUFDQyxPQUFPLENBQUNDO0lBQ3pDO0lBQ0FDLFFBQVFELEdBQUcsRUFBRUUsS0FBSyxFQUFFO1FBQ2hCTCxPQUFPQyxjQUFjLENBQUNHLE9BQU8sQ0FBQ0QsS0FBS0U7SUFDdkM7SUFDQUMsV0FBV0gsR0FBRyxFQUFFO1FBQ1pILE9BQU9DLGNBQWMsQ0FBQ0ssVUFBVSxDQUFDSDtJQUNyQztJQUNBSSxVQUFVO1FBQ04sT0FBT0MsT0FBT0MsSUFBSSxDQUFDVCxPQUFPQyxjQUFjO0lBQzVDO0lBQ0FTLFlBQVlQLEdBQUcsRUFBRTtRQUNiLE9BQU9ILE9BQU9DLGNBQWMsQ0FBQ1UsY0FBYyxDQUFDUjtJQUNoRDtBQUNKO0FBRTBCLENBQzFCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9jYWNoZS9TZXNzaW9uU3RvcmFnZS5tanM/MzllYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IHN0b3JhZ2VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBTZXNzaW9uU3RvcmFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5zZXNzaW9uU3RvcmFnZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvcihzdG9yYWdlTm90U3VwcG9ydGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRJdGVtKGtleSkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgfVxyXG4gICAgc2V0SXRlbShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVJdGVtKGtleSkge1xyXG4gICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICB9XHJcbiAgICBnZXRLZXlzKCkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UpO1xyXG4gICAgfVxyXG4gICAgY29udGFpbnNLZXkoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFNlc3Npb25TdG9yYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXNzaW9uU3RvcmFnZS5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IiLCJzdG9yYWdlTm90U3VwcG9ydGVkIiwiU2Vzc2lvblN0b3JhZ2UiLCJjb25zdHJ1Y3RvciIsIndpbmRvdyIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsImtleSIsInNldEl0ZW0iLCJ2YWx1ZSIsInJlbW92ZUl0ZW0iLCJnZXRLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImNvbnRhaW5zS2V5IiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenCache: () => (/* binding */ TokenCache)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Token cache manager\r\n */ class TokenCache {\n    constructor(configuration, storage, logger, cryptoObj){\n        this.isBrowserEnvironment = \"undefined\" !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n    // Move getAllAccounts here and cache utility APIs\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */ loadExternalTokens(request, response, options) {\n        if (!this.isBrowserEnvironment) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nonBrowserEnvironment);\n        }\n        const idTokenClaims = response.id_token ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.extractTokenClaims(response.id_token, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode) : undefined;\n        const authorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n        };\n        const authority = request.authority ? new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Authority(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Authority.generateAuthority(request.authority, request.azureCloudOptions), this.config.system.networkClient, this.storage, authorityOptions, this.logger, request.correlationId || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.createNewGuid)()) : undefined;\n        const cacheRecordAccount = this.loadAccount(request, options.clientInfo || response.client_info || \"\", idTokenClaims, authority);\n        const idToken = this.loadIdToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm);\n        const accessToken = this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm, options);\n        const refreshToken = this.loadRefreshToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment);\n        return this.generateAuthenticationResult(request, {\n            account: cacheRecordAccount,\n            idToken,\n            accessToken,\n            refreshToken\n        }, idTokenClaims, authority);\n    }\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */ loadAccount(request, clientInfo, idTokenClaims, authority) {\n        this.logger.verbose(\"TokenCache - loading account\");\n        if (request.account) {\n            const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AccountEntity.createFromAccountInfo(request.account);\n            this.storage.setAccount(accountEntity);\n            return accountEntity;\n        } else if (!authority || !clientInfo && !idTokenClaims) {\n            this.logger.error(\"TokenCache - if an account is not provided on the request, authority and either clientInfo or idToken must be provided instead.\");\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.unableToLoadToken);\n        }\n        const homeAccountId = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n        const claimsTenantId = idTokenClaims?.tid;\n        const cachedAccount = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.buildAccountToCache)(this.storage, authority, homeAccountId, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode, idTokenClaims, clientInfo, authority.hostnameAndPort, claimsTenantId, undefined, undefined, this.logger);\n        this.storage.setAccount(cachedAccount);\n        return cachedAccount;\n    }\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */ loadIdToken(response, homeAccountId, environment, tenantId) {\n        if (!response.id_token) {\n            this.logger.verbose(\"TokenCache - no id token found in response\");\n            return null;\n        }\n        this.logger.verbose(\"TokenCache - loading id token\");\n        const idTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.createIdTokenEntity(homeAccountId, environment, response.id_token, this.config.auth.clientId, tenantId);\n        this.storage.setIdTokenCredential(idTokenEntity);\n        return idTokenEntity;\n    }\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */ loadAccessToken(request, response, homeAccountId, environment, tenantId, options) {\n        if (!response.access_token) {\n            this.logger.verbose(\"TokenCache - no access token found in response\");\n            return null;\n        } else if (!response.expires_in) {\n            this.logger.error(\"TokenCache - no expiration set on the access token. Cannot add it to the cache.\");\n            return null;\n        } else if (!response.scope && (!request.scopes || !request.scopes.length)) {\n            this.logger.error(\"TokenCache - scopes not specified in the request or response. Cannot add token to the cache.\");\n            return null;\n        }\n        this.logger.verbose(\"TokenCache - loading access token\");\n        const scopes = response.scope ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(response.scope) : new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet(request.scopes);\n        const expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n        const extendedExpiresOn = options.extendedExpiresOn || (response.ext_expires_in || response.expires_in) + new Date().getTime() / 1000;\n        const accessTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes.printScopes(), expiresOn, extendedExpiresOn, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode);\n        this.storage.setAccessTokenCredential(accessTokenEntity);\n        return accessTokenEntity;\n    }\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */ loadRefreshToken(response, homeAccountId, environment) {\n        if (!response.refresh_token) {\n            this.logger.verbose(\"TokenCache - no refresh token found in response\");\n            return null;\n        }\n        this.logger.verbose(\"TokenCache - loading refresh token\");\n        const refreshTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId, response.foci, undefined, response.refresh_token_expires_in);\n        this.storage.setRefreshTokenCredential(refreshTokenEntity);\n        return refreshTokenEntity;\n    }\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */ generateAuthenticationResult(request, cacheRecord, idTokenClaims, authority) {\n        let accessToken = \"\";\n        let responseScopes = [];\n        let expiresOn = null;\n        let extExpiresOn;\n        if (cacheRecord?.accessToken) {\n            accessToken = cacheRecord.accessToken.secret;\n            responseScopes = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n        const accountEntity = cacheRecord.account;\n        return {\n            authority: authority ? authority.canonicalAuthority : \"\",\n            uniqueId: cacheRecord.account.localAccountId,\n            tenantId: cacheRecord.account.realm,\n            scopes: responseScopes,\n            account: accountEntity.getAccountInfo(),\n            idToken: cacheRecord.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: true,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId || \"\",\n            requestId: \"\",\n            extExpiresOn: extExpiresOn,\n            familyId: cacheRecord.refreshToken?.familyId || \"\",\n            tokenType: cacheRecord?.accessToken?.tokenType || \"\",\n            state: request.state || \"\",\n            cloudGraphHostName: accountEntity.cloudGraphHostName || \"\",\n            msGraphHost: accountEntity.msGraphHost || \"\",\n            fromNativeBroker: false\n        };\n    }\n}\n //# sourceMappingURL=TokenCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/config/Configuration.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_IFRAME_TIMEOUT_MS: () => (/* binding */ DEFAULT_IFRAME_TIMEOUT_MS),\n/* harmony export */   DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS: () => (/* binding */ DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS),\n/* harmony export */   DEFAULT_POPUP_TIMEOUT_MS: () => (/* binding */ DEFAULT_POPUP_TIMEOUT_MS),\n/* harmony export */   DEFAULT_REDIRECT_TIMEOUT_MS: () => (/* binding */ DEFAULT_REDIRECT_TIMEOUT_MS),\n/* harmony export */   buildConfiguration: () => (/* binding */ buildConfiguration)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _navigation_NavigationClient_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../navigation/NavigationClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs\");\n/* harmony import */ var _network_FetchClient_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../network/FetchClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Default timeout for popup windows and iframes in milliseconds\nconst DEFAULT_POPUP_TIMEOUT_MS = 60000;\nconst DEFAULT_IFRAME_TIMEOUT_MS = 10000;\nconst DEFAULT_REDIRECT_TIMEOUT_MS = 30000;\nconst DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;\n/**\r\n * MSAL function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param auth\r\n * @param cache\r\n * @param system\r\n *\r\n * @returns Configuration object\r\n */ function buildConfiguration({ auth: userInputAuth, cache: userInputCache, system: userInputSystem, telemetry: userInputTelemetry }, isBrowserEnvironment) {\n    // Default auth options for browser\n    const DEFAULT_AUTH_OPTIONS = {\n        clientId: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        authority: `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.DEFAULT_AUTHORITY}`,\n        knownAuthorities: [],\n        cloudDiscoveryMetadata: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        authorityMetadata: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        redirectUri:  false ? 0 : \"\",\n        postLogoutRedirectUri: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        navigateToLoginRequestUrl: true,\n        clientCapabilities: [],\n        protocolMode: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ProtocolMode.AAD,\n        OIDCOptions: {\n            serverResponseType: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.ServerResponseType.FRAGMENT,\n            defaultScopes: [\n                _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.OPENID_SCOPE,\n                _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.PROFILE_SCOPE,\n                _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.OFFLINE_ACCESS_SCOPE\n            ]\n        },\n        azureCloudOptions: {\n            azureCloudInstance: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.AzureCloudInstance.None,\n            tenant: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        },\n        skipAuthorityMetadataCache: false,\n        supportsNestedAppAuth: false,\n        instanceAware: false\n    };\n    // Default cache options for browser\n    const DEFAULT_CACHE_OPTIONS = {\n        cacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.SessionStorage,\n        temporaryCacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.SessionStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage\n        cacheMigrationEnabled: userInputCache && userInputCache.cacheLocation === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.LocalStorage ? true : false,\n        claimsBasedCachingEnabled: false\n    };\n    // Default logger options for browser\n    const DEFAULT_LOGGER_OPTIONS = {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        loggerCallback: ()=>{\n        // allow users to not set logger call back\n        },\n        logLevel: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Info,\n        piiLoggingEnabled: false\n    };\n    // Default system options for browser\n    const DEFAULT_BROWSER_SYSTEM_OPTIONS = {\n        ..._azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_SYSTEM_OPTIONS,\n        loggerOptions: DEFAULT_LOGGER_OPTIONS,\n        networkClient: isBrowserEnvironment ? new _network_FetchClient_mjs__WEBPACK_IMPORTED_MODULE_6__.FetchClient() : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.StubbedNetworkModule,\n        navigationClient: new _navigation_NavigationClient_mjs__WEBPACK_IMPORTED_MODULE_8__.NavigationClient(),\n        loadFrameTimeout: 0,\n        // If loadFrameTimeout is provided, use that as default.\n        windowHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,\n        iframeHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,\n        navigateFrameWait: 0,\n        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,\n        asyncPopups: false,\n        allowRedirectInIframe: false,\n        allowNativeBroker: false,\n        nativeBrokerHandshakeTimeout: userInputSystem?.nativeBrokerHandshakeTimeout || DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,\n        pollIntervalMilliseconds: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserConstants.DEFAULT_POLL_INTERVAL_MS\n    };\n    const providedSystemOptions = {\n        ...DEFAULT_BROWSER_SYSTEM_OPTIONS,\n        ...userInputSystem,\n        loggerOptions: userInputSystem?.loggerOptions || DEFAULT_LOGGER_OPTIONS\n    };\n    const DEFAULT_TELEMETRY_OPTIONS = {\n        application: {\n            appName: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n            appVersion: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        },\n        client: new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.StubPerformanceClient()\n    };\n    // Throw an error if user has set OIDCOptions without being in OIDC protocol mode\n    if (userInputAuth?.protocolMode !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ProtocolMode.OIDC && userInputAuth?.OIDCOptions) {\n        const logger = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Logger(providedSystemOptions.loggerOptions);\n        logger.warning(JSON.stringify((0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.cannotSetOIDCOptions)));\n    }\n    // Throw an error if user has set allowNativeBroker to true without being in AAD protocol mode\n    if (userInputAuth?.protocolMode && userInputAuth.protocolMode !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ProtocolMode.AAD && providedSystemOptions?.allowNativeBroker) {\n        throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.cannotAllowNativeBroker);\n    }\n    const overlayedConfig = {\n        auth: {\n            ...DEFAULT_AUTH_OPTIONS,\n            ...userInputAuth,\n            OIDCOptions: {\n                ...DEFAULT_AUTH_OPTIONS.OIDCOptions,\n                ...userInputAuth?.OIDCOptions\n            }\n        },\n        cache: {\n            ...DEFAULT_CACHE_OPTIONS,\n            ...userInputCache\n        },\n        system: providedSystemOptions,\n        telemetry: {\n            ...DEFAULT_TELEMETRY_OPTIONS,\n            ...userInputTelemetry\n        }\n    };\n    return overlayedConfig;\n}\n //# sourceMappingURL=Configuration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createController: () => (/* binding */ createController),\n/* harmony export */   createV3Controller: () => (/* binding */ createV3Controller)\n/* harmony export */ });\n/* harmony import */ var _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operatingcontext/NestedAppOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs\");\n/* harmony import */ var _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operatingcontext/StandardOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs\");\n/* harmony import */ var _StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StandardController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs\");\n/* harmony import */ var _NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NestedAppAuthController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ async function createV3Controller(config, request) {\n    const standard = new _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardOperatingContext(config);\n    await standard.initialize();\n    return _StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__.StandardController.createController(standard, request);\n}\nasync function createController(config) {\n    const standard = new _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardOperatingContext(config);\n    const nestedApp = new _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__.NestedAppOperatingContext(config);\n    const operatingContexts = [\n        standard.initialize(),\n        nestedApp.initialize()\n    ];\n    await Promise.all(operatingContexts);\n    if (nestedApp.isAvailable() && config.auth.supportsNestedAppAuth) {\n        return _NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_3__.NestedAppAuthController.createController(nestedApp);\n    } else if (standard.isAvailable()) {\n        return _StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__.StandardController.createController(standard);\n    } else {\n        // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController\n        return null;\n    }\n}\n //# sourceMappingURL=ControllerFactory.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NvbnRyb2xsZXJzL0NvbnRyb2xsZXJGYWN0b3J5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDOEY7QUFDRjtBQUM5QjtBQUNVO0FBRXhFOzs7Q0FHQyxHQUNELGVBQWVJLG1CQUFtQkMsTUFBTSxFQUFFQyxPQUFPO0lBQzdDLE1BQU1DLFdBQVcsSUFBSU4sb0dBQXdCQSxDQUFDSTtJQUM5QyxNQUFNRSxTQUFTQyxVQUFVO0lBQ3pCLE9BQU9OLHVFQUFrQkEsQ0FBQ08sZ0JBQWdCLENBQUNGLFVBQVVEO0FBQ3pEO0FBQ0EsZUFBZUcsaUJBQWlCSixNQUFNO0lBQ2xDLE1BQU1FLFdBQVcsSUFBSU4sb0dBQXdCQSxDQUFDSTtJQUM5QyxNQUFNSyxZQUFZLElBQUlWLHNHQUF5QkEsQ0FBQ0s7SUFDaEQsTUFBTU0sb0JBQW9CO1FBQUNKLFNBQVNDLFVBQVU7UUFBSUUsVUFBVUYsVUFBVTtLQUFHO0lBQ3pFLE1BQU1JLFFBQVFDLEdBQUcsQ0FBQ0Y7SUFDbEIsSUFBSUQsVUFBVUksV0FBVyxNQUFNVCxPQUFPVSxJQUFJLENBQUNDLHFCQUFxQixFQUFFO1FBQzlELE9BQU9iLGlGQUF1QkEsQ0FBQ00sZ0JBQWdCLENBQUNDO0lBQ3BELE9BQ0ssSUFBSUgsU0FBU08sV0FBVyxJQUFJO1FBQzdCLE9BQU9aLHVFQUFrQkEsQ0FBQ08sZ0JBQWdCLENBQUNGO0lBQy9DLE9BQ0s7UUFDRCwwR0FBMEc7UUFDMUcsT0FBTztJQUNYO0FBQ0o7QUFFZ0QsQ0FDaEQsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NvbnRyb2xsZXJzL0NvbnRyb2xsZXJGYWN0b3J5Lm1qcz9lM2QwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dCB9IGZyb20gJy4uL29wZXJhdGluZ2NvbnRleHQvTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0IH0gZnJvbSAnLi4vb3BlcmF0aW5nY29udGV4dC9TdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IFN0YW5kYXJkQ29udHJvbGxlciB9IGZyb20gJy4vU3RhbmRhcmRDb250cm9sbGVyLm1qcyc7XG5pbXBvcnQgeyBOZXN0ZWRBcHBBdXRoQ29udHJvbGxlciB9IGZyb20gJy4vTmVzdGVkQXBwQXV0aENvbnRyb2xsZXIubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVYzQ29udHJvbGxlcihjb25maWcsIHJlcXVlc3QpIHtcclxuICAgIGNvbnN0IHN0YW5kYXJkID0gbmV3IFN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dChjb25maWcpO1xyXG4gICAgYXdhaXQgc3RhbmRhcmQuaW5pdGlhbGl6ZSgpO1xyXG4gICAgcmV0dXJuIFN0YW5kYXJkQ29udHJvbGxlci5jcmVhdGVDb250cm9sbGVyKHN0YW5kYXJkLCByZXF1ZXN0KTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVDb250cm9sbGVyKGNvbmZpZykge1xyXG4gICAgY29uc3Qgc3RhbmRhcmQgPSBuZXcgU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0KGNvbmZpZyk7XHJcbiAgICBjb25zdCBuZXN0ZWRBcHAgPSBuZXcgTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dChjb25maWcpO1xyXG4gICAgY29uc3Qgb3BlcmF0aW5nQ29udGV4dHMgPSBbc3RhbmRhcmQuaW5pdGlhbGl6ZSgpLCBuZXN0ZWRBcHAuaW5pdGlhbGl6ZSgpXTtcclxuICAgIGF3YWl0IFByb21pc2UuYWxsKG9wZXJhdGluZ0NvbnRleHRzKTtcclxuICAgIGlmIChuZXN0ZWRBcHAuaXNBdmFpbGFibGUoKSAmJiBjb25maWcuYXV0aC5zdXBwb3J0c05lc3RlZEFwcEF1dGgpIHtcclxuICAgICAgICByZXR1cm4gTmVzdGVkQXBwQXV0aENvbnRyb2xsZXIuY3JlYXRlQ29udHJvbGxlcihuZXN0ZWRBcHApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoc3RhbmRhcmQuaXNBdmFpbGFibGUoKSkge1xyXG4gICAgICAgIHJldHVybiBTdGFuZGFyZENvbnRyb2xsZXIuY3JlYXRlQ29udHJvbGxlcihzdGFuZGFyZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBTaW5jZSBuZWl0aGVyIG9mIHRoZSBhY3R1YWwgb3BlcmF0aW5nIGNvbnRleHRzIGFyZSBhdmFpbGFibGUga2VlcCB0aGUgVW5rbm93bk9wZXJhdGluZ0NvbnRleHRDb250cm9sbGVyXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgY3JlYXRlQ29udHJvbGxlciwgY3JlYXRlVjNDb250cm9sbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250cm9sbGVyRmFjdG9yeS5tanMubWFwXG4iXSwibmFtZXMiOlsiTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dCIsIlN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dCIsIlN0YW5kYXJkQ29udHJvbGxlciIsIk5lc3RlZEFwcEF1dGhDb250cm9sbGVyIiwiY3JlYXRlVjNDb250cm9sbGVyIiwiY29uZmlnIiwicmVxdWVzdCIsInN0YW5kYXJkIiwiaW5pdGlhbGl6ZSIsImNyZWF0ZUNvbnRyb2xsZXIiLCJuZXN0ZWRBcHAiLCJvcGVyYXRpbmdDb250ZXh0cyIsIlByb21pc2UiLCJhbGwiLCJpc0F2YWlsYWJsZSIsImF1dGgiLCJzdXBwb3J0c05lc3RlZEFwcEF1dGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppAuthController: () => (/* binding */ NestedAppAuthController)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/CryptoOps.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs\");\n/* harmony import */ var _naa_mapping_NestedAppAuthAdapter_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../naa/mapping/NestedAppAuthAdapter.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs\");\n/* harmony import */ var _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/NestedAppAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs\");\n/* harmony import */ var _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../event/EventHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cache/BrowserCacheManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs\");\n/* harmony import */ var _cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/AccountManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NestedAppAuthController {\n    constructor(operatingContext){\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment() ? new _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_0__.CryptoOps(this.logger, this.performanceClient, true) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CRYPTO_IMPLEMENTATION;\n        // Initialize the browser storage class.\n        this.browserStorage = this.operatingContext.isBrowserEnvironment() ? new _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.buildStaticAuthorityOptions)(this.config.auth)) : (0,_cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_BROWSER_CACHE_MANAGER)(this.config.auth.clientId, this.logger);\n        this.eventHandler = new _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_4__.EventHandler(this.logger);\n        this.nestedAppAuthAdapter = new _naa_mapping_NestedAppAuthAdapter_mjs__WEBPACK_IMPORTED_MODULE_5__.NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n        // Set the active account if available\n        const accountContext = this.bridgeProxy.getAccountContext();\n        if (accountContext) {\n            const cachedAccount = (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccount)(accountContext, this.logger, this.browserStorage);\n            (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.setActiveAccount)(cachedAccount, this.browserStorage);\n        }\n    }\n    /**\r\n     * Factory function to create a new instance of NestedAppAuthController\r\n     * @param operatingContext\r\n     * @returns Promise<IController>\r\n     */ static async createController(operatingContext) {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n    /**\r\n     * Specific implementation of initialize function for NestedAppAuthController\r\n     * @returns\r\n     */ initialize() {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n    /**\r\n     * Validate the incoming request and add correlationId if not present\r\n     * @param request\r\n     * @returns\r\n     */ ensureValidRequest(request) {\n        if (request?.correlationId) {\n            return request;\n        }\n        return {\n            ...request,\n            correlationId: this.browserCrypto.createNewGuid()\n        };\n    }\n    /**\r\n     * Internal implementation of acquireTokenInteractive flow\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenInteractive(request) {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Popup, validRequest);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenPopup, validRequest.correlationId);\n        atPopupMeasurement?.add({\n            nestedAppAuthRequest: true\n        });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(naaRequest);\n            const result = {\n                ...this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp)\n            };\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Popup, result);\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length\n            });\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Popup, null, e);\n            atPopupMeasurement.end({\n                success: false\n            }, e);\n            throw error;\n        }\n    }\n    /**\r\n     * Internal implementation of acquireTokenSilent flow\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenSilentInternal(request) {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, validRequest);\n        // Look for tokens in the cache first\n        const result = await this.acquireTokenFromCache(validRequest);\n        if (result) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, result);\n            return result;\n        }\n        // proceed with acquiring tokens via the host\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SsoSilent, validRequest.correlationId);\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0\n        });\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true\n        });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, result);\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, null, e);\n            ssoSilentMeasurement?.end({\n                success: false\n            }, e);\n            throw error;\n        }\n    }\n    /**\r\n     * acquires tokens from cache\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenFromCache(request) {\n        const atsMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilent, request.correlationId);\n        atsMeasurement?.add({\n            nestedAppAuthRequest: true\n        });\n        // if the request has claims, we cannot look up in the cache\n        if (request.claims) {\n            this.logger.verbose(\"Claims are present in the request, skipping cache lookup\");\n            return null;\n        }\n        // respect cache lookup policy\n        let result = null;\n        switch(request.cacheLookupPolicy){\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.CacheLookupPolicy.Default:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.CacheLookupPolicy.AccessToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.CacheLookupPolicy.AccessTokenAndRefreshToken:\n                result = await this.acquireTokenFromCacheInternal(request);\n                break;\n            default:\n                return null;\n        }\n        if (result) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, result);\n            atsMeasurement?.add({\n                accessTokenSize: result?.accessToken.length,\n                idTokenSize: result?.idToken.length\n            });\n            atsMeasurement?.end({\n                success: true\n            });\n            return result;\n        }\n        this.logger.error(\"Cached tokens are not found for the account, proceeding with silent token request.\");\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, null);\n        atsMeasurement?.end({\n            success: false\n        });\n        return null;\n    }\n    /**\r\n     *\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenFromCacheInternal(request) {\n        const accountContext = this.bridgeProxy.getAccountContext();\n        let currentAccount = null;\n        if (accountContext) {\n            const hubAccount = (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccount)(accountContext, this.logger, this.browserStorage);\n            // always prioritize for hub account context, the reqirement of `request.account` will be removed soon\n            currentAccount = hubAccount || request.account;\n        }\n        // fall back to brokering if no cached account is found\n        if (!currentAccount) {\n            this.logger.verbose(\"No active account found, falling back to the host\");\n            return Promise.resolve(null);\n        }\n        this.logger.verbose(\"active account found, attempting to acquire token silently\");\n        const authRequest = {\n            ...request,\n            correlationId: request.correlationId || this.browserCrypto.createNewGuid(),\n            authority: request.authority || currentAccount.environment,\n            scopes: request.scopes?.length ? request.scopes : [\n                ..._azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.OIDC_DEFAULT_SCOPES\n            ]\n        };\n        // fetch access token and check for expiry\n        const tokenKeys = this.browserStorage.getTokenKeys();\n        const cachedAccessToken = this.browserStorage.getAccessToken(currentAccount, authRequest, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);\n        // If there is no access token, log it and return null\n        if (!cachedAccessToken) {\n            this.logger.verbose(\"No cached access token found\");\n            return Promise.resolve(null);\n        } else if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.wasClockTurnedBack(cachedAccessToken.cachedAt) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.isTokenExpired(cachedAccessToken.expiresOn, this.config.system.tokenRenewalOffsetSeconds)) {\n            this.logger.verbose(\"Cached access token has expired\");\n            return Promise.resolve(null);\n        }\n        const cachedIdToken = this.browserStorage.getIdToken(currentAccount, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);\n        if (!cachedIdToken) {\n            this.logger.verbose(\"No cached id token found\");\n            return Promise.resolve(null);\n        }\n        return this.nestedAppAuthAdapter.toAuthenticationResultFromCache(currentAccount, cachedIdToken, cachedAccessToken, authRequest, authRequest.correlationId);\n    }\n    /**\r\n     * acquireTokenPopup flow implementation\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenPopup(request) {\n        return this.acquireTokenInteractive(request);\n    }\n    /**\r\n     * acquireTokenRedirect flow is not supported in nested app auth\r\n     * @param request\r\n     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * acquireTokenSilent flow implementation\r\n     * @param silentRequest\r\n     * @returns\r\n     */ async acquireTokenSilent(silentRequest) {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n    /**\r\n     * Hybrid flow is not currently supported in nested app auth\r\n     * @param request\r\n     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * acquireTokenNative flow is not currently supported in nested app auth\r\n     * @param request\r\n     * @param apiId\r\n     * @param accountId\r\n     */ acquireTokenNative(request, apiId, accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * acquireTokenByRefreshToken flow is not currently supported in nested app auth\r\n     * @param commonRequest\r\n     * @param silentRequest\r\n     */ acquireTokenByRefreshToken(commonRequest, silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     * @param eventTypes\r\n     */ addEventCallback(callback, eventTypes) {\n        return this.eventHandler.addEventCallback(callback, eventTypes);\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // #region Account APIs\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAllAccounts)(this.logger, this.browserStorage, this.isBrowserEnv(), accountFilter);\n    }\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */ getAccount(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccount)(accountFilter, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param username\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByUsername(username) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccountByUsername)(username, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByHomeId(homeAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccountByHomeId)(homeAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByLocalId(localAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccountByLocalId)(localAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        /*\r\n         * StandardController uses this to allow the developer to set the active account\r\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\r\n         */ return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.setActiveAccount)(account, this.browserStorage);\n    }\n    /**\r\n     * Gets the currently active account\r\n     */ getActiveAccount() {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getActiveAccount)(this.browserStorage);\n    }\n    // #endregion\n    handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return Promise.resolve(null);\n    }\n    loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return this.acquireTokenInteractive(request || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_REQUEST);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        return this.acquireTokenSilentInternal(request);\n    }\n    getTokenCache() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * Returns the logger instance\r\n     */ getLogger() {\n        return this.logger;\n    }\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */ setLogger(logger) {\n        this.logger = logger;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku, version) {\n        /*\r\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\r\n         * we do nothing here\r\n         */ return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient) {\n        this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n    }\n    getConfiguration() {\n        return this.config;\n    }\n    isBrowserEnv() {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto() {\n        return this.browserCrypto;\n    }\n    getPerformanceClient() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    getRedirectResponse() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    async hydrateCache(result, request) {\n        this.logger.verbose(\"hydrateCache called\");\n        const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.AccountEntity.createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);\n        this.browserStorage.setAccount(accountEntity);\n        return this.browserStorage.hydrateCache(result, request);\n    }\n}\n //# sourceMappingURL=NestedAppAuthController.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardController: () => (/* binding */ StandardController)\n/* harmony export */ });\n/* harmony import */ var _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/CryptoOps.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/* harmony import */ var _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cache/BrowserCacheManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs\");\n/* harmony import */ var _cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../cache/AccountManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../event/EventHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs\");\n/* harmony import */ var _interaction_client_PopupClient_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../interaction_client/PopupClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs\");\n/* harmony import */ var _interaction_client_RedirectClient_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../interaction_client/RedirectClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs\");\n/* harmony import */ var _interaction_client_SilentIframeClient_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../interaction_client/SilentIframeClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs\");\n/* harmony import */ var _interaction_client_SilentRefreshClient_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../interaction_client/SilentRefreshClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs\");\n/* harmony import */ var _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/TokenCache.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs\");\n/* harmony import */ var _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../interaction_client/NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../error/NativeAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\");\n/* harmony import */ var _interaction_client_SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../interaction_client/SilentCacheClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs\");\n/* harmony import */ var _interaction_client_SilentAuthCodeClient_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../interaction_client/SilentAuthCodeClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../request/RequestHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function getAccountType(account) {\n    const idTokenClaims = account?.idTokenClaims;\n    if (idTokenClaims?.tfp || idTokenClaims?.acr) {\n        return \"B2C\";\n    }\n    if (!idTokenClaims?.tid) {\n        return undefined;\n    } else if (idTokenClaims?.tid === \"9188040d-6c67-4c5b-b112-36a304b66dad\") {\n        return \"MSA\";\n    }\n    return \"AAD\";\n}\nfunction preflightCheck(initialized, performanceEvent) {\n    try {\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.preflightCheck)(initialized);\n    } catch (e) {\n        performanceEvent.end({\n            success: false\n        }, e);\n        throw e;\n    }\n}\nclass StandardController {\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration Object for the MSAL PublicClientApplication instance\r\n     */ constructor(operatingContext){\n        this.operatingContext = operatingContext;\n        this.isBrowserEnvironment = this.operatingContext.isBrowserEnvironment();\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        this.initialized = false;\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize the network module class.\n        this.networkClient = this.config.system.networkClient;\n        // Initialize the navigation client class.\n        this.navigationClient = this.config.system.navigationClient;\n        // Initialize redirectResponse Map\n        this.redirectResponse = new Map();\n        // Initial hybrid spa map\n        this.hybridAuthCodeResponses = new Map();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n        // Initialize the crypto class.\n        this.browserCrypto = this.isBrowserEnvironment ? new _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_1__.CryptoOps(this.logger, this.performanceClient) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_CRYPTO_IMPLEMENTATION;\n        this.eventHandler = new _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_3__.EventHandler(this.logger);\n        // Initialize the browser storage class.\n        this.browserStorage = this.isBrowserEnvironment ? new _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.buildStaticAuthorityOptions)(this.config.auth), this.performanceClient) : (0,_cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_BROWSER_CACHE_MANAGER)(this.config.auth.clientId, this.logger);\n        // initialize in memory storage for native flows\n        const nativeCacheOptions = {\n            cacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.BrowserCacheLocation.MemoryStorage,\n            temporaryCacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.BrowserCacheLocation.MemoryStorage,\n            storeAuthStateInCookie: false,\n            secureCookies: false,\n            cacheMigrationEnabled: false,\n            claimsBasedCachingEnabled: false\n        };\n        this.nativeInternalStorage = new _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserCacheManager(this.config.auth.clientId, nativeCacheOptions, this.browserCrypto, this.logger, undefined, this.performanceClient);\n        // Initialize the token cache\n        this.tokenCache = new _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_7__.TokenCache(this.config, this.browserStorage, this.logger, this.browserCrypto);\n        this.activeSilentTokenRequests = new Map();\n        // Register listener functions\n        this.trackPageVisibility = this.trackPageVisibility.bind(this);\n        // Register listener functions\n        this.trackPageVisibilityWithMeasurement = this.trackPageVisibilityWithMeasurement.bind(this);\n        // account storage events\n        this.listeningToStorageEvents = false;\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n    }\n    static async createController(operatingContext, request) {\n        const controller = new StandardController(operatingContext);\n        await controller.initialize(request);\n        return controller;\n    }\n    trackPageVisibility(correlationId) {\n        if (!correlationId) {\n            return;\n        }\n        this.logger.info(\"Perf: Visibility change detected\");\n        this.performanceClient.incrementFields({\n            visibilityChangeCount: 1\n        }, correlationId);\n    }\n    /**\r\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\r\n     * @param request {?InitializeApplicationRequest} correlation id\r\n     */ async initialize(request) {\n        this.logger.trace(\"initialize called\");\n        if (this.initialized) {\n            this.logger.info(\"initialize has already been called, exiting early.\");\n            return;\n        }\n        if (!this.isBrowserEnvironment) {\n            this.logger.info(\"in non-browser environment, exiting early.\");\n            this.initialized = true;\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.INITIALIZE_END);\n            return;\n        }\n        const initCorrelationId = request?.correlationId || this.getRequestCorrelationId();\n        const allowNativeBroker = this.config.system.allowNativeBroker;\n        const initMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.InitializeClientApplication, initCorrelationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.INITIALIZE_START);\n        if (allowNativeBroker) {\n            try {\n                this.nativeExtensionProvider = await _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.createProvider(this.logger, this.config.system.nativeBrokerHandshakeTimeout, this.performanceClient);\n            } catch (e) {\n                this.logger.verbose(e);\n            }\n        }\n        if (!this.config.cache.claimsBasedCachingEnabled) {\n            this.logger.verbose(\"Claims-based caching is disabled. Clearing the previous cache with claims\");\n            await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.browserStorage.clearTokensAndKeysWithClaims.bind(this.browserStorage), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.ClearTokensAndKeysWithClaims, this.logger, this.performanceClient, initCorrelationId)(this.performanceClient, initCorrelationId);\n        }\n        this.initialized = true;\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.INITIALIZE_END);\n        initMeasurement.end({\n            allowNativeBroker,\n            success: true\n        });\n    }\n    // #region Redirect Flow\n    /**\r\n     * Event handler function which allows users to fire events after the PublicClientApplication object\r\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\r\n     * auth flows.\r\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\r\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\r\n     */ async handleRedirectPromise(hash) {\n        this.logger.verbose(\"handleRedirectPromise called\");\n        // Block token acquisition before initialize has been called\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.blockAPICallsBeforeInitialize)(this.initialized);\n        if (this.isBrowserEnvironment) {\n            /**\r\n             * Store the promise on the PublicClientApplication instance if this is the first invocation of handleRedirectPromise,\r\n             * otherwise return the promise from the first invocation. Prevents race conditions when handleRedirectPromise is called\r\n             * several times concurrently.\r\n             */ const redirectResponseKey = hash || \"\";\n            let response = this.redirectResponse.get(redirectResponseKey);\n            if (typeof response === \"undefined\") {\n                response = this.handleRedirectPromiseInternal(hash);\n                this.redirectResponse.set(redirectResponseKey, response);\n                this.logger.verbose(\"handleRedirectPromise has been called for the first time, storing the promise\");\n            } else {\n                this.logger.verbose(\"handleRedirectPromise has been called previously, returning the result from the first call\");\n            }\n            return response;\n        }\n        this.logger.verbose(\"handleRedirectPromise returns null, not browser environment\");\n        return null;\n    }\n    /**\r\n     * The internal details of handleRedirectPromise. This is separated out to a helper to allow handleRedirectPromise to memoize requests\r\n     * @param hash\r\n     * @returns\r\n     */ async handleRedirectPromiseInternal(hash) {\n        const loggedInAccounts = this.getAllAccounts();\n        const request = this.browserStorage.getCachedNativeRequest();\n        const useNative = request && _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider) && this.nativeExtensionProvider && !hash;\n        const correlationId = useNative ? request?.correlationId : this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.TemporaryCacheKeys.CORRELATION_ID, true) || \"\";\n        const rootMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenRedirect, correlationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.HANDLE_REDIRECT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect);\n        let redirectResponse;\n        if (useNative && this.nativeExtensionProvider) {\n            this.logger.trace(\"handleRedirectPromise - acquiring token from native platform\");\n            const nativeClient = new _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.handleRedirectPromise, this.performanceClient, this.nativeExtensionProvider, request.accountId, this.nativeInternalStorage, request.correlationId);\n            redirectResponse = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(nativeClient.handleRedirectPromise.bind(nativeClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.HandleNativeRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(this.performanceClient, rootMeasurement.event.correlationId);\n        } else {\n            this.logger.trace(\"handleRedirectPromise - acquiring token from web flow\");\n            const redirectClient = this.createRedirectClient(correlationId);\n            redirectResponse = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(redirectClient.handleRedirectPromise.bind(redirectClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.HandleRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(hash, rootMeasurement);\n        }\n        return redirectResponse.then((result)=>{\n            if (result) {\n                // Emit login event if number of accounts change\n                const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;\n                if (isLoggingIn) {\n                    this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, result);\n                    this.logger.verbose(\"handleRedirectResponse returned result, login success\");\n                } else {\n                    this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, result);\n                    this.logger.verbose(\"handleRedirectResponse returned result, acquire token success\");\n                }\n                rootMeasurement.end({\n                    success: true,\n                    accountType: getAccountType(result.account)\n                });\n            } else {\n                /*\r\n                 * Instrument an event only if an error code is set. Otherwise, discard it when the redirect response\r\n                 * is empty and the error code is missing.\r\n                 */ if (rootMeasurement.event.errorCode) {\n                    rootMeasurement.end({\n                        success: false\n                    });\n                } else {\n                    rootMeasurement.discard();\n                }\n            }\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.HANDLE_REDIRECT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect);\n            return result;\n        }).catch((e)=>{\n            const eventError = e;\n            // Emit login event if there is an account\n            if (loggedInAccounts.length > 0) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, eventError);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, eventError);\n            }\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.HANDLE_REDIRECT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect);\n            rootMeasurement.end({\n                success: false\n            }, eventError);\n            throw e;\n        });\n    }\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\r\n     * the page, so any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ async acquireTokenRedirect(request) {\n        // Preflight request\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"acquireTokenRedirect called\", correlationId);\n        const atrMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenPreRedirect, correlationId);\n        atrMeasurement.add({\n            accountType: getAccountType(request.account),\n            scenarioId: request.scenarioId\n        });\n        // Override on request only if set, as onRedirectNavigate field is deprecated\n        const onRedirectNavigateCb = request.onRedirectNavigate;\n        if (onRedirectNavigateCb) {\n            request.onRedirectNavigate = (url)=>{\n                const navigate = typeof onRedirectNavigateCb === \"function\" ? onRedirectNavigateCb(url) : undefined;\n                if (navigate !== false) {\n                    atrMeasurement.end({\n                        success: true\n                    });\n                } else {\n                    atrMeasurement.discard();\n                }\n                return navigate;\n            };\n        } else {\n            const configOnRedirectNavigateCb = this.config.auth.onRedirectNavigate;\n            this.config.auth.onRedirectNavigate = (url)=>{\n                const navigate = typeof configOnRedirectNavigateCb === \"function\" ? configOnRedirectNavigateCb(url) : undefined;\n                if (navigate !== false) {\n                    atrMeasurement.end({\n                        success: true\n                    });\n                } else {\n                    atrMeasurement.discard();\n                }\n                return navigate;\n            };\n        }\n        // If logged in, emit acquire token events\n        const isLoggedIn = this.getAllAccounts().length > 0;\n        try {\n            (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectPreflightCheck)(this.initialized, this.config);\n            this.browserStorage.setInteractionInProgress(true);\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, request);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, request);\n            }\n            let result;\n            if (this.nativeExtensionProvider && this.canUseNative(request)) {\n                const nativeClient = new _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenRedirect, this.performanceClient, this.nativeExtensionProvider, this.getNativeAccountId(request), this.nativeInternalStorage, correlationId);\n                result = nativeClient.acquireTokenRedirect(request, atrMeasurement).catch((e)=>{\n                    if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                        this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        const redirectClient = this.createRedirectClient(correlationId);\n                        return redirectClient.acquireToken(request);\n                    } else if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.InteractionRequiredAuthError) {\n                        this.logger.verbose(\"acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow\");\n                        const redirectClient = this.createRedirectClient(correlationId);\n                        return redirectClient.acquireToken(request);\n                    }\n                    this.browserStorage.setInteractionInProgress(false);\n                    throw e;\n                });\n            } else {\n                const redirectClient = this.createRedirectClient(correlationId);\n                result = redirectClient.acquireToken(request);\n            }\n            return await result;\n        } catch (e) {\n            atrMeasurement.end({\n                success: false\n            }, e);\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, e);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, e);\n            }\n            throw e;\n        }\n    }\n    // #endregion\n    // #region Popup Flow\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ acquireTokenPopup(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenPopup, correlationId);\n        atPopupMeasurement.add({\n            scenarioId: request.scenarioId,\n            accountType: getAccountType(request.account)\n        });\n        try {\n            this.logger.verbose(\"acquireTokenPopup called\", correlationId);\n            preflightCheck(this.initialized, atPopupMeasurement);\n            this.browserStorage.setInteractionInProgress(true);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n        // If logged in, emit acquire token events\n        const loggedInAccounts = this.getAllAccounts();\n        if (loggedInAccounts.length > 0) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, request);\n        } else {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, request);\n        }\n        let result;\n        if (this.canUseNative(request)) {\n            result = this.acquireTokenNative({\n                ...request,\n                correlationId\n            }, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenPopup).then((response)=>{\n                this.browserStorage.setInteractionInProgress(false);\n                atPopupMeasurement.end({\n                    success: true,\n                    isNativeBroker: true,\n                    accountType: getAccountType(response.account)\n                });\n                return response;\n            }).catch((e)=>{\n                if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                    const popupClient = this.createPopupClient(correlationId);\n                    return popupClient.acquireToken(request);\n                } else if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.InteractionRequiredAuthError) {\n                    this.logger.verbose(\"acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow\");\n                    const popupClient = this.createPopupClient(correlationId);\n                    return popupClient.acquireToken(request);\n                }\n                this.browserStorage.setInteractionInProgress(false);\n                throw e;\n            });\n        } else {\n            const popupClient = this.createPopupClient(correlationId);\n            result = popupClient.acquireToken(request);\n        }\n        return result.then((result)=>{\n            /*\r\n             *  If logged in, emit acquire token events\r\n             */ const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;\n            if (isLoggingIn) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, result);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, result);\n            }\n            atPopupMeasurement.end({\n                success: true,\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n                accountType: getAccountType(result.account)\n            });\n            return result;\n        }).catch((e)=>{\n            if (loggedInAccounts.length > 0) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, null, e);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, null, e);\n            }\n            atPopupMeasurement.end({\n                success: false\n            }, e);\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        });\n    }\n    trackPageVisibilityWithMeasurement() {\n        const measurement = this.ssoSilentMeasurement || this.acquireTokenByCodeAsyncMeasurement;\n        if (!measurement) {\n            return;\n        }\n        this.logger.info(\"Perf: Visibility change detected in \", measurement.event.name);\n        measurement.increment({\n            visibilityChangeCount: 1\n        });\n    }\n    // #endregion\n    // #region Silent Flow\n    /**\r\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\r\n     * - Any browser using a form of Intelligent Tracking Prevention\r\n     * - If there is not an established session with the service\r\n     *\r\n     * In these cases, the request must be done inside a popup or full frame redirect.\r\n     *\r\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\r\n     *\r\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\r\n     * you session on the server still exists.\r\n     * @param request {@link SsoSilentRequest}\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async ssoSilent(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        const validRequest = {\n            ...request,\n            // will be PromptValue.NONE or PromptValue.NO_SESSION\n            prompt: request.prompt,\n            correlationId: correlationId\n        };\n        this.ssoSilentMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SsoSilent, correlationId);\n        this.ssoSilentMeasurement?.add({\n            scenarioId: request.scenarioId,\n            accountType: getAccountType(request.account)\n        });\n        preflightCheck(this.initialized, this.ssoSilentMeasurement);\n        this.ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0\n        });\n        document.addEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        this.logger.verbose(\"ssoSilent called\", correlationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, validRequest);\n        let result;\n        if (this.canUseNative(validRequest)) {\n            result = this.acquireTokenNative(validRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.ssoSilent).catch((e)=>{\n                // If native token acquisition fails for availability reasons fallback to standard flow\n                if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                    const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);\n                    return silentIframeClient.acquireToken(validRequest);\n                }\n                throw e;\n            });\n        } else {\n            const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);\n            result = silentIframeClient.acquireToken(validRequest);\n        }\n        return result.then((response)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, response);\n            this.ssoSilentMeasurement?.end({\n                success: true,\n                isNativeBroker: response.fromNativeBroker,\n                accessTokenSize: response.accessToken.length,\n                idTokenSize: response.idToken.length,\n                accountType: getAccountType(response.account)\n            });\n            return response;\n        }).catch((e)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, e);\n            this.ssoSilentMeasurement?.end({\n                success: false\n            }, e);\n            throw e;\n        }).finally(()=>{\n            document.removeEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        });\n    }\n    /**\r\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\r\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\r\n     * This API is not indended for normal authorization code acquisition and redemption.\r\n     *\r\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\r\n     *\r\n     * @param request {@link AuthorizationCodeRequest}\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async acquireTokenByCode(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.trace(\"acquireTokenByCode called\", correlationId);\n        const atbcMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByCode, correlationId);\n        preflightCheck(this.initialized, atbcMeasurement);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, request);\n        atbcMeasurement.add({\n            scenarioId: request.scenarioId\n        });\n        try {\n            if (request.code && request.nativeAccountId) {\n                // Throw error in case server returns both spa_code and spa_accountid in exchange for auth code.\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.spaCodeAndNativeAccountIdPresent);\n            } else if (request.code) {\n                const hybridAuthCode = request.code;\n                let response = this.hybridAuthCodeResponses.get(hybridAuthCode);\n                if (!response) {\n                    this.logger.verbose(\"Initiating new acquireTokenByCode request\", correlationId);\n                    response = this.acquireTokenByCodeAsync({\n                        ...request,\n                        correlationId\n                    }).then((result)=>{\n                        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, result);\n                        this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                        atbcMeasurement.end({\n                            success: true,\n                            isNativeBroker: result.fromNativeBroker,\n                            accessTokenSize: result.accessToken.length,\n                            idTokenSize: result.idToken.length,\n                            accountType: getAccountType(result.account)\n                        });\n                        return result;\n                    }).catch((error)=>{\n                        this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, error);\n                        atbcMeasurement.end({\n                            success: false\n                        }, error);\n                        throw error;\n                    });\n                    this.hybridAuthCodeResponses.set(hybridAuthCode, response);\n                } else {\n                    this.logger.verbose(\"Existing acquireTokenByCode request found\", correlationId);\n                    atbcMeasurement.discard();\n                }\n                return await response;\n            } else if (request.nativeAccountId) {\n                if (this.canUseNative(request, request.nativeAccountId)) {\n                    const result = await this.acquireTokenNative({\n                        ...request,\n                        correlationId\n                    }, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenByCode, request.nativeAccountId).catch((e)=>{\n                        // If native token acquisition fails for availability reasons fallback to standard flow\n                        if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                            this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        }\n                        throw e;\n                    });\n                    atbcMeasurement.end({\n                        accountType: getAccountType(result.account),\n                        success: true\n                    });\n                    return result;\n                } else {\n                    throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.unableToAcquireTokenFromNativePlatform);\n                }\n            } else {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.authCodeOrNativeAccountIdRequired);\n            }\n        } catch (e) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, e);\n            atbcMeasurement.end({\n                success: false\n            }, e);\n            throw e;\n        }\n    }\n    /**\r\n     * Creates a SilentAuthCodeClient to redeem an authorization code.\r\n     * @param request\r\n     * @returns Result of the operation to redeem the authorization code\r\n     */ async acquireTokenByCodeAsync(request) {\n        this.logger.trace(\"acquireTokenByCodeAsync called\", request.correlationId);\n        this.acquireTokenByCodeAsyncMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByCodeAsync, request.correlationId);\n        this.acquireTokenByCodeAsyncMeasurement?.increment({\n            visibilityChangeCount: 0\n        });\n        document.addEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        const silentAuthCodeClient = this.createSilentAuthCodeClient(request.correlationId);\n        const silentTokenResult = await silentAuthCodeClient.acquireToken(request).then((response)=>{\n            this.acquireTokenByCodeAsyncMeasurement?.end({\n                success: true,\n                fromCache: response.fromCache,\n                isNativeBroker: response.fromNativeBroker\n            });\n            return response;\n        }).catch((tokenRenewalError)=>{\n            this.acquireTokenByCodeAsyncMeasurement?.end({\n                success: false\n            }, tokenRenewalError);\n            throw tokenRenewalError;\n        }).finally(()=>{\n            document.removeEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        });\n        return silentTokenResult;\n    }\n    /**\r\n     * Attempt to acquire an access token from the cache\r\n     * @param silentCacheClient SilentCacheClient\r\n     * @param commonRequest CommonSilentFlowRequest\r\n     * @param silentRequest SilentRequest\r\n     * @returns A promise that, when resolved, returns the access token\r\n     */ async acquireTokenFromCache(commonRequest, cacheLookupPolicy) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenFromCache, commonRequest.correlationId);\n        switch(cacheLookupPolicy){\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Default:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessTokenAndRefreshToken:\n                const silentCacheClient = this.createSilentCacheClient(commonRequest.correlationId);\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(silentCacheClient.acquireToken.bind(silentCacheClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SilentCacheClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);\n            default:\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired);\n        }\n    }\n    /**\r\n     * Attempt to acquire an access token via a refresh token\r\n     * @param commonRequest CommonSilentFlowRequest\r\n     * @param cacheLookupPolicy CacheLookupPolicy\r\n     * @returns A promise that, when resolved, returns the access token\r\n     */ async acquireTokenByRefreshToken(commonRequest, cacheLookupPolicy) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByRefreshToken, commonRequest.correlationId);\n        switch(cacheLookupPolicy){\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Default:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessTokenAndRefreshToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.RefreshToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.RefreshTokenAndNetwork:\n                const silentRefreshClient = this.createSilentRefreshClient(commonRequest.correlationId);\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(silentRefreshClient.acquireToken.bind(silentRefreshClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SilentRefreshClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);\n            default:\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired);\n        }\n    }\n    /**\r\n     * Attempt to acquire an access token via an iframe\r\n     * @param request CommonSilentFlowRequest\r\n     * @returns A promise that, when resolved, returns the access token\r\n     */ async acquireTokenBySilentIframe(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenBySilentIframe, request.correlationId);\n        const silentIframeClient = this.createSilentIframeClient(request.correlationId);\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(silentIframeClient.acquireToken.bind(silentIframeClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SilentIframeClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(request);\n    }\n    // #endregion\n    // #region Logout\n    /**\r\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\r\n     * @param logoutRequest\r\n     * @deprecated\r\n     */ async logout(logoutRequest) {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        this.logger.warning(\"logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.\", correlationId);\n        return this.logoutRedirect({\n            correlationId,\n            ...logoutRequest\n        });\n    }\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */ async logoutRedirect(logoutRequest) {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectPreflightCheck)(this.initialized, this.config);\n        this.browserStorage.setInteractionInProgress(true);\n        const redirectClient = this.createRedirectClient(correlationId);\n        return redirectClient.logout(logoutRequest);\n    }\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */ logoutPopup(logoutRequest) {\n        try {\n            const correlationId = this.getRequestCorrelationId(logoutRequest);\n            (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.preflightCheck)(this.initialized);\n            this.browserStorage.setInteractionInProgress(true);\n            const popupClient = this.createPopupClient(correlationId);\n            return popupClient.logout(logoutRequest);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n    /**\r\n     * Creates a cache interaction client to clear broswer cache.\r\n     * @param logoutRequest\r\n     */ async clearCache(logoutRequest) {\n        if (!this.isBrowserEnvironment) {\n            this.logger.info(\"in non-browser environment, returning early.\");\n            return;\n        }\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        const cacheClient = this.createSilentCacheClient(correlationId);\n        return cacheClient.logout(logoutRequest);\n    }\n    // #endregion\n    // #region Account APIs\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAllAccounts)(this.logger, this.browserStorage, this.isBrowserEnvironment, accountFilter);\n    }\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */ getAccount(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccount)(accountFilter, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param username\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByUsername(username) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccountByUsername)(username, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByHomeId(homeAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccountByHomeId)(homeAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByLocalId(localAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccountByLocalId)(localAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.setActiveAccount)(account, this.browserStorage);\n    }\n    /**\r\n     * Gets the currently active account\r\n     */ getActiveAccount() {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getActiveAccount)(this.browserStorage);\n    }\n    // #endregion\n    /**\r\n     * Hydrates the cache with the tokens from an AuthenticationResult\r\n     * @param result\r\n     * @param request\r\n     * @returns\r\n     */ async hydrateCache(result, request) {\n        this.logger.verbose(\"hydrateCache called\");\n        // Account gets saved to browser storage regardless of native or not\n        const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.AccountEntity.createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);\n        this.browserStorage.setAccount(accountEntity);\n        if (result.fromNativeBroker) {\n            this.logger.verbose(\"Response was from native broker, storing in-memory\");\n            // Tokens from native broker are stored in-memory\n            return this.nativeInternalStorage.hydrateCache(result, request);\n        } else {\n            return this.browserStorage.hydrateCache(result, request);\n        }\n    }\n    // #region Helpers\n    /**\r\n     * Acquire a token from native device (e.g. WAM)\r\n     * @param request\r\n     */ async acquireTokenNative(request, apiId, accountId) {\n        this.logger.trace(\"acquireTokenNative called\");\n        if (!this.nativeExtensionProvider) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.nativeConnectionNotEstablished);\n        }\n        const nativeClient = new _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, apiId, this.performanceClient, this.nativeExtensionProvider, accountId || this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);\n        return nativeClient.acquireToken(request);\n    }\n    /**\r\n     * Returns boolean indicating if this request can use the native broker\r\n     * @param request\r\n     */ canUseNative(request, accountId) {\n        this.logger.trace(\"canUseNative called\");\n        if (!_broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme)) {\n            this.logger.trace(\"canUseNative: isNativeAvailable returned false, returning false\");\n            return false;\n        }\n        if (request.prompt) {\n            switch(request.prompt){\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PromptValue.NONE:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PromptValue.CONSENT:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PromptValue.LOGIN:\n                    this.logger.trace(\"canUseNative: prompt is compatible with native flow\");\n                    break;\n                default:\n                    this.logger.trace(`canUseNative: prompt = ${request.prompt} is not compatible with native flow, returning false`);\n                    return false;\n            }\n        }\n        if (!accountId && !this.getNativeAccountId(request)) {\n            this.logger.trace(\"canUseNative: nativeAccountId is not available, returning false\");\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Get the native accountId from the account\r\n     * @param request\r\n     * @returns\r\n     */ getNativeAccountId(request) {\n        const account = request.account || this.getAccount({\n            loginHint: request.loginHint,\n            sid: request.sid\n        }) || this.getActiveAccount();\n        return account && account.nativeAccountId || \"\";\n    }\n    /**\r\n     * Returns new instance of the Popup Interaction Client\r\n     * @param correlationId\r\n     */ createPopupClient(correlationId) {\n        return new _interaction_client_PopupClient_mjs__WEBPACK_IMPORTED_MODULE_22__.PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Redirect Interaction Client\r\n     * @param correlationId\r\n     */ createRedirectClient(correlationId) {\n        return new _interaction_client_RedirectClient_mjs__WEBPACK_IMPORTED_MODULE_23__.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent Iframe Interaction Client\r\n     * @param correlationId\r\n     */ createSilentIframeClient(correlationId) {\n        return new _interaction_client_SilentIframeClient_mjs__WEBPACK_IMPORTED_MODULE_24__.SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.ssoSilent, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent Cache Interaction Client\r\n     */ createSilentCacheClient(correlationId) {\n        return new _interaction_client_SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_25__.SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent Refresh Interaction Client\r\n     */ createSilentRefreshClient(correlationId) {\n        return new _interaction_client_SilentRefreshClient_mjs__WEBPACK_IMPORTED_MODULE_26__.SilentRefreshClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent AuthCode Interaction Client\r\n     */ createSilentAuthCodeClient(correlationId) {\n        return new _interaction_client_SilentAuthCodeClient_mjs__WEBPACK_IMPORTED_MODULE_27__.SilentAuthCodeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenByCode, this.performanceClient, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */ addEventCallback(callback, eventTypes) {\n        return this.eventHandler.addEventCallback(callback, eventTypes);\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    /**\r\n     * Registers a callback to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */ addPerformanceCallback(callback) {\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNonBrowserEnvironment)();\n        return this.performanceClient.addPerformanceCallback(callback);\n    }\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */ removePerformanceCallback(callbackId) {\n        return this.performanceClient.removePerformanceCallback(callbackId);\n    }\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ enableAccountStorageEvents() {\n        if (true) {\n            return;\n        }\n        if (!this.listeningToStorageEvents) {\n            this.logger.verbose(\"Adding account storage listener.\");\n            this.listeningToStorageEvents = true;\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\n        } else {\n            this.logger.verbose(\"Account storage listener already registered.\");\n        }\n    }\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ disableAccountStorageEvents() {\n        if (true) {\n            return;\n        }\n        if (this.listeningToStorageEvents) {\n            this.logger.verbose(\"Removing account storage listener.\");\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n            this.listeningToStorageEvents = false;\n        } else {\n            this.logger.verbose(\"No account storage listener registered.\");\n        }\n    }\n    /**\r\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n     */ handleAccountCacheChange(e) {\n        try {\n            // Handle active account filter change\n            if (e.key?.includes(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS)) {\n                // This event has no payload, it only signals cross-tab app instances that the results of calling getActiveAccount() will have changed\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACTIVE_ACCOUNT_CHANGED);\n            }\n            // Handle account object change\n            const cacheValue = e.newValue || e.oldValue;\n            if (!cacheValue) {\n                return;\n            }\n            const parsedValue = JSON.parse(cacheValue);\n            if (typeof parsedValue !== \"object\" || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.AccountEntity.isAccountEntity(parsedValue)) {\n                return;\n            }\n            const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_28__.CacheManager.toObject(new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.AccountEntity(), parsedValue);\n            const accountInfo = accountEntity.getAccountInfo();\n            if (!e.oldValue && e.newValue) {\n                this.logger.info(\"Account was added to cache in a different window\");\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACCOUNT_ADDED, undefined, accountInfo);\n            } else if (!e.newValue && e.oldValue) {\n                this.logger.info(\"Account was removed from cache in a different window\");\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n            }\n        } catch (e) {\n            return;\n        }\n    }\n    /**\r\n     * Gets the token cache for the application.\r\n     */ getTokenCache() {\n        return this.tokenCache;\n    }\n    /**\r\n     * Returns the logger instance\r\n     */ getLogger() {\n        return this.logger;\n    }\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */ setLogger(logger) {\n        this.logger = logger;\n    }\n    /**\r\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\r\n     * @param sku\r\n     * @param version\r\n     */ initializeWrapperLibrary(sku, version) {\n        // Validate the SKU passed in is one we expect\n        this.browserStorage.setWrapperMetadata(sku, version);\n    }\n    /**\r\n     * Sets navigation client\r\n     * @param navigationClient\r\n     */ setNavigationClient(navigationClient) {\n        this.navigationClient = navigationClient;\n    }\n    /**\r\n     * Returns the configuration object\r\n     */ getConfiguration() {\n        return this.config;\n    }\n    /**\r\n     * Returns the performance client\r\n     */ getPerformanceClient() {\n        return this.performanceClient;\n    }\n    /**\r\n     * Returns the browser env indicator\r\n     */ isBrowserEnv() {\n        return this.isBrowserEnvironment;\n    }\n    /**\r\n     * Generates a correlation id for a request if none is provided.\r\n     *\r\n     * @protected\r\n     * @param {?Partial<BaseAuthRequest>} [request]\r\n     * @returns {string}\r\n     */ getRequestCorrelationId(request) {\n        if (request?.correlationId) {\n            return request.correlationId;\n        }\n        if (this.isBrowserEnvironment) {\n            return (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_29__.createNewGuid)();\n        }\n        /*\r\n         * Included for fallback for non-browser environments,\r\n         * and to ensure this method always returns a string.\r\n         */ return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.Constants.EMPTY_STRING;\n    }\n    // #endregion\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ async loginRedirect(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return this.acquireTokenRedirect({\n            correlationId,\n            ...request || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_REQUEST\n        });\n    }\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ loginPopup(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginPopup called\", correlationId);\n        return this.acquireTokenPopup({\n            correlationId,\n            ...request || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_REQUEST\n        });\n    }\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */ async acquireTokenSilent(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atsMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilent, correlationId);\n        atsMeasurement.add({\n            cacheLookupPolicy: request.cacheLookupPolicy,\n            scenarioId: request.scenarioId\n        });\n        preflightCheck(this.initialized, atsMeasurement);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.noAccountError);\n        }\n        atsMeasurement.add({\n            accountType: getAccountType(account)\n        });\n        const thumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.Constants.EMPTY_STRING,\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n            shrOptions: request.shrOptions\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n            const response = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenSilentAsync.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilentAsync, this.logger, this.performanceClient, correlationId)({\n                ...request,\n                correlationId\n            }, account).then((result)=>{\n                this.activeSilentTokenRequests.delete(silentRequestKey);\n                atsMeasurement.end({\n                    success: true,\n                    fromCache: result.fromCache,\n                    isNativeBroker: result.fromNativeBroker,\n                    cacheLookupPolicy: request.cacheLookupPolicy,\n                    accessTokenSize: result.accessToken.length,\n                    idTokenSize: result.idToken.length\n                });\n                return result;\n            }).catch((error)=>{\n                this.activeSilentTokenRequests.delete(silentRequestKey);\n                atsMeasurement.end({\n                    success: false\n                }, error);\n                throw error;\n            });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return {\n                ...await response,\n                state: request.state\n            };\n        } else {\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n            atsMeasurement.discard();\n            return {\n                ...await cachedResponse,\n                state: request.state\n            };\n        }\n    }\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */ async acquireTokenSilentAsync(request, account) {\n        const trackPageVisibility = ()=>this.trackPageVisibility(request.correlationId);\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, request);\n        if (request.correlationId) {\n            this.performanceClient.incrementFields({\n                visibilityChangeCount: 0\n            }, request.correlationId);\n        }\n        document.addEventListener(\"visibilitychange\", trackPageVisibility);\n        const silentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(_request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_30__.initializeSilentRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.InitializeSilentRequest, this.logger, this.performanceClient, request.correlationId)(request, account, this.config, this.performanceClient, this.logger);\n        const cacheLookupPolicy = request.cacheLookupPolicy || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Default;\n        const result = this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy).catch(async (refreshTokenError)=>{\n            const shouldTryToResolveSilently = checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy);\n            if (shouldTryToResolveSilently) {\n                if (!this.activeIframeRequest) {\n                    let _resolve;\n                    // Always set the active request tracker immediately after checking it to prevent races\n                    this.activeIframeRequest = [\n                        new Promise((resolve)=>{\n                            _resolve = resolve;\n                        }),\n                        silentRequest.correlationId\n                    ];\n                    this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", silentRequest.correlationId);\n                    return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenBySilentIframe.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest).then((iframeResult)=>{\n                        _resolve(true);\n                        return iframeResult;\n                    }).catch((e)=>{\n                        _resolve(false);\n                        throw e;\n                    }).finally(()=>{\n                        this.activeIframeRequest = undefined;\n                    });\n                } else if (cacheLookupPolicy !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Skip) {\n                    const [activePromise, activeCorrelationId] = this.activeIframeRequest;\n                    this.logger.verbose(`Iframe request is already in progress, awaiting resolution for request with correlationId: ${activeCorrelationId}`, silentRequest.correlationId);\n                    const awaitConcurrentIframeMeasure = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AwaitConcurrentIframe, silentRequest.correlationId);\n                    awaitConcurrentIframeMeasure.add({\n                        awaitIframeCorrelationId: activeCorrelationId\n                    });\n                    const activePromiseResult = await activePromise;\n                    awaitConcurrentIframeMeasure.end({\n                        success: activePromiseResult\n                    });\n                    if (activePromiseResult) {\n                        this.logger.verbose(`Parallel iframe request with correlationId: ${activeCorrelationId} succeeded. Retrying cache and/or RT redemption`, silentRequest.correlationId);\n                        // Retry cache lookup and/or RT exchange after iframe completes\n                        return this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy);\n                    } else {\n                        this.logger.info(`Iframe request with correlationId: ${activeCorrelationId} failed. Interaction is required.`);\n                        // If previous iframe request failed, it's unlikely to succeed this time. Throw original error.\n                        throw refreshTokenError;\n                    }\n                } else {\n                    // Cache policy set to skip and another iframe request is already in progress\n                    this.logger.warning(\"Another iframe request is currently in progress and CacheLookupPolicy is set to Skip. This may result in degraded performance and/or reliability for both calls. Please consider changing the CacheLookupPolicy to take advantage of request queuing and token cache.\", silentRequest.correlationId);\n                    return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenBySilentIframe.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n                }\n            } else {\n                // Error cannot be silently resolved or iframe renewal is not allowed, interaction required\n                throw refreshTokenError;\n            }\n        });\n        return result.then((response)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, response);\n            if (request.correlationId) {\n                this.performanceClient.addFields({\n                    fromCache: response.fromCache,\n                    isNativeBroker: response.fromNativeBroker\n                }, request.correlationId);\n            }\n            return response;\n        }).catch((tokenRenewalError)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, tokenRenewalError);\n            throw tokenRenewalError;\n        }).finally(()=>{\n            document.removeEventListener(\"visibilitychange\", trackPageVisibility);\n        });\n    }\n    /**\r\n     * AcquireTokenSilent without the iframe fallback. This is used to enable the correct fallbacks in cases where there's a potential for multiple silent requests to be made in parallel and prevent those requests from making concurrent iframe requests.\r\n     * @param silentRequest\r\n     * @param cacheLookupPolicy\r\n     * @returns\r\n     */ async acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy) {\n        if (_broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, silentRequest.authenticationScheme) && silentRequest.account.nativeAccountId) {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            return this.acquireTokenNative(silentRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenSilent_silentFlow).catch(async (e)=>{\n                // If native token acquisition fails for availability reasons fallback to web flow\n                if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\n                    throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired);\n                }\n                throw e;\n            });\n        } else {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenFromCache.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenFromCache, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy).catch((cacheError)=>{\n                if (cacheLookupPolicy === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessToken) {\n                    throw cacheError;\n                }\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_NETWORK_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, silentRequest);\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenByRefreshToken.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByRefreshToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy);\n            });\n        }\n    }\n}\n/**\r\n * Determines whether an error thrown by the refresh token endpoint can be resolved without interaction\r\n * @param refreshTokenError\r\n * @param silentRequest\r\n * @param cacheLookupPolicy\r\n * @returns\r\n */ function checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy) {\n    const noInteractionRequired = !(refreshTokenError instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.InteractionRequiredAuthError && // For refresh token errors, bad_token does not always require interaction (silently resolvable)\n    refreshTokenError.subError !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__.badToken);\n    // Errors that result when the refresh token needs to be replaced\n    const refreshTokenRefreshRequired = refreshTokenError.errorCode === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.BrowserConstants.INVALID_GRANT_ERROR || refreshTokenError.errorCode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired;\n    // Errors that may be resolved before falling back to interaction (through iframe renewal)\n    const isSilentlyResolvable = noInteractionRequired && refreshTokenRefreshRequired || refreshTokenError.errorCode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__.noTokensFound || refreshTokenError.errorCode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__.refreshTokenExpired;\n    // Only these policies allow for an iframe renewal attempt\n    const tryIframeRenewal = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.iFrameRenewalPolicies.includes(cacheLookupPolicy);\n    return isSilentlyResolvable && tryIframeRenewal;\n}\n //# sourceMappingURL=StandardController.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNewGuid: () => (/* binding */ createNewGuid),\n/* harmony export */   exportJwk: () => (/* binding */ exportJwk),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   getRandomValues: () => (/* binding */ getRandomValues),\n/* harmony export */   hashString: () => (/* binding */ hashString),\n/* harmony export */   importJwk: () => (/* binding */ importJwk),\n/* harmony export */   sha256Digest: () => (/* binding */ sha256Digest),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   validateCryptoAvailable: () => (/* binding */ validateCryptoAvailable)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This file defines functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */ /**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */ // RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([\n    0x01,\n    0x00,\n    0x01\n]);\n// UUID hex digits\nconst UUID_CHARS = \"0123456789abcdef\";\n// Array to store UINT32 random value\nconst UINT32_ARR = new Uint32Array(1);\nconst SUBTLE_SUBERROR = \"crypto_subtle_undefined\";\nconst keygenAlgorithmOptions = {\n    name: PKCS1_V15_KEYGEN_ALG,\n    hash: S256_HASH_ALG,\n    modulusLength: MODULUS_LENGTH,\n    publicExponent: PUBLIC_EXPONENT\n};\n/**\r\n * Check whether browser crypto is available.\r\n */ function validateCryptoAvailable(skipValidateSubtleCrypto) {\n    if (!window) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nonBrowserEnvironment);\n    }\n    if (!window.crypto) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.cryptoNonExistent);\n    }\n    if (!skipValidateSubtleCrypto && !window.crypto.subtle) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.cryptoNonExistent, SUBTLE_SUBERROR);\n    }\n}\n/**\r\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n * @param dataString {string} data string\r\n * @param performanceClient {?IPerformanceClient}\r\n * @param correlationId {?string} correlation id\r\n */ async function sha256Digest(dataString, performanceClient, correlationId) {\n    performanceClient?.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.Sha256Digest, correlationId);\n    const encoder = new TextEncoder();\n    const data = encoder.encode(dataString);\n    return window.crypto.subtle.digest(S256_HASH_ALG, data);\n}\n/**\r\n * Populates buffer with cryptographically random values.\r\n * @param dataBuffer\r\n */ function getRandomValues(dataBuffer) {\n    return window.crypto.getRandomValues(dataBuffer);\n}\n/**\r\n * Returns random Uint32 value.\r\n * @returns {number}\r\n */ function getRandomUint32() {\n    window.crypto.getRandomValues(UINT32_ARR);\n    return UINT32_ARR[0];\n}\n/**\r\n * Creates a UUID v7 from the current timestamp.\r\n * Implementation relies on the system clock to guarantee increasing order of generated identifiers.\r\n * @returns {number}\r\n */ function createNewGuid() {\n    const currentTimestamp = Date.now();\n    const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);\n    // Result byte array\n    const bytes = new Uint8Array(16);\n    // A 12-bit `rand_a` field value\n    const randA = Math.trunc(baseRand / 2 ** 30);\n    // The higher 30 bits of 62-bit `rand_b` field value\n    const randBHi = baseRand & 2 ** 30 - 1;\n    // The lower 32 bits of 62-bit `rand_b` field value\n    const randBLo = getRandomUint32();\n    bytes[0] = currentTimestamp / 2 ** 40;\n    bytes[1] = currentTimestamp / 2 ** 32;\n    bytes[2] = currentTimestamp / 2 ** 24;\n    bytes[3] = currentTimestamp / 2 ** 16;\n    bytes[4] = currentTimestamp / 2 ** 8;\n    bytes[5] = currentTimestamp;\n    bytes[6] = 0x70 | randA >>> 8;\n    bytes[7] = randA;\n    bytes[8] = 0x80 | randBHi >>> 24;\n    bytes[9] = randBHi >>> 16;\n    bytes[10] = randBHi >>> 8;\n    bytes[11] = randBHi;\n    bytes[12] = randBLo >>> 24;\n    bytes[13] = randBLo >>> 16;\n    bytes[14] = randBLo >>> 8;\n    bytes[15] = randBLo;\n    let text = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        text += UUID_CHARS.charAt(bytes[i] >>> 4);\n        text += UUID_CHARS.charAt(bytes[i] & 0xf);\n        if (i === 3 || i === 5 || i === 7 || i === 9) {\n            text += \"-\";\n        }\n    }\n    return text;\n}\n/**\r\n * Generates a keypair based on current keygen algorithm config.\r\n * @param extractable\r\n * @param usages\r\n */ async function generateKeyPair(extractable, usages) {\n    return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);\n}\n/**\r\n * Export key as Json Web Key (JWK)\r\n * @param key\r\n */ async function exportJwk(key) {\n    return window.crypto.subtle.exportKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, key);\n}\n/**\r\n * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n * @param key\r\n * @param extractable\r\n * @param usages\r\n */ async function importJwk(key, extractable, usages) {\n    return window.crypto.subtle.importKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, key, keygenAlgorithmOptions, extractable, usages);\n}\n/**\r\n * Signs given data with given key\r\n * @param key\r\n * @param data\r\n */ async function sign(key, data) {\n    return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);\n}\n/**\r\n * Returns the SHA-256 hash of an input string\r\n * @param plainText\r\n */ async function hashString(plainText) {\n    const hashBuffer = await sha256Digest(plainText);\n    const hashBytes = new Uint8Array(hashBuffer);\n    return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_4__.urlEncodeArr)(hashBytes);\n}\n //# sourceMappingURL=BrowserCrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CryptoOps: () => (/* binding */ CryptoOps)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _cache_AsyncMemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cache/AsyncMemoryStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */ class CryptoOps {\n    constructor(logger, performanceClient, skipValidateSubtleCrypto){\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.validateCryptoAvailable)(skipValidateSubtleCrypto ?? false);\n        this.cache = new _cache_AsyncMemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.AsyncMemoryStorage(this.logger);\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */ createNewGuid() {\n        return (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.createNewGuid)();\n    }\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input\r\n     */ base64Encode(input) {\n        return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.base64Encode)(input);\n    }\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input\r\n     */ base64Decode(input) {\n        return (0,_encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode)(input);\n    }\n    /**\r\n     * Encodes input string to base64 URL safe string.\r\n     * @param input\r\n     */ base64UrlEncode(input) {\n        return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(input);\n    }\n    /**\r\n     * Stringifies and base64Url encodes input public key\r\n     * @param inputKid\r\n     * @returns Base64Url encoded public key\r\n     */ encodeKid(inputKid) {\n        return this.base64UrlEncode(JSON.stringify({\n            kid: inputKid\n        }));\n    }\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */ async getPublicKeyThumbprint(request) {\n        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n        // Generate Keypair\n        const keyPair = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair)(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.exportJwk)(keyPair.publicKey);\n        const pubKeyThumprintObj = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n        const publicJwkString = getSortedObjectString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.exportJwk)(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.importJwk)(privateKeyJwk, false, [\n            \"sign\"\n        ]);\n        // Store Keypair data in keystore\n        await this.cache.setItem(publicJwkHash, {\n            privateKey: unextractablePrivateKey,\n            publicKey: keyPair.publicKey,\n            requestMethod: request.resourceRequestMethod,\n            requestUri: request.resourceRequestUri\n        });\n        if (publicKeyThumbMeasurement) {\n            publicKeyThumbMeasurement.end({\n                success: true\n            });\n        }\n        return publicJwkHash;\n    }\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid\r\n     */ async removeTokenBindingKey(kid) {\n        await this.cache.removeItem(kid);\n        const keyFound = await this.cache.containsKey(kid);\n        return !keyFound;\n    }\n    /**\r\n     * Removes all cryptographic keys from IndexedDB storage\r\n     */ async clearKeystore() {\n        // Delete in-memory keystores\n        this.cache.clearInMemory();\n        /**\r\n         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\r\n         * every persistent keystore\r\n         */ try {\n            await this.cache.clearPersistent();\n            return true;\n        } catch (e) {\n            if (e instanceof Error) {\n                this.logger.error(`Clearing keystore failed with error: ${e.message}`);\n            } else {\n                this.logger.error(\"Clearing keystore failed with unknown error\");\n            }\n            return false;\n        }\n    }\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload\r\n     * @param kid\r\n     */ async signJwt(payload, kid, shrOptions, correlationId) {\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.CryptoOptsSignJwt, correlationId);\n        const cachedKeyPair = await this.cache.getItem(kid);\n        if (!cachedKeyPair) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cryptoKeyNotFound);\n        }\n        // Get public key as JWK\n        const publicKeyJwk = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.exportJwk)(cachedKeyPair.publicKey);\n        const publicKeyJwkString = getSortedObjectString(publicKeyJwk);\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n        const encodedKeyIdThumbprint = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(JSON.stringify({\n            kid: kid\n        }));\n        // Generate header\n        const shrHeader = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.JoseHeader.getShrHeaderString({\n            ...shrOptions?.header,\n            alg: publicKeyJwk.alg,\n            kid: encodedKeyIdThumbprint\n        });\n        const encodedShrHeader = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(shrHeader);\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(JSON.stringify(payload));\n        // Form token string\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n        // Sign token\n        const encoder = new TextEncoder();\n        const tokenBuffer = encoder.encode(tokenString);\n        const signatureBuffer = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.sign)(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncodeArr)(new Uint8Array(signatureBuffer));\n        const signedJwt = `${tokenString}.${encodedSignature}`;\n        if (signJwtMeasurement) {\n            signJwtMeasurement.end({\n                success: true\n            });\n        }\n        return signedJwt;\n    }\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     * @param plainText\r\n     */ async hashString(plainText) {\n        return (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.hashString)(plainText);\n    }\n}\nCryptoOps.POP_KEY_USAGES = [\n    \"sign\",\n    \"verify\"\n];\nCryptoOps.EXTRACTABLE = true;\nfunction getSortedObjectString(obj) {\n    return JSON.stringify(obj, Object.keys(obj).sort());\n}\n //# sourceMappingURL=CryptoOps.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePkceCodes: () => (/* binding */ generatePkceCodes)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * This file defines APIs to generate PKCE codes and code verifiers.\r\n */ /**\r\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n */ async function generatePkceCodes(performanceClient, logger, correlationId) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GeneratePkceCodes, correlationId);\n    const codeVerifier = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invoke)(generateCodeVerifier, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GenerateCodeVerifier, logger, performanceClient, correlationId)(performanceClient, logger, correlationId);\n    const codeChallenge = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(generateCodeChallengeFromVerifier, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GenerateCodeChallengeFromVerifier, logger, performanceClient, correlationId)(codeVerifier, performanceClient, logger, correlationId);\n    return {\n        verifier: codeVerifier,\n        challenge: codeChallenge\n    };\n}\n/**\r\n * Generates a random 32 byte buffer and returns the base64\r\n * encoded string to be used as a PKCE Code Verifier\r\n */ function generateCodeVerifier(performanceClient, logger, correlationId) {\n    try {\n        // Generate random values as utf-8\n        const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n        (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invoke)(_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.getRandomValues, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GetRandomValues, logger, performanceClient, correlationId)(buffer);\n        // encode verifier as base64\n        const pkceCodeVerifierB64 = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_3__.urlEncodeArr)(buffer);\n        return pkceCodeVerifierB64;\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.pkceNotCreated);\n    }\n}\n/**\r\n * Creates a base64 encoded PKCE Code Challenge string from the\r\n * hash created from the PKCE Code Verifier supplied\r\n */ async function generateCodeChallengeFromVerifier(pkceCodeVerifier, performanceClient, logger, correlationId) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GenerateCodeChallengeFromVerifier, correlationId);\n    try {\n        // hashed verifier\n        const pkceHashedCodeVerifier = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.sha256Digest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.Sha256Digest, logger, performanceClient, correlationId)(pkceCodeVerifier, performanceClient, correlationId);\n        // encode hash as base64\n        return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_3__.urlEncodeArr)(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.pkceNotCreated);\n    }\n}\n //# sourceMappingURL=PkceGenerator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NyeXB0by9Qa2NlR2VuZXJhdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ29GO0FBQ2I7QUFDYjtBQUNVO0FBQ0E7QUFFcEU7OztDQUdDLEdBQ0QsNkJBQTZCO0FBQzdCLE1BQU1RLHlCQUF5QjtBQUMvQjs7Q0FFQyxHQUNEOztDQUVDLEdBQ0QsZUFBZUMsa0JBQWtCQyxpQkFBaUIsRUFBRUMsTUFBTSxFQUFFQyxhQUFhO0lBQ3JFRixrQkFBa0JHLG1CQUFtQixDQUFDYix5RUFBaUJBLENBQUNjLGlCQUFpQixFQUFFRjtJQUMzRSxNQUFNRyxlQUFlZCxrRUFBTUEsQ0FBQ2Usc0JBQXNCaEIseUVBQWlCQSxDQUFDaUIsb0JBQW9CLEVBQUVOLFFBQVFELG1CQUFtQkUsZUFBZUYsbUJBQW1CQyxRQUFRQztJQUMvSixNQUFNTSxnQkFBZ0IsTUFBTWhCLHVFQUFXQSxDQUFDaUIsbUNBQW1DbkIseUVBQWlCQSxDQUFDb0IsaUNBQWlDLEVBQUVULFFBQVFELG1CQUFtQkUsZUFBZUcsY0FBY0wsbUJBQW1CQyxRQUFRQztJQUNuTixPQUFPO1FBQ0hTLFVBQVVOO1FBQ1ZPLFdBQVdKO0lBQ2Y7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNGLHFCQUFxQk4saUJBQWlCLEVBQUVDLE1BQU0sRUFBRUMsYUFBYTtJQUNsRSxJQUFJO1FBQ0Esa0NBQWtDO1FBQ2xDLE1BQU1XLFNBQVMsSUFBSUMsV0FBV2hCO1FBQzlCUCxrRUFBTUEsQ0FBQ0ksK0RBQWVBLEVBQUVMLHlFQUFpQkEsQ0FBQ3lCLGVBQWUsRUFBRWQsUUFBUUQsbUJBQW1CRSxlQUFlVztRQUNyRyw0QkFBNEI7UUFDNUIsTUFBTUcsc0JBQXNCdEIsc0VBQVlBLENBQUNtQjtRQUN6QyxPQUFPRztJQUNYLEVBQ0EsT0FBT0MsR0FBRztRQUNOLE1BQU14QixtRkFBc0JBLENBQUNJLDRFQUFjQTtJQUMvQztBQUNKO0FBQ0E7OztDQUdDLEdBQ0QsZUFBZVksa0NBQWtDUyxnQkFBZ0IsRUFBRWxCLGlCQUFpQixFQUFFQyxNQUFNLEVBQUVDLGFBQWE7SUFDdkdGLGtCQUFrQkcsbUJBQW1CLENBQUNiLHlFQUFpQkEsQ0FBQ29CLGlDQUFpQyxFQUFFUjtJQUMzRixJQUFJO1FBQ0Esa0JBQWtCO1FBQ2xCLE1BQU1pQix5QkFBeUIsTUFBTTNCLHVFQUFXQSxDQUFDSSw0REFBWUEsRUFBRU4seUVBQWlCQSxDQUFDOEIsWUFBWSxFQUFFbkIsUUFBUUQsbUJBQW1CRSxlQUFlZ0Isa0JBQWtCbEIsbUJBQW1CRTtRQUM5Syx3QkFBd0I7UUFDeEIsT0FBT1Isc0VBQVlBLENBQUMsSUFBSW9CLFdBQVdLO0lBQ3ZDLEVBQ0EsT0FBT0YsR0FBRztRQUNOLE1BQU14QixtRkFBc0JBLENBQUNJLDRFQUFjQTtJQUMvQztBQUNKO0FBRTZCLENBQzdCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9jcnlwdG8vUGtjZUdlbmVyYXRvci5tanM/ODdkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IFBlcmZvcm1hbmNlRXZlbnRzLCBpbnZva2UsIGludm9rZUFzeW5jIH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL2Jyb3dzZXInO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3NlckF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IHVybEVuY29kZUFyciB9IGZyb20gJy4uL2VuY29kZS9CYXNlNjRFbmNvZGUubWpzJztcbmltcG9ydCB7IGdldFJhbmRvbVZhbHVlcywgc2hhMjU2RGlnZXN0IH0gZnJvbSAnLi9Ccm93c2VyQ3J5cHRvLm1qcyc7XG5pbXBvcnQgeyBwa2NlTm90Q3JlYXRlZCB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29uc3RhbnQgYnl0ZSBhcnJheSBsZW5ndGhcclxuY29uc3QgUkFORE9NX0JZVEVfQVJSX0xFTkdUSCA9IDMyO1xyXG4vKipcclxuICogVGhpcyBmaWxlIGRlZmluZXMgQVBJcyB0byBnZW5lcmF0ZSBQS0NFIGNvZGVzIGFuZCBjb2RlIHZlcmlmaWVycy5cclxuICovXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgUEtDRSBDb2Rlcy4gU2VlIHRoZSBSRkMgZm9yIG1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3NjM2XHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVBrY2VDb2RlcyhwZXJmb3JtYW5jZUNsaWVudCwgbG9nZ2VyLCBjb3JyZWxhdGlvbklkKSB7XHJcbiAgICBwZXJmb3JtYW5jZUNsaWVudC5hZGRRdWV1ZU1lYXN1cmVtZW50KFBlcmZvcm1hbmNlRXZlbnRzLkdlbmVyYXRlUGtjZUNvZGVzLCBjb3JyZWxhdGlvbklkKTtcclxuICAgIGNvbnN0IGNvZGVWZXJpZmllciA9IGludm9rZShnZW5lcmF0ZUNvZGVWZXJpZmllciwgUGVyZm9ybWFuY2VFdmVudHMuR2VuZXJhdGVDb2RlVmVyaWZpZXIsIGxvZ2dlciwgcGVyZm9ybWFuY2VDbGllbnQsIGNvcnJlbGF0aW9uSWQpKHBlcmZvcm1hbmNlQ2xpZW50LCBsb2dnZXIsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgY29uc3QgY29kZUNoYWxsZW5nZSA9IGF3YWl0IGludm9rZUFzeW5jKGdlbmVyYXRlQ29kZUNoYWxsZW5nZUZyb21WZXJpZmllciwgUGVyZm9ybWFuY2VFdmVudHMuR2VuZXJhdGVDb2RlQ2hhbGxlbmdlRnJvbVZlcmlmaWVyLCBsb2dnZXIsIHBlcmZvcm1hbmNlQ2xpZW50LCBjb3JyZWxhdGlvbklkKShjb2RlVmVyaWZpZXIsIHBlcmZvcm1hbmNlQ2xpZW50LCBsb2dnZXIsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB2ZXJpZmllcjogY29kZVZlcmlmaWVyLFxyXG4gICAgICAgIGNoYWxsZW5nZTogY29kZUNoYWxsZW5nZSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSAzMiBieXRlIGJ1ZmZlciBhbmQgcmV0dXJucyB0aGUgYmFzZTY0XHJcbiAqIGVuY29kZWQgc3RyaW5nIHRvIGJlIHVzZWQgYXMgYSBQS0NFIENvZGUgVmVyaWZpZXJcclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZVZlcmlmaWVyKHBlcmZvcm1hbmNlQ2xpZW50LCBsb2dnZXIsIGNvcnJlbGF0aW9uSWQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gR2VuZXJhdGUgcmFuZG9tIHZhbHVlcyBhcyB1dGYtOFxyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KFJBTkRPTV9CWVRFX0FSUl9MRU5HVEgpO1xyXG4gICAgICAgIGludm9rZShnZXRSYW5kb21WYWx1ZXMsIFBlcmZvcm1hbmNlRXZlbnRzLkdldFJhbmRvbVZhbHVlcywgbG9nZ2VyLCBwZXJmb3JtYW5jZUNsaWVudCwgY29ycmVsYXRpb25JZCkoYnVmZmVyKTtcclxuICAgICAgICAvLyBlbmNvZGUgdmVyaWZpZXIgYXMgYmFzZTY0XHJcbiAgICAgICAgY29uc3QgcGtjZUNvZGVWZXJpZmllckI2NCA9IHVybEVuY29kZUFycihidWZmZXIpO1xyXG4gICAgICAgIHJldHVybiBwa2NlQ29kZVZlcmlmaWVyQjY0O1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKHBrY2VOb3RDcmVhdGVkKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBhIGJhc2U2NCBlbmNvZGVkIFBLQ0UgQ29kZSBDaGFsbGVuZ2Ugc3RyaW5nIGZyb20gdGhlXHJcbiAqIGhhc2ggY3JlYXRlZCBmcm9tIHRoZSBQS0NFIENvZGUgVmVyaWZpZXIgc3VwcGxpZWRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ29kZUNoYWxsZW5nZUZyb21WZXJpZmllcihwa2NlQ29kZVZlcmlmaWVyLCBwZXJmb3JtYW5jZUNsaWVudCwgbG9nZ2VyLCBjb3JyZWxhdGlvbklkKSB7XHJcbiAgICBwZXJmb3JtYW5jZUNsaWVudC5hZGRRdWV1ZU1lYXN1cmVtZW50KFBlcmZvcm1hbmNlRXZlbnRzLkdlbmVyYXRlQ29kZUNoYWxsZW5nZUZyb21WZXJpZmllciwgY29ycmVsYXRpb25JZCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIGhhc2hlZCB2ZXJpZmllclxyXG4gICAgICAgIGNvbnN0IHBrY2VIYXNoZWRDb2RlVmVyaWZpZXIgPSBhd2FpdCBpbnZva2VBc3luYyhzaGEyNTZEaWdlc3QsIFBlcmZvcm1hbmNlRXZlbnRzLlNoYTI1NkRpZ2VzdCwgbG9nZ2VyLCBwZXJmb3JtYW5jZUNsaWVudCwgY29ycmVsYXRpb25JZCkocGtjZUNvZGVWZXJpZmllciwgcGVyZm9ybWFuY2VDbGllbnQsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIC8vIGVuY29kZSBoYXNoIGFzIGJhc2U2NFxyXG4gICAgICAgIHJldHVybiB1cmxFbmNvZGVBcnIobmV3IFVpbnQ4QXJyYXkocGtjZUhhc2hlZENvZGVWZXJpZmllcikpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKHBrY2VOb3RDcmVhdGVkKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVBrY2VDb2RlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGtjZUdlbmVyYXRvci5tanMubWFwXG4iXSwibmFtZXMiOlsiUGVyZm9ybWFuY2VFdmVudHMiLCJpbnZva2UiLCJpbnZva2VBc3luYyIsImNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IiLCJ1cmxFbmNvZGVBcnIiLCJnZXRSYW5kb21WYWx1ZXMiLCJzaGEyNTZEaWdlc3QiLCJwa2NlTm90Q3JlYXRlZCIsIlJBTkRPTV9CWVRFX0FSUl9MRU5HVEgiLCJnZW5lcmF0ZVBrY2VDb2RlcyIsInBlcmZvcm1hbmNlQ2xpZW50IiwibG9nZ2VyIiwiY29ycmVsYXRpb25JZCIsImFkZFF1ZXVlTWVhc3VyZW1lbnQiLCJHZW5lcmF0ZVBrY2VDb2RlcyIsImNvZGVWZXJpZmllciIsImdlbmVyYXRlQ29kZVZlcmlmaWVyIiwiR2VuZXJhdGVDb2RlVmVyaWZpZXIiLCJjb2RlQ2hhbGxlbmdlIiwiZ2VuZXJhdGVDb2RlQ2hhbGxlbmdlRnJvbVZlcmlmaWVyIiwiR2VuZXJhdGVDb2RlQ2hhbGxlbmdlRnJvbVZlcmlmaWVyIiwidmVyaWZpZXIiLCJjaGFsbGVuZ2UiLCJidWZmZXIiLCJVaW50OEFycmF5IiwiR2V0UmFuZG9tVmFsdWVzIiwicGtjZUNvZGVWZXJpZmllckI2NCIsImUiLCJwa2NlQ29kZVZlcmlmaWVyIiwicGtjZUhhc2hlZENvZGVWZXJpZmllciIsIlNoYTI1NkRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64Decode: () => (/* binding */ base64Decode)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\r\n */ /**\r\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n * @param input\r\n */ function base64Decode(input) {\n    return new TextDecoder().decode(base64DecToArr(input));\n}\n/**\r\n * Decodes base64 into Uint8Array\r\n * @param base64String\r\n */ function base64DecToArr(base64String) {\n    let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch(encodedString.length % 4){\n        case 0:\n            break;\n        case 2:\n            encodedString += \"==\";\n            break;\n        case 3:\n            encodedString += \"=\";\n            break;\n        default:\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidBase64String);\n    }\n    const binString = atob(encodedString);\n    return Uint8Array.from(binString, (m)=>m.codePointAt(0) || 0);\n}\n //# sourceMappingURL=Base64Decode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2VuY29kZS9CYXNlNjREZWNvZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUN1RTtBQUNFO0FBRXpFOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNELFNBQVNFLGFBQWFDLEtBQUs7SUFDdkIsT0FBTyxJQUFJQyxjQUFjQyxNQUFNLENBQUNDLGVBQWVIO0FBQ25EO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0csZUFBZUMsWUFBWTtJQUNoQyxJQUFJQyxnQkFBZ0JELGFBQWFFLE9BQU8sQ0FBQyxNQUFNLEtBQUtBLE9BQU8sQ0FBQyxNQUFNO0lBQ2xFLE9BQVFELGNBQWNFLE1BQU0sR0FBRztRQUMzQixLQUFLO1lBQ0Q7UUFDSixLQUFLO1lBQ0RGLGlCQUFpQjtZQUNqQjtRQUNKLEtBQUs7WUFDREEsaUJBQWlCO1lBQ2pCO1FBQ0o7WUFDSSxNQUFNUixtRkFBc0JBLENBQUNDLGlGQUFtQkE7SUFDeEQ7SUFDQSxNQUFNVSxZQUFZQyxLQUFLSjtJQUN2QixPQUFPSyxXQUFXQyxJQUFJLENBQUNILFdBQVcsQ0FBQ0ksSUFBTUEsRUFBRUMsV0FBVyxDQUFDLE1BQU07QUFDakU7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2VuY29kZS9CYXNlNjREZWNvZGUubWpzP2JjMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VyQXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgaW52YWxpZEJhc2U2NFN0cmluZyB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENsYXNzIHdoaWNoIGV4cG9zZXMgQVBJcyB0byBkZWNvZGUgYmFzZTY0IHN0cmluZ3MgdG8gcGxhaW50ZXh0LiBTZWUgaGVyZSBmb3IgaW1wbGVtZW50YXRpb24gZGV0YWlsczpcclxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9CYXNlNjQjdGhlX3VuaWNvZGVfcHJvYmxlbVxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBVUkwtc2FmZSBwbGFpbnRleHQgZGVjb2RlZCBzdHJpbmcgZnJvbSBiNjQgZW5jb2RlZCBpbnB1dC5cclxuICogQHBhcmFtIGlucHV0XHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlNjREZWNvZGUoaW5wdXQpIHtcclxuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYmFzZTY0RGVjVG9BcnIoaW5wdXQpKTtcclxufVxyXG4vKipcclxuICogRGVjb2RlcyBiYXNlNjQgaW50byBVaW50OEFycmF5XHJcbiAqIEBwYXJhbSBiYXNlNjRTdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGJhc2U2NERlY1RvQXJyKGJhc2U2NFN0cmluZykge1xyXG4gICAgbGV0IGVuY29kZWRTdHJpbmcgPSBiYXNlNjRTdHJpbmcucmVwbGFjZSgvLS9nLCBcIitcIikucmVwbGFjZSgvXy9nLCBcIi9cIik7XHJcbiAgICBzd2l0Y2ggKGVuY29kZWRTdHJpbmcubGVuZ3RoICUgNCkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBlbmNvZGVkU3RyaW5nICs9IFwiPT1cIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICBlbmNvZGVkU3RyaW5nICs9IFwiPVwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKGludmFsaWRCYXNlNjRTdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmluU3RyaW5nID0gYXRvYihlbmNvZGVkU3RyaW5nKTtcclxuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oYmluU3RyaW5nLCAobSkgPT4gbS5jb2RlUG9pbnRBdCgwKSB8fCAwKTtcclxufVxuXG5leHBvcnQgeyBiYXNlNjREZWNvZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2U2NERlY29kZS5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQnJvd3NlckF1dGhFcnJvciIsImludmFsaWRCYXNlNjRTdHJpbmciLCJiYXNlNjREZWNvZGUiLCJpbnB1dCIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwiYmFzZTY0RGVjVG9BcnIiLCJiYXNlNjRTdHJpbmciLCJlbmNvZGVkU3RyaW5nIiwicmVwbGFjZSIsImxlbmd0aCIsImJpblN0cmluZyIsImF0b2IiLCJVaW50OEFycmF5IiwiZnJvbSIsIm0iLCJjb2RlUG9pbnRBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64Encode: () => (/* binding */ base64Encode),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode),\n/* harmony export */   urlEncodeArr: () => (/* binding */ urlEncodeArr)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */ /**\r\n * Returns URL Safe b64 encoded string from a plaintext string.\r\n * @param input\r\n */ function urlEncode(input) {\n    return encodeURIComponent(base64Encode(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\"));\n}\n/**\r\n * Returns URL Safe b64 encoded string from an int8Array.\r\n * @param inputArr\r\n */ function urlEncodeArr(inputArr) {\n    return base64EncArr(inputArr).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n/**\r\n * Returns b64 encoded string from plaintext string.\r\n * @param input\r\n */ function base64Encode(input) {\n    return base64EncArr(new TextEncoder().encode(input));\n}\n/**\r\n * Base64 encode byte array\r\n * @param aBytes\r\n */ function base64EncArr(aBytes) {\n    const binString = Array.from(aBytes, (x)=>String.fromCodePoint(x)).join(\"\");\n    return btoa(binString);\n}\n //# sourceMappingURL=Base64Encode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2VuY29kZS9CYXNlNjRFbmNvZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNELFNBQVNBLFVBQVVDLEtBQUs7SUFDcEIsT0FBT0MsbUJBQW1CQyxhQUFhRixPQUNsQ0csT0FBTyxDQUFDLE1BQU0sSUFDZEEsT0FBTyxDQUFDLE9BQU8sS0FDZkEsT0FBTyxDQUFDLE9BQU87QUFDeEI7QUFDQTs7O0NBR0MsR0FDRCxTQUFTQyxhQUFhQyxRQUFRO0lBQzFCLE9BQU9DLGFBQWFELFVBQ2ZGLE9BQU8sQ0FBQyxNQUFNLElBQ2RBLE9BQU8sQ0FBQyxPQUFPLEtBQ2ZBLE9BQU8sQ0FBQyxPQUFPO0FBQ3hCO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0QsYUFBYUYsS0FBSztJQUN2QixPQUFPTSxhQUFhLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ1I7QUFDakQ7QUFDQTs7O0NBR0MsR0FDRCxTQUFTTSxhQUFhRyxNQUFNO0lBQ3hCLE1BQU1DLFlBQVlDLE1BQU1DLElBQUksQ0FBQ0gsUUFBUSxDQUFDSSxJQUFNQyxPQUFPQyxhQUFhLENBQUNGLElBQUlHLElBQUksQ0FBQztJQUMxRSxPQUFPQyxLQUFLUDtBQUNoQjtBQUVpRCxDQUNqRCx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvZW5jb2RlL0Jhc2U2NEVuY29kZS5tanM/NTBhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ2xhc3Mgd2hpY2ggZXhwb3NlcyBBUElzIHRvIGVuY29kZSBwbGFpbnRleHQgdG8gYmFzZTY0IGVuY29kZWQgc3RyaW5nLiBTZWUgaGVyZSBmb3IgaW1wbGVtZW50YXRpb24gZGV0YWlsczpcclxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvd0Jhc2U2NC9CYXNlNjRfZW5jb2RpbmdfYW5kX2RlY29kaW5nI1NvbHV0aW9uXzJfJUUyJTgwJTkzX0phdmFTY3JpcHQnc19VVEYtMTZfJTNFX1VURi04XyUzRV9iYXNlNjRcclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIFVSTCBTYWZlIGI2NCBlbmNvZGVkIHN0cmluZyBmcm9tIGEgcGxhaW50ZXh0IHN0cmluZy5cclxuICogQHBhcmFtIGlucHV0XHJcbiAqL1xyXG5mdW5jdGlvbiB1cmxFbmNvZGUoaW5wdXQpIHtcclxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoYmFzZTY0RW5jb2RlKGlucHV0KVxyXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpXHJcbiAgICAgICAgLnJlcGxhY2UoL1xcKy9nLCBcIi1cIilcclxuICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgVVJMIFNhZmUgYjY0IGVuY29kZWQgc3RyaW5nIGZyb20gYW4gaW50OEFycmF5LlxyXG4gKiBAcGFyYW0gaW5wdXRBcnJcclxuICovXHJcbmZ1bmN0aW9uIHVybEVuY29kZUFycihpbnB1dEFycikge1xyXG4gICAgcmV0dXJuIGJhc2U2NEVuY0FycihpbnB1dEFycilcclxuICAgICAgICAucmVwbGFjZSgvPS9nLCBcIlwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXHJcbiAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgYjY0IGVuY29kZWQgc3RyaW5nIGZyb20gcGxhaW50ZXh0IHN0cmluZy5cclxuICogQHBhcmFtIGlucHV0XHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlNjRFbmNvZGUoaW5wdXQpIHtcclxuICAgIHJldHVybiBiYXNlNjRFbmNBcnIobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGlucHV0KSk7XHJcbn1cclxuLyoqXHJcbiAqIEJhc2U2NCBlbmNvZGUgYnl0ZSBhcnJheVxyXG4gKiBAcGFyYW0gYUJ5dGVzXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlNjRFbmNBcnIoYUJ5dGVzKSB7XHJcbiAgICBjb25zdCBiaW5TdHJpbmcgPSBBcnJheS5mcm9tKGFCeXRlcywgKHgpID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KHgpKS5qb2luKFwiXCIpO1xyXG4gICAgcmV0dXJuIGJ0b2EoYmluU3RyaW5nKTtcclxufVxuXG5leHBvcnQgeyBiYXNlNjRFbmNvZGUsIHVybEVuY29kZSwgdXJsRW5jb2RlQXJyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlNjRFbmNvZGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbInVybEVuY29kZSIsImlucHV0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYmFzZTY0RW5jb2RlIiwicmVwbGFjZSIsInVybEVuY29kZUFyciIsImlucHV0QXJyIiwiYmFzZTY0RW5jQXJyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJhQnl0ZXMiLCJiaW5TdHJpbmciLCJBcnJheSIsImZyb20iLCJ4IiwiU3RyaW5nIiwiZnJvbUNvZGVQb2ludCIsImpvaW4iLCJidG9hIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserAuthError: () => (/* binding */ BrowserAuthError),\n/* harmony export */   BrowserAuthErrorCodes: () => (/* reexport module object */ _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   BrowserAuthErrorMessage: () => (/* binding */ BrowserAuthErrorMessage),\n/* harmony export */   BrowserAuthErrorMessages: () => (/* binding */ BrowserAuthErrorMessages),\n/* harmony export */   createBrowserAuthError: () => (/* binding */ createBrowserAuthError)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const BrowserAuthErrorMessages = {\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceNotCreated]: \"The PKCE code challenge and verifier could not be generated.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoNonExistent]: \"The crypto object or function is not available.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyNavigateUri]: \"Navigation URI is empty. Please check stack trace for more info.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noStateInHash]: \"Hash does not contain state. Please verify that the request originated from msal.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseState]: \"Unable to parse state. Please verify that the request originated from msal.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateInteractionTypeMismatch]: \"Hash contains state but the interaction type does not match the caller.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.popupWindowError]: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyWindowError]: \"window.open returned null or undefined window object.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCancelled]: \"User cancelled the flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectInIframe]: \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNestedPopups]: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.iframeClosedPrematurely]: \"The iframe being monitored was closed prematurely.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentLogoutUnsupported]: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountError]: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentPromptValueError]: \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokenRequestCacheError]: \"No token request found in cache.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseTokenRequestCacheError]: \"The cached token request could not be parsed.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCachedAuthorityError]: \"No cached authority found.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authRequestNotSetError]: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheType]: \"Invalid cache type\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonBrowserEnvironment]: \"Login and token requests are not supported in non-browser environments.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseNotOpen]: \"Database is not open!\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.getRequestFailed]: \"Network request failed. Please check the network trace to determine root cause.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseResponse]: \"Failed to parse network response. Check network trace.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToLoadToken]: \"Error loading token to cache.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoKeyNotFound]: \"Cryptographic Key or Keypair not found in browser storage.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeRequired]: \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeOrNativeAccountIdRequired]: \"An authorization code or nativeAccountId must be provided to this flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.spaCodeAndNativeAccountIdPresent]: \"Request cannot contain both spa code and native account id.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseUnavailable]: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeHandshakeTimeout]: \"Timed out while attempting to establish connection to browser extension\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeExtensionNotInstalled]: \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativePromptNotSupported]: \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidBase64String]: \"Invalid base64 encoded string.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPopTokenRequest]: \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToBuildHeaders]: \"Failed to build request headers object.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseHeaders]: \"Failed to parse response headers\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use exported BrowserAuthErrorCodes instead.\r\n * In your app you can do :\r\n * ```\r\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\r\n * ```\r\n */ const BrowserAuthErrorMessage = {\n    pkceNotGenerated: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceNotCreated,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceNotCreated]\n    },\n    cryptoDoesNotExist: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoNonExistent,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoNonExistent]\n    },\n    emptyNavigateUriError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyNavigateUri,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyNavigateUri]\n    },\n    hashEmptyError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashEmptyError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashEmptyError]\n    },\n    hashDoesNotContainStateError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noStateInHash,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noStateInHash]\n    },\n    hashDoesNotContainKnownPropertiesError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashDoesNotContainKnownProperties,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashDoesNotContainKnownProperties]\n    },\n    unableToParseStateError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseState,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseState]\n    },\n    stateInteractionTypeMismatchError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateInteractionTypeMismatch,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateInteractionTypeMismatch]\n    },\n    interactionInProgress: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionInProgress,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionInProgress]\n    },\n    popupWindowError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.popupWindowError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.popupWindowError]\n    },\n    emptyWindowError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyWindowError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyWindowError]\n    },\n    userCancelledError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCancelled,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCancelled]\n    },\n    monitorPopupTimeoutError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorPopupTimeout,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorPopupTimeout]\n    },\n    monitorIframeTimeoutError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorWindowTimeout,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorWindowTimeout]\n    },\n    redirectInIframeError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectInIframe,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectInIframe]\n    },\n    blockTokenRequestsInHiddenIframeError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockIframeReload,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockIframeReload]\n    },\n    blockAcquireTokenInPopupsError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNestedPopups,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNestedPopups]\n    },\n    iframeClosedPrematurelyError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.iframeClosedPrematurely,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.iframeClosedPrematurely]\n    },\n    silentLogoutUnsupportedError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentLogoutUnsupported,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentLogoutUnsupported]\n    },\n    noAccountError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountError]\n    },\n    silentPromptValueError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentPromptValueError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentPromptValueError]\n    },\n    noTokenRequestCacheError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokenRequestCacheError]\n    },\n    unableToParseTokenRequestCacheError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseTokenRequestCacheError]\n    },\n    noCachedAuthorityError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCachedAuthorityError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCachedAuthorityError]\n    },\n    authRequestNotSet: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authRequestNotSetError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authRequestNotSetError]\n    },\n    invalidCacheType: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheType,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheType]\n    },\n    notInBrowserEnvironment: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonBrowserEnvironment,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonBrowserEnvironment]\n    },\n    databaseNotOpen: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseNotOpen,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseNotOpen]\n    },\n    noNetworkConnectivity: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]\n    },\n    postRequestFailed: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]\n    },\n    getRequestFailed: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.getRequestFailed,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.getRequestFailed]\n    },\n    failedToParseNetworkResponse: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseResponse,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseResponse]\n    },\n    unableToLoadTokenError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToLoadToken,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToLoadToken]\n    },\n    signingKeyNotFoundInStorage: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoKeyNotFound,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoKeyNotFound]\n    },\n    authCodeRequired: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeRequired,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeRequired]\n    },\n    authCodeOrNativeAccountRequired: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeOrNativeAccountIdRequired,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeOrNativeAccountIdRequired]\n    },\n    spaCodeAndNativeAccountPresent: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.spaCodeAndNativeAccountIdPresent,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.spaCodeAndNativeAccountIdPresent]\n    },\n    databaseUnavailable: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseUnavailable,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseUnavailable]\n    },\n    unableToAcquireTokenFromNativePlatform: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToAcquireTokenFromNativePlatform,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToAcquireTokenFromNativePlatform]\n    },\n    nativeHandshakeTimeout: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeHandshakeTimeout,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeHandshakeTimeout]\n    },\n    nativeExtensionNotInstalled: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeExtensionNotInstalled,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeExtensionNotInstalled]\n    },\n    nativeConnectionNotEstablished: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeConnectionNotEstablished,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeConnectionNotEstablished]\n    },\n    uninitializedPublicClientApplication: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.uninitializedPublicClientApplication,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.uninitializedPublicClientApplication]\n    },\n    nativePromptNotSupported: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativePromptNotSupported,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativePromptNotSupported]\n    },\n    invalidBase64StringError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidBase64String,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidBase64String]\n    },\n    invalidPopTokenRequest: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPopTokenRequest,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPopTokenRequest]\n    }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */ class BrowserAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, subError){\n        super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\n        this.name = \"BrowserAuthError\";\n    }\n}\nfunction createBrowserAuthError(errorCode, subError) {\n    return new BrowserAuthError(errorCode, subError);\n}\n //# sourceMappingURL=BrowserAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authCodeOrNativeAccountIdRequired: () => (/* binding */ authCodeOrNativeAccountIdRequired),\n/* harmony export */   authCodeRequired: () => (/* binding */ authCodeRequired),\n/* harmony export */   authRequestNotSetError: () => (/* binding */ authRequestNotSetError),\n/* harmony export */   blockIframeReload: () => (/* binding */ blockIframeReload),\n/* harmony export */   blockNestedPopups: () => (/* binding */ blockNestedPopups),\n/* harmony export */   cryptoKeyNotFound: () => (/* binding */ cryptoKeyNotFound),\n/* harmony export */   cryptoNonExistent: () => (/* binding */ cryptoNonExistent),\n/* harmony export */   databaseNotOpen: () => (/* binding */ databaseNotOpen),\n/* harmony export */   databaseUnavailable: () => (/* binding */ databaseUnavailable),\n/* harmony export */   emptyNavigateUri: () => (/* binding */ emptyNavigateUri),\n/* harmony export */   emptyWindowError: () => (/* binding */ emptyWindowError),\n/* harmony export */   failedToBuildHeaders: () => (/* binding */ failedToBuildHeaders),\n/* harmony export */   failedToParseHeaders: () => (/* binding */ failedToParseHeaders),\n/* harmony export */   failedToParseResponse: () => (/* binding */ failedToParseResponse),\n/* harmony export */   getRequestFailed: () => (/* binding */ getRequestFailed),\n/* harmony export */   hashDoesNotContainKnownProperties: () => (/* binding */ hashDoesNotContainKnownProperties),\n/* harmony export */   hashEmptyError: () => (/* binding */ hashEmptyError),\n/* harmony export */   iframeClosedPrematurely: () => (/* binding */ iframeClosedPrematurely),\n/* harmony export */   interactionInProgress: () => (/* binding */ interactionInProgress),\n/* harmony export */   invalidBase64String: () => (/* binding */ invalidBase64String),\n/* harmony export */   invalidCacheType: () => (/* binding */ invalidCacheType),\n/* harmony export */   invalidPopTokenRequest: () => (/* binding */ invalidPopTokenRequest),\n/* harmony export */   monitorPopupTimeout: () => (/* binding */ monitorPopupTimeout),\n/* harmony export */   monitorWindowTimeout: () => (/* binding */ monitorWindowTimeout),\n/* harmony export */   nativeConnectionNotEstablished: () => (/* binding */ nativeConnectionNotEstablished),\n/* harmony export */   nativeExtensionNotInstalled: () => (/* binding */ nativeExtensionNotInstalled),\n/* harmony export */   nativeHandshakeTimeout: () => (/* binding */ nativeHandshakeTimeout),\n/* harmony export */   nativePromptNotSupported: () => (/* binding */ nativePromptNotSupported),\n/* harmony export */   noAccountError: () => (/* binding */ noAccountError),\n/* harmony export */   noCachedAuthorityError: () => (/* binding */ noCachedAuthorityError),\n/* harmony export */   noNetworkConnectivity: () => (/* binding */ noNetworkConnectivity),\n/* harmony export */   noStateInHash: () => (/* binding */ noStateInHash),\n/* harmony export */   noTokenRequestCacheError: () => (/* binding */ noTokenRequestCacheError),\n/* harmony export */   nonBrowserEnvironment: () => (/* binding */ nonBrowserEnvironment),\n/* harmony export */   pkceNotCreated: () => (/* binding */ pkceNotCreated),\n/* harmony export */   popupWindowError: () => (/* binding */ popupWindowError),\n/* harmony export */   postRequestFailed: () => (/* binding */ postRequestFailed),\n/* harmony export */   redirectInIframe: () => (/* binding */ redirectInIframe),\n/* harmony export */   silentLogoutUnsupported: () => (/* binding */ silentLogoutUnsupported),\n/* harmony export */   silentPromptValueError: () => (/* binding */ silentPromptValueError),\n/* harmony export */   spaCodeAndNativeAccountIdPresent: () => (/* binding */ spaCodeAndNativeAccountIdPresent),\n/* harmony export */   stateInteractionTypeMismatch: () => (/* binding */ stateInteractionTypeMismatch),\n/* harmony export */   unableToAcquireTokenFromNativePlatform: () => (/* binding */ unableToAcquireTokenFromNativePlatform),\n/* harmony export */   unableToLoadToken: () => (/* binding */ unableToLoadToken),\n/* harmony export */   unableToParseState: () => (/* binding */ unableToParseState),\n/* harmony export */   unableToParseTokenRequestCacheError: () => (/* binding */ unableToParseTokenRequestCacheError),\n/* harmony export */   uninitializedPublicClientApplication: () => (/* binding */ uninitializedPublicClientApplication),\n/* harmony export */   userCancelled: () => (/* binding */ userCancelled)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const pkceNotCreated = \"pkce_not_created\";\nconst cryptoNonExistent = \"crypto_nonexistent\";\nconst emptyNavigateUri = \"empty_navigate_uri\";\nconst hashEmptyError = \"hash_empty_error\";\nconst noStateInHash = \"no_state_in_hash\";\nconst hashDoesNotContainKnownProperties = \"hash_does_not_contain_known_properties\";\nconst unableToParseState = \"unable_to_parse_state\";\nconst stateInteractionTypeMismatch = \"state_interaction_type_mismatch\";\nconst interactionInProgress = \"interaction_in_progress\";\nconst popupWindowError = \"popup_window_error\";\nconst emptyWindowError = \"empty_window_error\";\nconst userCancelled = \"user_cancelled\";\nconst monitorPopupTimeout = \"monitor_popup_timeout\";\nconst monitorWindowTimeout = \"monitor_window_timeout\";\nconst redirectInIframe = \"redirect_in_iframe\";\nconst blockIframeReload = \"block_iframe_reload\";\nconst blockNestedPopups = \"block_nested_popups\";\nconst iframeClosedPrematurely = \"iframe_closed_prematurely\";\nconst silentLogoutUnsupported = \"silent_logout_unsupported\";\nconst noAccountError = \"no_account_error\";\nconst silentPromptValueError = \"silent_prompt_value_error\";\nconst noTokenRequestCacheError = \"no_token_request_cache_error\";\nconst unableToParseTokenRequestCacheError = \"unable_to_parse_token_request_cache_error\";\nconst noCachedAuthorityError = \"no_cached_authority_error\";\nconst authRequestNotSetError = \"auth_request_not_set_error\";\nconst invalidCacheType = \"invalid_cache_type\";\nconst nonBrowserEnvironment = \"non_browser_environment\";\nconst databaseNotOpen = \"database_not_open\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst postRequestFailed = \"post_request_failed\";\nconst getRequestFailed = \"get_request_failed\";\nconst failedToParseResponse = \"failed_to_parse_response\";\nconst unableToLoadToken = \"unable_to_load_token\";\nconst cryptoKeyNotFound = \"crypto_key_not_found\";\nconst authCodeRequired = \"auth_code_required\";\nconst authCodeOrNativeAccountIdRequired = \"auth_code_or_nativeAccountId_required\";\nconst spaCodeAndNativeAccountIdPresent = \"spa_code_and_nativeAccountId_present\";\nconst databaseUnavailable = \"database_unavailable\";\nconst unableToAcquireTokenFromNativePlatform = \"unable_to_acquire_token_from_native_platform\";\nconst nativeHandshakeTimeout = \"native_handshake_timeout\";\nconst nativeExtensionNotInstalled = \"native_extension_not_installed\";\nconst nativeConnectionNotEstablished = \"native_connection_not_established\";\nconst uninitializedPublicClientApplication = \"uninitialized_public_client_application\";\nconst nativePromptNotSupported = \"native_prompt_not_supported\";\nconst invalidBase64String = \"invalid_base64_string\";\nconst invalidPopTokenRequest = \"invalid_pop_token_request\";\nconst failedToBuildHeaders = \"failed_to_build_headers\";\nconst failedToParseHeaders = \"failed_to_parse_headers\";\n //# sourceMappingURL=BrowserAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserConfigurationAuthError: () => (/* binding */ BrowserConfigurationAuthError),\n/* harmony export */   BrowserConfigurationAuthErrorCodes: () => (/* reexport module object */ _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   BrowserConfigurationAuthErrorMessage: () => (/* binding */ BrowserConfigurationAuthErrorMessage),\n/* harmony export */   BrowserConfigurationAuthErrorMessages: () => (/* binding */ BrowserConfigurationAuthErrorMessages),\n/* harmony export */   createBrowserConfigurationAuthError: () => (/* binding */ createBrowserConfigurationAuthError)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const BrowserConfigurationAuthErrorMessages = {\n    [_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.storageNotSupported]: \"Given storage configuration option was not supported.\",\n    [_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stubbedPublicClientApplicationCalled]: \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\",\n    [_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.inMemRedirectUnavailable]: \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use BrowserAuthErrorCodes instead\r\n */ const BrowserConfigurationAuthErrorMessage = {\n    storageNotSupportedError: {\n        code: _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.storageNotSupported,\n        desc: BrowserConfigurationAuthErrorMessages[_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.storageNotSupported]\n    },\n    stubPcaInstanceCalled: {\n        code: _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stubbedPublicClientApplicationCalled,\n        desc: BrowserConfigurationAuthErrorMessages[_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stubbedPublicClientApplicationCalled]\n    },\n    inMemRedirectUnavailable: {\n        code: _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.inMemRedirectUnavailable,\n        desc: BrowserConfigurationAuthErrorMessages[_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.inMemRedirectUnavailable]\n    }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */ class BrowserConfigurationAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        this.name = \"BrowserConfigurationAuthError\";\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\n    }\n}\nfunction createBrowserConfigurationAuthError(errorCode) {\n    return new BrowserConfigurationAuthError(errorCode, BrowserConfigurationAuthErrorMessages[errorCode]);\n}\n //# sourceMappingURL=BrowserConfigurationAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL0Jyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3VEO0FBQ3dGO0FBQ2hEO0FBQ2pEO0FBRTlDOzs7Q0FHQyxHQUNELE1BQU1LLHdDQUF3QztJQUMxQyxDQUFDSix3RkFBbUJBLENBQUMsRUFBRTtJQUN2QixDQUFDQyx5R0FBb0NBLENBQUMsRUFBRTtJQUN4QyxDQUFDQyw2RkFBd0JBLENBQUMsRUFBRTtBQUNoQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1HLHVDQUF1QztJQUN6Q0MsMEJBQTBCO1FBQ3RCQyxNQUFNUCx3RkFBbUJBO1FBQ3pCUSxNQUFNSixxQ0FBcUMsQ0FBQ0osd0ZBQW1CQSxDQUFDO0lBQ3BFO0lBQ0FTLHVCQUF1QjtRQUNuQkYsTUFBTU4seUdBQW9DQTtRQUMxQ08sTUFBTUoscUNBQXFDLENBQUNILHlHQUFvQ0EsQ0FBQztJQUNyRjtJQUNBQywwQkFBMEI7UUFDdEJLLE1BQU1MLDZGQUF3QkE7UUFDOUJNLE1BQU1KLHFDQUFxQyxDQUFDRiw2RkFBd0JBLENBQUM7SUFDekU7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTVEsc0NBQXNDWCxpRUFBU0E7SUFDakRZLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxDQUFFO1FBQ2pDLEtBQUssQ0FBQ0QsV0FBV0M7UUFDakIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRU4sOEJBQThCTyxTQUFTO0lBQ3ZFO0FBQ0o7QUFDQSxTQUFTQyxvQ0FBb0NOLFNBQVM7SUFDbEQsT0FBTyxJQUFJRiw4QkFBOEJFLFdBQVdSLHFDQUFxQyxDQUFDUSxVQUFVO0FBQ3hHO0FBRTJKLENBQzNKLDBEQUEwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9lcnJvci9Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvci5tanM/ODg3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IHN0b3JhZ2VOb3RTdXBwb3J0ZWQsIHN0dWJiZWRQdWJsaWNDbGllbnRBcHBsaWNhdGlvbkNhbGxlZCwgaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlIH0gZnJvbSAnLi9Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvckNvZGVzLm1qcyc7XG5pbXBvcnQgKiBhcyBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvckNvZGVzIGZyb20gJy4vQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JDb2Rlcy5tanMnO1xuZXhwb3J0IHsgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JDb2RlcyB9O1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlcyA9IHtcclxuICAgIFtzdG9yYWdlTm90U3VwcG9ydGVkXTogXCJHaXZlbiBzdG9yYWdlIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHdhcyBub3Qgc3VwcG9ydGVkLlwiLFxyXG4gICAgW3N0dWJiZWRQdWJsaWNDbGllbnRBcHBsaWNhdGlvbkNhbGxlZF06IFwiU3R1YiBpbnN0YW5jZSBvZiBQdWJsaWMgQ2xpZW50IEFwcGxpY2F0aW9uIHdhcyBjYWxsZWQuIElmIHVzaW5nIG1zYWwtcmVhY3QsIHBsZWFzZSBlbnN1cmUgY29udGV4dCBpcyBub3QgdXNlZCB3aXRob3V0IGEgcHJvdmlkZXIuIEZvciBtb3JlIHZpc2l0OiBha2EubXMvbXNhbGpzL2Jyb3dzZXItZXJyb3JzXCIsXHJcbiAgICBbaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlXTogXCJSZWRpcmVjdCBjYW5ub3QgYmUgc3VwcG9ydGVkLiBJbi1tZW1vcnkgc3RvcmFnZSB3YXMgc2VsZWN0ZWQgYW5kIHN0b3JlQXV0aFN0YXRlSW5Db29raWU9ZmFsc2UsIHdoaWNoIHdvdWxkIGNhdXNlIHRoZSBsaWJyYXJ5IHRvIGJlIHVuYWJsZSB0byBoYW5kbGUgdGhlIGluY29taW5nIGhhc2guIElmIHlvdSB3b3VsZCBsaWtlIHRvIHVzZSB0aGUgcmVkaXJlY3QgQVBJLCBwbGVhc2UgdXNlIHNlc3Npb24vbG9jYWxTdG9yYWdlIG9yIHNldCBzdG9yZUF1dGhTdGF0ZUluQ29va2llPXRydWUuXCIsXHJcbn07XHJcbi8qKlxyXG4gKiBCcm93c2VyQXV0aEVycm9yTWVzc2FnZSBjbGFzcyBjb250YWluaW5nIHN0cmluZyBjb25zdGFudHMgdXNlZCBieSBlcnJvciBjb2RlcyBhbmQgbWVzc2FnZXMuXHJcbiAqIEBkZXByZWNhdGVkIFVzZSBCcm93c2VyQXV0aEVycm9yQ29kZXMgaW5zdGVhZFxyXG4gKi9cclxuY29uc3QgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlID0ge1xyXG4gICAgc3RvcmFnZU5vdFN1cHBvcnRlZEVycm9yOiB7XHJcbiAgICAgICAgY29kZTogc3RvcmFnZU5vdFN1cHBvcnRlZCxcclxuICAgICAgICBkZXNjOiBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvck1lc3NhZ2VzW3N0b3JhZ2VOb3RTdXBwb3J0ZWRdLFxyXG4gICAgfSxcclxuICAgIHN0dWJQY2FJbnN0YW5jZUNhbGxlZDoge1xyXG4gICAgICAgIGNvZGU6IHN0dWJiZWRQdWJsaWNDbGllbnRBcHBsaWNhdGlvbkNhbGxlZCxcclxuICAgICAgICBkZXNjOiBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvck1lc3NhZ2VzW3N0dWJiZWRQdWJsaWNDbGllbnRBcHBsaWNhdGlvbkNhbGxlZF0sXHJcbiAgICB9LFxyXG4gICAgaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlOiB7XHJcbiAgICAgICAgY29kZTogaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlLFxyXG4gICAgICAgIGRlc2M6IEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yTWVzc2FnZXNbaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlXSxcclxuICAgIH0sXHJcbn07XHJcbi8qKlxyXG4gKiBCcm93c2VyIGxpYnJhcnkgZXJyb3IgY2xhc3MgdGhyb3duIGJ5IHRoZSBNU0FMLmpzIGxpYnJhcnkgZm9yIFNQQXNcclxuICovXHJcbmNsYXNzIEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JcIjtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IucHJvdG90eXBlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvcihlcnJvckNvZGUpIHtcclxuICAgIHJldHVybiBuZXcgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IoZXJyb3JDb2RlLCBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvck1lc3NhZ2VzW2Vycm9yQ29kZV0pO1xyXG59XG5cbmV4cG9ydCB7IEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yLCBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvck1lc3NhZ2UsIEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yTWVzc2FnZXMsIGNyZWF0ZUJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aEVycm9yIiwic3RvcmFnZU5vdFN1cHBvcnRlZCIsInN0dWJiZWRQdWJsaWNDbGllbnRBcHBsaWNhdGlvbkNhbGxlZCIsImluTWVtUmVkaXJlY3RVbmF2YWlsYWJsZSIsIkJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yQ29kZXMiLCJCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvck1lc3NhZ2VzIiwiQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlIiwic3RvcmFnZU5vdFN1cHBvcnRlZEVycm9yIiwiY29kZSIsImRlc2MiLCJzdHViUGNhSW5zdGFuY2VDYWxsZWQiLCJCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JDb2RlIiwiZXJyb3JNZXNzYWdlIiwibmFtZSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiY3JlYXRlQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inMemRedirectUnavailable: () => (/* binding */ inMemRedirectUnavailable),\n/* harmony export */   storageNotSupported: () => (/* binding */ storageNotSupported),\n/* harmony export */   stubbedPublicClientApplicationCalled: () => (/* binding */ stubbedPublicClientApplicationCalled)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const storageNotSupported = \"storage_not_supported\";\nconst stubbedPublicClientApplicationCalled = \"stubbed_public_client_application_called\";\nconst inMemRedirectUnavailable = \"in_mem_redirect_unavailable\";\n //# sourceMappingURL=BrowserConfigurationAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL0Jyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLHNCQUFzQjtBQUM1QixNQUFNQyx1Q0FBdUM7QUFDN0MsTUFBTUMsMkJBQTJCO0FBRThELENBQy9GLCtEQUErRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9lcnJvci9Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvckNvZGVzLm1qcz9kMDNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IHN0b3JhZ2VOb3RTdXBwb3J0ZWQgPSBcInN0b3JhZ2Vfbm90X3N1cHBvcnRlZFwiO1xyXG5jb25zdCBzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWQgPSBcInN0dWJiZWRfcHVibGljX2NsaWVudF9hcHBsaWNhdGlvbl9jYWxsZWRcIjtcclxuY29uc3QgaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlID0gXCJpbl9tZW1fcmVkaXJlY3RfdW5hdmFpbGFibGVcIjtcblxuZXhwb3J0IHsgaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlLCBzdG9yYWdlTm90U3VwcG9ydGVkLCBzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbInN0b3JhZ2VOb3RTdXBwb3J0ZWQiLCJzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWQiLCJpbk1lbVJlZGlyZWN0VW5hdmFpbGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NativeAuthError: () => (/* binding */ NativeAuthError),\n/* harmony export */   NativeAuthErrorMessages: () => (/* binding */ NativeAuthErrorMessages),\n/* harmony export */   createNativeAuthError: () => (/* binding */ createNativeAuthError),\n/* harmony export */   isFatalNativeAuthError: () => (/* binding */ isFatalNativeAuthError)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/* harmony import */ var _BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NativeAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../broker/nativeBroker/NativeStatusCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs\");\n/* harmony import */ var _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const INVALID_METHOD_ERROR = -2147186943;\nconst NativeAuthErrorMessages = {\n    [_NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userSwitch]: \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\"\n};\nclass NativeAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, description, ext){\n        super(errorCode, description);\n        Object.setPrototypeOf(this, NativeAuthError.prototype);\n        this.name = \"NativeAuthError\";\n        this.ext = ext;\n    }\n}\n/**\r\n * These errors should result in a fallback to the 'standard' browser based auth flow.\r\n */ function isFatalNativeAuthError(error) {\n    if (error.ext && error.ext.status && (error.ext.status === _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.PERSISTENT_ERROR || error.ext.status === _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.DISABLED)) {\n        return true;\n    }\n    if (error.ext && error.ext.error && error.ext.error === INVALID_METHOD_ERROR) {\n        return true;\n    }\n    switch(error.errorCode){\n        case _NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.contentError:\n            return true;\n        default:\n            return false;\n    }\n}\n/**\r\n * Create the appropriate error object based on the WAM status code.\r\n * @param code\r\n * @param description\r\n * @param ext\r\n * @returns\r\n */ function createNativeAuthError(code, description, ext) {\n    if (ext && ext.status) {\n        switch(ext.status){\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.ACCOUNT_UNAVAILABLE:\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createInteractionRequiredAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nativeAccountUnavailable);\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.USER_INTERACTION_REQUIRED:\n                return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.InteractionRequiredAuthError(code, description);\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.USER_CANCEL:\n                return (0,_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.userCancelled);\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.NO_NETWORK:\n                return (0,_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.noNetworkConnectivity);\n        }\n    }\n    return new NativeAuthError(code, NativeAuthErrorMessages[code] || description, ext);\n}\n //# sourceMappingURL=NativeAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL05hdGl2ZUF1dGhFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNEo7QUFDNUY7QUFDTTtBQUM2RjtBQUNoRjtBQUVuRjs7O0NBR0MsR0FDRCxNQUFNZSx1QkFBdUIsQ0FBQztBQUM5QixNQUFNQywwQkFBMEI7SUFDNUIsQ0FBQ1YsaUVBQVVBLENBQUMsRUFBRTtBQUNsQjtBQUNBLE1BQU1XLHdCQUF3QmpCLGlFQUFTQTtJQUNuQ2tCLFlBQVlDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxHQUFHLENBQUU7UUFDckMsS0FBSyxDQUFDRixXQUFXQztRQUNqQkUsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRU4sZ0JBQWdCTyxTQUFTO1FBQ3JELElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDSixHQUFHLEdBQUdBO0lBQ2Y7QUFDSjtBQUNBOztDQUVDLEdBQ0QsU0FBU0ssdUJBQXVCQyxLQUFLO0lBQ2pDLElBQUlBLE1BQU1OLEdBQUcsSUFDVE0sTUFBTU4sR0FBRyxDQUFDTyxNQUFNLElBQ2ZELENBQUFBLE1BQU1OLEdBQUcsQ0FBQ08sTUFBTSxLQUFLckIsd0ZBQWdCQSxJQUNsQ29CLE1BQU1OLEdBQUcsQ0FBQ08sTUFBTSxLQUFLcEIsZ0ZBQU8sR0FBSTtRQUNwQyxPQUFPO0lBQ1g7SUFDQSxJQUFJbUIsTUFBTU4sR0FBRyxJQUNUTSxNQUFNTixHQUFHLENBQUNNLEtBQUssSUFDZkEsTUFBTU4sR0FBRyxDQUFDTSxLQUFLLEtBQUtaLHNCQUFzQjtRQUMxQyxPQUFPO0lBQ1g7SUFDQSxPQUFRWSxNQUFNUixTQUFTO1FBQ25CLEtBQUtkLG1FQUFZQTtZQUNiLE9BQU87UUFDWDtZQUNJLE9BQU87SUFDZjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU3dCLHNCQUFzQkMsSUFBSSxFQUFFVixXQUFXLEVBQUVDLEdBQUc7SUFDakQsSUFBSUEsT0FBT0EsSUFBSU8sTUFBTSxFQUFFO1FBQ25CLE9BQVFQLElBQUlPLE1BQU07WUFDZCxLQUFLaEIsMkZBQW1CQTtnQkFDcEIsT0FBT1YsOEZBQWtDQSxDQUFDQyxnRkFBMEQ7WUFDeEcsS0FBS1EsaUdBQXlCQTtnQkFDMUIsT0FBTyxJQUFJVixvRkFBNEJBLENBQUM2QixNQUFNVjtZQUNsRCxLQUFLVixtRkFBV0E7Z0JBQ1osT0FBT04sNkVBQXNCQSxDQUFDVSxxRUFBYUE7WUFDL0MsS0FBS0wsa0ZBQVVBO2dCQUNYLE9BQU9MLDZFQUFzQkEsQ0FBQ1MsNkVBQXFCQTtRQUMzRDtJQUNKO0lBQ0EsT0FBTyxJQUFJSSxnQkFBZ0JhLE1BQU1kLHVCQUF1QixDQUFDYyxLQUFLLElBQUlWLGFBQWFDO0FBQ25GO0FBRW1HLENBQ25HLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9lcnJvci9OYXRpdmVBdXRoRXJyb3IubWpzP2NjNzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3IsIEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IsIGNyZWF0ZUludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IsIEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2RlcyB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IgfSBmcm9tICcuL0Jyb3dzZXJBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IGNvbnRlbnRFcnJvciwgdXNlclN3aXRjaCB9IGZyb20gJy4vTmF0aXZlQXV0aEVycm9yQ29kZXMubWpzJztcbmltcG9ydCB7IFBFUlNJU1RFTlRfRVJST1IsIERJU0FCTEVELCBOT19ORVRXT1JLLCBVU0VSX0NBTkNFTCwgVVNFUl9JTlRFUkFDVElPTl9SRVFVSVJFRCwgQUNDT1VOVF9VTkFWQUlMQUJMRSB9IGZyb20gJy4uL2Jyb2tlci9uYXRpdmVCcm9rZXIvTmF0aXZlU3RhdHVzQ29kZXMubWpzJztcbmltcG9ydCB7IG5vTmV0d29ya0Nvbm5lY3Rpdml0eSwgdXNlckNhbmNlbGxlZCB9IGZyb20gJy4vQnJvd3NlckF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBJTlZBTElEX01FVEhPRF9FUlJPUiA9IC0yMTQ3MTg2OTQzO1xyXG5jb25zdCBOYXRpdmVBdXRoRXJyb3JNZXNzYWdlcyA9IHtcclxuICAgIFt1c2VyU3dpdGNoXTogXCJVc2VyIGF0dGVtcHRlZCB0byBzd2l0Y2ggYWNjb3VudHMgaW4gdGhlIG5hdGl2ZSBicm9rZXIsIHdoaWNoIGlzIG5vdCBhbGxvd2VkLiBBbGwgbmV3IGFjY291bnRzIG11c3Qgc2lnbi1pbiB0aHJvdWdoIHRoZSBzdGFuZGFyZCB3ZWIgZmxvdyBmaXJzdCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxufTtcclxuY2xhc3MgTmF0aXZlQXV0aEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZGVzY3JpcHRpb24sIGV4dCkge1xyXG4gICAgICAgIHN1cGVyKGVycm9yQ29kZSwgZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBOYXRpdmVBdXRoRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIk5hdGl2ZUF1dGhFcnJvclwiO1xyXG4gICAgICAgIHRoaXMuZXh0ID0gZXh0O1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBUaGVzZSBlcnJvcnMgc2hvdWxkIHJlc3VsdCBpbiBhIGZhbGxiYWNrIHRvIHRoZSAnc3RhbmRhcmQnIGJyb3dzZXIgYmFzZWQgYXV0aCBmbG93LlxyXG4gKi9cclxuZnVuY3Rpb24gaXNGYXRhbE5hdGl2ZUF1dGhFcnJvcihlcnJvcikge1xyXG4gICAgaWYgKGVycm9yLmV4dCAmJlxyXG4gICAgICAgIGVycm9yLmV4dC5zdGF0dXMgJiZcclxuICAgICAgICAoZXJyb3IuZXh0LnN0YXR1cyA9PT0gUEVSU0lTVEVOVF9FUlJPUiB8fFxyXG4gICAgICAgICAgICBlcnJvci5leHQuc3RhdHVzID09PSBESVNBQkxFRCkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChlcnJvci5leHQgJiZcclxuICAgICAgICBlcnJvci5leHQuZXJyb3IgJiZcclxuICAgICAgICBlcnJvci5leHQuZXJyb3IgPT09IElOVkFMSURfTUVUSE9EX0VSUk9SKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKGVycm9yLmVycm9yQ29kZSkge1xyXG4gICAgICAgIGNhc2UgY29udGVudEVycm9yOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgZXJyb3Igb2JqZWN0IGJhc2VkIG9uIHRoZSBXQU0gc3RhdHVzIGNvZGUuXHJcbiAqIEBwYXJhbSBjb2RlXHJcbiAqIEBwYXJhbSBkZXNjcmlwdGlvblxyXG4gKiBAcGFyYW0gZXh0XHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVOYXRpdmVBdXRoRXJyb3IoY29kZSwgZGVzY3JpcHRpb24sIGV4dCkge1xyXG4gICAgaWYgKGV4dCAmJiBleHQuc3RhdHVzKSB7XHJcbiAgICAgICAgc3dpdGNoIChleHQuc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQUNDT1VOVF9VTkFWQUlMQUJMRTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yKEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2Rlcy5uYXRpdmVBY2NvdW50VW5hdmFpbGFibGUpO1xyXG4gICAgICAgICAgICBjYXNlIFVTRVJfSU5URVJBQ1RJT05fUkVRVUlSRUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IoY29kZSwgZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICBjYXNlIFVTRVJfQ0FOQ0VMOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IodXNlckNhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgIGNhc2UgTk9fTkVUV09SSzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCcm93c2VyQXV0aEVycm9yKG5vTmV0d29ya0Nvbm5lY3Rpdml0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBOYXRpdmVBdXRoRXJyb3IoY29kZSwgTmF0aXZlQXV0aEVycm9yTWVzc2FnZXNbY29kZV0gfHwgZGVzY3JpcHRpb24sIGV4dCk7XHJcbn1cblxuZXhwb3J0IHsgTmF0aXZlQXV0aEVycm9yLCBOYXRpdmVBdXRoRXJyb3JNZXNzYWdlcywgY3JlYXRlTmF0aXZlQXV0aEVycm9yLCBpc0ZhdGFsTmF0aXZlQXV0aEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OYXRpdmVBdXRoRXJyb3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhFcnJvciIsIkludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IiLCJjcmVhdGVJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIiwiSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvckNvZGVzIiwiY3JlYXRlQnJvd3NlckF1dGhFcnJvciIsImNvbnRlbnRFcnJvciIsInVzZXJTd2l0Y2giLCJQRVJTSVNURU5UX0VSUk9SIiwiRElTQUJMRUQiLCJOT19ORVRXT1JLIiwiVVNFUl9DQU5DRUwiLCJVU0VSX0lOVEVSQUNUSU9OX1JFUVVJUkVEIiwiQUNDT1VOVF9VTkFWQUlMQUJMRSIsIm5vTmV0d29ya0Nvbm5lY3Rpdml0eSIsInVzZXJDYW5jZWxsZWQiLCJJTlZBTElEX01FVEhPRF9FUlJPUiIsIk5hdGl2ZUF1dGhFcnJvck1lc3NhZ2VzIiwiTmF0aXZlQXV0aEVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvckNvZGUiLCJkZXNjcmlwdGlvbiIsImV4dCIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwibmFtZSIsImlzRmF0YWxOYXRpdmVBdXRoRXJyb3IiLCJlcnJvciIsInN0YXR1cyIsImNyZWF0ZU5hdGl2ZUF1dGhFcnJvciIsImNvZGUiLCJuYXRpdmVBY2NvdW50VW5hdmFpbGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentError: () => (/* binding */ contentError),\n/* harmony export */   userSwitch: () => (/* binding */ userSwitch)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const contentError = \"ContentError\";\nconst userSwitch = \"user_switch\";\n //# sourceMappingURL=NativeAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL05hdGl2ZUF1dGhFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLGVBQWU7QUFDckIsTUFBTUMsYUFBYTtBQUVpQixDQUNwQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvZXJyb3IvTmF0aXZlQXV0aEVycm9yQ29kZXMubWpzP2ZkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgY29udGVudEVycm9yID0gXCJDb250ZW50RXJyb3JcIjtcclxuY29uc3QgdXNlclN3aXRjaCA9IFwidXNlcl9zd2l0Y2hcIjtcblxuZXhwb3J0IHsgY29udGVudEVycm9yLCB1c2VyU3dpdGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OYXRpdmVBdXRoRXJyb3JDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsiY29udGVudEVycm9yIiwidXNlclN3aXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppAuthError: () => (/* binding */ NestedAppAuthError),\n/* harmony export */   NestedAppAuthErrorMessage: () => (/* binding */ NestedAppAuthErrorMessage)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"This method is not supported in nested app environment.\"\n    }\n};\nclass NestedAppAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n    static createUnsupportedError() {\n        return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code, NestedAppAuthErrorMessage.unsupportedMethod.desc);\n    }\n}\n //# sourceMappingURL=NestedAppAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL05lc3RlZEFwcEF1dGhFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3VEO0FBRXZEOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUMsNEJBQTRCO0lBQzlCQyxtQkFBbUI7UUFDZkMsTUFBTTtRQUNOQyxNQUFNO0lBQ1Y7QUFDSjtBQUNBLE1BQU1DLDJCQUEyQkwsaUVBQVNBO0lBQ3RDTSxZQUFZQyxTQUFTLEVBQUVDLFlBQVksQ0FBRTtRQUNqQyxLQUFLLENBQUNELFdBQVdDO1FBQ2pCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFTCxtQkFBbUJNLFNBQVM7UUFDeEQsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7SUFDQSxPQUFPQyx5QkFBeUI7UUFDNUIsT0FBTyxJQUFJUixtQkFBbUJKLDBCQUEwQkMsaUJBQWlCLENBQUNDLElBQUksRUFBRUYsMEJBQTBCQyxpQkFBaUIsQ0FBQ0UsSUFBSTtJQUNwSTtBQUNKO0FBRXlELENBQ3pELCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9lcnJvci9OZXN0ZWRBcHBBdXRoRXJyb3IubWpzPzc5N2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3IgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogTmVzdGVkQXBwQXV0aEVycm9yTWVzc2FnZSBjbGFzcyBjb250YWluaW5nIHN0cmluZyBjb25zdGFudHMgdXNlZCBieSBlcnJvciBjb2RlcyBhbmQgbWVzc2FnZXMuXHJcbiAqL1xyXG5jb25zdCBOZXN0ZWRBcHBBdXRoRXJyb3JNZXNzYWdlID0ge1xyXG4gICAgdW5zdXBwb3J0ZWRNZXRob2Q6IHtcclxuICAgICAgICBjb2RlOiBcInVuc3VwcG9ydGVkX21ldGhvZFwiLFxyXG4gICAgICAgIGRlc2M6IFwiVGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCBpbiBuZXN0ZWQgYXBwIGVudmlyb25tZW50LlwiLFxyXG4gICAgfSxcclxufTtcclxuY2xhc3MgTmVzdGVkQXBwQXV0aEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBOZXN0ZWRBcHBBdXRoRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIk5lc3RlZEFwcEF1dGhFcnJvclwiO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNyZWF0ZVVuc3VwcG9ydGVkRXJyb3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOZXN0ZWRBcHBBdXRoRXJyb3IoTmVzdGVkQXBwQXV0aEVycm9yTWVzc2FnZS51bnN1cHBvcnRlZE1ldGhvZC5jb2RlLCBOZXN0ZWRBcHBBdXRoRXJyb3JNZXNzYWdlLnVuc3VwcG9ydGVkTWV0aG9kLmRlc2MpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IE5lc3RlZEFwcEF1dGhFcnJvciwgTmVzdGVkQXBwQXV0aEVycm9yTWVzc2FnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmVzdGVkQXBwQXV0aEVycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRoRXJyb3IiLCJOZXN0ZWRBcHBBdXRoRXJyb3JNZXNzYWdlIiwidW5zdXBwb3J0ZWRNZXRob2QiLCJjb2RlIiwiZGVzYyIsIk5lc3RlZEFwcEF1dGhFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JDb2RlIiwiZXJyb3JNZXNzYWdlIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJuYW1lIiwiY3JlYXRlVW5zdXBwb3J0ZWRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventHandler: () => (/* binding */ EventHandler)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class EventHandler {\n    constructor(logger){\n        this.eventCallbacks = new Map();\n        this.logger = logger || new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Logger({});\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback - callback to be invoked when an event is raised\r\n     * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\r\n     * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\r\n     */ addEventCallback(callback, eventTypes, callbackId) {\n        if (false) {}\n        return null;\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */ emitEvent(eventType, interactionType, payload, error) {\n        if (false) {}\n    }\n}\n //# sourceMappingURL=EventHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2V2ZW50L0V2ZW50SGFuZGxlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDb0Q7QUFDRztBQUV2RDs7O0NBR0MsR0FDRCxNQUFNRTtJQUNGQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSUM7UUFDMUIsSUFBSSxDQUFDRixNQUFNLEdBQUdBLFVBQVUsSUFBSUosOERBQU1BLENBQUMsQ0FBQztJQUN4QztJQUNBOzs7OztLQUtDLEdBQ0RPLGlCQUFpQkMsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRTtRQUMvQyxJQUFJLEtBQTZCLEVBQUUsRUFTbEM7UUFDRCxPQUFPO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRE0sb0JBQW9CTixVQUFVLEVBQUU7UUFDNUIsSUFBSSxDQUFDTCxjQUFjLENBQUNZLE1BQU0sQ0FBQ1A7UUFDM0IsSUFBSSxDQUFDTixNQUFNLENBQUNXLE9BQU8sQ0FBQyxDQUFDLGVBQWUsRUFBRUwsV0FBVyxTQUFTLENBQUM7SUFDL0Q7SUFDQTs7Ozs7O0tBTUMsR0FDRFEsVUFBVUMsU0FBUyxFQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRVIsS0FBSyxFQUFFO1FBQ2xELElBQUksS0FBNkIsRUFBRSxFQWVsQztJQUNMO0FBQ0o7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2V2ZW50L0V2ZW50SGFuZGxlci5tanM/N2I1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IGNyZWF0ZUd1aWQgfSBmcm9tICcuLi91dGlscy9Ccm93c2VyVXRpbHMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIEV2ZW50SGFuZGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihsb2dnZXIpIHtcclxuICAgICAgICB0aGlzLmV2ZW50Q2FsbGJhY2tzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyIHx8IG5ldyBMb2dnZXIoe30pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGV2ZW50IGNhbGxiYWNrcyB0byBhcnJheVxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGFuIGV2ZW50IGlzIHJhaXNlZFxyXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZXMgLSBsaXN0IG9mIGV2ZW50cyB0aGF0IHRoaXMgY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkIGZvciwgaWYgbm90IHByb3ZpZGVkIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBmb3IgYWxsIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrSWQgLSBJZGVudGlmaWVyIGZvciB0aGUgY2FsbGJhY2ssIHVzZWQgdG8gbG9jYXRlIGFuZCByZW1vdmUgdGhlIGNhbGxiYWNrIHdoZW4gbm8gbG9uZ2VyIHJlcXVpcmVkXHJcbiAgICAgKi9cclxuICAgIGFkZEV2ZW50Q2FsbGJhY2soY2FsbGJhY2ssIGV2ZW50VHlwZXMsIGNhbGxiYWNrSWQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IGNhbGxiYWNrSWQgfHwgY3JlYXRlR3VpZCgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ldmVudENhbGxiYWNrcy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihgRXZlbnQgY2FsbGJhY2sgd2l0aCBpZDogJHtpZH0gaXMgYWxyZWFkeSByZWdpc3RlcmVkLiBQbGVhc2UgcHJvdmlkZSBhIHVuaXF1ZSBpZCBvciByZW1vdmUgdGhlIGV4aXN0aW5nIGNhbGxiYWNrIGFuZCB0cnkgYWdhaW4uYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmV2ZW50Q2FsbGJhY2tzLnNldChpZCwgW2NhbGxiYWNrLCBldmVudFR5cGVzIHx8IFtdXSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYEV2ZW50IGNhbGxiYWNrIHJlZ2lzdGVyZWQgd2l0aCBpZDogJHtpZH1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBjYWxsYmFjayB3aXRoIHByb3ZpZGVkIGlkIGZyb20gY2FsbGJhY2sgYXJyYXlcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja0lkXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUV2ZW50Q2FsbGJhY2soY2FsbGJhY2tJZCkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrSWQpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYEV2ZW50IGNhbGxiYWNrICR7Y2FsbGJhY2tJZH0gcmVtb3ZlZC5gKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgZXZlbnRzIGJ5IGNhbGxpbmcgY2FsbGJhY2sgd2l0aCBldmVudCBtZXNzYWdlXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0gaW50ZXJhY3Rpb25UeXBlXHJcbiAgICAgKiBAcGFyYW0gcGF5bG9hZFxyXG4gICAgICogQHBhcmFtIGVycm9yXHJcbiAgICAgKi9cclxuICAgIGVtaXRFdmVudChldmVudFR5cGUsIGludGVyYWN0aW9uVHlwZSwgcGF5bG9hZCwgZXJyb3IpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXHJcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvblR5cGU6IGludGVyYWN0aW9uVHlwZSB8fCBudWxsLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCB8fCBudWxsLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yIHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRDYWxsYmFja3MuZm9yRWFjaCgoW2NhbGxiYWNrLCBldmVudFR5cGVzXSwgY2FsbGJhY2tJZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50VHlwZXMubGVuZ3RoID09PSAwIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlcy5pbmNsdWRlcyhldmVudFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShgRW1pdHRpbmcgZXZlbnQgdG8gY2FsbGJhY2sgJHtjYWxsYmFja0lkfTogJHtldmVudFR5cGV9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgW21lc3NhZ2VdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IEV2ZW50SGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXZlbnRIYW5kbGVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJMb2dnZXIiLCJjcmVhdGVHdWlkIiwiRXZlbnRIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJsb2dnZXIiLCJldmVudENhbGxiYWNrcyIsIk1hcCIsImFkZEV2ZW50Q2FsbGJhY2siLCJjYWxsYmFjayIsImV2ZW50VHlwZXMiLCJjYWxsYmFja0lkIiwiaWQiLCJoYXMiLCJlcnJvciIsInNldCIsInZlcmJvc2UiLCJyZW1vdmVFdmVudENhbGxiYWNrIiwiZGVsZXRlIiwiZW1pdEV2ZW50IiwiZXZlbnRUeXBlIiwiaW50ZXJhY3Rpb25UeXBlIiwicGF5bG9hZCIsIm1lc3NhZ2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwiZm9yRWFjaCIsImxlbmd0aCIsImluY2x1ZGVzIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/event/EventMessage.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventMessage.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventMessageUtils: () => (/* binding */ EventMessageUtils)\n/* harmony export */ });\n/* harmony import */ var _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class EventMessageUtils {\n    /**\r\n     * Gets interaction status from event message\r\n     * @param message\r\n     * @param currentStatus\r\n     */ static getInteractionStatusFromEvent(message, currentStatus) {\n        switch(message.eventType){\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGIN_START:\n                return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Login;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.SSO_SILENT_START:\n                return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.SsoSilent;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.ACQUIRE_TOKEN_START:\n                if (message.interactionType === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect || message.interactionType === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Popup) {\n                    return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.AcquireToken;\n                }\n                break;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.HANDLE_REDIRECT_START:\n                return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.HandleRedirect;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGOUT_START:\n                return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Logout;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.SSO_SILENT_SUCCESS:\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.SSO_SILENT_FAILURE:\n                if (currentStatus && currentStatus !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.SsoSilent) {\n                    break;\n                }\n                return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGOUT_END:\n                if (currentStatus && currentStatus !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Logout) {\n                    break;\n                }\n                return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.HANDLE_REDIRECT_END:\n                if (currentStatus && currentStatus !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.HandleRedirect) {\n                    break;\n                }\n                return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGIN_SUCCESS:\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.LOGIN_FAILURE:\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.ACQUIRE_TOKEN_SUCCESS:\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.ACQUIRE_TOKEN_FAILURE:\n            case _EventType_mjs__WEBPACK_IMPORTED_MODULE_0__.EventType.RESTORE_FROM_BFCACHE:\n                if (message.interactionType === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Redirect || message.interactionType === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionType.Popup) {\n                    if (currentStatus && currentStatus !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.Login && currentStatus !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.AcquireToken) {\n                        break;\n                    }\n                    return _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.InteractionStatus.None;\n                }\n                break;\n        }\n        return null;\n    }\n}\n //# sourceMappingURL=EventMessage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2V2ZW50L0V2ZW50TWVzc2FnZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQzRDO0FBQ3VDO0FBRW5GOzs7Q0FHQyxHQUNELE1BQU1HO0lBQ0Y7Ozs7S0FJQyxHQUNELE9BQU9DLDhCQUE4QkMsT0FBTyxFQUFFQyxhQUFhLEVBQUU7UUFDekQsT0FBUUQsUUFBUUUsU0FBUztZQUNyQixLQUFLUCxxREFBU0EsQ0FBQ1EsV0FBVztnQkFDdEIsT0FBT04sMEVBQWlCQSxDQUFDTyxLQUFLO1lBQ2xDLEtBQUtULHFEQUFTQSxDQUFDVSxnQkFBZ0I7Z0JBQzNCLE9BQU9SLDBFQUFpQkEsQ0FBQ1MsU0FBUztZQUN0QyxLQUFLWCxxREFBU0EsQ0FBQ1ksbUJBQW1CO2dCQUM5QixJQUFJUCxRQUFRUSxlQUFlLEtBQUtaLHdFQUFlQSxDQUFDYSxRQUFRLElBQ3BEVCxRQUFRUSxlQUFlLEtBQUtaLHdFQUFlQSxDQUFDYyxLQUFLLEVBQUU7b0JBQ25ELE9BQU9iLDBFQUFpQkEsQ0FBQ2MsWUFBWTtnQkFDekM7Z0JBQ0E7WUFDSixLQUFLaEIscURBQVNBLENBQUNpQixxQkFBcUI7Z0JBQ2hDLE9BQU9mLDBFQUFpQkEsQ0FBQ2dCLGNBQWM7WUFDM0MsS0FBS2xCLHFEQUFTQSxDQUFDbUIsWUFBWTtnQkFDdkIsT0FBT2pCLDBFQUFpQkEsQ0FBQ2tCLE1BQU07WUFDbkMsS0FBS3BCLHFEQUFTQSxDQUFDcUIsa0JBQWtCO1lBQ2pDLEtBQUtyQixxREFBU0EsQ0FBQ3NCLGtCQUFrQjtnQkFDN0IsSUFBSWhCLGlCQUNBQSxrQkFBa0JKLDBFQUFpQkEsQ0FBQ1MsU0FBUyxFQUFFO29CQUUvQztnQkFDSjtnQkFDQSxPQUFPVCwwRUFBaUJBLENBQUNxQixJQUFJO1lBQ2pDLEtBQUt2QixxREFBU0EsQ0FBQ3dCLFVBQVU7Z0JBQ3JCLElBQUlsQixpQkFDQUEsa0JBQWtCSiwwRUFBaUJBLENBQUNrQixNQUFNLEVBQUU7b0JBRTVDO2dCQUNKO2dCQUNBLE9BQU9sQiwwRUFBaUJBLENBQUNxQixJQUFJO1lBQ2pDLEtBQUt2QixxREFBU0EsQ0FBQ3lCLG1CQUFtQjtnQkFDOUIsSUFBSW5CLGlCQUNBQSxrQkFBa0JKLDBFQUFpQkEsQ0FBQ2dCLGNBQWMsRUFBRTtvQkFFcEQ7Z0JBQ0o7Z0JBQ0EsT0FBT2hCLDBFQUFpQkEsQ0FBQ3FCLElBQUk7WUFDakMsS0FBS3ZCLHFEQUFTQSxDQUFDMEIsYUFBYTtZQUM1QixLQUFLMUIscURBQVNBLENBQUMyQixhQUFhO1lBQzVCLEtBQUszQixxREFBU0EsQ0FBQzRCLHFCQUFxQjtZQUNwQyxLQUFLNUIscURBQVNBLENBQUM2QixxQkFBcUI7WUFDcEMsS0FBSzdCLHFEQUFTQSxDQUFDOEIsb0JBQW9CO2dCQUMvQixJQUFJekIsUUFBUVEsZUFBZSxLQUFLWix3RUFBZUEsQ0FBQ2EsUUFBUSxJQUNwRFQsUUFBUVEsZUFBZSxLQUFLWix3RUFBZUEsQ0FBQ2MsS0FBSyxFQUFFO29CQUNuRCxJQUFJVCxpQkFDQUEsa0JBQWtCSiwwRUFBaUJBLENBQUNPLEtBQUssSUFDekNILGtCQUFrQkosMEVBQWlCQSxDQUFDYyxZQUFZLEVBQUU7d0JBRWxEO29CQUNKO29CQUNBLE9BQU9kLDBFQUFpQkEsQ0FBQ3FCLElBQUk7Z0JBQ2pDO2dCQUNBO1FBQ1I7UUFDQSxPQUFPO0lBQ1g7QUFDSjtBQUU2QixDQUM3Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvZXZlbnQvRXZlbnRNZXNzYWdlLm1qcz83MmU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi9FdmVudFR5cGUubWpzJztcbmltcG9ydCB7IEludGVyYWN0aW9uVHlwZSwgSW50ZXJhY3Rpb25TdGF0dXMgfSBmcm9tICcuLi91dGlscy9Ccm93c2VyQ29uc3RhbnRzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBFdmVudE1lc3NhZ2VVdGlscyB7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaW50ZXJhY3Rpb24gc3RhdHVzIGZyb20gZXZlbnQgbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VcclxuICAgICAqIEBwYXJhbSBjdXJyZW50U3RhdHVzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRJbnRlcmFjdGlvblN0YXR1c0Zyb21FdmVudChtZXNzYWdlLCBjdXJyZW50U3RhdHVzKSB7XHJcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLmV2ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5MT0dJTl9TVEFSVDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBJbnRlcmFjdGlvblN0YXR1cy5Mb2dpbjtcclxuICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuU1NPX1NJTEVOVF9TVEFSVDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBJbnRlcmFjdGlvblN0YXR1cy5Tc29TaWxlbnQ7XHJcbiAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLkFDUVVJUkVfVE9LRU5fU1RBUlQ6XHJcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbnRlcmFjdGlvblR5cGUgPT09IEludGVyYWN0aW9uVHlwZS5SZWRpcmVjdCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW50ZXJhY3Rpb25UeXBlID09PSBJbnRlcmFjdGlvblR5cGUuUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSW50ZXJhY3Rpb25TdGF0dXMuQWNxdWlyZVRva2VuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLkhBTkRMRV9SRURJUkVDVF9TVEFSVDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBJbnRlcmFjdGlvblN0YXR1cy5IYW5kbGVSZWRpcmVjdDtcclxuICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuTE9HT1VUX1NUQVJUOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEludGVyYWN0aW9uU3RhdHVzLkxvZ291dDtcclxuICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuU1NPX1NJTEVOVF9TVUNDRVNTOlxyXG4gICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5TU09fU0lMRU5UX0ZBSUxVUkU6XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFN0YXR1cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0dXMgIT09IEludGVyYWN0aW9uU3RhdHVzLlNzb1NpbGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhpcyBldmVudCBmcm9tIGNsZWFyaW5nIGFueSBzdGF0dXMgb3RoZXIgdGhhbiBzc29TaWxlbnRcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBJbnRlcmFjdGlvblN0YXR1cy5Ob25lO1xyXG4gICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5MT0dPVVRfRU5EOlxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0dXMgJiZcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdHVzICE9PSBJbnRlcmFjdGlvblN0YXR1cy5Mb2dvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoaXMgZXZlbnQgZnJvbSBjbGVhcmluZyBhbnkgc3RhdHVzIG90aGVyIHRoYW4gbG9nb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW50ZXJhY3Rpb25TdGF0dXMuTm9uZTtcclxuICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuSEFORExFX1JFRElSRUNUX0VORDpcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdHVzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXR1cyAhPT0gSW50ZXJhY3Rpb25TdGF0dXMuSGFuZGxlUmVkaXJlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoaXMgZXZlbnQgZnJvbSBjbGVhcmluZyBhbnkgc3RhdHVzIG90aGVyIHRoYW4gaGFuZGxlUmVkaXJlY3RcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBJbnRlcmFjdGlvblN0YXR1cy5Ob25lO1xyXG4gICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5MT0dJTl9TVUNDRVNTOlxyXG4gICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5MT0dJTl9GQUlMVVJFOlxyXG4gICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5BQ1FVSVJFX1RPS0VOX1NVQ0NFU1M6XHJcbiAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLkFDUVVJUkVfVE9LRU5fRkFJTFVSRTpcclxuICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuUkVTVE9SRV9GUk9NX0JGQ0FDSEU6XHJcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbnRlcmFjdGlvblR5cGUgPT09IEludGVyYWN0aW9uVHlwZS5SZWRpcmVjdCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW50ZXJhY3Rpb25UeXBlID09PSBJbnRlcmFjdGlvblR5cGUuUG9wdXApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFN0YXR1cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdHVzICE9PSBJbnRlcmFjdGlvblN0YXR1cy5Mb2dpbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdHVzICE9PSBJbnRlcmFjdGlvblN0YXR1cy5BY3F1aXJlVG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCB0aGlzIGV2ZW50IGZyb20gY2xlYXJpbmcgYW55IHN0YXR1cyBvdGhlciB0aGFuIGxvZ2luIG9yIGFjcXVpcmVUb2tlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEludGVyYWN0aW9uU3RhdHVzLk5vbmU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgRXZlbnRNZXNzYWdlVXRpbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50TWVzc2FnZS5tanMubWFwXG4iXSwibmFtZXMiOlsiRXZlbnRUeXBlIiwiSW50ZXJhY3Rpb25UeXBlIiwiSW50ZXJhY3Rpb25TdGF0dXMiLCJFdmVudE1lc3NhZ2VVdGlscyIsImdldEludGVyYWN0aW9uU3RhdHVzRnJvbUV2ZW50IiwibWVzc2FnZSIsImN1cnJlbnRTdGF0dXMiLCJldmVudFR5cGUiLCJMT0dJTl9TVEFSVCIsIkxvZ2luIiwiU1NPX1NJTEVOVF9TVEFSVCIsIlNzb1NpbGVudCIsIkFDUVVJUkVfVE9LRU5fU1RBUlQiLCJpbnRlcmFjdGlvblR5cGUiLCJSZWRpcmVjdCIsIlBvcHVwIiwiQWNxdWlyZVRva2VuIiwiSEFORExFX1JFRElSRUNUX1NUQVJUIiwiSGFuZGxlUmVkaXJlY3QiLCJMT0dPVVRfU1RBUlQiLCJMb2dvdXQiLCJTU09fU0lMRU5UX1NVQ0NFU1MiLCJTU09fU0lMRU5UX0ZBSUxVUkUiLCJOb25lIiwiTE9HT1VUX0VORCIsIkhBTkRMRV9SRURJUkVDVF9FTkQiLCJMT0dJTl9TVUNDRVNTIiwiTE9HSU5fRkFJTFVSRSIsIkFDUVVJUkVfVE9LRU5fU1VDQ0VTUyIsIkFDUVVJUkVfVE9LRU5fRkFJTFVSRSIsIlJFU1RPUkVfRlJPTV9CRkNBQ0hFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/event/EventMessage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventType.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventType: () => (/* binding */ EventType)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const EventType = {\n    INITIALIZE_START: \"msal:initializeStart\",\n    INITIALIZE_END: \"msal:initializeEnd\",\n    ACCOUNT_ADDED: \"msal:accountAdded\",\n    ACCOUNT_REMOVED: \"msal:accountRemoved\",\n    ACTIVE_ACCOUNT_CHANGED: \"msal:activeAccountChanged\",\n    LOGIN_START: \"msal:loginStart\",\n    LOGIN_SUCCESS: \"msal:loginSuccess\",\n    LOGIN_FAILURE: \"msal:loginFailure\",\n    ACQUIRE_TOKEN_START: \"msal:acquireTokenStart\",\n    ACQUIRE_TOKEN_SUCCESS: \"msal:acquireTokenSuccess\",\n    ACQUIRE_TOKEN_FAILURE: \"msal:acquireTokenFailure\",\n    ACQUIRE_TOKEN_NETWORK_START: \"msal:acquireTokenFromNetworkStart\",\n    SSO_SILENT_START: \"msal:ssoSilentStart\",\n    SSO_SILENT_SUCCESS: \"msal:ssoSilentSuccess\",\n    SSO_SILENT_FAILURE: \"msal:ssoSilentFailure\",\n    ACQUIRE_TOKEN_BY_CODE_START: \"msal:acquireTokenByCodeStart\",\n    ACQUIRE_TOKEN_BY_CODE_SUCCESS: \"msal:acquireTokenByCodeSuccess\",\n    ACQUIRE_TOKEN_BY_CODE_FAILURE: \"msal:acquireTokenByCodeFailure\",\n    HANDLE_REDIRECT_START: \"msal:handleRedirectStart\",\n    HANDLE_REDIRECT_END: \"msal:handleRedirectEnd\",\n    POPUP_OPENED: \"msal:popupOpened\",\n    LOGOUT_START: \"msal:logoutStart\",\n    LOGOUT_SUCCESS: \"msal:logoutSuccess\",\n    LOGOUT_FAILURE: \"msal:logoutFailure\",\n    LOGOUT_END: \"msal:logoutEnd\",\n    RESTORE_FROM_BFCACHE: \"msal:restoreFromBFCache\"\n};\n //# sourceMappingURL=EventType.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2V2ZW50L0V2ZW50VHlwZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLFlBQVk7SUFDZEMsa0JBQWtCO0lBQ2xCQyxnQkFBZ0I7SUFDaEJDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyx3QkFBd0I7SUFDeEJDLGFBQWE7SUFDYkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLHFCQUFxQjtJQUNyQkMsdUJBQXVCO0lBQ3ZCQyx1QkFBdUI7SUFDdkJDLDZCQUE2QjtJQUM3QkMsa0JBQWtCO0lBQ2xCQyxvQkFBb0I7SUFDcEJDLG9CQUFvQjtJQUNwQkMsNkJBQTZCO0lBQzdCQywrQkFBK0I7SUFDL0JDLCtCQUErQjtJQUMvQkMsdUJBQXVCO0lBQ3ZCQyxxQkFBcUI7SUFDckJDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxnQkFBZ0I7SUFDaEJDLGdCQUFnQjtJQUNoQkMsWUFBWTtJQUNaQyxzQkFBc0I7QUFDMUI7QUFFcUIsQ0FDckIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2V2ZW50L0V2ZW50VHlwZS5tanM/MWExMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBFdmVudFR5cGUgPSB7XHJcbiAgICBJTklUSUFMSVpFX1NUQVJUOiBcIm1zYWw6aW5pdGlhbGl6ZVN0YXJ0XCIsXHJcbiAgICBJTklUSUFMSVpFX0VORDogXCJtc2FsOmluaXRpYWxpemVFbmRcIixcclxuICAgIEFDQ09VTlRfQURERUQ6IFwibXNhbDphY2NvdW50QWRkZWRcIixcclxuICAgIEFDQ09VTlRfUkVNT1ZFRDogXCJtc2FsOmFjY291bnRSZW1vdmVkXCIsXHJcbiAgICBBQ1RJVkVfQUNDT1VOVF9DSEFOR0VEOiBcIm1zYWw6YWN0aXZlQWNjb3VudENoYW5nZWRcIixcclxuICAgIExPR0lOX1NUQVJUOiBcIm1zYWw6bG9naW5TdGFydFwiLFxyXG4gICAgTE9HSU5fU1VDQ0VTUzogXCJtc2FsOmxvZ2luU3VjY2Vzc1wiLFxyXG4gICAgTE9HSU5fRkFJTFVSRTogXCJtc2FsOmxvZ2luRmFpbHVyZVwiLFxyXG4gICAgQUNRVUlSRV9UT0tFTl9TVEFSVDogXCJtc2FsOmFjcXVpcmVUb2tlblN0YXJ0XCIsXHJcbiAgICBBQ1FVSVJFX1RPS0VOX1NVQ0NFU1M6IFwibXNhbDphY3F1aXJlVG9rZW5TdWNjZXNzXCIsXHJcbiAgICBBQ1FVSVJFX1RPS0VOX0ZBSUxVUkU6IFwibXNhbDphY3F1aXJlVG9rZW5GYWlsdXJlXCIsXHJcbiAgICBBQ1FVSVJFX1RPS0VOX05FVFdPUktfU1RBUlQ6IFwibXNhbDphY3F1aXJlVG9rZW5Gcm9tTmV0d29ya1N0YXJ0XCIsXHJcbiAgICBTU09fU0lMRU5UX1NUQVJUOiBcIm1zYWw6c3NvU2lsZW50U3RhcnRcIixcclxuICAgIFNTT19TSUxFTlRfU1VDQ0VTUzogXCJtc2FsOnNzb1NpbGVudFN1Y2Nlc3NcIixcclxuICAgIFNTT19TSUxFTlRfRkFJTFVSRTogXCJtc2FsOnNzb1NpbGVudEZhaWx1cmVcIixcclxuICAgIEFDUVVJUkVfVE9LRU5fQllfQ09ERV9TVEFSVDogXCJtc2FsOmFjcXVpcmVUb2tlbkJ5Q29kZVN0YXJ0XCIsXHJcbiAgICBBQ1FVSVJFX1RPS0VOX0JZX0NPREVfU1VDQ0VTUzogXCJtc2FsOmFjcXVpcmVUb2tlbkJ5Q29kZVN1Y2Nlc3NcIixcclxuICAgIEFDUVVJUkVfVE9LRU5fQllfQ09ERV9GQUlMVVJFOiBcIm1zYWw6YWNxdWlyZVRva2VuQnlDb2RlRmFpbHVyZVwiLFxyXG4gICAgSEFORExFX1JFRElSRUNUX1NUQVJUOiBcIm1zYWw6aGFuZGxlUmVkaXJlY3RTdGFydFwiLFxyXG4gICAgSEFORExFX1JFRElSRUNUX0VORDogXCJtc2FsOmhhbmRsZVJlZGlyZWN0RW5kXCIsXHJcbiAgICBQT1BVUF9PUEVORUQ6IFwibXNhbDpwb3B1cE9wZW5lZFwiLFxyXG4gICAgTE9HT1VUX1NUQVJUOiBcIm1zYWw6bG9nb3V0U3RhcnRcIixcclxuICAgIExPR09VVF9TVUNDRVNTOiBcIm1zYWw6bG9nb3V0U3VjY2Vzc1wiLFxyXG4gICAgTE9HT1VUX0ZBSUxVUkU6IFwibXNhbDpsb2dvdXRGYWlsdXJlXCIsXHJcbiAgICBMT0dPVVRfRU5EOiBcIm1zYWw6bG9nb3V0RW5kXCIsXHJcbiAgICBSRVNUT1JFX0ZST01fQkZDQUNIRTogXCJtc2FsOnJlc3RvcmVGcm9tQkZDYWNoZVwiLFxyXG59O1xuXG5leHBvcnQgeyBFdmVudFR5cGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50VHlwZS5tanMubWFwXG4iXSwibmFtZXMiOlsiRXZlbnRUeXBlIiwiSU5JVElBTElaRV9TVEFSVCIsIklOSVRJQUxJWkVfRU5EIiwiQUNDT1VOVF9BRERFRCIsIkFDQ09VTlRfUkVNT1ZFRCIsIkFDVElWRV9BQ0NPVU5UX0NIQU5HRUQiLCJMT0dJTl9TVEFSVCIsIkxPR0lOX1NVQ0NFU1MiLCJMT0dJTl9GQUlMVVJFIiwiQUNRVUlSRV9UT0tFTl9TVEFSVCIsIkFDUVVJUkVfVE9LRU5fU1VDQ0VTUyIsIkFDUVVJUkVfVE9LRU5fRkFJTFVSRSIsIkFDUVVJUkVfVE9LRU5fTkVUV09SS19TVEFSVCIsIlNTT19TSUxFTlRfU1RBUlQiLCJTU09fU0lMRU5UX1NVQ0NFU1MiLCJTU09fU0lMRU5UX0ZBSUxVUkUiLCJBQ1FVSVJFX1RPS0VOX0JZX0NPREVfU1RBUlQiLCJBQ1FVSVJFX1RPS0VOX0JZX0NPREVfU1VDQ0VTUyIsIkFDUVVJUkVfVE9LRU5fQllfQ09ERV9GQUlMVVJFIiwiSEFORExFX1JFRElSRUNUX1NUQVJUIiwiSEFORExFX1JFRElSRUNUX0VORCIsIlBPUFVQX09QRU5FRCIsIkxPR09VVF9TVEFSVCIsIkxPR09VVF9TVUNDRVNTIiwiTE9HT1VUX0ZBSUxVUkUiLCJMT0dPVVRfRU5EIiwiUkVTVE9SRV9GUk9NX0JGQ0FDSEUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseInteractionClient: () => (/* binding */ BaseInteractionClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class BaseInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId){\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.navigationClient = navigationClient;\n        this.nativeMessageHandler = nativeMessageHandler;\n        this.correlationId = correlationId || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.createNewGuid)();\n        this.logger = logger.clone(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.MSAL_SKU, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.version, this.correlationId);\n        this.performanceClient = performanceClient;\n    }\n    async clearCacheOnLogout(account) {\n        if (account) {\n            if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.generateAccountCacheKey(account));\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            } catch (error) {\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            }\n        } else {\n            try {\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n            } catch (e) {\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            }\n        }\n    }\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * @param requestRedirectUri\r\n     * @returns Redirect URL\r\n     *\r\n     */ getRedirectUri(requestRedirectUri) {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri;\n        return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.UrlString.getAbsoluteUrl(redirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.getCurrentUri)());\n    }\n    /**\r\n     *\r\n     * @param apiId\r\n     * @param correlationId\r\n     * @param forceRefresh\r\n     */ initializeServerTelemetryManager(apiId, forceRefresh) {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n        };\n        return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.ServerTelemetryManager(telemetryPayload, this.browserStorage);\n    }\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param params {\r\n     *         requestAuthority?: string;\r\n     *         requestAzureCloudOptions?: AzureCloudOptions;\r\n     *         requestExtraQueryParameters?: StringDict;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async getDiscoveredAuthority(params) {\n        const { account } = params;\n        const instanceAwareEQ = params.requestExtraQueryParameters && params.requestExtraQueryParameters.hasOwnProperty(\"instance_aware\") ? params.requestExtraQueryParameters[\"instance_aware\"] : undefined;\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n        const authorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n        };\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const resolvedAuthority = params.requestAuthority || this.config.auth.authority;\n        const resolvedInstanceAware = instanceAwareEQ?.length ? instanceAwareEQ === \"true\" : this.config.auth.instanceAware;\n        const userAuthority = account && resolvedInstanceAware ? this.config.auth.authority.replace(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.UrlString.getDomainFromUrl(resolvedAuthority), account.environment) : resolvedAuthority;\n        // fall back to the authority from config\n        const builtAuthority = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.Authority.generateAuthority(userAuthority, params.requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n        const discoveredAuthority = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.invokeAsync)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createDiscoveredInstance, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.logger, this.performanceClient, this.correlationId)(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.correlationId, this.performanceClient);\n        if (account && !discoveredAuthority.isAlias(account.environment)) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.authorityMismatch);\n        }\n        return discoveredAuthority;\n    }\n}\n //# sourceMappingURL=BaseInteractionClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HybridSpaAuthorizationCodeClient: () => (/* binding */ HybridSpaAuthorizationCodeClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class HybridSpaAuthorizationCodeClient extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.AuthorizationCodeClient {\n    constructor(config){\n        super(config);\n        this.includeRedirectUri = false;\n    }\n}\n //# sourceMappingURL=HybridSpaAuthorizationCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9IeWJyaWRTcGFBdXRob3JpemF0aW9uQ29kZUNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDcUU7QUFFckU7OztDQUdDLEdBQ0QsTUFBTUMseUNBQXlDRCwrRUFBdUJBO0lBQ2xFRSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUc7SUFDOUI7QUFDSjtBQUU0QyxDQUM1Qyw2REFBNkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvaW50ZXJhY3Rpb25fY2xpZW50L0h5YnJpZFNwYUF1dGhvcml6YXRpb25Db2RlQ2xpZW50Lm1qcz8xZjc1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aG9yaXphdGlvbkNvZGVDbGllbnQgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBIeWJyaWRTcGFBdXRob3JpemF0aW9uQ29kZUNsaWVudCBleHRlbmRzIEF1dGhvcml6YXRpb25Db2RlQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy5pbmNsdWRlUmVkaXJlY3RVcmkgPSBmYWxzZTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBIeWJyaWRTcGFBdXRob3JpemF0aW9uQ29kZUNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHlicmlkU3BhQXV0aG9yaXphdGlvbkNvZGVDbGllbnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhvcml6YXRpb25Db2RlQ2xpZW50IiwiSHlicmlkU3BhQXV0aG9yaXphdGlvbkNvZGVDbGllbnQiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImluY2x1ZGVSZWRpcmVjdFVyaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NativeInteractionClient: () => (/* binding */ NativeInteractionClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/NativeAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SilentCacheClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/* harmony import */ var _error_NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../error/NativeAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NativeInteractionClient extends _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseInteractionClient {\n    constructor(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, provider, accountId, nativeStorageImpl, correlationId){\n        super(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);\n        this.apiId = apiId;\n        this.accountId = accountId;\n        this.nativeMessageHandler = provider;\n        this.nativeStorageManager = nativeStorageImpl;\n        this.silentCacheClient = new _SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_1__.SilentCacheClient(config, this.nativeStorageManager, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);\n        this.serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n        const extensionName = this.nativeMessageHandler.getExtensionId() === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeConstants.PREFERRED_EXTENSION_ID ? \"chrome\" : this.nativeMessageHandler.getExtensionId()?.length ? \"unknown\" : undefined;\n        this.skus = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ServerTelemetryManager.makeExtraSkuString({\n            libraryName: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.MSAL_SKU,\n            libraryVersion: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__.version,\n            extensionName: extensionName,\n            extensionVersion: this.nativeMessageHandler.getExtensionVersion()\n        });\n    }\n    /**\r\n     * Adds SKUs to request extra query parameters\r\n     * @param request {NativeTokenRequest}\r\n     * @private\r\n     */ addRequestSKUs(request) {\n        request.extraParameters = {\n            ...request.extraParameters,\n            [_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.X_CLIENT_EXTRA_SKU]: this.skus\n        };\n    }\n    /**\r\n     * Acquire token from native platform via browser extension\r\n     * @param request\r\n     */ async acquireToken(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PerformanceEvents.NativeInteractionClientAcquireToken, request.correlationId);\n        this.logger.trace(\"NativeInteractionClient - acquireToken called.\");\n        // start the perf measurement\n        const nativeATMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PerformanceEvents.NativeInteractionClientAcquireToken, request.correlationId);\n        const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.nowSeconds();\n        try {\n            // initialize native request\n            const nativeRequest = await this.initializeNativeRequest(request);\n            // check if the tokens can be retrieved from internal cache\n            try {\n                const result = await this.acquireTokensFromCache(this.accountId, nativeRequest);\n                nativeATMeasurement.end({\n                    success: true,\n                    isNativeBroker: false,\n                    fromCache: true\n                });\n                return result;\n            } catch (e) {\n                // continue with a native call for any and all errors\n                this.logger.info(\"MSAL internal Cache does not contain tokens, proceed to make a native call\");\n            }\n            const { ...nativeTokenRequest } = nativeRequest;\n            // fall back to native calls\n            const messageBody = {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeExtensionMethod.GetToken,\n                request: nativeTokenRequest\n            };\n            const response = await this.nativeMessageHandler.sendMessage(messageBody);\n            const validatedResponse = this.validateNativeResponse(response);\n            return await this.handleNativeResponse(validatedResponse, nativeRequest, reqTimestamp).then((result)=>{\n                nativeATMeasurement.end({\n                    success: true,\n                    isNativeBroker: true,\n                    requestId: result.requestId\n                });\n                this.serverTelemetryManager.clearNativeBrokerErrorCode();\n                return result;\n            }).catch((error)=>{\n                nativeATMeasurement.end({\n                    success: false,\n                    errorCode: error.errorCode,\n                    subErrorCode: error.subError,\n                    isNativeBroker: true\n                });\n                throw error;\n            });\n        } catch (e) {\n            if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.NativeAuthError) {\n                this.serverTelemetryManager.setNativeBrokerErrorCode(e.errorCode);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     * Creates silent flow request\r\n     * @param request\r\n     * @param cachedAccount\r\n     * @returns CommonSilentFlowRequest\r\n     */ createSilentCacheRequest(request, cachedAccount) {\n        return {\n            authority: request.authority,\n            correlationId: this.correlationId,\n            scopes: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(request.scope).asArray(),\n            account: cachedAccount,\n            forceRefresh: false\n        };\n    }\n    /**\r\n     * Fetches the tokens from the cache if un-expired\r\n     * @param nativeAccountId\r\n     * @param request\r\n     * @returns authenticationResult\r\n     */ async acquireTokensFromCache(nativeAccountId, request) {\n        if (!nativeAccountId) {\n            this.logger.warning(\"NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided\");\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.noAccountFound);\n        }\n        // fetch the account from browser cache\n        const account = this.browserStorage.getBaseAccountInfo({\n            nativeAccountId\n        });\n        if (!account) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.noAccountFound);\n        }\n        // leverage silent flow for cached tokens retrieval\n        try {\n            const silentRequest = this.createSilentCacheRequest(request, account);\n            const result = await this.silentCacheClient.acquireToken(silentRequest);\n            const fullAccount = {\n                ...account,\n                idTokenClaims: result?.idTokenClaims,\n                idToken: result?.idToken\n            };\n            return {\n                ...result,\n                account: fullAccount\n            };\n        } catch (e) {\n            throw e;\n        }\n    }\n    /**\r\n     * Acquires a token from native platform then redirects to the redirectUri instead of returning the response\r\n     * @param {RedirectRequest} request\r\n     * @param {InProgressPerformanceEvent} rootMeasurement\r\n     */ async acquireTokenRedirect(request, rootMeasurement) {\n        this.logger.trace(\"NativeInteractionClient - acquireTokenRedirect called.\");\n        const { ...remainingParameters } = request;\n        delete remainingParameters.onRedirectNavigate;\n        const nativeRequest = await this.initializeNativeRequest(remainingParameters);\n        const messageBody = {\n            method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeExtensionMethod.GetToken,\n            request: nativeRequest\n        };\n        try {\n            const response = await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n        } catch (e) {\n            // Only throw fatal errors here to allow application to fallback to regular redirect. Otherwise proceed and the error will be thrown in handleRedirectPromise\n            if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.NativeAuthError) {\n                this.serverTelemetryManager.setNativeBrokerErrorCode(e.errorCode);\n                if ((0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.isFatalNativeAuthError)(e)) {\n                    throw e;\n                }\n            }\n        }\n        this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.NATIVE_REQUEST, JSON.stringify(nativeRequest), true);\n        const navigationOptions = {\n            apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenRedirect,\n            timeout: this.config.system.redirectNavigationTimeout,\n            noHistory: false\n        };\n        const redirectUri = this.config.auth.navigateToLoginRequestUrl ? window.location.href : this.getRedirectUri(request.redirectUri);\n        rootMeasurement.end({\n            success: true\n        });\n        await this.navigationClient.navigateExternal(redirectUri, navigationOptions); // Need to treat this as external to ensure handleRedirectPromise is run again\n    }\n    /**\r\n     * If the previous page called native platform for a token using redirect APIs, send the same request again and return the response\r\n     * @param performanceClient {IPerformanceClient?}\r\n     * @param correlationId {string?} correlation identifier\r\n     */ async handleRedirectPromise(performanceClient, correlationId) {\n        this.logger.trace(\"NativeInteractionClient - handleRedirectPromise called.\");\n        if (!this.browserStorage.isInteractionInProgress(true)) {\n            this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n            return null;\n        }\n        // remove prompt from the request to prevent WAM from prompting twice\n        const cachedRequest = this.browserStorage.getCachedNativeRequest();\n        if (!cachedRequest) {\n            this.logger.verbose(\"NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null.\");\n            if (performanceClient && correlationId) {\n                performanceClient?.addFields({\n                    errorCode: \"no_cached_request\"\n                }, correlationId);\n            }\n            return null;\n        }\n        const { prompt, ...request } = cachedRequest;\n        if (prompt) {\n            this.logger.verbose(\"NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window.\");\n        }\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.NATIVE_REQUEST));\n        const messageBody = {\n            method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeExtensionMethod.GetToken,\n            request: request\n        };\n        const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.nowSeconds();\n        try {\n            this.logger.verbose(\"NativeInteractionClient - handleRedirectPromise sending message to native broker.\");\n            const response = await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n            const result = this.handleNativeResponse(response, request, reqTimestamp);\n            this.browserStorage.setInteractionInProgress(false);\n            const res = await result;\n            this.serverTelemetryManager.clearNativeBrokerErrorCode();\n            return res;\n        } catch (e) {\n            this.browserStorage.setInteractionInProgress(false);\n            throw e;\n        }\n    }\n    /**\r\n     * Logout from native platform via browser extension\r\n     * @param request\r\n     */ logout() {\n        this.logger.trace(\"NativeInteractionClient - logout called.\");\n        return Promise.reject(\"Logout not implemented yet\");\n    }\n    /**\r\n     * Transform response from native platform into AuthenticationResult object which will be returned to the end user\r\n     * @param response\r\n     * @param request\r\n     * @param reqTimestamp\r\n     */ async handleNativeResponse(response, request, reqTimestamp) {\n        this.logger.trace(\"NativeInteractionClient - handleNativeResponse called.\");\n        // generate identifiers\n        const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.extractTokenClaims(response.id_token, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__.base64Decode);\n        const homeAccountIdentifier = this.createHomeAccountIdentifier(response, idTokenClaims);\n        const cachedhomeAccountId = this.browserStorage.getAccountInfoFilteredBy({\n            nativeAccountId: request.accountId\n        })?.homeAccountId;\n        if (homeAccountIdentifier !== cachedhomeAccountId && response.account.id !== request.accountId) {\n            // User switch in native broker prompt is not supported. All users must first sign in through web flow to ensure server state is in sync\n            throw (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.createNativeAuthError)(_error_NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.userSwitch);\n        }\n        // Get the preferred_cache domain for the given authority\n        const authority = await this.getDiscoveredAuthority({\n            requestAuthority: request.authority\n        });\n        const baseAccount = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__.buildAccountToCache)(this.browserStorage, authority, homeAccountIdentifier, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__.base64Decode, idTokenClaims, response.client_info, undefined, idTokenClaims.tid, undefined, response.account.id, this.logger);\n        // generate authenticationResult\n        const result = await this.generateAuthenticationResult(response, request, idTokenClaims, baseAccount, authority.canonicalAuthority, reqTimestamp);\n        // cache accounts and tokens in the appropriate storage\n        this.cacheAccount(baseAccount);\n        this.cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, response.access_token, result.tenantId, reqTimestamp);\n        return result;\n    }\n    /**\r\n     * creates an homeAccountIdentifier for the account\r\n     * @param response\r\n     * @param idTokenObj\r\n     * @returns\r\n     */ createHomeAccountIdentifier(response, idTokenClaims) {\n        // Save account in browser storage\n        const homeAccountIdentifier = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__.AccountEntity.generateHomeAccountId(response.client_info || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.EMPTY_STRING, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.AuthorityType.Default, this.logger, this.browserCrypto, idTokenClaims);\n        return homeAccountIdentifier;\n    }\n    /**\r\n     * Helper to generate scopes\r\n     * @param response\r\n     * @param request\r\n     * @returns\r\n     */ generateScopes(response, request) {\n        return response.scope ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(response.scope) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(request.scope);\n    }\n    /**\r\n     * If PoP token is requesred, records the PoP token if returned from the WAM, else generates one in the browser\r\n     * @param request\r\n     * @param response\r\n     */ async generatePopAccessToken(response, request) {\n        if (request.tokenType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP && request.signPopToken) {\n            /**\r\n             * This code prioritizes SHR returned from the native layer. In case of error/SHR not calculated from WAM and the AT\r\n             * is still received, SHR is calculated locally\r\n             */ // Check if native layer returned an SHR token\n            if (response.shr) {\n                this.logger.trace(\"handleNativeServerResponse: SHR is enabled in native layer\");\n                return response.shr;\n            }\n            // Generate SHR in msal js if WAM does not compute it when POP is enabled\n            const popTokenGenerator = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_19__.PopTokenGenerator(this.browserCrypto);\n            const shrParameters = {\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce\n            };\n            /**\r\n             * KeyID must be present in the native request from when the PoP key was generated in order for\r\n             * PopTokenGenerator to query the full key for signing\r\n             */ if (!request.keyId) {\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.keyIdMissing);\n            }\n            return popTokenGenerator.signPopToken(response.access_token, request.keyId, shrParameters);\n        } else {\n            return response.access_token;\n        }\n    }\n    /**\r\n     * Generates authentication result\r\n     * @param response\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param accountEntity\r\n     * @param authority\r\n     * @param reqTimestamp\r\n     * @returns\r\n     */ async generateAuthenticationResult(response, request, idTokenClaims, accountEntity, authority, reqTimestamp) {\n        // Add Native Broker fields to Telemetry\n        const mats = this.addTelemetryFromNativeResponse(response);\n        // If scopes not returned in server response, use request scopes\n        const responseScopes = response.scope ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(response.scope) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(request.scope);\n        const accountProperties = response.account.properties || {};\n        const uid = accountProperties[\"UID\"] || idTokenClaims.oid || idTokenClaims.sub || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.EMPTY_STRING;\n        const tid = accountProperties[\"TenantId\"] || idTokenClaims.tid || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.EMPTY_STRING;\n        const accountInfo = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.updateAccountTenantProfileData)(accountEntity.getAccountInfo(), undefined, idTokenClaims, response.id_token);\n        /**\r\n         * In pairwise broker flows, this check prevents the broker's native account id\r\n         * from being returned over the embedded app's account id.\r\n         */ if (accountInfo.nativeAccountId !== response.account.id) {\n            accountInfo.nativeAccountId = response.account.id;\n        }\n        // generate PoP token as needed\n        const responseAccessToken = await this.generatePopAccessToken(response, request);\n        const tokenType = request.tokenType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.BEARER;\n        const result = {\n            authority: authority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes.asArray(),\n            account: accountInfo,\n            idToken: response.id_token,\n            idTokenClaims: idTokenClaims,\n            accessToken: responseAccessToken,\n            fromCache: mats ? this.isResponseFromCache(mats) : false,\n            expiresOn: new Date(Number(reqTimestamp + response.expires_in) * 1000),\n            tokenType: tokenType,\n            correlationId: this.correlationId,\n            state: response.state,\n            fromNativeBroker: true\n        };\n        return result;\n    }\n    /**\r\n     * cache the account entity in browser storage\r\n     * @param accountEntity\r\n     */ cacheAccount(accountEntity) {\n        // Store the account info and hence `nativeAccountId` in browser cache\n        this.browserStorage.setAccount(accountEntity);\n        // Remove any existing cached tokens for this account in browser storage\n        this.browserStorage.removeAccountContext(accountEntity).catch((e)=>{\n            this.logger.error(`Error occurred while removing account context from browser storage. ${e}`);\n        });\n    }\n    /**\r\n     * Stores the access_token and id_token in inmemory storage\r\n     * @param response\r\n     * @param request\r\n     * @param homeAccountIdentifier\r\n     * @param idTokenObj\r\n     * @param responseAccessToken\r\n     * @param tenantId\r\n     * @param reqTimestamp\r\n     */ cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, responseAccessToken, tenantId, reqTimestamp) {\n        const cachedIdToken = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.createIdTokenEntity(homeAccountIdentifier, request.authority, response.id_token || \"\", request.clientId, idTokenClaims.tid || \"\");\n        // cache accessToken in inmemory storage\n        const expiresIn = request.tokenType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.SHR_NONCE_VALIDITY : (typeof response.expires_in === \"string\" ? parseInt(response.expires_in, 10) : response.expires_in) || 0;\n        const tokenExpirationSeconds = reqTimestamp + expiresIn;\n        const responseScopes = this.generateScopes(response, request);\n        const cachedAccessToken = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.createAccessTokenEntity(homeAccountIdentifier, request.authority, responseAccessToken, request.clientId, idTokenClaims.tid || tenantId, responseScopes.printScopes(), tokenExpirationSeconds, 0, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__.base64Decode, undefined, request.tokenType, undefined, request.keyId);\n        const nativeCacheRecord = {\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken\n        };\n        void this.nativeStorageManager.saveCacheRecord(nativeCacheRecord, request.storeInCache);\n    }\n    addTelemetryFromNativeResponse(response) {\n        const mats = this.getMATSFromResponse(response);\n        if (!mats) {\n            return null;\n        }\n        this.performanceClient.addFields({\n            extensionId: this.nativeMessageHandler.getExtensionId(),\n            extensionVersion: this.nativeMessageHandler.getExtensionVersion(),\n            matsBrokerVersion: mats.broker_version,\n            matsAccountJoinOnStart: mats.account_join_on_start,\n            matsAccountJoinOnEnd: mats.account_join_on_end,\n            matsDeviceJoin: mats.device_join,\n            matsPromptBehavior: mats.prompt_behavior,\n            matsApiErrorCode: mats.api_error_code,\n            matsUiVisible: mats.ui_visible,\n            matsSilentCode: mats.silent_code,\n            matsSilentBiSubCode: mats.silent_bi_sub_code,\n            matsSilentMessage: mats.silent_message,\n            matsSilentStatus: mats.silent_status,\n            matsHttpStatus: mats.http_status,\n            matsHttpEventCount: mats.http_event_count\n        }, this.correlationId);\n        return mats;\n    }\n    /**\r\n     * Validates native platform response before processing\r\n     * @param response\r\n     */ validateNativeResponse(response) {\n        if (response.hasOwnProperty(\"access_token\") && response.hasOwnProperty(\"id_token\") && response.hasOwnProperty(\"client_info\") && response.hasOwnProperty(\"account\") && response.hasOwnProperty(\"scope\") && response.hasOwnProperty(\"expires_in\")) {\n            return response;\n        } else {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__.createAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_23__.unexpectedError, \"Response missing expected properties.\");\n        }\n    }\n    /**\r\n     * Gets MATS telemetry from native response\r\n     * @param response\r\n     * @returns\r\n     */ getMATSFromResponse(response) {\n        if (response.properties.MATS) {\n            try {\n                return JSON.parse(response.properties.MATS);\n            } catch (e) {\n                this.logger.error(\"NativeInteractionClient - Error parsing MATS telemetry, returning null instead\");\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Returns whether or not response came from native cache\r\n     * @param response\r\n     * @returns\r\n     */ isResponseFromCache(mats) {\n        if (typeof mats.is_cached === \"undefined\") {\n            this.logger.verbose(\"NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false.\");\n            return false;\n        }\n        return !!mats.is_cached;\n    }\n    /**\r\n     * Translates developer provided request object into NativeRequest object\r\n     * @param request\r\n     */ async initializeNativeRequest(request) {\n        this.logger.trace(\"NativeInteractionClient - initializeNativeRequest called\");\n        const requestAuthority = request.authority || this.config.auth.authority;\n        if (request.account) {\n            // validate authority\n            await this.getDiscoveredAuthority({\n                requestAuthority,\n                requestAzureCloudOptions: request.azureCloudOptions,\n                account: request.account\n            });\n        }\n        const canonicalAuthority = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_24__.UrlString(requestAuthority);\n        canonicalAuthority.validateAsUri();\n        // scopes are expected to be received by the native broker as \"scope\" and will be added to the request below. Other properties that should be dropped from the request to the native broker can be included in the object destructuring here.\n        const { scopes, ...remainingProperties } = request;\n        const scopeSet = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet(scopes || []);\n        scopeSet.appendScopes(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.OIDC_DEFAULT_SCOPES);\n        const getPrompt = ()=>{\n            // If request is silent, prompt is always none\n            switch(this.apiId){\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.ssoSilent:\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenSilent_silentFlow:\n                    this.logger.trace(\"initializeNativeRequest: silent request sets prompt to none\");\n                    return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.NONE;\n            }\n            // Prompt not provided, request may proceed and native broker decides if it needs to prompt\n            if (!request.prompt) {\n                this.logger.trace(\"initializeNativeRequest: prompt was not provided\");\n                return undefined;\n            }\n            // If request is interactive, check if prompt provided is allowed to go directly to native broker\n            switch(request.prompt){\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.NONE:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.CONSENT:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.LOGIN:\n                    this.logger.trace(\"initializeNativeRequest: prompt is compatible with native flow\");\n                    return request.prompt;\n                default:\n                    this.logger.trace(`initializeNativeRequest: prompt = ${request.prompt} is not compatible with native flow`);\n                    throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_25__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_26__.nativePromptNotSupported);\n            }\n        };\n        const validatedRequest = {\n            ...remainingProperties,\n            accountId: this.accountId,\n            clientId: this.config.auth.clientId,\n            authority: canonicalAuthority.urlString,\n            scope: scopeSet.printScopes(),\n            redirectUri: this.getRedirectUri(request.redirectUri),\n            prompt: getPrompt(),\n            correlationId: this.correlationId,\n            tokenType: request.authenticationScheme,\n            windowTitleSubstring: document.title,\n            extraParameters: {\n                ...request.extraQueryParameters,\n                ...request.tokenQueryParameters\n            },\n            extendedExpiryToken: false,\n            keyId: request.popKid\n        };\n        // Check for PoP token requests: signPopToken should only be set to true if popKid is not set\n        if (validatedRequest.signPopToken && !!request.popKid) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_25__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_26__.invalidPopTokenRequest);\n        }\n        this.handleExtraBrokerParams(validatedRequest);\n        validatedRequest.extraParameters = validatedRequest.extraParameters || {};\n        validatedRequest.extraParameters.telemetry = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeConstants.MATS_TELEMETRY;\n        if (request.authenticationScheme === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP) {\n            // add POP request type\n            const shrParameters = {\n                resourceRequestUri: request.resourceRequestUri,\n                resourceRequestMethod: request.resourceRequestMethod,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce\n            };\n            const popTokenGenerator = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_19__.PopTokenGenerator(this.browserCrypto);\n            // generate reqCnf if not provided in the request\n            let reqCnfData;\n            if (!validatedRequest.keyId) {\n                const generatedReqCnfData = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_27__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(shrParameters, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n                validatedRequest.keyId = generatedReqCnfData.kid;\n                validatedRequest.signPopToken = true;\n            } else {\n                reqCnfData = this.browserCrypto.base64UrlEncode(JSON.stringify({\n                    kid: validatedRequest.keyId\n                }));\n                validatedRequest.signPopToken = false;\n            }\n            // SPAs require whole string to be passed to broker\n            validatedRequest.reqCnf = reqCnfData;\n        }\n        this.addRequestSKUs(validatedRequest);\n        return validatedRequest;\n    }\n    /**\r\n     * Handles extra broker request parameters\r\n     * @param request {NativeTokenRequest}\r\n     * @private\r\n     */ handleExtraBrokerParams(request) {\n        const hasExtraBrokerParams = request.extraParameters && request.extraParameters.hasOwnProperty(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.BROKER_CLIENT_ID) && request.extraParameters.hasOwnProperty(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.BROKER_REDIRECT_URI) && request.extraParameters.hasOwnProperty(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CLIENT_ID);\n        if (!request.embeddedClientId && !hasExtraBrokerParams) {\n            return;\n        }\n        let child_client_id = \"\";\n        const child_redirect_uri = request.redirectUri;\n        if (request.embeddedClientId) {\n            request.redirectUri = this.config.auth.redirectUri;\n            child_client_id = request.embeddedClientId;\n        } else if (request.extraParameters) {\n            request.redirectUri = request.extraParameters[_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.BROKER_REDIRECT_URI];\n            child_client_id = request.extraParameters[_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CLIENT_ID];\n        }\n        request.extraParameters = {\n            child_client_id,\n            child_redirect_uri\n        };\n        this.performanceClient?.addFields({\n            embeddedClientId: child_client_id,\n            embeddedRedirectUri: child_redirect_uri\n        }, request.correlationId);\n    }\n}\n //# sourceMappingURL=NativeInteractionClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9OYXRpdmVJbnRlcmFjdGlvbkNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDd2E7QUFDcFc7QUFDZ0U7QUFDdEI7QUFDdkM7QUFDWDtBQUNGO0FBQ1Q7QUFDcUQ7QUFDdkM7QUFFL0Q7OztDQUdDLEdBQ0QsTUFBTXNDLGdDQUFnQ2hCLDZFQUFxQkE7SUFDdkRpQixZQUFZQyxNQUFNLEVBQUVDLGNBQWMsRUFBRUMsYUFBYSxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLEtBQUssRUFBRUMsaUJBQWlCLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxpQkFBaUIsRUFBRUMsYUFBYSxDQUFFO1FBQ3hLLEtBQUssQ0FBQ1gsUUFBUUMsZ0JBQWdCQyxlQUFlQyxRQUFRQyxjQUFjQyxrQkFBa0JFLG1CQUFtQkMsVUFBVUc7UUFDbEgsSUFBSSxDQUFDTCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDRyxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0csb0JBQW9CLEdBQUdKO1FBQzVCLElBQUksQ0FBQ0ssb0JBQW9CLEdBQUdIO1FBQzVCLElBQUksQ0FBQ0ksaUJBQWlCLEdBQUcsSUFBSXRCLHFFQUFpQkEsQ0FBQ1EsUUFBUSxJQUFJLENBQUNhLG9CQUFvQixFQUFFWCxlQUFlQyxRQUFRQyxjQUFjQyxrQkFBa0JFLG1CQUFtQkMsVUFBVUc7UUFDdEssSUFBSSxDQUFDSSxzQkFBc0IsR0FBRyxJQUFJLENBQUNDLGdDQUFnQyxDQUFDLElBQUksQ0FBQ1YsS0FBSztRQUM5RSxNQUFNVyxnQkFBZ0IsSUFBSSxDQUFDTCxvQkFBb0IsQ0FBQ00sY0FBYyxPQUMxRG5DLHdFQUFlQSxDQUFDb0Msc0JBQXNCLEdBQ3BDLFdBQ0EsSUFBSSxDQUFDUCxv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QyxLQUMxRXFFLFFBQVFDLGVBQWUsQ0FBQytMLGNBQWMsQ0FBQ3JRLDJFQUFzQyxLQUM3RXFFLFFBQVFDLGVBQWUsQ0FBQytMLGNBQWMsQ0FBQ3JRLGlFQUE0QjtRQUN2RSxJQUFJLENBQUNxRSxRQUFRMk8sZ0JBQWdCLElBQUksQ0FBQ0osc0JBQXNCO1lBQ3BEO1FBQ0o7UUFDQSxJQUFJSyxrQkFBa0I7UUFDdEIsTUFBTUMscUJBQXFCN08sUUFBUXFFLFdBQVc7UUFDOUMsSUFBSXJFLFFBQVEyTyxnQkFBZ0IsRUFBRTtZQUMxQjNPLFFBQVFxRSxXQUFXLEdBQUcsSUFBSSxDQUFDbkcsTUFBTSxDQUFDb0csSUFBSSxDQUFDRCxXQUFXO1lBQ2xEdUssa0JBQWtCNU8sUUFBUTJPLGdCQUFnQjtRQUM5QyxPQUNLLElBQUkzTyxRQUFRQyxlQUFlLEVBQUU7WUFDOUJELFFBQVFxRSxXQUFXLEdBQ2ZyRSxRQUFRQyxlQUFlLENBQUN0RSwyRUFBc0MsQ0FBQztZQUNuRWlULGtCQUNJNU8sUUFBUUMsZUFBZSxDQUFDdEUsaUVBQTRCLENBQUM7UUFDN0Q7UUFDQXFFLFFBQVFDLGVBQWUsR0FBRztZQUN0QjJPO1lBQ0FDO1FBQ0o7UUFDQSxJQUFJLENBQUNwUSxpQkFBaUIsRUFBRXlHLFVBQVU7WUFDOUJ5SixrQkFBa0JDO1lBQ2xCRSxxQkFBcUJEO1FBQ3pCLEdBQUc3TyxRQUFRbkIsYUFBYTtJQUM1QjtBQUNKO0FBRW1DLENBQ25DLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9pbnRlcmFjdGlvbl9jbGllbnQvTmF0aXZlSW50ZXJhY3Rpb25DbGllbnQubWpzPzMzMjciXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBTZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLCBBQURTZXJ2ZXJQYXJhbUtleXMsIFBlcmZvcm1hbmNlRXZlbnRzLCBUaW1lVXRpbHMsIFNjb3BlU2V0LCBjcmVhdGVDbGllbnRBdXRoRXJyb3IsIENsaWVudEF1dGhFcnJvckNvZGVzLCBBdXRoVG9rZW4sIGJ1aWxkQWNjb3VudFRvQ2FjaGUsIEFjY291bnRFbnRpdHksIENvbnN0YW50cywgQXV0aG9yaXR5VHlwZSwgQXV0aGVudGljYXRpb25TY2hlbWUsIFBvcFRva2VuR2VuZXJhdG9yLCB1cGRhdGVBY2NvdW50VGVuYW50UHJvZmlsZURhdGEsIENhY2hlSGVscGVycywgY3JlYXRlQXV0aEVycm9yLCBBdXRoRXJyb3JDb2RlcywgVXJsU3RyaW5nLCBPSURDX0RFRkFVTFRfU0NPUEVTLCBpbnZva2VBc3luYywgUHJvbXB0VmFsdWUgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5pbXBvcnQgeyBCYXNlSW50ZXJhY3Rpb25DbGllbnQgfSBmcm9tICcuL0Jhc2VJbnRlcmFjdGlvbkNsaWVudC5tanMnO1xuaW1wb3J0IHsgTmF0aXZlQ29uc3RhbnRzLCBCcm93c2VyQ29uc3RhbnRzLCBOYXRpdmVFeHRlbnNpb25NZXRob2QsIFRlbXBvcmFyeUNhY2hlS2V5cywgQXBpSWQgfSBmcm9tICcuLi91dGlscy9Ccm93c2VyQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBOYXRpdmVBdXRoRXJyb3IsIGlzRmF0YWxOYXRpdmVBdXRoRXJyb3IsIGNyZWF0ZU5hdGl2ZUF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL05hdGl2ZUF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3NlckF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IFNpbGVudENhY2hlQ2xpZW50IH0gZnJvbSAnLi9TaWxlbnRDYWNoZUNsaWVudC5tanMnO1xuaW1wb3J0IHsgYmFzZTY0RGVjb2RlIH0gZnJvbSAnLi4vZW5jb2RlL0Jhc2U2NERlY29kZS5tanMnO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2VNZXRhZGF0YS5tanMnO1xuaW1wb3J0IHsgaW52YWxpZFBvcFRva2VuUmVxdWVzdCwgbmF0aXZlUHJvbXB0Tm90U3VwcG9ydGVkIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckF1dGhFcnJvckNvZGVzLm1qcyc7XG5pbXBvcnQgeyB1c2VyU3dpdGNoIH0gZnJvbSAnLi4vZXJyb3IvTmF0aXZlQXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIE5hdGl2ZUludGVyYWN0aW9uQ2xpZW50IGV4dGVuZHMgQmFzZUludGVyYWN0aW9uQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZywgYnJvd3NlclN0b3JhZ2UsIGJyb3dzZXJDcnlwdG8sIGxvZ2dlciwgZXZlbnRIYW5kbGVyLCBuYXZpZ2F0aW9uQ2xpZW50LCBhcGlJZCwgcGVyZm9ybWFuY2VDbGllbnQsIHByb3ZpZGVyLCBhY2NvdW50SWQsIG5hdGl2ZVN0b3JhZ2VJbXBsLCBjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgc3VwZXIoY29uZmlnLCBicm93c2VyU3RvcmFnZSwgYnJvd3NlckNyeXB0bywgbG9nZ2VyLCBldmVudEhhbmRsZXIsIG5hdmlnYXRpb25DbGllbnQsIHBlcmZvcm1hbmNlQ2xpZW50LCBwcm92aWRlciwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgdGhpcy5hcGlJZCA9IGFwaUlkO1xyXG4gICAgICAgIHRoaXMuYWNjb3VudElkID0gYWNjb3VudElkO1xyXG4gICAgICAgIHRoaXMubmF0aXZlTWVzc2FnZUhhbmRsZXIgPSBwcm92aWRlcjtcclxuICAgICAgICB0aGlzLm5hdGl2ZVN0b3JhZ2VNYW5hZ2VyID0gbmF0aXZlU3RvcmFnZUltcGw7XHJcbiAgICAgICAgdGhpcy5zaWxlbnRDYWNoZUNsaWVudCA9IG5ldyBTaWxlbnRDYWNoZUNsaWVudChjb25maWcsIHRoaXMubmF0aXZlU3RvcmFnZU1hbmFnZXIsIGJyb3dzZXJDcnlwdG8sIGxvZ2dlciwgZXZlbnRIYW5kbGVyLCBuYXZpZ2F0aW9uQ2xpZW50LCBwZXJmb3JtYW5jZUNsaWVudCwgcHJvdmlkZXIsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIHRoaXMuc2VydmVyVGVsZW1ldHJ5TWFuYWdlciA9IHRoaXMuaW5pdGlhbGl6ZVNlcnZlclRlbGVtZXRyeU1hbmFnZXIodGhpcy5hcGlJZCk7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uTmFtZSA9IHRoaXMubmF0aXZlTWVzc2FnZUhhbmRsZXIuZ2V0RXh0ZW5zaW9uSWQoKSA9PT1cclxuICAgICAgICAgICAgTmF0aXZlQ29uc3RhbnRzLlBSRUZFUlJFRF9FWFRFTlNJT05fSURcclxuICAgICAgICAgICAgPyBcImNocm9tZVwiXHJcbiAgICAgICAgICAgIDogdGhpcy5uYXRpdmVNZXNzYWdlSGFuZGxlci5nZXRFeHRlbnNpb25JZCgpPy5sZW5ndGhcclxuICAgICAgICAgICAgICAgID8gXCJ1bmtub3duXCJcclxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuc2t1cyA9IFNlcnZlclRlbGVtZXRyeU1hbmFnZXIubWFrZUV4dHJhU2t1U3RyaW5nKHtcclxuICAgICAgICAgICAgbGlicmFyeU5hbWU6IEJyb3dzZXJDb25zdGFudHMuTVNBTF9TS1UsXHJcbiAgICAgICAgICAgIGxpYnJhcnlWZXJzaW9uOiB2ZXJzaW9uLFxyXG4gICAgICAgICAgICBleHRlbnNpb25OYW1lOiBleHRlbnNpb25OYW1lLFxyXG4gICAgICAgICAgICBleHRlbnNpb25WZXJzaW9uOiB0aGlzLm5hdGl2ZU1lc3NhZ2VIYW5kbGVyLmdldEV4dGVuc2lvblZlcnNpb24oKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBTS1VzIHRvIHJlcXVlc3QgZXh0cmEgcXVlcnkgcGFyYW1ldGVyc1xyXG4gICAgICogQHBhcmFtIHJlcXVlc3Qge05hdGl2ZVRva2VuUmVxdWVzdH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGFkZFJlcXVlc3RTS1VzKHJlcXVlc3QpIHtcclxuICAgICAgICByZXF1ZXN0LmV4dHJhUGFyYW1ldGVycyA9IHtcclxuICAgICAgICAgICAgLi4ucmVxdWVzdC5leHRyYVBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgIFtBQURTZXJ2ZXJQYXJhbUtleXMuWF9DTElFTlRfRVhUUkFfU0tVXTogdGhpcy5za3VzLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFjcXVpcmUgdG9rZW4gZnJvbSBuYXRpdmUgcGxhdGZvcm0gdmlhIGJyb3dzZXIgZXh0ZW5zaW9uXHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBhc3luYyBhY3F1aXJlVG9rZW4ocmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5OYXRpdmVJbnRlcmFjdGlvbkNsaWVudEFjcXVpcmVUb2tlbiwgcmVxdWVzdC5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIk5hdGl2ZUludGVyYWN0aW9uQ2xpZW50IC0gYWNxdWlyZVRva2VuIGNhbGxlZC5cIik7XHJcbiAgICAgICAgLy8gc3RhcnQgdGhlIHBlcmYgbWVhc3VyZW1lbnRcclxuICAgICAgICBjb25zdCBuYXRpdmVBVE1lYXN1cmVtZW50ID0gdGhpcy5wZXJmb3JtYW5jZUNsaWVudC5zdGFydE1lYXN1cmVtZW50KFBlcmZvcm1hbmNlRXZlbnRzLk5hdGl2ZUludGVyYWN0aW9uQ2xpZW50QWNxdWlyZVRva2VuLCByZXF1ZXN0LmNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIGNvbnN0IHJlcVRpbWVzdGFtcCA9IFRpbWVVdGlscy5ub3dTZWNvbmRzKCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBuYXRpdmUgcmVxdWVzdFxyXG4gICAgICAgICAgICBjb25zdCBuYXRpdmVSZXF1ZXN0ID0gYXdhaXQgdGhpcy5pbml0aWFsaXplTmF0aXZlUmVxdWVzdChyZXF1ZXN0KTtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHRva2VucyBjYW4gYmUgcmV0cmlldmVkIGZyb20gaW50ZXJuYWwgY2FjaGVcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYWNxdWlyZVRva2Vuc0Zyb21DYWNoZSh0aGlzLmFjY291bnRJZCwgbmF0aXZlUmVxdWVzdCk7XHJcbiAgICAgICAgICAgICAgICBuYXRpdmVBVE1lYXN1cmVtZW50LmVuZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpc05hdGl2ZUJyb2tlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbUNhY2hlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb250aW51ZSB3aXRoIGEgbmF0aXZlIGNhbGwgZm9yIGFueSBhbmQgYWxsIGVycm9yc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcIk1TQUwgaW50ZXJuYWwgQ2FjaGUgZG9lcyBub3QgY29udGFpbiB0b2tlbnMsIHByb2NlZWQgdG8gbWFrZSBhIG5hdGl2ZSBjYWxsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgLi4ubmF0aXZlVG9rZW5SZXF1ZXN0IH0gPSBuYXRpdmVSZXF1ZXN0O1xyXG4gICAgICAgICAgICAvLyBmYWxsIGJhY2sgdG8gbmF0aXZlIGNhbGxzXHJcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VCb2R5ID0ge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBOYXRpdmVFeHRlbnNpb25NZXRob2QuR2V0VG9rZW4sXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0OiBuYXRpdmVUb2tlblJlcXVlc3QsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5uYXRpdmVNZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZShtZXNzYWdlQm9keSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRlZFJlc3BvbnNlID0gdGhpcy52YWxpZGF0ZU5hdGl2ZVJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlTmF0aXZlUmVzcG9uc2UodmFsaWRhdGVkUmVzcG9uc2UsIG5hdGl2ZVJlcXVlc3QsIHJlcVRpbWVzdGFtcClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIG5hdGl2ZUFUTWVhc3VyZW1lbnQuZW5kKHtcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzTmF0aXZlQnJva2VyOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVzdWx0LnJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLmNsZWFyTmF0aXZlQnJva2VyRXJyb3JDb2RlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmF0aXZlQVRNZWFzdXJlbWVudC5lbmQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ29kZTogZXJyb3IuZXJyb3JDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1YkVycm9yQ29kZTogZXJyb3Iuc3ViRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNOYXRpdmVCcm9rZXI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBOYXRpdmVBdXRoRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyVGVsZW1ldHJ5TWFuYWdlci5zZXROYXRpdmVCcm9rZXJFcnJvckNvZGUoZS5lcnJvckNvZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHNpbGVudCBmbG93IHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gY2FjaGVkQWNjb3VudFxyXG4gICAgICogQHJldHVybnMgQ29tbW9uU2lsZW50Rmxvd1JlcXVlc3RcclxuICAgICAqL1xyXG4gICAgY3JlYXRlU2lsZW50Q2FjaGVSZXF1ZXN0KHJlcXVlc3QsIGNhY2hlZEFjY291bnQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhdXRob3JpdHk6IHJlcXVlc3QuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICBjb3JyZWxhdGlvbklkOiB0aGlzLmNvcnJlbGF0aW9uSWQsXHJcbiAgICAgICAgICAgIHNjb3BlczogU2NvcGVTZXQuZnJvbVN0cmluZyhyZXF1ZXN0LnNjb3BlKS5hc0FycmF5KCksXHJcbiAgICAgICAgICAgIGFjY291bnQ6IGNhY2hlZEFjY291bnQsXHJcbiAgICAgICAgICAgIGZvcmNlUmVmcmVzaDogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2hlcyB0aGUgdG9rZW5zIGZyb20gdGhlIGNhY2hlIGlmIHVuLWV4cGlyZWRcclxuICAgICAqIEBwYXJhbSBuYXRpdmVBY2NvdW50SWRcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcmV0dXJucyBhdXRoZW50aWNhdGlvblJlc3VsdFxyXG4gICAgICovXHJcbiAgICBhc3luYyBhY3F1aXJlVG9rZW5zRnJvbUNhY2hlKG5hdGl2ZUFjY291bnRJZCwgcmVxdWVzdCkge1xyXG4gICAgICAgIGlmICghbmF0aXZlQWNjb3VudElkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm5pbmcoXCJOYXRpdmVJbnRlcmFjdGlvbkNsaWVudDphY3F1aXJlVG9rZW5zRnJvbUNhY2hlIC0gTm8gbmF0aXZlQWNjb3VudElkIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yQ29kZXMubm9BY2NvdW50Rm91bmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBmZXRjaCB0aGUgYWNjb3VudCBmcm9tIGJyb3dzZXIgY2FjaGVcclxuICAgICAgICBjb25zdCBhY2NvdW50ID0gdGhpcy5icm93c2VyU3RvcmFnZS5nZXRCYXNlQWNjb3VudEluZm8oe1xyXG4gICAgICAgICAgICBuYXRpdmVBY2NvdW50SWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCFhY2NvdW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JDb2Rlcy5ub0FjY291bnRGb3VuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxldmVyYWdlIHNpbGVudCBmbG93IGZvciBjYWNoZWQgdG9rZW5zIHJldHJpZXZhbFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpbGVudFJlcXVlc3QgPSB0aGlzLmNyZWF0ZVNpbGVudENhY2hlUmVxdWVzdChyZXF1ZXN0LCBhY2NvdW50KTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zaWxlbnRDYWNoZUNsaWVudC5hY3F1aXJlVG9rZW4oc2lsZW50UmVxdWVzdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxBY2NvdW50ID0ge1xyXG4gICAgICAgICAgICAgICAgLi4uYWNjb3VudCxcclxuICAgICAgICAgICAgICAgIGlkVG9rZW5DbGFpbXM6IHJlc3VsdD8uaWRUb2tlbkNsYWltcyxcclxuICAgICAgICAgICAgICAgIGlkVG9rZW46IHJlc3VsdD8uaWRUb2tlbixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnJlc3VsdCxcclxuICAgICAgICAgICAgICAgIGFjY291bnQ6IGZ1bGxBY2NvdW50LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWNxdWlyZXMgYSB0b2tlbiBmcm9tIG5hdGl2ZSBwbGF0Zm9ybSB0aGVuIHJlZGlyZWN0cyB0byB0aGUgcmVkaXJlY3RVcmkgaW5zdGVhZCBvZiByZXR1cm5pbmcgdGhlIHJlc3BvbnNlXHJcbiAgICAgKiBAcGFyYW0ge1JlZGlyZWN0UmVxdWVzdH0gcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIHtJblByb2dyZXNzUGVyZm9ybWFuY2VFdmVudH0gcm9vdE1lYXN1cmVtZW50XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGFjcXVpcmVUb2tlblJlZGlyZWN0KHJlcXVlc3QsIHJvb3RNZWFzdXJlbWVudCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiTmF0aXZlSW50ZXJhY3Rpb25DbGllbnQgLSBhY3F1aXJlVG9rZW5SZWRpcmVjdCBjYWxsZWQuXCIpO1xyXG4gICAgICAgIGNvbnN0IHsgLi4ucmVtYWluaW5nUGFyYW1ldGVycyB9ID0gcmVxdWVzdDtcclxuICAgICAgICBkZWxldGUgcmVtYWluaW5nUGFyYW1ldGVycy5vblJlZGlyZWN0TmF2aWdhdGU7XHJcbiAgICAgICAgY29uc3QgbmF0aXZlUmVxdWVzdCA9IGF3YWl0IHRoaXMuaW5pdGlhbGl6ZU5hdGl2ZVJlcXVlc3QocmVtYWluaW5nUGFyYW1ldGVycyk7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZUJvZHkgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogTmF0aXZlRXh0ZW5zaW9uTWV0aG9kLkdldFRva2VuLFxyXG4gICAgICAgICAgICByZXF1ZXN0OiBuYXRpdmVSZXF1ZXN0LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm5hdGl2ZU1lc3NhZ2VIYW5kbGVyLnNlbmRNZXNzYWdlKG1lc3NhZ2VCb2R5KTtcclxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZU5hdGl2ZVJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gT25seSB0aHJvdyBmYXRhbCBlcnJvcnMgaGVyZSB0byBhbGxvdyBhcHBsaWNhdGlvbiB0byBmYWxsYmFjayB0byByZWd1bGFyIHJlZGlyZWN0LiBPdGhlcndpc2UgcHJvY2VlZCBhbmQgdGhlIGVycm9yIHdpbGwgYmUgdGhyb3duIGluIGhhbmRsZVJlZGlyZWN0UHJvbWlzZVxyXG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE5hdGl2ZUF1dGhFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLnNldE5hdGl2ZUJyb2tlckVycm9yQ29kZShlLmVycm9yQ29kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNGYXRhbE5hdGl2ZUF1dGhFcnJvcihlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5zZXRUZW1wb3JhcnlDYWNoZShUZW1wb3JhcnlDYWNoZUtleXMuTkFUSVZFX1JFUVVFU1QsIEpTT04uc3RyaW5naWZ5KG5hdGl2ZVJlcXVlc3QpLCB0cnVlKTtcclxuICAgICAgICBjb25zdCBuYXZpZ2F0aW9uT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgYXBpSWQ6IEFwaUlkLmFjcXVpcmVUb2tlblJlZGlyZWN0LFxyXG4gICAgICAgICAgICB0aW1lb3V0OiB0aGlzLmNvbmZpZy5zeXN0ZW0ucmVkaXJlY3ROYXZpZ2F0aW9uVGltZW91dCxcclxuICAgICAgICAgICAgbm9IaXN0b3J5OiBmYWxzZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJlZGlyZWN0VXJpID0gdGhpcy5jb25maWcuYXV0aC5uYXZpZ2F0ZVRvTG9naW5SZXF1ZXN0VXJsXHJcbiAgICAgICAgICAgID8gd2luZG93LmxvY2F0aW9uLmhyZWZcclxuICAgICAgICAgICAgOiB0aGlzLmdldFJlZGlyZWN0VXJpKHJlcXVlc3QucmVkaXJlY3RVcmkpO1xyXG4gICAgICAgIHJvb3RNZWFzdXJlbWVudC5lbmQoeyBzdWNjZXNzOiB0cnVlIH0pO1xyXG4gICAgICAgIGF3YWl0IHRoaXMubmF2aWdhdGlvbkNsaWVudC5uYXZpZ2F0ZUV4dGVybmFsKHJlZGlyZWN0VXJpLCBuYXZpZ2F0aW9uT3B0aW9ucyk7IC8vIE5lZWQgdG8gdHJlYXQgdGhpcyBhcyBleHRlcm5hbCB0byBlbnN1cmUgaGFuZGxlUmVkaXJlY3RQcm9taXNlIGlzIHJ1biBhZ2FpblxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGUgcHJldmlvdXMgcGFnZSBjYWxsZWQgbmF0aXZlIHBsYXRmb3JtIGZvciBhIHRva2VuIHVzaW5nIHJlZGlyZWN0IEFQSXMsIHNlbmQgdGhlIHNhbWUgcmVxdWVzdCBhZ2FpbiBhbmQgcmV0dXJuIHRoZSByZXNwb25zZVxyXG4gICAgICogQHBhcmFtIHBlcmZvcm1hbmNlQ2xpZW50IHtJUGVyZm9ybWFuY2VDbGllbnQ/fVxyXG4gICAgICogQHBhcmFtIGNvcnJlbGF0aW9uSWQge3N0cmluZz99IGNvcnJlbGF0aW9uIGlkZW50aWZpZXJcclxuICAgICAqL1xyXG4gICAgYXN5bmMgaGFuZGxlUmVkaXJlY3RQcm9taXNlKHBlcmZvcm1hbmNlQ2xpZW50LCBjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJOYXRpdmVJbnRlcmFjdGlvbkNsaWVudCAtIGhhbmRsZVJlZGlyZWN0UHJvbWlzZSBjYWxsZWQuXCIpO1xyXG4gICAgICAgIGlmICghdGhpcy5icm93c2VyU3RvcmFnZS5pc0ludGVyYWN0aW9uSW5Qcm9ncmVzcyh0cnVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFwiaGFuZGxlUmVkaXJlY3RQcm9taXNlIGNhbGxlZCBidXQgdGhlcmUgaXMgbm8gaW50ZXJhY3Rpb24gaW4gcHJvZ3Jlc3MsIHJldHVybmluZyBudWxsLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlbW92ZSBwcm9tcHQgZnJvbSB0aGUgcmVxdWVzdCB0byBwcmV2ZW50IFdBTSBmcm9tIHByb21wdGluZyB0d2ljZVxyXG4gICAgICAgIGNvbnN0IGNhY2hlZFJlcXVlc3QgPSB0aGlzLmJyb3dzZXJTdG9yYWdlLmdldENhY2hlZE5hdGl2ZVJlcXVlc3QoKTtcclxuICAgICAgICBpZiAoIWNhY2hlZFJlcXVlc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIk5hdGl2ZUludGVyYWN0aW9uQ2xpZW50IC0gaGFuZGxlUmVkaXJlY3RQcm9taXNlIGNhbGxlZCBidXQgdGhlcmUgaXMgbm8gY2FjaGVkIHJlcXVlc3QsIHJldHVybmluZyBudWxsLlwiKTtcclxuICAgICAgICAgICAgaWYgKHBlcmZvcm1hbmNlQ2xpZW50ICYmIGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlQ2xpZW50Py5hZGRGaWVsZHMoeyBlcnJvckNvZGU6IFwibm9fY2FjaGVkX3JlcXVlc3RcIiB9LCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyBwcm9tcHQsIC4uLnJlcXVlc3QgfSA9IGNhY2hlZFJlcXVlc3Q7XHJcbiAgICAgICAgaWYgKHByb21wdCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiTmF0aXZlSW50ZXJhY3Rpb25DbGllbnQgLSBoYW5kbGVSZWRpcmVjdFByb21pc2UgY2FsbGVkIGFuZCBwcm9tcHQgd2FzIGluY2x1ZGVkIGluIHRoZSBvcmlnaW5hbCByZXF1ZXN0LCByZW1vdmluZyBwcm9tcHQgZnJvbSBjYWNoZWQgcmVxdWVzdCB0byBwcmV2ZW50IHNlY29uZCBpbnRlcmFjdGlvbiB3aXRoIG5hdGl2ZSBicm9rZXIgd2luZG93LlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuYnJvd3NlclN0b3JhZ2UuZ2VuZXJhdGVDYWNoZUtleShUZW1wb3JhcnlDYWNoZUtleXMuTkFUSVZFX1JFUVVFU1QpKTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlQm9keSA9IHtcclxuICAgICAgICAgICAgbWV0aG9kOiBOYXRpdmVFeHRlbnNpb25NZXRob2QuR2V0VG9rZW4sXHJcbiAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCByZXFUaW1lc3RhbXAgPSBUaW1lVXRpbHMubm93U2Vjb25kcygpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJOYXRpdmVJbnRlcmFjdGlvbkNsaWVudCAtIGhhbmRsZVJlZGlyZWN0UHJvbWlzZSBzZW5kaW5nIG1lc3NhZ2UgdG8gbmF0aXZlIGJyb2tlci5cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5uYXRpdmVNZXNzYWdlSGFuZGxlci5zZW5kTWVzc2FnZShtZXNzYWdlQm9keSk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVOYXRpdmVSZXNwb25zZShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaGFuZGxlTmF0aXZlUmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3QsIHJlcVRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2Uuc2V0SW50ZXJhY3Rpb25JblByb2dyZXNzKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVzdWx0O1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZlclRlbGVtZXRyeU1hbmFnZXIuY2xlYXJOYXRpdmVCcm9rZXJFcnJvckNvZGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5zZXRJbnRlcmFjdGlvbkluUHJvZ3Jlc3MoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTG9nb3V0IGZyb20gbmF0aXZlIHBsYXRmb3JtIHZpYSBicm93c2VyIGV4dGVuc2lvblxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgbG9nb3V0KCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiTmF0aXZlSW50ZXJhY3Rpb25DbGllbnQgLSBsb2dvdXQgY2FsbGVkLlwiKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJMb2dvdXQgbm90IGltcGxlbWVudGVkIHlldFwiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNmb3JtIHJlc3BvbnNlIGZyb20gbmF0aXZlIHBsYXRmb3JtIGludG8gQXV0aGVudGljYXRpb25SZXN1bHQgb2JqZWN0IHdoaWNoIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIGVuZCB1c2VyXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gcmVxVGltZXN0YW1wXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGhhbmRsZU5hdGl2ZVJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0LCByZXFUaW1lc3RhbXApIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIk5hdGl2ZUludGVyYWN0aW9uQ2xpZW50IC0gaGFuZGxlTmF0aXZlUmVzcG9uc2UgY2FsbGVkLlwiKTtcclxuICAgICAgICAvLyBnZW5lcmF0ZSBpZGVudGlmaWVyc1xyXG4gICAgICAgIGNvbnN0IGlkVG9rZW5DbGFpbXMgPSBBdXRoVG9rZW4uZXh0cmFjdFRva2VuQ2xhaW1zKHJlc3BvbnNlLmlkX3Rva2VuLCBiYXNlNjREZWNvZGUpO1xyXG4gICAgICAgIGNvbnN0IGhvbWVBY2NvdW50SWRlbnRpZmllciA9IHRoaXMuY3JlYXRlSG9tZUFjY291bnRJZGVudGlmaWVyKHJlc3BvbnNlLCBpZFRva2VuQ2xhaW1zKTtcclxuICAgICAgICBjb25zdCBjYWNoZWRob21lQWNjb3VudElkID0gdGhpcy5icm93c2VyU3RvcmFnZS5nZXRBY2NvdW50SW5mb0ZpbHRlcmVkQnkoe1xyXG4gICAgICAgICAgICBuYXRpdmVBY2NvdW50SWQ6IHJlcXVlc3QuYWNjb3VudElkLFxyXG4gICAgICAgIH0pPy5ob21lQWNjb3VudElkO1xyXG4gICAgICAgIGlmIChob21lQWNjb3VudElkZW50aWZpZXIgIT09IGNhY2hlZGhvbWVBY2NvdW50SWQgJiZcclxuICAgICAgICAgICAgcmVzcG9uc2UuYWNjb3VudC5pZCAhPT0gcmVxdWVzdC5hY2NvdW50SWQpIHtcclxuICAgICAgICAgICAgLy8gVXNlciBzd2l0Y2ggaW4gbmF0aXZlIGJyb2tlciBwcm9tcHQgaXMgbm90IHN1cHBvcnRlZC4gQWxsIHVzZXJzIG11c3QgZmlyc3Qgc2lnbiBpbiB0aHJvdWdoIHdlYiBmbG93IHRvIGVuc3VyZSBzZXJ2ZXIgc3RhdGUgaXMgaW4gc3luY1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVOYXRpdmVBdXRoRXJyb3IodXNlclN3aXRjaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEdldCB0aGUgcHJlZmVycmVkX2NhY2hlIGRvbWFpbiBmb3IgdGhlIGdpdmVuIGF1dGhvcml0eVxyXG4gICAgICAgIGNvbnN0IGF1dGhvcml0eSA9IGF3YWl0IHRoaXMuZ2V0RGlzY292ZXJlZEF1dGhvcml0eSh7XHJcbiAgICAgICAgICAgIHJlcXVlc3RBdXRob3JpdHk6IHJlcXVlc3QuYXV0aG9yaXR5LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGJhc2VBY2NvdW50ID0gYnVpbGRBY2NvdW50VG9DYWNoZSh0aGlzLmJyb3dzZXJTdG9yYWdlLCBhdXRob3JpdHksIGhvbWVBY2NvdW50SWRlbnRpZmllciwgYmFzZTY0RGVjb2RlLCBpZFRva2VuQ2xhaW1zLCByZXNwb25zZS5jbGllbnRfaW5mbywgdW5kZWZpbmVkLCAvLyBlbnZpcm9ubWVudFxyXG4gICAgICAgIGlkVG9rZW5DbGFpbXMudGlkLCB1bmRlZmluZWQsIC8vIGF1dGggY29kZSBwYXlsb2FkXHJcbiAgICAgICAgcmVzcG9uc2UuYWNjb3VudC5pZCwgdGhpcy5sb2dnZXIpO1xyXG4gICAgICAgIC8vIGdlbmVyYXRlIGF1dGhlbnRpY2F0aW9uUmVzdWx0XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZUF1dGhlbnRpY2F0aW9uUmVzdWx0KHJlc3BvbnNlLCByZXF1ZXN0LCBpZFRva2VuQ2xhaW1zLCBiYXNlQWNjb3VudCwgYXV0aG9yaXR5LmNhbm9uaWNhbEF1dGhvcml0eSwgcmVxVGltZXN0YW1wKTtcclxuICAgICAgICAvLyBjYWNoZSBhY2NvdW50cyBhbmQgdG9rZW5zIGluIHRoZSBhcHByb3ByaWF0ZSBzdG9yYWdlXHJcbiAgICAgICAgdGhpcy5jYWNoZUFjY291bnQoYmFzZUFjY291bnQpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVOYXRpdmVUb2tlbnMocmVzcG9uc2UsIHJlcXVlc3QsIGhvbWVBY2NvdW50SWRlbnRpZmllciwgaWRUb2tlbkNsYWltcywgcmVzcG9uc2UuYWNjZXNzX3Rva2VuLCByZXN1bHQudGVuYW50SWQsIHJlcVRpbWVzdGFtcCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlcyBhbiBob21lQWNjb3VudElkZW50aWZpZXIgZm9yIHRoZSBhY2NvdW50XHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBpZFRva2VuT2JqXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBjcmVhdGVIb21lQWNjb3VudElkZW50aWZpZXIocmVzcG9uc2UsIGlkVG9rZW5DbGFpbXMpIHtcclxuICAgICAgICAvLyBTYXZlIGFjY291bnQgaW4gYnJvd3NlciBzdG9yYWdlXHJcbiAgICAgICAgY29uc3QgaG9tZUFjY291bnRJZGVudGlmaWVyID0gQWNjb3VudEVudGl0eS5nZW5lcmF0ZUhvbWVBY2NvdW50SWQocmVzcG9uc2UuY2xpZW50X2luZm8gfHwgQ29uc3RhbnRzLkVNUFRZX1NUUklORywgQXV0aG9yaXR5VHlwZS5EZWZhdWx0LCB0aGlzLmxvZ2dlciwgdGhpcy5icm93c2VyQ3J5cHRvLCBpZFRva2VuQ2xhaW1zKTtcclxuICAgICAgICByZXR1cm4gaG9tZUFjY291bnRJZGVudGlmaWVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgdG8gZ2VuZXJhdGUgc2NvcGVzXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZVNjb3BlcyhyZXNwb25zZSwgcmVxdWVzdCkge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5zY29wZVxyXG4gICAgICAgICAgICA/IFNjb3BlU2V0LmZyb21TdHJpbmcocmVzcG9uc2Uuc2NvcGUpXHJcbiAgICAgICAgICAgIDogU2NvcGVTZXQuZnJvbVN0cmluZyhyZXF1ZXN0LnNjb3BlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSWYgUG9QIHRva2VuIGlzIHJlcXVlc3JlZCwgcmVjb3JkcyB0aGUgUG9QIHRva2VuIGlmIHJldHVybmVkIGZyb20gdGhlIFdBTSwgZWxzZSBnZW5lcmF0ZXMgb25lIGluIHRoZSBicm93c2VyXHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIHJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdlbmVyYXRlUG9wQWNjZXNzVG9rZW4ocmVzcG9uc2UsIHJlcXVlc3QpIHtcclxuICAgICAgICBpZiAocmVxdWVzdC50b2tlblR5cGUgPT09IEF1dGhlbnRpY2F0aW9uU2NoZW1lLlBPUCAmJlxyXG4gICAgICAgICAgICByZXF1ZXN0LnNpZ25Qb3BUb2tlbikge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVGhpcyBjb2RlIHByaW9yaXRpemVzIFNIUiByZXR1cm5lZCBmcm9tIHRoZSBuYXRpdmUgbGF5ZXIuIEluIGNhc2Ugb2YgZXJyb3IvU0hSIG5vdCBjYWxjdWxhdGVkIGZyb20gV0FNIGFuZCB0aGUgQVRcclxuICAgICAgICAgICAgICogaXMgc3RpbGwgcmVjZWl2ZWQsIFNIUiBpcyBjYWxjdWxhdGVkIGxvY2FsbHlcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIG5hdGl2ZSBsYXllciByZXR1cm5lZCBhbiBTSFIgdG9rZW5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnNocikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJoYW5kbGVOYXRpdmVTZXJ2ZXJSZXNwb25zZTogU0hSIGlzIGVuYWJsZWQgaW4gbmF0aXZlIGxheWVyXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnNocjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBTSFIgaW4gbXNhbCBqcyBpZiBXQU0gZG9lcyBub3QgY29tcHV0ZSBpdCB3aGVuIFBPUCBpcyBlbmFibGVkXHJcbiAgICAgICAgICAgIGNvbnN0IHBvcFRva2VuR2VuZXJhdG9yID0gbmV3IFBvcFRva2VuR2VuZXJhdG9yKHRoaXMuYnJvd3NlckNyeXB0byk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoclBhcmFtZXRlcnMgPSB7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZVJlcXVlc3RNZXRob2Q6IHJlcXVlc3QucmVzb3VyY2VSZXF1ZXN0TWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VSZXF1ZXN0VXJpOiByZXF1ZXN0LnJlc291cmNlUmVxdWVzdFVyaSxcclxuICAgICAgICAgICAgICAgIHNockNsYWltczogcmVxdWVzdC5zaHJDbGFpbXMsXHJcbiAgICAgICAgICAgICAgICBzaHJOb25jZTogcmVxdWVzdC5zaHJOb25jZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEtleUlEIG11c3QgYmUgcHJlc2VudCBpbiB0aGUgbmF0aXZlIHJlcXVlc3QgZnJvbSB3aGVuIHRoZSBQb1Aga2V5IHdhcyBnZW5lcmF0ZWQgaW4gb3JkZXIgZm9yXHJcbiAgICAgICAgICAgICAqIFBvcFRva2VuR2VuZXJhdG9yIHRvIHF1ZXJ5IHRoZSBmdWxsIGtleSBmb3Igc2lnbmluZ1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LmtleUlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yQ29kZXMua2V5SWRNaXNzaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcG9wVG9rZW5HZW5lcmF0b3Iuc2lnblBvcFRva2VuKHJlc3BvbnNlLmFjY2Vzc190b2tlbiwgcmVxdWVzdC5rZXlJZCwgc2hyUGFyYW1ldGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYWNjZXNzX3Rva2VuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGF1dGhlbnRpY2F0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHJlc3BvbnNlXHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIGlkVG9rZW5PYmpcclxuICAgICAqIEBwYXJhbSBhY2NvdW50RW50aXR5XHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKiBAcGFyYW0gcmVxVGltZXN0YW1wXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBhc3luYyBnZW5lcmF0ZUF1dGhlbnRpY2F0aW9uUmVzdWx0KHJlc3BvbnNlLCByZXF1ZXN0LCBpZFRva2VuQ2xhaW1zLCBhY2NvdW50RW50aXR5LCBhdXRob3JpdHksIHJlcVRpbWVzdGFtcCkge1xyXG4gICAgICAgIC8vIEFkZCBOYXRpdmUgQnJva2VyIGZpZWxkcyB0byBUZWxlbWV0cnlcclxuICAgICAgICBjb25zdCBtYXRzID0gdGhpcy5hZGRUZWxlbWV0cnlGcm9tTmF0aXZlUmVzcG9uc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIC8vIElmIHNjb3BlcyBub3QgcmV0dXJuZWQgaW4gc2VydmVyIHJlc3BvbnNlLCB1c2UgcmVxdWVzdCBzY29wZXNcclxuICAgICAgICBjb25zdCByZXNwb25zZVNjb3BlcyA9IHJlc3BvbnNlLnNjb3BlXHJcbiAgICAgICAgICAgID8gU2NvcGVTZXQuZnJvbVN0cmluZyhyZXNwb25zZS5zY29wZSlcclxuICAgICAgICAgICAgOiBTY29wZVNldC5mcm9tU3RyaW5nKHJlcXVlc3Quc2NvcGUpO1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRQcm9wZXJ0aWVzID0gcmVzcG9uc2UuYWNjb3VudC5wcm9wZXJ0aWVzIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IHVpZCA9IGFjY291bnRQcm9wZXJ0aWVzW1wiVUlEXCJdIHx8XHJcbiAgICAgICAgICAgIGlkVG9rZW5DbGFpbXMub2lkIHx8XHJcbiAgICAgICAgICAgIGlkVG9rZW5DbGFpbXMuc3ViIHx8XHJcbiAgICAgICAgICAgIENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgY29uc3QgdGlkID0gYWNjb3VudFByb3BlcnRpZXNbXCJUZW5hbnRJZFwiXSB8fFxyXG4gICAgICAgICAgICBpZFRva2VuQ2xhaW1zLnRpZCB8fFxyXG4gICAgICAgICAgICBDb25zdGFudHMuRU1QVFlfU1RSSU5HO1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRJbmZvID0gdXBkYXRlQWNjb3VudFRlbmFudFByb2ZpbGVEYXRhKGFjY291bnRFbnRpdHkuZ2V0QWNjb3VudEluZm8oKSwgdW5kZWZpbmVkLCAvLyB0ZW5hbnRQcm9maWxlIG9wdGlvbmFsXHJcbiAgICAgICAgaWRUb2tlbkNsYWltcywgcmVzcG9uc2UuaWRfdG9rZW4pO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluIHBhaXJ3aXNlIGJyb2tlciBmbG93cywgdGhpcyBjaGVjayBwcmV2ZW50cyB0aGUgYnJva2VyJ3MgbmF0aXZlIGFjY291bnQgaWRcclxuICAgICAgICAgKiBmcm9tIGJlaW5nIHJldHVybmVkIG92ZXIgdGhlIGVtYmVkZGVkIGFwcCdzIGFjY291bnQgaWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKGFjY291bnRJbmZvLm5hdGl2ZUFjY291bnRJZCAhPT0gcmVzcG9uc2UuYWNjb3VudC5pZCkge1xyXG4gICAgICAgICAgICBhY2NvdW50SW5mby5uYXRpdmVBY2NvdW50SWQgPSByZXNwb25zZS5hY2NvdW50LmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBnZW5lcmF0ZSBQb1AgdG9rZW4gYXMgbmVlZGVkXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VBY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVQb3BBY2Nlc3NUb2tlbihyZXNwb25zZSwgcmVxdWVzdCk7XHJcbiAgICAgICAgY29uc3QgdG9rZW5UeXBlID0gcmVxdWVzdC50b2tlblR5cGUgPT09IEF1dGhlbnRpY2F0aW9uU2NoZW1lLlBPUFxyXG4gICAgICAgICAgICA/IEF1dGhlbnRpY2F0aW9uU2NoZW1lLlBPUFxyXG4gICAgICAgICAgICA6IEF1dGhlbnRpY2F0aW9uU2NoZW1lLkJFQVJFUjtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIGF1dGhvcml0eTogYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICB1bmlxdWVJZDogdWlkLFxyXG4gICAgICAgICAgICB0ZW5hbnRJZDogdGlkLFxyXG4gICAgICAgICAgICBzY29wZXM6IHJlc3BvbnNlU2NvcGVzLmFzQXJyYXkoKSxcclxuICAgICAgICAgICAgYWNjb3VudDogYWNjb3VudEluZm8sXHJcbiAgICAgICAgICAgIGlkVG9rZW46IHJlc3BvbnNlLmlkX3Rva2VuLFxyXG4gICAgICAgICAgICBpZFRva2VuQ2xhaW1zOiBpZFRva2VuQ2xhaW1zLFxyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogcmVzcG9uc2VBY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgZnJvbUNhY2hlOiBtYXRzID8gdGhpcy5pc1Jlc3BvbnNlRnJvbUNhY2hlKG1hdHMpIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGV4cGlyZXNPbjogbmV3IERhdGUoTnVtYmVyKHJlcVRpbWVzdGFtcCArIHJlc3BvbnNlLmV4cGlyZXNfaW4pICogMTAwMCksXHJcbiAgICAgICAgICAgIHRva2VuVHlwZTogdG9rZW5UeXBlLFxyXG4gICAgICAgICAgICBjb3JyZWxhdGlvbklkOiB0aGlzLmNvcnJlbGF0aW9uSWQsXHJcbiAgICAgICAgICAgIHN0YXRlOiByZXNwb25zZS5zdGF0ZSxcclxuICAgICAgICAgICAgZnJvbU5hdGl2ZUJyb2tlcjogdHJ1ZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNhY2hlIHRoZSBhY2NvdW50IGVudGl0eSBpbiBicm93c2VyIHN0b3JhZ2VcclxuICAgICAqIEBwYXJhbSBhY2NvdW50RW50aXR5XHJcbiAgICAgKi9cclxuICAgIGNhY2hlQWNjb3VudChhY2NvdW50RW50aXR5KSB7XHJcbiAgICAgICAgLy8gU3RvcmUgdGhlIGFjY291bnQgaW5mbyBhbmQgaGVuY2UgYG5hdGl2ZUFjY291bnRJZGAgaW4gYnJvd3NlciBjYWNoZVxyXG4gICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2Uuc2V0QWNjb3VudChhY2NvdW50RW50aXR5KTtcclxuICAgICAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGNhY2hlZCB0b2tlbnMgZm9yIHRoaXMgYWNjb3VudCBpbiBicm93c2VyIHN0b3JhZ2VcclxuICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlLnJlbW92ZUFjY291bnRDb250ZXh0KGFjY291bnRFbnRpdHkpLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBFcnJvciBvY2N1cnJlZCB3aGlsZSByZW1vdmluZyBhY2NvdW50IGNvbnRleHQgZnJvbSBicm93c2VyIHN0b3JhZ2UuICR7ZX1gKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RvcmVzIHRoZSBhY2Nlc3NfdG9rZW4gYW5kIGlkX3Rva2VuIGluIGlubWVtb3J5IHN0b3JhZ2VcclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSBob21lQWNjb3VudElkZW50aWZpZXJcclxuICAgICAqIEBwYXJhbSBpZFRva2VuT2JqXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VBY2Nlc3NUb2tlblxyXG4gICAgICogQHBhcmFtIHRlbmFudElkXHJcbiAgICAgKiBAcGFyYW0gcmVxVGltZXN0YW1wXHJcbiAgICAgKi9cclxuICAgIGNhY2hlTmF0aXZlVG9rZW5zKHJlc3BvbnNlLCByZXF1ZXN0LCBob21lQWNjb3VudElkZW50aWZpZXIsIGlkVG9rZW5DbGFpbXMsIHJlc3BvbnNlQWNjZXNzVG9rZW4sIHRlbmFudElkLCByZXFUaW1lc3RhbXApIHtcclxuICAgICAgICBjb25zdCBjYWNoZWRJZFRva2VuID0gQ2FjaGVIZWxwZXJzLmNyZWF0ZUlkVG9rZW5FbnRpdHkoaG9tZUFjY291bnRJZGVudGlmaWVyLCByZXF1ZXN0LmF1dGhvcml0eSwgcmVzcG9uc2UuaWRfdG9rZW4gfHwgXCJcIiwgcmVxdWVzdC5jbGllbnRJZCwgaWRUb2tlbkNsYWltcy50aWQgfHwgXCJcIik7XHJcbiAgICAgICAgLy8gY2FjaGUgYWNjZXNzVG9rZW4gaW4gaW5tZW1vcnkgc3RvcmFnZVxyXG4gICAgICAgIGNvbnN0IGV4cGlyZXNJbiA9IHJlcXVlc3QudG9rZW5UeXBlID09PSBBdXRoZW50aWNhdGlvblNjaGVtZS5QT1BcclxuICAgICAgICAgICAgPyBDb25zdGFudHMuU0hSX05PTkNFX1ZBTElESVRZXHJcbiAgICAgICAgICAgIDogKHR5cGVvZiByZXNwb25zZS5leHBpcmVzX2luID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJlc3BvbnNlLmV4cGlyZXNfaW4sIDEwKVxyXG4gICAgICAgICAgICAgICAgOiByZXNwb25zZS5leHBpcmVzX2luKSB8fCAwO1xyXG4gICAgICAgIGNvbnN0IHRva2VuRXhwaXJhdGlvblNlY29uZHMgPSByZXFUaW1lc3RhbXAgKyBleHBpcmVzSW47XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VTY29wZXMgPSB0aGlzLmdlbmVyYXRlU2NvcGVzKHJlc3BvbnNlLCByZXF1ZXN0KTtcclxuICAgICAgICBjb25zdCBjYWNoZWRBY2Nlc3NUb2tlbiA9IENhY2hlSGVscGVycy5jcmVhdGVBY2Nlc3NUb2tlbkVudGl0eShob21lQWNjb3VudElkZW50aWZpZXIsIHJlcXVlc3QuYXV0aG9yaXR5LCByZXNwb25zZUFjY2Vzc1Rva2VuLCByZXF1ZXN0LmNsaWVudElkLCBpZFRva2VuQ2xhaW1zLnRpZCB8fCB0ZW5hbnRJZCwgcmVzcG9uc2VTY29wZXMucHJpbnRTY29wZXMoKSwgdG9rZW5FeHBpcmF0aW9uU2Vjb25kcywgMCwgYmFzZTY0RGVjb2RlLCB1bmRlZmluZWQsIHJlcXVlc3QudG9rZW5UeXBlLCB1bmRlZmluZWQsIHJlcXVlc3Qua2V5SWQpO1xyXG4gICAgICAgIGNvbnN0IG5hdGl2ZUNhY2hlUmVjb3JkID0ge1xyXG4gICAgICAgICAgICBpZFRva2VuOiBjYWNoZWRJZFRva2VuLFxyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogY2FjaGVkQWNjZXNzVG9rZW4sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2b2lkIHRoaXMubmF0aXZlU3RvcmFnZU1hbmFnZXIuc2F2ZUNhY2hlUmVjb3JkKG5hdGl2ZUNhY2hlUmVjb3JkLCByZXF1ZXN0LnN0b3JlSW5DYWNoZSk7XHJcbiAgICB9XHJcbiAgICBhZGRUZWxlbWV0cnlGcm9tTmF0aXZlUmVzcG9uc2UocmVzcG9uc2UpIHtcclxuICAgICAgICBjb25zdCBtYXRzID0gdGhpcy5nZXRNQVRTRnJvbVJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICAgICAgICBpZiAoIW1hdHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQuYWRkRmllbGRzKHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uSWQ6IHRoaXMubmF0aXZlTWVzc2FnZUhhbmRsZXIuZ2V0RXh0ZW5zaW9uSWQoKSxcclxuICAgICAgICAgICAgZXh0ZW5zaW9uVmVyc2lvbjogdGhpcy5uYXRpdmVNZXNzYWdlSGFuZGxlci5nZXRFeHRlbnNpb25WZXJzaW9uKCksXHJcbiAgICAgICAgICAgIG1hdHNCcm9rZXJWZXJzaW9uOiBtYXRzLmJyb2tlcl92ZXJzaW9uLFxyXG4gICAgICAgICAgICBtYXRzQWNjb3VudEpvaW5PblN0YXJ0OiBtYXRzLmFjY291bnRfam9pbl9vbl9zdGFydCxcclxuICAgICAgICAgICAgbWF0c0FjY291bnRKb2luT25FbmQ6IG1hdHMuYWNjb3VudF9qb2luX29uX2VuZCxcclxuICAgICAgICAgICAgbWF0c0RldmljZUpvaW46IG1hdHMuZGV2aWNlX2pvaW4sXHJcbiAgICAgICAgICAgIG1hdHNQcm9tcHRCZWhhdmlvcjogbWF0cy5wcm9tcHRfYmVoYXZpb3IsXHJcbiAgICAgICAgICAgIG1hdHNBcGlFcnJvckNvZGU6IG1hdHMuYXBpX2Vycm9yX2NvZGUsXHJcbiAgICAgICAgICAgIG1hdHNVaVZpc2libGU6IG1hdHMudWlfdmlzaWJsZSxcclxuICAgICAgICAgICAgbWF0c1NpbGVudENvZGU6IG1hdHMuc2lsZW50X2NvZGUsXHJcbiAgICAgICAgICAgIG1hdHNTaWxlbnRCaVN1YkNvZGU6IG1hdHMuc2lsZW50X2JpX3N1Yl9jb2RlLFxyXG4gICAgICAgICAgICBtYXRzU2lsZW50TWVzc2FnZTogbWF0cy5zaWxlbnRfbWVzc2FnZSxcclxuICAgICAgICAgICAgbWF0c1NpbGVudFN0YXR1czogbWF0cy5zaWxlbnRfc3RhdHVzLFxyXG4gICAgICAgICAgICBtYXRzSHR0cFN0YXR1czogbWF0cy5odHRwX3N0YXR1cyxcclxuICAgICAgICAgICAgbWF0c0h0dHBFdmVudENvdW50OiBtYXRzLmh0dHBfZXZlbnRfY291bnQsXHJcbiAgICAgICAgfSwgdGhpcy5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICByZXR1cm4gbWF0cztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIG5hdGl2ZSBwbGF0Zm9ybSByZXNwb25zZSBiZWZvcmUgcHJvY2Vzc2luZ1xyXG4gICAgICogQHBhcmFtIHJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIHZhbGlkYXRlTmF0aXZlUmVzcG9uc2UocmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2UuaGFzT3duUHJvcGVydHkoXCJhY2Nlc3NfdG9rZW5cIikgJiZcclxuICAgICAgICAgICAgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoXCJpZF90b2tlblwiKSAmJlxyXG4gICAgICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImNsaWVudF9pbmZvXCIpICYmXHJcbiAgICAgICAgICAgIHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiYWNjb3VudFwiKSAmJlxyXG4gICAgICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcInNjb3BlXCIpICYmXHJcbiAgICAgICAgICAgIHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiZXhwaXJlc19pblwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVBdXRoRXJyb3IoQXV0aEVycm9yQ29kZXMudW5leHBlY3RlZEVycm9yLCBcIlJlc3BvbnNlIG1pc3NpbmcgZXhwZWN0ZWQgcHJvcGVydGllcy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIE1BVFMgdGVsZW1ldHJ5IGZyb20gbmF0aXZlIHJlc3BvbnNlXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIGdldE1BVFNGcm9tUmVzcG9uc2UocmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2UucHJvcGVydGllcy5NQVRTKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZS5wcm9wZXJ0aWVzLk1BVFMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIk5hdGl2ZUludGVyYWN0aW9uQ2xpZW50IC0gRXJyb3IgcGFyc2luZyBNQVRTIHRlbGVtZXRyeSwgcmV0dXJuaW5nIG51bGwgaW5zdGVhZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCByZXNwb25zZSBjYW1lIGZyb20gbmF0aXZlIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIGlzUmVzcG9uc2VGcm9tQ2FjaGUobWF0cykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWF0cy5pc19jYWNoZWQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIk5hdGl2ZUludGVyYWN0aW9uQ2xpZW50IC0gTUFUUyB0ZWxlbWV0cnkgZG9lcyBub3QgY29udGFpbiBmaWVsZCBpbmRpY2F0aW5nIGlmIHJlc3BvbnNlIHdhcyBzZXJ2ZWQgZnJvbSBjYWNoZS4gUmV0dXJuaW5nIGZhbHNlLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gISFtYXRzLmlzX2NhY2hlZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNsYXRlcyBkZXZlbG9wZXIgcHJvdmlkZWQgcmVxdWVzdCBvYmplY3QgaW50byBOYXRpdmVSZXF1ZXN0IG9iamVjdFxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgYXN5bmMgaW5pdGlhbGl6ZU5hdGl2ZVJlcXVlc3QocmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiTmF0aXZlSW50ZXJhY3Rpb25DbGllbnQgLSBpbml0aWFsaXplTmF0aXZlUmVxdWVzdCBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdEF1dGhvcml0eSA9IHJlcXVlc3QuYXV0aG9yaXR5IHx8IHRoaXMuY29uZmlnLmF1dGguYXV0aG9yaXR5O1xyXG4gICAgICAgIGlmIChyZXF1ZXN0LmFjY291bnQpIHtcclxuICAgICAgICAgICAgLy8gdmFsaWRhdGUgYXV0aG9yaXR5XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0RGlzY292ZXJlZEF1dGhvcml0eSh7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0QXV0aG9yaXR5LFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEF6dXJlQ2xvdWRPcHRpb25zOiByZXF1ZXN0LmF6dXJlQ2xvdWRPcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgYWNjb3VudDogcmVxdWVzdC5hY2NvdW50LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2Fub25pY2FsQXV0aG9yaXR5ID0gbmV3IFVybFN0cmluZyhyZXF1ZXN0QXV0aG9yaXR5KTtcclxuICAgICAgICBjYW5vbmljYWxBdXRob3JpdHkudmFsaWRhdGVBc1VyaSgpO1xyXG4gICAgICAgIC8vIHNjb3BlcyBhcmUgZXhwZWN0ZWQgdG8gYmUgcmVjZWl2ZWQgYnkgdGhlIG5hdGl2ZSBicm9rZXIgYXMgXCJzY29wZVwiIGFuZCB3aWxsIGJlIGFkZGVkIHRvIHRoZSByZXF1ZXN0IGJlbG93LiBPdGhlciBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIGRyb3BwZWQgZnJvbSB0aGUgcmVxdWVzdCB0byB0aGUgbmF0aXZlIGJyb2tlciBjYW4gYmUgaW5jbHVkZWQgaW4gdGhlIG9iamVjdCBkZXN0cnVjdHVyaW5nIGhlcmUuXHJcbiAgICAgICAgY29uc3QgeyBzY29wZXMsIC4uLnJlbWFpbmluZ1Byb3BlcnRpZXMgfSA9IHJlcXVlc3Q7XHJcbiAgICAgICAgY29uc3Qgc2NvcGVTZXQgPSBuZXcgU2NvcGVTZXQoc2NvcGVzIHx8IFtdKTtcclxuICAgICAgICBzY29wZVNldC5hcHBlbmRTY29wZXMoT0lEQ19ERUZBVUxUX1NDT1BFUyk7XHJcbiAgICAgICAgY29uc3QgZ2V0UHJvbXB0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBJZiByZXF1ZXN0IGlzIHNpbGVudCwgcHJvbXB0IGlzIGFsd2F5cyBub25lXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5hcGlJZCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBcGlJZC5zc29TaWxlbnQ6XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFwaUlkLmFjcXVpcmVUb2tlblNpbGVudF9zaWxlbnRGbG93OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiaW5pdGlhbGl6ZU5hdGl2ZVJlcXVlc3Q6IHNpbGVudCByZXF1ZXN0IHNldHMgcHJvbXB0IHRvIG5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21wdFZhbHVlLk5PTkU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gUHJvbXB0IG5vdCBwcm92aWRlZCwgcmVxdWVzdCBtYXkgcHJvY2VlZCBhbmQgbmF0aXZlIGJyb2tlciBkZWNpZGVzIGlmIGl0IG5lZWRzIHRvIHByb21wdFxyXG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QucHJvbXB0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcImluaXRpYWxpemVOYXRpdmVSZXF1ZXN0OiBwcm9tcHQgd2FzIG5vdCBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSWYgcmVxdWVzdCBpcyBpbnRlcmFjdGl2ZSwgY2hlY2sgaWYgcHJvbXB0IHByb3ZpZGVkIGlzIGFsbG93ZWQgdG8gZ28gZGlyZWN0bHkgdG8gbmF0aXZlIGJyb2tlclxyXG4gICAgICAgICAgICBzd2l0Y2ggKHJlcXVlc3QucHJvbXB0KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb21wdFZhbHVlLk5PTkU6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb21wdFZhbHVlLkNPTlNFTlQ6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb21wdFZhbHVlLkxPR0lOOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiaW5pdGlhbGl6ZU5hdGl2ZVJlcXVlc3Q6IHByb21wdCBpcyBjb21wYXRpYmxlIHdpdGggbmF0aXZlIGZsb3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QucHJvbXB0O1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShgaW5pdGlhbGl6ZU5hdGl2ZVJlcXVlc3Q6IHByb21wdCA9ICR7cmVxdWVzdC5wcm9tcHR9IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggbmF0aXZlIGZsb3dgKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKG5hdGl2ZVByb21wdE5vdFN1cHBvcnRlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZFJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgIC4uLnJlbWFpbmluZ1Byb3BlcnRpZXMsXHJcbiAgICAgICAgICAgIGFjY291bnRJZDogdGhpcy5hY2NvdW50SWQsXHJcbiAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNvbmZpZy5hdXRoLmNsaWVudElkLFxyXG4gICAgICAgICAgICBhdXRob3JpdHk6IGNhbm9uaWNhbEF1dGhvcml0eS51cmxTdHJpbmcsXHJcbiAgICAgICAgICAgIHNjb3BlOiBzY29wZVNldC5wcmludFNjb3BlcygpLFxyXG4gICAgICAgICAgICByZWRpcmVjdFVyaTogdGhpcy5nZXRSZWRpcmVjdFVyaShyZXF1ZXN0LnJlZGlyZWN0VXJpKSxcclxuICAgICAgICAgICAgcHJvbXB0OiBnZXRQcm9tcHQoKSxcclxuICAgICAgICAgICAgY29ycmVsYXRpb25JZDogdGhpcy5jb3JyZWxhdGlvbklkLFxyXG4gICAgICAgICAgICB0b2tlblR5cGU6IHJlcXVlc3QuYXV0aGVudGljYXRpb25TY2hlbWUsXHJcbiAgICAgICAgICAgIHdpbmRvd1RpdGxlU3Vic3RyaW5nOiBkb2N1bWVudC50aXRsZSxcclxuICAgICAgICAgICAgZXh0cmFQYXJhbWV0ZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAuLi5yZXF1ZXN0LmV4dHJhUXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgLi4ucmVxdWVzdC50b2tlblF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0ZW5kZWRFeHBpcnlUb2tlbjogZmFsc2UsXHJcbiAgICAgICAgICAgIGtleUlkOiByZXF1ZXN0LnBvcEtpZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIENoZWNrIGZvciBQb1AgdG9rZW4gcmVxdWVzdHM6IHNpZ25Qb3BUb2tlbiBzaG91bGQgb25seSBiZSBzZXQgdG8gdHJ1ZSBpZiBwb3BLaWQgaXMgbm90IHNldFxyXG4gICAgICAgIGlmICh2YWxpZGF0ZWRSZXF1ZXN0LnNpZ25Qb3BUb2tlbiAmJiAhIXJlcXVlc3QucG9wS2lkKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IoaW52YWxpZFBvcFRva2VuUmVxdWVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlRXh0cmFCcm9rZXJQYXJhbXModmFsaWRhdGVkUmVxdWVzdCk7XHJcbiAgICAgICAgdmFsaWRhdGVkUmVxdWVzdC5leHRyYVBhcmFtZXRlcnMgPVxyXG4gICAgICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LmV4dHJhUGFyYW1ldGVycyB8fCB7fTtcclxuICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LmV4dHJhUGFyYW1ldGVycy50ZWxlbWV0cnkgPVxyXG4gICAgICAgICAgICBOYXRpdmVDb25zdGFudHMuTUFUU19URUxFTUVUUlk7XHJcbiAgICAgICAgaWYgKHJlcXVlc3QuYXV0aGVudGljYXRpb25TY2hlbWUgPT09IEF1dGhlbnRpY2F0aW9uU2NoZW1lLlBPUCkge1xyXG4gICAgICAgICAgICAvLyBhZGQgUE9QIHJlcXVlc3QgdHlwZVxyXG4gICAgICAgICAgICBjb25zdCBzaHJQYXJhbWV0ZXJzID0ge1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VSZXF1ZXN0VXJpOiByZXF1ZXN0LnJlc291cmNlUmVxdWVzdFVyaSxcclxuICAgICAgICAgICAgICAgIHJlc291cmNlUmVxdWVzdE1ldGhvZDogcmVxdWVzdC5yZXNvdXJjZVJlcXVlc3RNZXRob2QsXHJcbiAgICAgICAgICAgICAgICBzaHJDbGFpbXM6IHJlcXVlc3Quc2hyQ2xhaW1zLFxyXG4gICAgICAgICAgICAgICAgc2hyTm9uY2U6IHJlcXVlc3Quc2hyTm9uY2UsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHBvcFRva2VuR2VuZXJhdG9yID0gbmV3IFBvcFRva2VuR2VuZXJhdG9yKHRoaXMuYnJvd3NlckNyeXB0byk7XHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIHJlcUNuZiBpZiBub3QgcHJvdmlkZWQgaW4gdGhlIHJlcXVlc3RcclxuICAgICAgICAgICAgbGV0IHJlcUNuZkRhdGE7XHJcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVkUmVxdWVzdC5rZXlJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkUmVxQ25mRGF0YSA9IGF3YWl0IGludm9rZUFzeW5jKHBvcFRva2VuR2VuZXJhdG9yLmdlbmVyYXRlQ25mLmJpbmQocG9wVG9rZW5HZW5lcmF0b3IpLCBQZXJmb3JtYW5jZUV2ZW50cy5Qb3BUb2tlbkdlbmVyYXRlQ25mLCB0aGlzLmxvZ2dlciwgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCwgcmVxdWVzdC5jb3JyZWxhdGlvbklkKShzaHJQYXJhbWV0ZXJzLCB0aGlzLmxvZ2dlcik7XHJcbiAgICAgICAgICAgICAgICByZXFDbmZEYXRhID0gZ2VuZXJhdGVkUmVxQ25mRGF0YS5yZXFDbmZTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LmtleUlkID0gZ2VuZXJhdGVkUmVxQ25mRGF0YS5raWQ7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LnNpZ25Qb3BUb2tlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXFDbmZEYXRhID0gdGhpcy5icm93c2VyQ3J5cHRvLmJhc2U2NFVybEVuY29kZShKU09OLnN0cmluZ2lmeSh7IGtpZDogdmFsaWRhdGVkUmVxdWVzdC5rZXlJZCB9KSk7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LnNpZ25Qb3BUb2tlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNQQXMgcmVxdWlyZSB3aG9sZSBzdHJpbmcgdG8gYmUgcGFzc2VkIHRvIGJyb2tlclxyXG4gICAgICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LnJlcUNuZiA9IHJlcUNuZkRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkUmVxdWVzdFNLVXModmFsaWRhdGVkUmVxdWVzdCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZFJlcXVlc3Q7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgZXh0cmEgYnJva2VyIHJlcXVlc3QgcGFyYW1ldGVyc1xyXG4gICAgICogQHBhcmFtIHJlcXVlc3Qge05hdGl2ZVRva2VuUmVxdWVzdH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUV4dHJhQnJva2VyUGFyYW1zKHJlcXVlc3QpIHtcclxuICAgICAgICBjb25zdCBoYXNFeHRyYUJyb2tlclBhcmFtcyA9IHJlcXVlc3QuZXh0cmFQYXJhbWV0ZXJzICYmXHJcbiAgICAgICAgICAgIHJlcXVlc3QuZXh0cmFQYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KEFBRFNlcnZlclBhcmFtS2V5cy5CUk9LRVJfQ0xJRU5UX0lEKSAmJlxyXG4gICAgICAgICAgICByZXF1ZXN0LmV4dHJhUGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eShBQURTZXJ2ZXJQYXJhbUtleXMuQlJPS0VSX1JFRElSRUNUX1VSSSkgJiZcclxuICAgICAgICAgICAgcmVxdWVzdC5leHRyYVBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoQUFEU2VydmVyUGFyYW1LZXlzLkNMSUVOVF9JRCk7XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0LmVtYmVkZGVkQ2xpZW50SWQgJiYgIWhhc0V4dHJhQnJva2VyUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNoaWxkX2NsaWVudF9pZCA9IFwiXCI7XHJcbiAgICAgICAgY29uc3QgY2hpbGRfcmVkaXJlY3RfdXJpID0gcmVxdWVzdC5yZWRpcmVjdFVyaTtcclxuICAgICAgICBpZiAocmVxdWVzdC5lbWJlZGRlZENsaWVudElkKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVkaXJlY3RVcmkgPSB0aGlzLmNvbmZpZy5hdXRoLnJlZGlyZWN0VXJpO1xyXG4gICAgICAgICAgICBjaGlsZF9jbGllbnRfaWQgPSByZXF1ZXN0LmVtYmVkZGVkQ2xpZW50SWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJlcXVlc3QuZXh0cmFQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVkaXJlY3RVcmkgPVxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5leHRyYVBhcmFtZXRlcnNbQUFEU2VydmVyUGFyYW1LZXlzLkJST0tFUl9SRURJUkVDVF9VUkldO1xyXG4gICAgICAgICAgICBjaGlsZF9jbGllbnRfaWQgPVxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5leHRyYVBhcmFtZXRlcnNbQUFEU2VydmVyUGFyYW1LZXlzLkNMSUVOVF9JRF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcXVlc3QuZXh0cmFQYXJhbWV0ZXJzID0ge1xyXG4gICAgICAgICAgICBjaGlsZF9jbGllbnRfaWQsXHJcbiAgICAgICAgICAgIGNoaWxkX3JlZGlyZWN0X3VyaSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQ/LmFkZEZpZWxkcyh7XHJcbiAgICAgICAgICAgIGVtYmVkZGVkQ2xpZW50SWQ6IGNoaWxkX2NsaWVudF9pZCxcclxuICAgICAgICAgICAgZW1iZWRkZWRSZWRpcmVjdFVyaTogY2hpbGRfcmVkaXJlY3RfdXJpLFxyXG4gICAgICAgIH0sIHJlcXVlc3QuY29ycmVsYXRpb25JZCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTmF0aXZlSW50ZXJhY3Rpb25DbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5hdGl2ZUludGVyYWN0aW9uQ2xpZW50Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyIiwiQUFEU2VydmVyUGFyYW1LZXlzIiwiUGVyZm9ybWFuY2VFdmVudHMiLCJUaW1lVXRpbHMiLCJTY29wZVNldCIsImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsIkNsaWVudEF1dGhFcnJvckNvZGVzIiwiQXV0aFRva2VuIiwiYnVpbGRBY2NvdW50VG9DYWNoZSIsIkFjY291bnRFbnRpdHkiLCJDb25zdGFudHMiLCJBdXRob3JpdHlUeXBlIiwiQXV0aGVudGljYXRpb25TY2hlbWUiLCJQb3BUb2tlbkdlbmVyYXRvciIsInVwZGF0ZUFjY291bnRUZW5hbnRQcm9maWxlRGF0YSIsIkNhY2hlSGVscGVycyIsImNyZWF0ZUF1dGhFcnJvciIsIkF1dGhFcnJvckNvZGVzIiwiVXJsU3RyaW5nIiwiT0lEQ19ERUZBVUxUX1NDT1BFUyIsImludm9rZUFzeW5jIiwiUHJvbXB0VmFsdWUiLCJCYXNlSW50ZXJhY3Rpb25DbGllbnQiLCJOYXRpdmVDb25zdGFudHMiLCJCcm93c2VyQ29uc3RhbnRzIiwiTmF0aXZlRXh0ZW5zaW9uTWV0aG9kIiwiVGVtcG9yYXJ5Q2FjaGVLZXlzIiwiQXBpSWQiLCJOYXRpdmVBdXRoRXJyb3IiLCJpc0ZhdGFsTmF0aXZlQXV0aEVycm9yIiwiY3JlYXRlTmF0aXZlQXV0aEVycm9yIiwiY3JlYXRlQnJvd3NlckF1dGhFcnJvciIsIlNpbGVudENhY2hlQ2xpZW50IiwiYmFzZTY0RGVjb2RlIiwidmVyc2lvbiIsImludmFsaWRQb3BUb2tlblJlcXVlc3QiLCJuYXRpdmVQcm9tcHROb3RTdXBwb3J0ZWQiLCJ1c2VyU3dpdGNoIiwiTmF0aXZlSW50ZXJhY3Rpb25DbGllbnQiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImJyb3dzZXJTdG9yYWdlIiwiYnJvd3NlckNyeXB0byIsImxvZ2dlciIsImV2ZW50SGFuZGxlciIsIm5hdmlnYXRpb25DbGllbnQiLCJhcGlJZCIsInBlcmZvcm1hbmNlQ2xpZW50IiwicHJvdmlkZXIiLCJhY2NvdW50SWQiLCJuYXRpdmVTdG9yYWdlSW1wbCIsImNvcnJlbGF0aW9uSWQiLCJuYXRpdmVNZXNzYWdlSGFuZGxlciIsIm5hdGl2ZVN0b3JhZ2VNYW5hZ2VyIiwic2lsZW50Q2FjaGVDbGllbnQiLCJzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyIiwiaW5pdGlhbGl6ZVNlcnZlclRlbGVtZXRyeU1hbmFnZXIiLCJleHRlbnNpb25OYW1lIiwiZ2V0RXh0ZW5zaW9uSWQiLCJQUkVGRVJSRURfRVhURU5TSU9OX0lEIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic2t1cyIsIm1ha2VFeHRyYVNrdVN0cmluZyIsImxpYnJhcnlOYW1lIiwiTVNBTF9TS1UiLCJsaWJyYXJ5VmVyc2lvbiIsImV4dGVuc2lvblZlcnNpb24iLCJnZXRFeHRlbnNpb25WZXJzaW9uIiwiYWRkUmVxdWVzdFNLVXMiLCJyZXF1ZXN0IiwiZXh0cmFQYXJhbWV0ZXJzIiwiWF9DTElFTlRfRVhUUkFfU0tVIiwiYWNxdWlyZVRva2VuIiwiYWRkUXVldWVNZWFzdXJlbWVudCIsIk5hdGl2ZUludGVyYWN0aW9uQ2xpZW50QWNxdWlyZVRva2VuIiwidHJhY2UiLCJuYXRpdmVBVE1lYXN1cmVtZW50Iiwic3RhcnRNZWFzdXJlbWVudCIsInJlcVRpbWVzdGFtcCIsIm5vd1NlY29uZHMiLCJuYXRpdmVSZXF1ZXN0IiwiaW5pdGlhbGl6ZU5hdGl2ZVJlcXVlc3QiLCJyZXN1bHQiLCJhY3F1aXJlVG9rZW5zRnJvbUNhY2hlIiwiZW5kIiwic3VjY2VzcyIsImlzTmF0aXZlQnJva2VyIiwiZnJvbUNhY2hlIiwiZSIsImluZm8iLCJuYXRpdmVUb2tlblJlcXVlc3QiLCJtZXNzYWdlQm9keSIsIm1ldGhvZCIsIkdldFRva2VuIiwicmVzcG9uc2UiLCJzZW5kTWVzc2FnZSIsInZhbGlkYXRlZFJlc3BvbnNlIiwidmFsaWRhdGVOYXRpdmVSZXNwb25zZSIsImhhbmRsZU5hdGl2ZVJlc3BvbnNlIiwidGhlbiIsInJlcXVlc3RJZCIsImNsZWFyTmF0aXZlQnJva2VyRXJyb3JDb2RlIiwiY2F0Y2giLCJlcnJvciIsImVycm9yQ29kZSIsInN1YkVycm9yQ29kZSIsInN1YkVycm9yIiwic2V0TmF0aXZlQnJva2VyRXJyb3JDb2RlIiwiY3JlYXRlU2lsZW50Q2FjaGVSZXF1ZXN0IiwiY2FjaGVkQWNjb3VudCIsImF1dGhvcml0eSIsInNjb3BlcyIsImZyb21TdHJpbmciLCJzY29wZSIsImFzQXJyYXkiLCJhY2NvdW50IiwiZm9yY2VSZWZyZXNoIiwibmF0aXZlQWNjb3VudElkIiwid2FybmluZyIsIm5vQWNjb3VudEZvdW5kIiwiZ2V0QmFzZUFjY291bnRJbmZvIiwic2lsZW50UmVxdWVzdCIsImZ1bGxBY2NvdW50IiwiaWRUb2tlbkNsYWltcyIsImlkVG9rZW4iLCJhY3F1aXJlVG9rZW5SZWRpcmVjdCIsInJvb3RNZWFzdXJlbWVudCIsInJlbWFpbmluZ1BhcmFtZXRlcnMiLCJvblJlZGlyZWN0TmF2aWdhdGUiLCJzZXRUZW1wb3JhcnlDYWNoZSIsIk5BVElWRV9SRVFVRVNUIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5hdmlnYXRpb25PcHRpb25zIiwidGltZW91dCIsInN5c3RlbSIsInJlZGlyZWN0TmF2aWdhdGlvblRpbWVvdXQiLCJub0hpc3RvcnkiLCJyZWRpcmVjdFVyaSIsImF1dGgiLCJuYXZpZ2F0ZVRvTG9naW5SZXF1ZXN0VXJsIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiZ2V0UmVkaXJlY3RVcmkiLCJuYXZpZ2F0ZUV4dGVybmFsIiwiaGFuZGxlUmVkaXJlY3RQcm9taXNlIiwiaXNJbnRlcmFjdGlvbkluUHJvZ3Jlc3MiLCJjYWNoZWRSZXF1ZXN0IiwiZ2V0Q2FjaGVkTmF0aXZlUmVxdWVzdCIsInZlcmJvc2UiLCJhZGRGaWVsZHMiLCJwcm9tcHQiLCJyZW1vdmVJdGVtIiwiZ2VuZXJhdGVDYWNoZUtleSIsInNldEludGVyYWN0aW9uSW5Qcm9ncmVzcyIsInJlcyIsImxvZ291dCIsIlByb21pc2UiLCJyZWplY3QiLCJleHRyYWN0VG9rZW5DbGFpbXMiLCJpZF90b2tlbiIsImhvbWVBY2NvdW50SWRlbnRpZmllciIsImNyZWF0ZUhvbWVBY2NvdW50SWRlbnRpZmllciIsImNhY2hlZGhvbWVBY2NvdW50SWQiLCJnZXRBY2NvdW50SW5mb0ZpbHRlcmVkQnkiLCJob21lQWNjb3VudElkIiwiaWQiLCJnZXREaXNjb3ZlcmVkQXV0aG9yaXR5IiwicmVxdWVzdEF1dGhvcml0eSIsImJhc2VBY2NvdW50IiwiY2xpZW50X2luZm8iLCJ0aWQiLCJnZW5lcmF0ZUF1dGhlbnRpY2F0aW9uUmVzdWx0IiwiY2Fub25pY2FsQXV0aG9yaXR5IiwiY2FjaGVBY2NvdW50IiwiY2FjaGVOYXRpdmVUb2tlbnMiLCJhY2Nlc3NfdG9rZW4iLCJ0ZW5hbnRJZCIsImdlbmVyYXRlSG9tZUFjY291bnRJZCIsIkVNUFRZX1NUUklORyIsIkRlZmF1bHQiLCJnZW5lcmF0ZVNjb3BlcyIsImdlbmVyYXRlUG9wQWNjZXNzVG9rZW4iLCJ0b2tlblR5cGUiLCJQT1AiLCJzaWduUG9wVG9rZW4iLCJzaHIiLCJwb3BUb2tlbkdlbmVyYXRvciIsInNoclBhcmFtZXRlcnMiLCJyZXNvdXJjZVJlcXVlc3RNZXRob2QiLCJyZXNvdXJjZVJlcXVlc3RVcmkiLCJzaHJDbGFpbXMiLCJzaHJOb25jZSIsImtleUlkIiwia2V5SWRNaXNzaW5nIiwiYWNjb3VudEVudGl0eSIsIm1hdHMiLCJhZGRUZWxlbWV0cnlGcm9tTmF0aXZlUmVzcG9uc2UiLCJyZXNwb25zZVNjb3BlcyIsImFjY291bnRQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsInVpZCIsIm9pZCIsInN1YiIsImFjY291bnRJbmZvIiwiZ2V0QWNjb3VudEluZm8iLCJyZXNwb25zZUFjY2Vzc1Rva2VuIiwiQkVBUkVSIiwidW5pcXVlSWQiLCJhY2Nlc3NUb2tlbiIsImlzUmVzcG9uc2VGcm9tQ2FjaGUiLCJleHBpcmVzT24iLCJEYXRlIiwiTnVtYmVyIiwiZXhwaXJlc19pbiIsInN0YXRlIiwiZnJvbU5hdGl2ZUJyb2tlciIsInNldEFjY291bnQiLCJyZW1vdmVBY2NvdW50Q29udGV4dCIsImNhY2hlZElkVG9rZW4iLCJjcmVhdGVJZFRva2VuRW50aXR5IiwiY2xpZW50SWQiLCJleHBpcmVzSW4iLCJTSFJfTk9OQ0VfVkFMSURJVFkiLCJwYXJzZUludCIsInRva2VuRXhwaXJhdGlvblNlY29uZHMiLCJjYWNoZWRBY2Nlc3NUb2tlbiIsImNyZWF0ZUFjY2Vzc1Rva2VuRW50aXR5IiwicHJpbnRTY29wZXMiLCJuYXRpdmVDYWNoZVJlY29yZCIsInNhdmVDYWNoZVJlY29yZCIsInN0b3JlSW5DYWNoZSIsImdldE1BVFNGcm9tUmVzcG9uc2UiLCJleHRlbnNpb25JZCIsIm1hdHNCcm9rZXJWZXJzaW9uIiwiYnJva2VyX3ZlcnNpb24iLCJtYXRzQWNjb3VudEpvaW5PblN0YXJ0IiwiYWNjb3VudF9qb2luX29uX3N0YXJ0IiwibWF0c0FjY291bnRKb2luT25FbmQiLCJhY2NvdW50X2pvaW5fb25fZW5kIiwibWF0c0RldmljZUpvaW4iLCJkZXZpY2Vfam9pbiIsIm1hdHNQcm9tcHRCZWhhdmlvciIsInByb21wdF9iZWhhdmlvciIsIm1hdHNBcGlFcnJvckNvZGUiLCJhcGlfZXJyb3JfY29kZSIsIm1hdHNVaVZpc2libGUiLCJ1aV92aXNpYmxlIiwibWF0c1NpbGVudENvZGUiLCJzaWxlbnRfY29kZSIsIm1hdHNTaWxlbnRCaVN1YkNvZGUiLCJzaWxlbnRfYmlfc3ViX2NvZGUiLCJtYXRzU2lsZW50TWVzc2FnZSIsInNpbGVudF9tZXNzYWdlIiwibWF0c1NpbGVudFN0YXR1cyIsInNpbGVudF9zdGF0dXMiLCJtYXRzSHR0cFN0YXR1cyIsImh0dHBfc3RhdHVzIiwibWF0c0h0dHBFdmVudENvdW50IiwiaHR0cF9ldmVudF9jb3VudCIsImhhc093blByb3BlcnR5IiwidW5leHBlY3RlZEVycm9yIiwiTUFUUyIsInBhcnNlIiwiaXNfY2FjaGVkIiwicmVxdWVzdEF6dXJlQ2xvdWRPcHRpb25zIiwiYXp1cmVDbG91ZE9wdGlvbnMiLCJ2YWxpZGF0ZUFzVXJpIiwicmVtYWluaW5nUHJvcGVydGllcyIsInNjb3BlU2V0IiwiYXBwZW5kU2NvcGVzIiwiZ2V0UHJvbXB0Iiwic3NvU2lsZW50IiwiYWNxdWlyZVRva2VuU2lsZW50X3NpbGVudEZsb3ciLCJOT05FIiwiQ09OU0VOVCIsIkxPR0lOIiwidmFsaWRhdGVkUmVxdWVzdCIsInVybFN0cmluZyIsImF1dGhlbnRpY2F0aW9uU2NoZW1lIiwid2luZG93VGl0bGVTdWJzdHJpbmciLCJkb2N1bWVudCIsInRpdGxlIiwiZXh0cmFRdWVyeVBhcmFtZXRlcnMiLCJ0b2tlblF1ZXJ5UGFyYW1ldGVycyIsImV4dGVuZGVkRXhwaXJ5VG9rZW4iLCJwb3BLaWQiLCJoYW5kbGVFeHRyYUJyb2tlclBhcmFtcyIsInRlbGVtZXRyeSIsIk1BVFNfVEVMRU1FVFJZIiwicmVxQ25mRGF0YSIsImdlbmVyYXRlZFJlcUNuZkRhdGEiLCJnZW5lcmF0ZUNuZiIsImJpbmQiLCJQb3BUb2tlbkdlbmVyYXRlQ25mIiwicmVxQ25mU3RyaW5nIiwia2lkIiwiYmFzZTY0VXJsRW5jb2RlIiwicmVxQ25mIiwiaGFzRXh0cmFCcm9rZXJQYXJhbXMiLCJCUk9LRVJfQ0xJRU5UX0lEIiwiQlJPS0VSX1JFRElSRUNUX1VSSSIsIkNMSUVOVF9JRCIsImVtYmVkZGVkQ2xpZW50SWQiLCJjaGlsZF9jbGllbnRfaWQiLCJjaGlsZF9yZWRpcmVjdF91cmkiLCJlbWJlZGRlZFJlZGlyZWN0VXJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PopupClient: () => (/* binding */ PopupClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interaction_handler/InteractionHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class PopupClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n        this.nativeStorage = nativeStorageImpl;\n    }\n    /**\r\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n     * @param request\r\n     */ acquireToken(request) {\n        try {\n            const popupName = this.generatePopupName(request.scopes || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n            const popupParams = {\n                popupName,\n                popupWindowAttributes: request.popupWindowAttributes || {},\n                popupWindowParent: request.popupWindowParent ?? window\n            };\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(request, popupParams);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n                popupParams.popup = this.openSizedPopup(\"about:blank\", popupParams);\n                return this.acquireTokenPopupAsync(request, popupParams);\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */ logout(logoutRequest) {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            const popupParams = {\n                popupName: this.generateLogoutPopupName(validLogoutRequest),\n                popupWindowAttributes: logoutRequest?.popupWindowAttributes || {},\n                popupWindowParent: logoutRequest?.popupWindowParent ?? window\n            };\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                popupParams.popup = this.openSizedPopup(\"about:blank\", popupParams);\n                return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n    /**\r\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param popup\r\n     * @param popupWindowAttributes\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async acquireTokenPopupAsync(request, popupParams) {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenPopup);\n        const validRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.preconnect)(validRequest.authority);\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationCodeRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, this.correlationId)(validRequest);\n            // Initialize the client\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: validRequest.authority,\n                requestAzureCloudOptions: validRequest.azureCloudOptions,\n                requestExtraQueryParameters: validRequest.extraQueryParameters,\n                account: validRequest.account\n            });\n            const isNativeBroker = _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            // Start measurement for server calls with native brokering enabled\n            let fetchNativeAccountIdMeasurement;\n            if (isNativeBroker) {\n                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: isNativeBroker\n            });\n            // Create popup interaction handler.\n            const interactionHandler = new _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__.InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupWindow = this.initiateAuthRequest(navigateUrl, popupParams);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.POPUP_OPENED, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, {\n                popupWindow\n            }, null);\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const responseString = await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent);\n            const serverParams = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(_response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_9__.deserializeResponse, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);\n            // Remove throttle if it exists\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n            if (serverParams.accountId) {\n                this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n                // end measurement for server call with native brokering enabled\n                if (fetchNativeAccountIdMeasurement) {\n                    fetchNativeAccountIdMeasurement.end({\n                        success: true,\n                        isNativeBroker: true\n                    });\n                }\n                if (!this.nativeMessageHandler) {\n                    throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.nativeConnectionNotEstablished);\n                }\n                const nativeInteractionClient = new _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n                const { userRequestState } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.ProtocolUtils.parseRequestState(this.browserCrypto, validRequest.state);\n                return await nativeInteractionClient.acquireToken({\n                    ...validRequest,\n                    state: userRequestState,\n                    prompt: undefined\n                });\n            }\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponse(serverParams, validRequest);\n            return result;\n        } catch (e) {\n            // Close the synchronous popup if an error is thrown before the window unload event is registered\n            popupParams.popup?.close();\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     *\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param requestAuthority\r\n     * @param popup\r\n     * @param mainWindowRedirectUri\r\n     * @param popupWindowAttributes\r\n     */ async logoutPopupAsync(validRequest, popupParams, requestAuthority, mainWindowRedirectUri) {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, validRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.logoutPopup);\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n            // Initialize the client\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: requestAuthority,\n                account: validRequest.account || undefined\n            });\n            try {\n                authClient.authority.endSessionEndpoint;\n            } catch  {\n                if (validRequest.account?.homeAccountId && validRequest.postLogoutRedirectUri && authClient.authority.protocolMode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__.ProtocolMode.OIDC) {\n                    void this.browserStorage.removeAccount(validRequest.account?.homeAccountId);\n                    this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, validRequest);\n                    if (mainWindowRedirectUri) {\n                        const navigationOptions = {\n                            apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.logoutPopup,\n                            timeout: this.config.system.redirectNavigationTimeout,\n                            noHistory: false\n                        };\n                        const absoluteUrl = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.UrlString.getAbsoluteUrl(mainWindowRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.getCurrentUri)());\n                        await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n                    }\n                    popupParams.popup?.close();\n                    return;\n                }\n            }\n            // Create logout string and navigate user window to logout.\n            const logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, validRequest);\n            // Open the popup window to requestUrl.\n            const popupWindow = this.openPopup(logoutUri, popupParams);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.POPUP_OPENED, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, {\n                popupWindow\n            }, null);\n            await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent).catch(()=>{\n            // Swallow any errors related to monitoring the window. Server logout is best effort\n            });\n            if (mainWindowRedirectUri) {\n                const navigationOptions = {\n                    apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false\n                };\n                const absoluteUrl = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.UrlString.getAbsoluteUrl(mainWindowRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.getCurrentUri)());\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\n                await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            // Close the synchronous popup if an error is thrown before the window unload event is registered\n            popupParams.popup?.close();\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, null, e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n            throw e;\n        }\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n    }\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */ initiateAuthRequest(requestUrl, params) {\n        // Check that request url is not empty.\n        if (requestUrl) {\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.error(\"Navigate url is empty\");\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.emptyNavigateUri);\n        }\n    }\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - timeout for processing hash once popup is redirected back to application\r\n     */ monitorPopupForHash(popupWindow, popupWindowParent) {\n        return new Promise((resolve, reject)=>{\n            this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n            const intervalId = setInterval(()=>{\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n                    clearInterval(intervalId);\n                    reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.userCancelled));\n                    return;\n                }\n                let href = \"\";\n                try {\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */ href = popupWindow.location.href;\n                } catch (e) {}\n                // Don't process blank pages or cross domain\n                if (!href || href === \"about:blank\") {\n                    return;\n                }\n                clearInterval(intervalId);\n                let responseString = \"\";\n                const responseType = this.config.auth.OIDCOptions.serverResponseType;\n                if (popupWindow) {\n                    if (responseType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ServerResponseType.QUERY) {\n                        responseString = popupWindow.location.search;\n                    } else {\n                        responseString = popupWindow.location.hash;\n                    }\n                }\n                this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n                resolve(responseString);\n            }, this.config.system.pollIntervalMilliseconds);\n        }).finally(()=>{\n            this.cleanPopup(popupWindow, popupWindowParent);\n        });\n    }\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @param popupWindowAttributes\r\n     * @ignore\r\n     * @hidden\r\n     */ openPopup(urlNavigate, popupParams) {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams);\n            }\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.emptyWindowError);\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            popupParams.popupWindowParent.addEventListener(\"beforeunload\", this.unloadWindow);\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\"error opening popup \" + e.message);\n            this.browserStorage.setInteractionInProgress(false);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.popupWindowError);\n        }\n    }\n    /**\r\n     * Helper function to set popup window dimensions and position\r\n     * @param urlNavigate\r\n     * @param popupName\r\n     * @param popupWindowAttributes\r\n     * @returns\r\n     */ openSizedPopup(urlNavigate, { popupName, popupWindowAttributes, popupWindowParent }) {\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */ const winLeft = popupWindowParent.screenLeft ? popupWindowParent.screenLeft : popupWindowParent.screenX;\n        const winTop = popupWindowParent.screenTop ? popupWindowParent.screenTop : popupWindowParent.screenY;\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */ const winWidth = popupWindowParent.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const winHeight = popupWindowParent.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n        if (!width || width < 0 || width > winWidth) {\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n            width = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_WIDTH;\n        }\n        if (!height || height < 0 || height > winHeight) {\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n            height = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_HEIGHT;\n        }\n        if (!top || top < 0 || top > winHeight) {\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n            top = Math.max(0, winHeight / 2 - _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n        }\n        if (!left || left < 0 || left > winWidth) {\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n            left = Math.max(0, winWidth / 2 - _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n        }\n        return popupWindowParent.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n    }\n    /**\r\n     * Event callback to unload main window.\r\n     */ unloadWindow(e) {\n        this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */ cleanPopup(popupWindow, popupWindowParent) {\n        // Close window.\n        popupWindow.close();\n        // Remove window unload function\n        popupWindowParent.removeEventListener(\"beforeunload\", this.unloadWindow);\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */ generatePopupName(scopes, authority) {\n        return `${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n    }\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId\r\n     * @param request\r\n     */ generateLogoutPopupName(request) {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n    }\n}\n //# sourceMappingURL=PopupClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedirectClient: () => (/* binding */ RedirectClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _interaction_handler_RedirectHandler_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interaction_handler/RedirectHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function getNavigationType() {\n    if (true) {\n        return undefined;\n    }\n    const navigationEntries = window.performance.getEntriesByType(\"navigation\");\n    const navigation = navigationEntries.length ? navigationEntries[0] : undefined;\n    return navigation?.type;\n}\nclass RedirectClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.nativeStorage = nativeStorageImpl;\n    }\n    /**\r\n     * Redirects the page to the /authorize endpoint of the IDP\r\n     * @param request\r\n     */ async acquireToken(request) {\n        const validRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || \"\", validRequest.account || null);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenRedirect);\n        const handleBackButton = (event)=>{\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            if (event.persisted) {\n                this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n                this.browserStorage.cleanRequestByState(validRequest.state);\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.RESTORE_FROM_BFCACHE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            }\n        };\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.initializeAuthorizationCodeRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, this.correlationId)(validRequest);\n            // Initialize the client\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: validRequest.authority,\n                requestAzureCloudOptions: validRequest.azureCloudOptions,\n                requestExtraQueryParameters: validRequest.extraQueryParameters,\n                account: validRequest.account\n            });\n            // Create redirect interaction handler.\n            const interactionHandler = new _interaction_handler_RedirectHandler_mjs__WEBPACK_IMPORTED_MODULE_5__.RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            });\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate || this.config.auth.onRedirectNavigate\n            });\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n    /**\r\n     * Checks if navigateToLoginRequestUrl is set, and:\r\n     * - if true, performs logic to cache and navigate\r\n     * - if false, handles hash string and parses response\r\n     * @param hash {string} url hash\r\n     * @param parentMeasurement {InProgressPerformanceEvent} parent measurement\r\n     */ async handleRedirectPromise(hash = \"\", parentMeasurement) {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.handleRedirectPromise);\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n                return null;\n            }\n            const [serverParams, responseString] = this.getRedirectResponse(hash || \"\");\n            if (!serverParams) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\"handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.\");\n                this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n                // Do not instrument \"no_server_response\" if user clicked back button\n                if (getNavigationType() !== \"back_forward\") {\n                    parentMeasurement.event.errorCode = \"no_server_response\";\n                } else {\n                    this.logger.verbose(\"Back navigation event detected. Muting no_server_response error\");\n                }\n                return null;\n            }\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.ORIGIN_URI, true) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.Constants.EMPTY_STRING;\n            const loginRequestUrlNormalized = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.UrlString.removeHashFromUrl(window.location.href);\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\"Current page is loginRequestUrl, handling response\");\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.replaceHash)(loginRequestUrl);\n                }\n                const handleHashResult = await this.handleResponse(serverParams, serverTelemetryManager);\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling response\");\n                return await this.handleResponse(serverParams, serverTelemetryManager);\n            } else if (!(0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.isInIframe)() || this.config.system.allowRedirectInIframe) {\n                /*\r\n                 * Returned from authority using redirect - need to perform navigation before processing response\r\n                 * Cache the hash to be retrieved after the next redirect\r\n                 */ this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH, responseString, true);\n                const navigationOptions = {\n                    apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true\n                };\n                /**\r\n                 * Default behavior is to redirect to the start page and not process the hash now.\r\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\r\n                 */ let processHashOnRedirect = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.getHomepage)();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n                }\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return await this.handleResponse(serverParams, serverTelemetryManager);\n                }\n            }\n            return null;\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            throw e;\n        }\n    }\n    /**\r\n     * Gets the response hash for a redirect request\r\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n     * @param hash\r\n     */ getRedirectResponse(userProvidedResponse) {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        let responseString = userProvidedResponse;\n        if (!responseString) {\n            if (this.config.auth.OIDCOptions.serverResponseType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.ServerResponseType.QUERY) {\n                responseString = window.location.search;\n            } else {\n                responseString = window.location.hash;\n            }\n        }\n        let response = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.getDeserializedResponse(responseString);\n        if (response) {\n            try {\n                (0,_response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__.validateInteractionType)(response, this.browserCrypto, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            } catch (e) {\n                if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                    this.logger.error(`Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`);\n                }\n                return [\n                    null,\n                    \"\"\n                ];\n            }\n            (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.clearHash)(window);\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\n            return [\n                response,\n                responseString\n            ];\n        }\n        const cachedHash = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH, true);\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH));\n        if (cachedHash) {\n            response = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.getDeserializedResponse(cachedHash);\n            if (response) {\n                this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n                return [\n                    response,\n                    cachedHash\n                ];\n            }\n        }\n        return [\n            null,\n            \"\"\n        ];\n    }\n    /**\r\n     * Checks if hash exists and handles in window.\r\n     * @param hash\r\n     * @param state\r\n     */ async handleResponse(serverParams, serverTelemetryManager) {\n        const state = serverParams.state;\n        if (!state) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.noStateInHash);\n        }\n        const cachedRequest = this.browserStorage.getCachedRequest(state);\n        this.logger.verbose(\"handleResponse called, retrieved cached request\");\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.nativeConnectionNotEstablished);\n            }\n            const nativeInteractionClient = new _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_15__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\n            const { userRequestState } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__.ProtocolUtils.parseRequestState(this.browserCrypto, state);\n            return nativeInteractionClient.acquireToken({\n                ...cachedRequest,\n                state: userRequestState,\n                prompt: undefined\n            }).finally(()=>{\n                this.browserStorage.cleanRequestByState(state);\n            });\n        }\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.noCachedAuthorityError);\n        }\n        const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n            serverTelemetryManager,\n            requestAuthority: currentAuthority\n        });\n        _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n        const interactionHandler = new _interaction_handler_RedirectHandler_mjs__WEBPACK_IMPORTED_MODULE_5__.RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.performanceClient);\n        return interactionHandler.handleCodeResponse(serverParams, state);\n    }\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */ async logout(logoutRequest) {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.logout);\n        try {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, logoutRequest);\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n            const navigationOptions = {\n                apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n            };\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: logoutRequest && logoutRequest.authority,\n                requestExtraQueryParameters: logoutRequest?.extraQueryParameters,\n                account: logoutRequest && logoutRequest.account || undefined\n            });\n            if (authClient.authority.protocolMode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.ProtocolMode.OIDC) {\n                try {\n                    authClient.authority.endSessionEndpoint;\n                } catch  {\n                    if (validLogoutRequest.account?.homeAccountId) {\n                        void this.browserStorage.removeAccount(validLogoutRequest.account?.homeAccountId);\n                        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, validLogoutRequest);\n                        return;\n                    }\n                }\n            }\n            // Create logout string and navigate user window to logout.\n            const logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, validLogoutRequest);\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n                if (navigate !== false) {\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n                    // Ensure interaction is in progress\n                    if (!this.browserStorage.getInteractionInProgress()) {\n                        this.browserStorage.setInteractionInProgress(true);\n                    }\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                    return;\n                } else {\n                    // Ensure interaction is not in progress\n                    this.browserStorage.setInteractionInProgress(false);\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n                }\n            } else {\n                // Ensure interaction is in progress\n                if (!this.browserStorage.getInteractionInProgress()) {\n                    this.browserStorage.setInteractionInProgress(true);\n                }\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                return;\n            }\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, null, e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            throw e;\n        }\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n    }\n    /**\r\n     * Use to get the redirectStartPage either from request or use current window\r\n     * @param requestStartPage\r\n     */ getRedirectStartPage(requestStartPage) {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.UrlString.getAbsoluteUrl(redirectStartPage, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.getCurrentUri)());\n    }\n}\n //# sourceMappingURL=RedirectClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentAuthCodeClient: () => (/* binding */ SilentAuthCodeClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _HybridSpaAuthorizationCodeClient_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./HybridSpaAuthorizationCodeClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs\");\n/* harmony import */ var _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interaction_handler/InteractionHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentAuthCodeClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n    }\n    /**\r\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n     * @param request\r\n     */ async acquireToken(request) {\n        // Auth code payload is required\n        if (!request.code) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.authCodeRequired);\n        }\n        // Create silent request\n        const silentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(request, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_5__.InteractionType.Silent);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n        try {\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest = {\n                ...silentRequest,\n                code: request.code\n            };\n            // Initialize the client\n            const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, request.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: silentRequest.authority,\n                requestAzureCloudOptions: silentRequest.azureCloudOptions,\n                requestExtraQueryParameters: silentRequest.extraQueryParameters,\n                account: silentRequest.account\n            });\n            const authClient = new _HybridSpaAuthorizationCodeClient_mjs__WEBPACK_IMPORTED_MODULE_6__.HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            // Create silent handler\n            const interactionHandler = new _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__.InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            // Handle auth code parameters from request\n            return await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(interactionHandler.handleCodeResponseFromServer.bind(interactionHandler), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)({\n                code: request.code,\n                msgraph_host: request.msGraphHost,\n                cloud_graph_host_name: request.cloudGraphHostName,\n                cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest, false);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     * Currently Unsupported\r\n     */ logout() {\n        // Synchronous so we must reject\n        return Promise.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.silentLogoutUnsupported));\n    }\n}\n //# sourceMappingURL=SilentAuthCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentCacheClient: () => (/* binding */ SilentCacheClient)\n/* harmony export */ });\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentCacheClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    /**\r\n     * Returns unexpired tokens from the cache, if available\r\n     * @param silentRequest\r\n     */ async acquireToken(silentRequest) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenSilent_silentFlow);\n        const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({\n            serverTelemetryManager,\n            requestAuthority: silentRequest.authority,\n            requestAzureCloudOptions: silentRequest.azureCloudOptions,\n            account: silentRequest.account\n        });\n        const silentAuthClient = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.SilentFlowClient(clientConfig, this.performanceClient);\n        this.logger.verbose(\"Silent auth client created\");\n        try {\n            const response = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(silentAuthClient.acquireCachedToken.bind(silentAuthClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentFlowClientAcquireCachedToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n            const authResponse = response[0];\n            this.performanceClient.addFields({\n                fromCache: true\n            }, silentRequest.correlationId);\n            return authResponse;\n        } catch (error) {\n            if (error instanceof _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.BrowserAuthError && error.errorCode === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cryptoKeyNotFound) {\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n            throw error;\n        }\n    }\n    /**\r\n     * API to silenty clear the browser cache.\r\n     * @param logoutRequest\r\n     */ logout(logoutRequest) {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\n    }\n}\n //# sourceMappingURL=SilentCacheClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9TaWxlbnRDYWNoZUNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNEU7QUFDa0I7QUFDeEM7QUFDVztBQUNNO0FBRXZFOzs7Q0FHQyxHQUNELE1BQU1PLDBCQUEwQlAscUZBQXlCQTtJQUNyRDs7O0tBR0MsR0FDRCxNQUFNUSxhQUFhQyxhQUFhLEVBQUU7UUFDOUIsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0MsbUJBQW1CLENBQUNWLHlFQUFpQkEsQ0FBQ1csNkJBQTZCLEVBQUVILGNBQWNJLGFBQWE7UUFDdkgsMERBQTBEO1FBQzFELE1BQU1DLHlCQUF5QixJQUFJLENBQUNDLGdDQUFnQyxDQUFDWCw4REFBS0EsQ0FBQ1ksNkJBQTZCO1FBQ3hHLE1BQU1DLGVBQWUsTUFBTWYsdUVBQVdBLENBQUMsSUFBSSxDQUFDZ0Isc0JBQXNCLENBQUNDLElBQUksQ0FBQyxJQUFJLEdBQUdsQix5RUFBaUJBLENBQUNtQiwrQ0FBK0MsRUFBRSxJQUFJLENBQUNDLE1BQU0sRUFBRSxJQUFJLENBQUNYLGlCQUFpQixFQUFFLElBQUksQ0FBQ0csYUFBYSxFQUFFO1lBQ3ZNQztZQUNBUSxrQkFBa0JiLGNBQWNjLFNBQVM7WUFDekNDLDBCQUEwQmYsY0FBY2dCLGlCQUFpQjtZQUN6REMsU0FBU2pCLGNBQWNpQixPQUFPO1FBQ2xDO1FBQ0EsTUFBTUMsbUJBQW1CLElBQUl4Qix3RUFBZ0JBLENBQUNjLGNBQWMsSUFBSSxDQUFDUCxpQkFBaUI7UUFDbEYsSUFBSSxDQUFDVyxNQUFNLENBQUNPLE9BQU8sQ0FBQztRQUNwQixJQUFJO1lBQ0EsTUFBTUMsV0FBVyxNQUFNM0IsdUVBQVdBLENBQUN5QixpQkFBaUJHLGtCQUFrQixDQUFDWCxJQUFJLENBQUNRLG1CQUFtQjFCLHlFQUFpQkEsQ0FBQzhCLGtDQUFrQyxFQUFFLElBQUksQ0FBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQ1gsaUJBQWlCLEVBQUVELGNBQWNJLGFBQWEsRUFBRUo7WUFDdk4sTUFBTXVCLGVBQWVILFFBQVEsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQ25CLGlCQUFpQixDQUFDdUIsU0FBUyxDQUFDO2dCQUM3QkMsV0FBVztZQUNmLEdBQUd6QixjQUFjSSxhQUFhO1lBQzlCLE9BQU9tQjtRQUNYLEVBQ0EsT0FBT0csT0FBTztZQUNWLElBQUlBLGlCQUFpQjlCLHlFQUFnQkEsSUFDakM4QixNQUFNQyxTQUFTLEtBQUs5QiwrRUFBaUJBLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQ2UsTUFBTSxDQUFDTyxPQUFPLENBQUM7WUFDeEI7WUFDQSxNQUFNTztRQUNWO0lBQ0o7SUFDQTs7O0tBR0MsR0FDREUsT0FBT0MsYUFBYSxFQUFFO1FBQ2xCLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ08sT0FBTyxDQUFDO1FBQ3BCLE1BQU1XLHFCQUFxQixJQUFJLENBQUNDLHVCQUF1QixDQUFDRjtRQUN4RCxPQUFPLElBQUksQ0FBQ0csa0JBQWtCLENBQUNGLG9CQUFvQmI7SUFDdkQ7QUFDSjtBQUU2QixDQUM3Qiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvaW50ZXJhY3Rpb25fY2xpZW50L1NpbGVudENhY2hlQ2xpZW50Lm1qcz81NTY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudCB9IGZyb20gJy4vU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudC5tanMnO1xuaW1wb3J0IHsgUGVyZm9ybWFuY2VFdmVudHMsIGludm9rZUFzeW5jLCBTaWxlbnRGbG93Q2xpZW50IH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL2Jyb3dzZXInO1xuaW1wb3J0IHsgQXBpSWQgfSBmcm9tICcuLi91dGlscy9Ccm93c2VyQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBCcm93c2VyQXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgY3J5cHRvS2V5Tm90Rm91bmQgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIFNpbGVudENhY2hlQ2xpZW50IGV4dGVuZHMgU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudCB7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdW5leHBpcmVkIHRva2VucyBmcm9tIHRoZSBjYWNoZSwgaWYgYXZhaWxhYmxlXHJcbiAgICAgKiBAcGFyYW0gc2lsZW50UmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBhc3luYyBhY3F1aXJlVG9rZW4oc2lsZW50UmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5TaWxlbnRDYWNoZUNsaWVudEFjcXVpcmVUb2tlbiwgc2lsZW50UmVxdWVzdC5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICAvLyBUZWxlbWV0cnkgbWFuYWdlciBvbmx5IHVzZWQgdG8gaW5jcmVtZW50IGNhY2hlSGl0cyBoZXJlXHJcbiAgICAgICAgY29uc3Qgc2VydmVyVGVsZW1ldHJ5TWFuYWdlciA9IHRoaXMuaW5pdGlhbGl6ZVNlcnZlclRlbGVtZXRyeU1hbmFnZXIoQXBpSWQuYWNxdWlyZVRva2VuU2lsZW50X3NpbGVudEZsb3cpO1xyXG4gICAgICAgIGNvbnN0IGNsaWVudENvbmZpZyA9IGF3YWl0IGludm9rZUFzeW5jKHRoaXMuZ2V0Q2xpZW50Q29uZmlndXJhdGlvbi5iaW5kKHRoaXMpLCBQZXJmb3JtYW5jZUV2ZW50cy5TdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50R2V0Q2xpZW50Q29uZmlndXJhdGlvbiwgdGhpcy5sb2dnZXIsIHRoaXMucGVyZm9ybWFuY2VDbGllbnQsIHRoaXMuY29ycmVsYXRpb25JZCkoe1xyXG4gICAgICAgICAgICBzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLFxyXG4gICAgICAgICAgICByZXF1ZXN0QXV0aG9yaXR5OiBzaWxlbnRSZXF1ZXN0LmF1dGhvcml0eSxcclxuICAgICAgICAgICAgcmVxdWVzdEF6dXJlQ2xvdWRPcHRpb25zOiBzaWxlbnRSZXF1ZXN0LmF6dXJlQ2xvdWRPcHRpb25zLFxyXG4gICAgICAgICAgICBhY2NvdW50OiBzaWxlbnRSZXF1ZXN0LmFjY291bnQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgc2lsZW50QXV0aENsaWVudCA9IG5ldyBTaWxlbnRGbG93Q2xpZW50KGNsaWVudENvbmZpZywgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCk7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlNpbGVudCBhdXRoIGNsaWVudCBjcmVhdGVkXCIpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgaW52b2tlQXN5bmMoc2lsZW50QXV0aENsaWVudC5hY3F1aXJlQ2FjaGVkVG9rZW4uYmluZChzaWxlbnRBdXRoQ2xpZW50KSwgUGVyZm9ybWFuY2VFdmVudHMuU2lsZW50Rmxvd0NsaWVudEFjcXVpcmVDYWNoZWRUb2tlbiwgdGhpcy5sb2dnZXIsIHRoaXMucGVyZm9ybWFuY2VDbGllbnQsIHNpbGVudFJlcXVlc3QuY29ycmVsYXRpb25JZCkoc2lsZW50UmVxdWVzdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGF1dGhSZXNwb25zZSA9IHJlc3BvbnNlWzBdO1xyXG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LmFkZEZpZWxkcyh7XHJcbiAgICAgICAgICAgICAgICBmcm9tQ2FjaGU6IHRydWUsXHJcbiAgICAgICAgICAgIH0sIHNpbGVudFJlcXVlc3QuY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBhdXRoUmVzcG9uc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBCcm93c2VyQXV0aEVycm9yICYmXHJcbiAgICAgICAgICAgICAgICBlcnJvci5lcnJvckNvZGUgPT09IGNyeXB0b0tleU5vdEZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiU2lnbmluZyBrZXlwYWlyIGZvciBib3VuZCBhY2Nlc3MgdG9rZW4gbm90IGZvdW5kLiBSZWZyZXNoaW5nIGJvdW5kIGFjY2VzcyB0b2tlbiBhbmQgZ2VuZXJhdGluZyBhIG5ldyBjcnlwdG8ga2V5cGFpci5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBUEkgdG8gc2lsZW50eSBjbGVhciB0aGUgYnJvd3NlciBjYWNoZS5cclxuICAgICAqIEBwYXJhbSBsb2dvdXRSZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIGxvZ291dChsb2dvdXRSZXF1ZXN0KSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcImxvZ291dFJlZGlyZWN0IGNhbGxlZFwiKTtcclxuICAgICAgICBjb25zdCB2YWxpZExvZ291dFJlcXVlc3QgPSB0aGlzLmluaXRpYWxpemVMb2dvdXRSZXF1ZXN0KGxvZ291dFJlcXVlc3QpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFyQ2FjaGVPbkxvZ291dCh2YWxpZExvZ291dFJlcXVlc3Q/LmFjY291bnQpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFNpbGVudENhY2hlQ2xpZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TaWxlbnRDYWNoZUNsaWVudC5tanMubWFwXG4iXSwibmFtZXMiOlsiU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudCIsIlBlcmZvcm1hbmNlRXZlbnRzIiwiaW52b2tlQXN5bmMiLCJTaWxlbnRGbG93Q2xpZW50IiwiQXBpSWQiLCJCcm93c2VyQXV0aEVycm9yIiwiY3J5cHRvS2V5Tm90Rm91bmQiLCJTaWxlbnRDYWNoZUNsaWVudCIsImFjcXVpcmVUb2tlbiIsInNpbGVudFJlcXVlc3QiLCJwZXJmb3JtYW5jZUNsaWVudCIsImFkZFF1ZXVlTWVhc3VyZW1lbnQiLCJTaWxlbnRDYWNoZUNsaWVudEFjcXVpcmVUb2tlbiIsImNvcnJlbGF0aW9uSWQiLCJzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyIiwiaW5pdGlhbGl6ZVNlcnZlclRlbGVtZXRyeU1hbmFnZXIiLCJhY3F1aXJlVG9rZW5TaWxlbnRfc2lsZW50RmxvdyIsImNsaWVudENvbmZpZyIsImdldENsaWVudENvbmZpZ3VyYXRpb24iLCJiaW5kIiwiU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudEdldENsaWVudENvbmZpZ3VyYXRpb24iLCJsb2dnZXIiLCJyZXF1ZXN0QXV0aG9yaXR5IiwiYXV0aG9yaXR5IiwicmVxdWVzdEF6dXJlQ2xvdWRPcHRpb25zIiwiYXp1cmVDbG91ZE9wdGlvbnMiLCJhY2NvdW50Iiwic2lsZW50QXV0aENsaWVudCIsInZlcmJvc2UiLCJyZXNwb25zZSIsImFjcXVpcmVDYWNoZWRUb2tlbiIsIlNpbGVudEZsb3dDbGllbnRBY3F1aXJlQ2FjaGVkVG9rZW4iLCJhdXRoUmVzcG9uc2UiLCJhZGRGaWVsZHMiLCJmcm9tQ2FjaGUiLCJlcnJvciIsImVycm9yQ29kZSIsImxvZ291dCIsImxvZ291dFJlcXVlc3QiLCJ2YWxpZExvZ291dFJlcXVlc3QiLCJpbml0aWFsaXplTG9nb3V0UmVxdWVzdCIsImNsZWFyQ2FjaGVPbkxvZ291dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentIframeClient: () => (/* binding */ SilentIframeClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _interaction_handler_SilentHandler_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../interaction_handler/SilentHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../interaction_handler/InteractionHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentIframeClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n    /**\r\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n     * @param request\r\n     */ async acquireToken(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n        // Check that we have some SSO data\n        if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n        // Check the prompt value\n        const inputRequest = {\n            ...request\n        };\n        if (inputRequest.prompt) {\n            if (inputRequest.prompt !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE && inputRequest.prompt !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NO_SESSION) {\n                this.logger.warning(`SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE}`);\n                inputRequest.prompt = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE;\n            }\n        } else {\n            inputRequest.prompt = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE;\n        }\n        // Create silent request\n        const silentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.InteractionType.Silent);\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.preconnect)(silentRequest.authority);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n        let authClient;\n        try {\n            // Initialize the client\n            authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: silentRequest.authority,\n                requestAzureCloudOptions: silentRequest.azureCloudOptions,\n                requestExtraQueryParameters: silentRequest.extraQueryParameters,\n                account: silentRequest.account\n            });\n            return await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.silentTokenHelper.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, silentRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            if (!authClient || !(e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AuthError) || e.errorCode !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserConstants.INVALID_GRANT_ERROR) {\n                throw e;\n            }\n            this.performanceClient.addFields({\n                retryError: e.errorCode\n            }, this.correlationId);\n            const retrySilentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.InteractionType.Silent);\n            return await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.silentTokenHelper.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, this.correlationId)(authClient, retrySilentRequest);\n        }\n    }\n    /**\r\n     * Currently Unsupported\r\n     */ logout() {\n        // Synchronous so we must reject\n        return Promise.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_8__.silentLogoutUnsupported));\n    }\n    /**\r\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n     * @param navigateUrl\r\n     * @param userRequestScopes\r\n     */ async silentTokenHelper(authClient, silentRequest) {\n        const correlationId = silentRequest.correlationId;\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientTokenHelper, correlationId);\n        // Create auth code request and generate PKCE params\n        const authCodeRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationCodeRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, correlationId)(silentRequest);\n        // Create authorize request url\n        const navigateUrl = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(authClient.getAuthCodeUrl.bind(authClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)({\n            ...silentRequest,\n            nativeBroker: _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_9__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n        });\n        // Create silent handler\n        const interactionHandler = new _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n        // Get the frame handle for the silent request\n        const msalFrame = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(_interaction_handler_SilentHandler_mjs__WEBPACK_IMPORTED_MODULE_11__.initiateAuthRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(navigateUrl, this.performanceClient, this.logger, correlationId, this.config.system.navigateFrameWait);\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(_interaction_handler_SilentHandler_mjs__WEBPACK_IMPORTED_MODULE_11__.monitorIframeForHash, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);\n        const serverParams = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(_response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__.deserializeResponse, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, responseType, this.logger);\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_8__.nativeConnectionNotEstablished);\n            }\n            const nativeInteractionClient = new _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, correlationId);\n            const { userRequestState } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.ProtocolUtils.parseRequestState(this.browserCrypto, silentRequest.state);\n            return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.NativeInteractionClientAcquireToken, this.logger, this.performanceClient, correlationId)({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE\n            });\n        }\n        // Handle response from hash string\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(interactionHandler.handleCodeResponse.bind(interactionHandler), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleCodeResponse, this.logger, this.performanceClient, correlationId)(serverParams, silentRequest);\n    }\n}\n //# sourceMappingURL=SilentIframeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentRefreshClient: () => (/* binding */ SilentRefreshClient)\n/* harmony export */ });\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../request/RequestHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentRefreshClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    /**\r\n     * Exchanges the refresh token for new tokens\r\n     * @param request\r\n     */ async acquireToken(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n        const baseRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(_request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.initializeBaseRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, request.correlationId)(request, this.config, this.performanceClient, this.logger);\n        const silentRequest = {\n            ...request,\n            ...baseRequest\n        };\n        if (request.redirectUri) {\n            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n            silentRequest.redirectUri = this.getRedirectUri(request.redirectUri);\n        }\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.ApiId.acquireTokenSilent_silentFlow);\n        const refreshTokenClient = await this.createRefreshTokenClient({\n            serverTelemetryManager,\n            authorityUrl: silentRequest.authority,\n            azureCloudOptions: silentRequest.azureCloudOptions,\n            account: silentRequest.account\n        });\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(refreshTokenClient.acquireTokenByRefreshToken.bind(refreshTokenClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, this.logger, this.performanceClient, request.correlationId)(silentRequest).catch((e)=>{\n            e.setCorrelationId(this.correlationId);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        });\n    }\n    /**\r\n     * Currently Unsupported\r\n     */ logout() {\n        // Synchronous so we must reject\n        return Promise.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.silentLogoutUnsupported));\n    }\n    /**\r\n     * Creates a Refresh Client with the given authority, or the default authority.\r\n     * @param params {\r\n     *         serverTelemetryManager: ServerTelemetryManager;\r\n     *         authorityUrl?: string;\r\n     *         azureCloudOptions?: AzureCloudOptions;\r\n     *         extraQueryParams?: StringDict;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async createRefreshTokenClient(params) {\n        // Create auth module.\n        const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({\n            serverTelemetryManager: params.serverTelemetryManager,\n            requestAuthority: params.authorityUrl,\n            requestAzureCloudOptions: params.azureCloudOptions,\n            requestExtraQueryParameters: params.extraQueryParameters,\n            account: params.account\n        });\n        return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n //# sourceMappingURL=SilentRefreshClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardInteractionClient: () => (/* binding */ StandardInteractionClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _crypto_PkceGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/PkceGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../request/RequestHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */ class StandardInteractionClient extends _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseInteractionClient {\n    /**\r\n     * Generates an auth code request tied to the url request.\r\n     * @param request\r\n     */ async initializeAuthorizationCodeRequest(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.correlationId);\n        const generatedPkceParams = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(_crypto_PkceGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__.generatePkceCodes, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.GeneratePkceCodes, this.logger, this.performanceClient, this.correlationId)(this.performanceClient, this.logger, this.correlationId);\n        const authCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            codeVerifier: generatedPkceParams.verifier\n        };\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.S256_CODE_CHALLENGE_METHOD;\n        return authCodeRequest;\n    }\n    /**\r\n     * Initializer for the logout request.\r\n     * @param logoutRequest\r\n     */ initializeLogoutRequest(logoutRequest) {\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n        const validLogoutRequest = {\n            correlationId: this.correlationId || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.createNewGuid)(),\n            ...logoutRequest\n        };\n        /**\r\n         * Set logout_hint to be login_hint from ID Token Claims if present\r\n         * and logoutHint attribute wasn't manually set in logout request\r\n         */ if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if (logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n                    if (logoutHint) {\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                } else {\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n                }\n            } else {\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n            }\n        } else {\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n        }\n        /*\r\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n         * Otherwise, use passed uri, config, or current page.\r\n         */ if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)());\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)());\n            } else {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.UrlString.getAbsoluteUrl((0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)(), (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)());\n            }\n        } else {\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n        }\n        return validLogoutRequest;\n    }\n    /**\r\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n     * logout_hint in end session request.\r\n     * @param account\r\n     */ getLogoutHintFromIdTokenClaims(account) {\n        const idTokenClaims = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            } else {\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n            }\n        } else {\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n        }\n        return null;\n    }\n    /**\r\n     * Creates an Authorization Code Client with the given authority, or the default authority.\r\n     * @param params {\r\n     *         serverTelemetryManager: ServerTelemetryManager;\r\n     *         authorityUrl?: string;\r\n     *         requestAzureCloudOptions?: AzureCloudOptions;\r\n     *         requestExtraQueryParameters?: StringDict;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async createAuthCodeClient(params) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\n        // Create auth module.\n        const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(params);\n        return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthorizationCodeClient(clientConfig, this.performanceClient);\n    }\n    /**\r\n     * Creates a Client Configuration object with the given request authority, or the default authority.\r\n     * @param params {\r\n     *         serverTelemetryManager: ServerTelemetryManager;\r\n     *         requestAuthority?: string;\r\n     *         requestAzureCloudOptions?: AzureCloudOptions;\r\n     *         requestExtraQueryParameters?: boolean;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async getClientConfiguration(params) {\n        const { serverTelemetryManager, requestAuthority, requestAzureCloudOptions, requestExtraQueryParameters, account } = params;\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n        const discoveredAuthority = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.getDiscoveredAuthority.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, this.correlationId)({\n            requestAuthority,\n            requestAzureCloudOptions,\n            requestExtraQueryParameters,\n            account\n        });\n        const logger = this.config.system.loggerOptions;\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n                redirectUri: this.config.auth.redirectUri\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n            },\n            loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_9__.BrowserConstants.MSAL_SKU,\n                version: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_10__.version,\n                cpu: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n                os: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING\n            },\n            telemetry: this.config.telemetry\n        };\n    }\n    /**\r\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n     * @param request\r\n     * @param interactionType\r\n     */ async initializeAuthorizationRequest(request, interactionType) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState = {\n            interactionType: interactionType\n        };\n        const state = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, browserState);\n        const baseRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(_request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_12__.initializeBaseRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)({\n            ...request,\n            correlationId: this.correlationId\n        }, this.config, this.performanceClient, this.logger);\n        const validatedRequest = {\n            ...baseRequest,\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.createNewGuid)(),\n            responseMode: this.config.auth.OIDCOptions.serverResponseType\n        };\n        // Skip active account lookup if either login hint or session id is set\n        if (request.loginHint || request.sid) {\n            return validatedRequest;\n        }\n        const account = request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\"Setting validated request account\", this.correlationId);\n            this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);\n            validatedRequest.account = account;\n        }\n        // Check for ADAL/MSAL v1 SSO\n        if (!validatedRequest.loginHint && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n        return validatedRequest;\n    }\n}\n //# sourceMappingURL=StandardInteractionClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractionHandler: () => (/* binding */ InteractionHandler)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */ class InteractionHandler {\n    constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient){\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */ async handleCodeResponse(response, request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.HandleCodeResponse, request.correlationId);\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(response, request.state);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ServerError && e.subError === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled);\n            } else {\n                throw e;\n            }\n        }\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.invokeAsync)(this.handleCodeResponseFromServer.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)(authCodeResponse, request);\n    }\n    /**\r\n     * Process auth code response from AAD\r\n     * @param authCodeResponse\r\n     * @param state\r\n     * @param authority\r\n     * @param networkModule\r\n     * @returns\r\n     */ async handleCodeResponseFromServer(authCodeResponse, request, validateNonce = true) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.HandleCodeResponseFromServer, request.correlationId);\n        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.invokeAsync)(this.authModule.updateAuthority.bind(this.authModule), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.UpdateTokenEndpointAuthority, this.logger, this.performanceClient, request.correlationId)(authCodeResponse.cloud_instance_host_name, request.correlationId);\n        }\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            // TODO: Assigning \"response nonce\" to \"request nonce\" is confusing. Refactor the function doing validation to accept request nonce directly\n            authCodeResponse.nonce = request.nonce || undefined;\n        }\n        authCodeResponse.state = request.state;\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const ccsCred = this.createCcsCredentials(request);\n            if (ccsCred) {\n                this.authCodeRequest.ccsCredential = ccsCred;\n            }\n        }\n        // Acquire token with retrieved code.\n        const tokenResponse = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.invokeAsync)(this.authModule.acquireToken.bind(this.authModule), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(this.authCodeRequest, authCodeResponse);\n        return tokenResponse;\n    }\n    /**\r\n     * Build ccs creds if available\r\n     */ createCcsCredentials(request) {\n        if (request.account) {\n            return {\n                credential: request.account.homeAccountId,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CcsCredentialType.HOME_ACCOUNT_ID\n            };\n        } else if (request.loginHint) {\n            return {\n                credential: request.loginHint,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CcsCredentialType.UPN\n            };\n        }\n        return null;\n    }\n}\n //# sourceMappingURL=InteractionHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedirectHandler: () => (/* binding */ RedirectHandler)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class RedirectHandler {\n    constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient){\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Redirects window to given URL.\r\n     * @param urlNavigate\r\n     */ async initiateAuthRequest(requestUrl, params) {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (requestUrl) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest);\n            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions = {\n                apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false\n            };\n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                } else {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.emptyNavigateUri);\n        }\n    }\n    /**\r\n     * Handle authorization code response in the window.\r\n     * @param hash\r\n     */ async handleCodeResponse(response, state) {\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.stateNotFound, \"Cached State\");\n        }\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(response, requestState);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.ServerError && e.subError === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled);\n            } else {\n                throw e;\n            }\n        }\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.invokeAsync)(this.authModule.updateAuthority.bind(this.authModule), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.UpdateTokenEndpointAuthority, this.logger, this.performanceClient, this.authCodeRequest.correlationId)(authCodeResponse.cloud_instance_host_name, this.authCodeRequest.correlationId);\n        }\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */ checkCcsCredentials() {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.TemporaryCacheKeys.CCS_CREDENTIAL, true);\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred);\n            } catch (e) {\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\n            }\n        }\n        return null;\n    }\n}\n //# sourceMappingURL=RedirectHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2hhbmRsZXIvUmVkaXJlY3RIYW5kbGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDc0k7QUFDL0Q7QUFDRztBQUNXO0FBRXJGOzs7Q0FHQyxHQUNELE1BQU1VO0lBQ0ZDLFlBQVlDLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxlQUFlLEVBQUVDLE1BQU0sRUFBRUMsaUJBQWlCLENBQUU7UUFDakYsSUFBSSxDQUFDQyxVQUFVLEdBQUdMO1FBQ2xCLElBQUksQ0FBQ00sY0FBYyxHQUFHTDtRQUN0QixJQUFJLENBQUNDLGVBQWUsR0FBR0E7UUFDdkIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxpQkFBaUIsR0FBR0E7SUFDN0I7SUFDQTs7O0tBR0MsR0FDRCxNQUFNRyxvQkFBb0JDLFVBQVUsRUFBRUMsTUFBTSxFQUFFO1FBQzFDLElBQUksQ0FBQ04sTUFBTSxDQUFDTyxPQUFPLENBQUM7UUFDcEIsd0JBQXdCO1FBQ3hCLElBQUlGLFlBQVk7WUFDWixnR0FBZ0c7WUFDaEcsSUFBSUMsT0FBT0UsaUJBQWlCLEVBQUU7Z0JBQzFCLElBQUksQ0FBQ1IsTUFBTSxDQUFDTyxPQUFPLENBQUM7Z0JBQ3BCLElBQUksQ0FBQ0osY0FBYyxDQUFDTSxpQkFBaUIsQ0FBQ2xCLDJFQUFrQkEsQ0FBQ21CLFVBQVUsRUFBRUosT0FBT0UsaUJBQWlCLEVBQUU7WUFDbkc7WUFDQSx5Q0FBeUM7WUFDekMsSUFBSSxDQUFDTCxjQUFjLENBQUNNLGlCQUFpQixDQUFDbEIsMkVBQWtCQSxDQUFDb0IsY0FBYyxFQUFFLElBQUksQ0FBQ1osZUFBZSxDQUFDYSxhQUFhLEVBQUU7WUFDN0csSUFBSSxDQUFDVCxjQUFjLENBQUNVLGdCQUFnQixDQUFDLElBQUksQ0FBQ2QsZUFBZTtZQUN6RCxJQUFJLENBQUNDLE1BQU0sQ0FBQ2Ms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Q2IsaUJBQWlCUCxLQUFLLEdBQUdJO1FBQ3pCLGtDQUFrQztRQUNsQyxJQUFJRyxpQkFBaUJjLFdBQVcsRUFBRTtZQUM5QixJQUFJLENBQUNsRCxlQUFlLENBQUNtRCxVQUFVLEdBQUdmLGlCQUFpQmMsV0FBVztRQUNsRSxPQUNLO1lBQ0QsTUFBTUUsZ0JBQWdCLElBQUksQ0FBQ0MsbUJBQW1CO1lBQzlDLElBQUlELGVBQWU7Z0JBQ2YsSUFBSSxDQUFDcEQsZUFBZSxDQUFDc0QsYUFBYSxHQUFHRjtZQUN6QztRQUNKO1FBQ0EscUNBQXFDO1FBQ3JDLE1BQU1HLGdCQUFpQixNQUFNLElBQUksQ0FBQ3BELFVBQVUsQ0FBQ3FELFlBQVksQ0FBQyxJQUFJLENBQUN4RCxlQUFlLEVBQUVvQztRQUNoRixJQUFJLENBQUNoQyxjQUFjLENBQUNxRCxtQkFBbUIsQ0FBQzVCO1FBQ3hDLE9BQU8wQjtJQUNYO0lBQ0E7O0tBRUMsR0FDREYsc0JBQXNCO1FBQ2xCLHVDQUF1QztRQUN2QyxNQUFNRCxnQkFBZ0IsSUFBSSxDQUFDaEQsY0FBYyxDQUFDOEIsaUJBQWlCLENBQUMxQywyRUFBa0JBLENBQUNrRSxjQUFjLEVBQUU7UUFDL0YsSUFBSU4sZUFBZTtZQUNmLElBQUk7Z0JBQ0EsT0FBT08sS0FBS0MsS0FBSyxDQUFDUjtZQUN0QixFQUNBLE9BQU9kLEdBQUc7Z0JBQ04sSUFBSSxDQUFDbkMsVUFBVSxDQUFDRixNQUFNLENBQUM0RCxLQUFLLENBQUM7Z0JBQzdCLElBQUksQ0FBQzFELFVBQVUsQ0FBQ0YsTUFBTSxDQUFDNkQsUUFBUSxDQUFDLENBQUMsc0NBQXNDLEVBQUVWLGNBQWMsQ0FBQztZQUM1RjtRQUNKO1FBQ0EsT0FBTztJQUNYO0FBQ0o7QUFFMkIsQ0FDM0IsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2hhbmRsZXIvUmVkaXJlY3RIYW5kbGVyLm1qcz9iNGE3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50QXV0aEVycm9yLCBDbGllbnRBdXRoRXJyb3JDb2RlcywgU2VydmVyRXJyb3IsIGludm9rZUFzeW5jLCBQZXJmb3JtYW5jZUV2ZW50cyB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBUZW1wb3JhcnlDYWNoZUtleXMsIEFwaUlkIH0gZnJvbSAnLi4vdXRpbHMvQnJvd3NlckNvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgZW1wdHlOYXZpZ2F0ZVVyaSwgdXNlckNhbmNlbGxlZCB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgUmVkaXJlY3RIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGF1dGhDb2RlTW9kdWxlLCBzdG9yYWdlSW1wbCwgYXV0aENvZGVSZXF1ZXN0LCBsb2dnZXIsIHBlcmZvcm1hbmNlQ2xpZW50KSB7XHJcbiAgICAgICAgdGhpcy5hdXRoTW9kdWxlID0gYXV0aENvZGVNb2R1bGU7XHJcbiAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZSA9IHN0b3JhZ2VJbXBsO1xyXG4gICAgICAgIHRoaXMuYXV0aENvZGVSZXF1ZXN0ID0gYXV0aENvZGVSZXF1ZXN0O1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQgPSBwZXJmb3JtYW5jZUNsaWVudDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVkaXJlY3RzIHdpbmRvdyB0byBnaXZlbiBVUkwuXHJcbiAgICAgKiBAcGFyYW0gdXJsTmF2aWdhdGVcclxuICAgICAqL1xyXG4gICAgYXN5bmMgaW5pdGlhdGVBdXRoUmVxdWVzdChyZXF1ZXN0VXJsLCBwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiUmVkaXJlY3RIYW5kbGVyLmluaXRpYXRlQXV0aFJlcXVlc3QgY2FsbGVkXCIpO1xyXG4gICAgICAgIC8vIE5hdmlnYXRlIGlmIHZhbGlkIFVSTFxyXG4gICAgICAgIGlmIChyZXF1ZXN0VXJsKSB7XHJcbiAgICAgICAgICAgIC8vIENhY2hlIHN0YXJ0IHBhZ2UsIHJldHVybnMgdG8gdGhpcyBwYWdlIGFmdGVyIHJlZGlyZWN0VXJpIGlmIG5hdmlnYXRlVG9Mb2dpblJlcXVlc3RVcmwgaXMgdHJ1ZVxyXG4gICAgICAgICAgICBpZiAocGFyYW1zLnJlZGlyZWN0U3RhcnRQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiUmVkaXJlY3RIYW5kbGVyLmluaXRpYXRlQXV0aFJlcXVlc3Q6IHJlZGlyZWN0U3RhcnRQYWdlIHNldCwgY2FjaGluZyBzdGFydCBwYWdlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5icm93c2VyU3RvcmFnZS5zZXRUZW1wb3JhcnlDYWNoZShUZW1wb3JhcnlDYWNoZUtleXMuT1JJR0lOX1VSSSwgcGFyYW1zLnJlZGlyZWN0U3RhcnRQYWdlLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTZXQgaW50ZXJhY3Rpb24gc3RhdHVzIGluIHRoZSBsaWJyYXJ5LlxyXG4gICAgICAgICAgICB0aGlzLmJyb3dzZXJTdG9yYWdlLnNldFRlbXBvcmFyeUNhY2hlKFRlbXBvcmFyeUNhY2hlS2V5cy5DT1JSRUxBVElPTl9JRCwgdGhpcy5hdXRoQ29kZVJlcXVlc3QuY29ycmVsYXRpb25JZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2UuY2FjaGVDb2RlUmVxdWVzdCh0aGlzLmF1dGhDb2RlUmVxdWVzdCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm9QaWkoYFJlZGlyZWN0SGFuZGxlci5pbml0aWF0ZUF1dGhSZXF1ZXN0OiBOYXZpZ2F0ZSB0bzogJHtyZXF1ZXN0VXJsfWApO1xyXG4gICAgICAgICAgICBjb25zdCBuYXZpZ2F0aW9uT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGFwaUlkOiBBcGlJZC5hY3F1aXJlVG9rZW5SZWRpcmVjdCxcclxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHBhcmFtcy5yZWRpcmVjdFRpbWVvdXQsXHJcbiAgICAgICAgICAgICAgICBub0hpc3Rvcnk6IGZhbHNlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBJZiBvblJlZGlyZWN0TmF2aWdhdGUgaXMgaW1wbGVtZW50ZWQsIGludm9rZSBpdCBhbmQgcHJvdmlkZSByZXF1ZXN0VXJsXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLm9uUmVkaXJlY3ROYXZpZ2F0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiUmVkaXJlY3RIYW5kbGVyLmluaXRpYXRlQXV0aFJlcXVlc3Q6IEludm9raW5nIG9uUmVkaXJlY3ROYXZpZ2F0ZSBjYWxsYmFja1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hdmlnYXRlID0gcGFyYW1zLm9uUmVkaXJlY3ROYXZpZ2F0ZShyZXF1ZXN0VXJsKTtcclxuICAgICAgICAgICAgICAgIC8vIFJldHVybmluZyBmYWxzZSBmcm9tIG9uUmVkaXJlY3ROYXZpZ2F0ZSB3aWxsIHN0b3AgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJSZWRpcmVjdEhhbmRsZXIuaW5pdGlhdGVBdXRoUmVxdWVzdDogb25SZWRpcmVjdE5hdmlnYXRlIGRpZCBub3QgcmV0dXJuIGZhbHNlLCBuYXZpZ2F0aW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHBhcmFtcy5uYXZpZ2F0aW9uQ2xpZW50Lm5hdmlnYXRlRXh0ZXJuYWwocmVxdWVzdFVybCwgbmF2aWdhdGlvbk9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJSZWRpcmVjdEhhbmRsZXIuaW5pdGlhdGVBdXRoUmVxdWVzdDogb25SZWRpcmVjdE5hdmlnYXRlIHJldHVybmVkIGZhbHNlLCBzdG9wcGluZyBuYXZpZ2F0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIE5hdmlnYXRlIHdpbmRvdyB0byByZXF1ZXN0IFVSTFxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlJlZGlyZWN0SGFuZGxlci5pbml0aWF0ZUF1dGhSZXF1ZXN0OiBOYXZpZ2F0aW5nIHdpbmRvdyB0byBuYXZpZ2F0ZSB1cmxcIik7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBwYXJhbXMubmF2aWdhdGlvbkNsaWVudC5uYXZpZ2F0ZUV4dGVybmFsKHJlcXVlc3RVcmwsIG5hdmlnYXRpb25PcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhyb3cgZXJyb3IgaWYgcmVxdWVzdCBVUkwgaXMgZW1wdHkuXHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJSZWRpcmVjdEhhbmRsZXIuaW5pdGlhdGVBdXRoUmVxdWVzdDogTmF2aWdhdGUgdXJsIGlzIGVtcHR5XCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKGVtcHR5TmF2aWdhdGVVcmkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIGF1dGhvcml6YXRpb24gY29kZSByZXNwb25zZSBpbiB0aGUgd2luZG93LlxyXG4gICAgICogQHBhcmFtIGhhc2hcclxuICAgICAqL1xyXG4gICAgYXN5bmMgaGFuZGxlQ29kZVJlc3BvbnNlKHJlc3BvbnNlLCBzdGF0ZSkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJSZWRpcmVjdEhhbmRsZXIuaGFuZGxlQ29kZVJlc3BvbnNlIGNhbGxlZFwiKTtcclxuICAgICAgICAvLyBJbnRlcmFjdGlvbiBpcyBjb21wbGV0ZWQgLSByZW1vdmUgaW50ZXJhY3Rpb24gc3RhdHVzLlxyXG4gICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2Uuc2V0SW50ZXJhY3Rpb25JblByb2dyZXNzKGZhbHNlKTtcclxuICAgICAgICAvLyBIYW5kbGUgY29kZSByZXNwb25zZS5cclxuICAgICAgICBjb25zdCBzdGF0ZUtleSA9IHRoaXMuYnJvd3NlclN0b3JhZ2UuZ2VuZXJhdGVTdGF0ZUtleShzdGF0ZSk7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFN0YXRlID0gdGhpcy5icm93c2VyU3RvcmFnZS5nZXRUZW1wb3JhcnlDYWNoZShzdGF0ZUtleSk7XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0U3RhdGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvckNvZGVzLnN0YXRlTm90Rm91bmQsIFwiQ2FjaGVkIFN0YXRlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYXV0aENvZGVSZXNwb25zZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhdXRoQ29kZVJlc3BvbnNlID0gdGhpcy5hdXRoTW9kdWxlLmhhbmRsZUZyYWdtZW50UmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3RTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgU2VydmVyRXJyb3IgJiZcclxuICAgICAgICAgICAgICAgIGUuc3ViRXJyb3IgPT09IHVzZXJDYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRyYW5zbGF0ZSBzZXJ2ZXIgZXJyb3IgY2F1c2VkIGJ5IHVzZXIgY2xvc2luZyBuYXRpdmUgcHJvbXB0IHRvIGNvcnJlc3BvbmRpbmcgZmlyc3QgY2xhc3MgTVNBTCBlcnJvclxyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcih1c2VyQ2FuY2VsbGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gR2V0IGNhY2hlZCBpdGVtc1xyXG4gICAgICAgIGNvbnN0IG5vbmNlS2V5ID0gdGhpcy5icm93c2VyU3RvcmFnZS5nZW5lcmF0ZU5vbmNlS2V5KHJlcXVlc3RTdGF0ZSk7XHJcbiAgICAgICAgY29uc3QgY2FjaGVkTm9uY2UgPSB0aGlzLmJyb3dzZXJTdG9yYWdlLmdldFRlbXBvcmFyeUNhY2hlKG5vbmNlS2V5KTtcclxuICAgICAgICAvLyBBc3NpZ24gY29kZSB0byByZXF1ZXN0XHJcbiAgICAgICAgdGhpcy5hdXRoQ29kZVJlcXVlc3QuY29kZSA9IGF1dGhDb2RlUmVzcG9uc2UuY29kZTtcclxuICAgICAgICAvLyBDaGVjayBmb3IgbmV3IGNsb3VkIGluc3RhbmNlXHJcbiAgICAgICAgaWYgKGF1dGhDb2RlUmVzcG9uc2UuY2xvdWRfaW5zdGFuY2VfaG9zdF9uYW1lKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGludm9rZUFzeW5jKHRoaXMuYXV0aE1vZHVsZS51cGRhdGVBdXRob3JpdHkuYmluZCh0aGlzLmF1dGhNb2R1bGUpLCBQZXJmb3JtYW5jZUV2ZW50cy5VcGRhdGVUb2tlbkVuZHBvaW50QXV0aG9yaXR5LCB0aGlzLmxvZ2dlciwgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCwgdGhpcy5hdXRoQ29kZVJlcXVlc3QuY29ycmVsYXRpb25JZCkoYXV0aENvZGVSZXNwb25zZS5jbG91ZF9pbnN0YW5jZV9ob3N0X25hbWUsIHRoaXMuYXV0aENvZGVSZXF1ZXN0LmNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhdXRoQ29kZVJlc3BvbnNlLm5vbmNlID0gY2FjaGVkTm9uY2UgfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGF1dGhDb2RlUmVzcG9uc2Uuc3RhdGUgPSByZXF1ZXN0U3RhdGU7XHJcbiAgICAgICAgLy8gQWRkIENDUyBwYXJhbWV0ZXJzIGlmIGF2YWlsYWJsZVxyXG4gICAgICAgIGlmIChhdXRoQ29kZVJlc3BvbnNlLmNsaWVudF9pbmZvKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aENvZGVSZXF1ZXN0LmNsaWVudEluZm8gPSBhdXRoQ29kZVJlc3BvbnNlLmNsaWVudF9pbmZvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkQ2NzQ3JlZCA9IHRoaXMuY2hlY2tDY3NDcmVkZW50aWFscygpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkQ2NzQ3JlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoQ29kZVJlcXVlc3QuY2NzQ3JlZGVudGlhbCA9IGNhY2hlZENjc0NyZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWNxdWlyZSB0b2tlbiB3aXRoIHJldHJpZXZlZCBjb2RlLlxyXG4gICAgICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSAoYXdhaXQgdGhpcy5hdXRoTW9kdWxlLmFjcXVpcmVUb2tlbih0aGlzLmF1dGhDb2RlUmVxdWVzdCwgYXV0aENvZGVSZXNwb25zZSkpO1xyXG4gICAgICAgIHRoaXMuYnJvd3NlclN0b3JhZ2UuY2xlYW5SZXF1ZXN0QnlTdGF0ZShzdGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRva2VuUmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIExvb2tzIHVwIGNjcyBjcmVkcyBpbiB0aGUgY2FjaGVcclxuICAgICAqL1xyXG4gICAgY2hlY2tDY3NDcmVkZW50aWFscygpIHtcclxuICAgICAgICAvLyBMb29rIHVwIGNjcyBjcmVkZW50aWFsIGluIHRlbXAgY2FjaGVcclxuICAgICAgICBjb25zdCBjYWNoZWRDY3NDcmVkID0gdGhpcy5icm93c2VyU3RvcmFnZS5nZXRUZW1wb3JhcnlDYWNoZShUZW1wb3JhcnlDYWNoZUtleXMuQ0NTX0NSRURFTlRJQUwsIHRydWUpO1xyXG4gICAgICAgIGlmIChjYWNoZWRDY3NDcmVkKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShjYWNoZWRDY3NDcmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoTW9kdWxlLmxvZ2dlci5lcnJvcihcIkNhY2hlIGNyZWRlbnRpYWwgY291bGQgbm90IGJlIHBhcnNlZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXV0aE1vZHVsZS5sb2dnZXIuZXJyb3JQaWkoYENhY2hlIGNyZWRlbnRpYWwgY291bGQgbm90IGJlIHBhcnNlZDogJHtjYWNoZWRDY3NDcmVkfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFJlZGlyZWN0SGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVkaXJlY3RIYW5kbGVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJDbGllbnRBdXRoRXJyb3JDb2RlcyIsIlNlcnZlckVycm9yIiwiaW52b2tlQXN5bmMiLCJQZXJmb3JtYW5jZUV2ZW50cyIsImNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IiLCJUZW1wb3JhcnlDYWNoZUtleXMiLCJBcGlJZCIsImVtcHR5TmF2aWdhdGVVcmkiLCJ1c2VyQ2FuY2VsbGVkIiwiUmVkaXJlY3RIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJhdXRoQ29kZU1vZHVsZSIsInN0b3JhZ2VJbXBsIiwiYXV0aENvZGVSZXF1ZXN0IiwibG9nZ2VyIiwicGVyZm9ybWFuY2VDbGllbnQiLCJhdXRoTW9kdWxlIiwiYnJvd3NlclN0b3JhZ2UiLCJpbml0aWF0ZUF1dGhSZXF1ZXN0IiwicmVxdWVzdFVybCIsInBhcmFtcyIsInZlcmJvc2UiLCJyZWRpcmVjdFN0YXJ0UGFnZSIsInNldFRlbXBvcmFyeUNhY2hlIiwiT1JJR0lOX1VSSSIsIkNPUlJFTEFUSU9OX0lEIiwiY29ycmVsYXRpb25JZCIsImNhY2hlQ29kZVJlcXVlc3QiLCJpbmZvUGlpIiwibmF2aWdhdGlvbk9wdGlvbnMiLCJhcGlJZCIsImFjcXVpcmVUb2tlblJlZGlyZWN0IiwidGltZW91dCIsInJlZGlyZWN0VGltZW91dCIsIm5vSGlzdG9yeSIsIm9uUmVkaXJlY3ROYXZpZ2F0ZSIsIm5hdmlnYXRlIiwibmF2aWdhdGlvbkNsaWVudCIsIm5hdmlnYXRlRXh0ZXJuYWwiLCJpbmZvIiwiaGFuZGxlQ29kZVJlc3BvbnNlIiwicmVzcG9uc2UiLCJzdGF0ZSIsInNldEludGVyYWN0aW9uSW5Qcm9ncmVzcyIsInN0YXRlS2V5IiwiZ2VuZXJhdGVTdGF0ZUtleSIsInJlcXVlc3RTdGF0ZSIsImdldFRlbXBvcmFyeUNhY2hlIiwic3RhdGVOb3RGb3VuZCIsImF1dGhDb2RlUmVzcG9uc2UiLCJoYW5kbGVGcmFnbWVudFJlc3BvbnNlIiwiZSIsInN1YkVycm9yIiwibm9uY2VLZXkiLCJnZW5lcmF0ZU5vbmNlS2V5IiwiY2FjaGVkTm9uY2UiLCJjb2RlIiwiY2xvdWRfaW5zdGFuY2VfaG9zdF9uYW1lIiwidXBkYXRlQXV0aG9yaXR5IiwiYmluZCIsIlVwZGF0ZVRva2VuRW5kcG9pbnRBdXRob3JpdHkiLCJub25jZSIsInVuZGVmaW5lZCIsImNsaWVudF9pbmZvIiwiY2xpZW50SW5mbyIsImNhY2hlZENjc0NyZWQiLCJjaGVja0Njc0NyZWRlbnRpYWxzIiwiY2NzQ3JlZGVudGlhbCIsInRva2VuUmVzcG9uc2UiLCJhY3F1aXJlVG9rZW4iLCJjbGVhblJlcXVlc3RCeVN0YXRlIiwiQ0NTX0NSRURFTlRJQUwiLCJKU09OIiwicGFyc2UiLCJlcnJvciIsImVycm9yUGlpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initiateAuthRequest: () => (/* binding */ initiateAuthRequest),\n/* harmony export */   monitorIframeForHash: () => (/* binding */ monitorIframeForHash)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/Configuration.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n * @param urlNavigate\r\n * @param userRequestScopes\r\n */ async function initiateAuthRequest(requestUrl, performanceClient, logger, correlationId, navigateFrameWait) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerInitiateAuthRequest, correlationId);\n    if (!requestUrl) {\n        // Throw error if request URL is empty.\n        logger.info(\"Navigate url is empty\");\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.emptyNavigateUri);\n    }\n    if (navigateFrameWait) {\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(loadFrame, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerLoadFrame, logger, performanceClient, correlationId)(requestUrl, navigateFrameWait, performanceClient, correlationId);\n    }\n    return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(loadFrameSync, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerLoadFrameSync, logger, performanceClient, correlationId)(requestUrl);\n}\n/**\r\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n * @param iframe\r\n * @param timeout\r\n */ async function monitorIframeForHash(iframe, timeout, pollIntervalMilliseconds, performanceClient, logger, correlationId, responseType) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerMonitorIframeForHash, correlationId);\n    return new Promise((resolve, reject)=>{\n        if (timeout < _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_IFRAME_TIMEOUT_MS) {\n            logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${_config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n        }\n        /*\r\n         * Polling for iframes can be purely timing based,\r\n         * since we don't need to account for interaction.\r\n         */ const timeoutId = window.setTimeout(()=>{\n            window.clearInterval(intervalId);\n            reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.monitorWindowTimeout));\n        }, timeout);\n        const intervalId = window.setInterval(()=>{\n            let href = \"\";\n            const contentWindow = iframe.contentWindow;\n            try {\n                /*\r\n                 * Will throw if cross origin,\r\n                 * which should be caught and ignored\r\n                 * since we need the interval to keep running while on STS UI.\r\n                 */ href = contentWindow ? contentWindow.location.href : \"\";\n            } catch (e) {}\n            if (!href || href === \"about:blank\") {\n                return;\n            }\n            let responseString = \"\";\n            if (contentWindow) {\n                if (responseType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.ServerResponseType.QUERY) {\n                    responseString = contentWindow.location.search;\n                } else {\n                    responseString = contentWindow.location.hash;\n                }\n            }\n            window.clearTimeout(timeoutId);\n            window.clearInterval(intervalId);\n            resolve(responseString);\n        }, pollIntervalMilliseconds);\n    }).finally(()=>{\n        (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(removeHiddenIframe, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RemoveHiddenIframe, logger, performanceClient, correlationId)(iframe);\n    });\n}\n/**\r\n * @hidden\r\n * Loads iframe with authorization endpoint URL\r\n * @ignore\r\n * @deprecated\r\n */ function loadFrame(urlNavigate, navigateFrameWait, performanceClient, correlationId) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerLoadFrame, correlationId);\n    /*\r\n     * This trick overcomes iframe navigation in IE\r\n     * IE does not load the page consistently in iframe\r\n     */ return new Promise((resolve, reject)=>{\n        const frameHandle = createHiddenIframe();\n        window.setTimeout(()=>{\n            if (!frameHandle) {\n                reject(\"Unable to load iframe\");\n                return;\n            }\n            frameHandle.src = urlNavigate;\n            resolve(frameHandle);\n        }, navigateFrameWait);\n    });\n}\n/**\r\n * @hidden\r\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n * @param urlNavigate\r\n * @param frameName\r\n * @param logger\r\n */ function loadFrameSync(urlNavigate) {\n    const frameHandle = createHiddenIframe();\n    frameHandle.src = urlNavigate;\n    return frameHandle;\n}\n/**\r\n * @hidden\r\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n * @ignore\r\n */ function createHiddenIframe() {\n    const authFrame = document.createElement(\"iframe\");\n    authFrame.className = \"msalSilentIframe\";\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n    document.body.appendChild(authFrame);\n    return authFrame;\n}\n/**\r\n * @hidden\r\n * Removes a hidden iframe from the page.\r\n * @ignore\r\n */ function removeHiddenIframe(iframe) {\n    if (document.body === iframe.parentNode) {\n        document.body.removeChild(iframe);\n    }\n}\n //# sourceMappingURL=SilentHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBridgeError: () => (/* binding */ isBridgeError)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isBridgeError(error) {\n    return error.status !== undefined;\n}\n //# sourceMappingURL=BridgeError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hYS9CcmlkZ2VFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELFNBQVNBLGNBQWNDLEtBQUs7SUFDeEIsT0FBT0EsTUFBTUMsTUFBTSxLQUFLQztBQUM1QjtBQUV5QixDQUN6Qix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvbmFhL0JyaWRnZUVycm9yLm1qcz81YmRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGlzQnJpZGdlRXJyb3IoZXJyb3IpIHtcclxuICAgIHJldHVybiBlcnJvci5zdGF0dXMgIT09IHVuZGVmaW5lZDtcclxufVxuXG5leHBvcnQgeyBpc0JyaWRnZUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CcmlkZ2VFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNCcmlkZ2VFcnJvciIsImVycm9yIiwic3RhdHVzIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BridgeStatusCode: () => (/* binding */ BridgeStatusCode)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const BridgeStatusCode = {\n    UserInteractionRequired: \"USER_INTERACTION_REQUIRED\",\n    UserCancel: \"USER_CANCEL\",\n    NoNetwork: \"NO_NETWORK\",\n    TransientError: \"TRANSIENT_ERROR\",\n    PersistentError: \"PERSISTENT_ERROR\",\n    Disabled: \"DISABLED\",\n    AccountUnavailable: \"ACCOUNT_UNAVAILABLE\",\n    NestedAppAuthUnavailable: \"NESTED_APP_AUTH_UNAVAILABLE\"\n};\n //# sourceMappingURL=BridgeStatusCode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hYS9CcmlkZ2VTdGF0dXNDb2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUEsbUJBQW1CO0lBQ3JCQyx5QkFBeUI7SUFDekJDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxnQkFBZ0I7SUFDaEJDLGlCQUFpQjtJQUNqQkMsVUFBVTtJQUNWQyxvQkFBb0I7SUFDcEJDLDBCQUEwQjtBQUM5QjtBQUU0QixDQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvbmFhL0JyaWRnZVN0YXR1c0NvZGUubWpzPzAwZDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQnJpZGdlU3RhdHVzQ29kZSA9IHtcclxuICAgIFVzZXJJbnRlcmFjdGlvblJlcXVpcmVkOiBcIlVTRVJfSU5URVJBQ1RJT05fUkVRVUlSRURcIixcclxuICAgIFVzZXJDYW5jZWw6IFwiVVNFUl9DQU5DRUxcIixcclxuICAgIE5vTmV0d29yazogXCJOT19ORVRXT1JLXCIsXHJcbiAgICBUcmFuc2llbnRFcnJvcjogXCJUUkFOU0lFTlRfRVJST1JcIixcclxuICAgIFBlcnNpc3RlbnRFcnJvcjogXCJQRVJTSVNURU5UX0VSUk9SXCIsXHJcbiAgICBEaXNhYmxlZDogXCJESVNBQkxFRFwiLFxyXG4gICAgQWNjb3VudFVuYXZhaWxhYmxlOiBcIkFDQ09VTlRfVU5BVkFJTEFCTEVcIixcclxuICAgIE5lc3RlZEFwcEF1dGhVbmF2YWlsYWJsZTogXCJORVNURURfQVBQX0FVVEhfVU5BVkFJTEFCTEVcIiwgLy8gTkFBIGlzIHVuYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGNvbnRleHQsIGNhbiByZXRyeSB3aXRoIHN0YW5kYXJkIGJyb3dzZXIgYmFzZWQgYXV0aFxyXG59O1xuXG5leHBvcnQgeyBCcmlkZ2VTdGF0dXNDb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CcmlkZ2VTdGF0dXNDb2RlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJCcmlkZ2VTdGF0dXNDb2RlIiwiVXNlckludGVyYWN0aW9uUmVxdWlyZWQiLCJVc2VyQ2FuY2VsIiwiTm9OZXR3b3JrIiwiVHJhbnNpZW50RXJyb3IiLCJQZXJzaXN0ZW50RXJyb3IiLCJEaXNhYmxlZCIsIkFjY291bnRVbmF2YWlsYWJsZSIsIk5lc3RlZEFwcEF1dGhVbmF2YWlsYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppAuthAdapter: () => (/* binding */ NestedAppAuthAdapter)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _BridgeError_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../BridgeError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs\");\n/* harmony import */ var _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../BridgeStatusCode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NestedAppAuthAdapter {\n    constructor(clientId, clientCapabilities, crypto, logger){\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n    toNaaTokenRequest(request) {\n        let extraParams;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map();\n        } else {\n            extraParams = new Map(Object.entries(request.extraQueryParameters));\n        }\n        const correlationId = request.correlationId || this.crypto.createNewGuid();\n        const requestBuilder = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.RequestParameterBuilder(correlationId);\n        const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n        const scopes = request.scopes || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES;\n        const tokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: scopes.join(\" \"),\n            correlationId,\n            claims: !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme: request.authenticationScheme || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER,\n            extraParameters: extraParams\n        };\n        return tokenRequest;\n    }\n    fromNaaTokenResponse(request, response, reqTimestamp) {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nullOrEmptyToken);\n        }\n        const expiresOn = new Date((reqTimestamp + (response.token.expires_in || 0)) * 1000);\n        const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.extractTokenClaims(response.token.id_token, this.crypto.base64Decode);\n        const account = this.fromNaaAccountInfo(response.account, response.token.id_token, idTokenClaims);\n        const scopes = response.token.scope || request.scope;\n        const authenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: false,\n            expiresOn: expiresOn,\n            tokenType: request.authenticationScheme || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state\n        };\n        return authenticationResult;\n    }\n    /*\r\n     *  export type AccountInfo = {\r\n     *     homeAccountId: string;\r\n     *     environment: string;\r\n     *     tenantId: string;\r\n     *     username: string;\r\n     *     localAccountId: string;\r\n     *     name?: string;\r\n     *     idToken?: string;\r\n     *     idTokenClaims?: TokenClaims & {\r\n     *         [key: string]:\r\n     *             | string\r\n     *             | number\r\n     *             | string[]\r\n     *             | object\r\n     *             | undefined\r\n     *             | unknown;\r\n     *     };\r\n     *     nativeAccountId?: string;\r\n     *     authorityType?: string;\r\n     * };\r\n     */ fromNaaAccountInfo(fromAccount, idToken, idTokenClaims) {\n        const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n        const localAccountId = fromAccount.localAccountId || effectiveIdTokenClaims?.oid || effectiveIdTokenClaims?.sub || \"\";\n        const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n        const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n        const username = fromAccount.username || effectiveIdTokenClaims?.preferred_username || \"\";\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n        const tenantProfiles = new Map();\n        const tenantProfile = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.buildTenantProfile)(homeAccountId, localAccountId, tenantId, effectiveIdTokenClaims);\n        tenantProfiles.set(tenantId, tenantProfile);\n        const account = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n            tenantProfiles\n        };\n        return account;\n    }\n    /**\r\n     *\r\n     * @param error BridgeError\r\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\r\n     */ fromBridgeError(error) {\n        if ((0,_BridgeError_mjs__WEBPACK_IMPORTED_MODULE_7__.isBridgeError)(error)) {\n            switch(error.status){\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.UserCancel:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.userCanceled);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.NoNetwork:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.noNetworkConnectivity);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.AccountUnavailable:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.noAccountFound);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.Disabled:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nestedAppAuthBridgeDisabled);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(error.code || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nestedAppAuthBridgeDisabled, error.description);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.TransientError:\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.PersistentError:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ServerError(error.code, error.description);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.UserInteractionRequired:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError(error.code, error.description);\n                default:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.AuthError(error.code, error.description);\n            }\n        } else {\n            return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n    /**\r\n     * Returns an AuthenticationResult from the given cache items\r\n     *\r\n     * @param account\r\n     * @param idToken\r\n     * @param accessToken\r\n     * @param reqTimestamp\r\n     * @returns\r\n     */ toAuthenticationResultFromCache(account, idToken, accessToken, request, correlationId) {\n        if (!idToken || !accessToken) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nullOrEmptyToken);\n        }\n        const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.extractTokenClaims(idToken.secret, this.crypto.base64Decode);\n        const scopes = accessToken.target || request.scopes.join(\" \");\n        const authenticationResult = {\n            authority: accessToken.environment || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: idToken.secret,\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken.secret,\n            fromCache: true,\n            expiresOn: new Date(Number(accessToken.expiresOn) * 1000),\n            tokenType: request.authenticationScheme || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER,\n            correlationId,\n            extExpiresOn: new Date(Number(accessToken.extendedExpiresOn) * 1000),\n            state: request.state\n        };\n        return authenticationResult;\n    }\n}\n //# sourceMappingURL=NestedAppAuthAdapter.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigationClient: () => (/* binding */ NavigationClient)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NavigationClient {\n    /**\r\n     * Navigates to other pages within the same web application\r\n     * @param url\r\n     * @param options\r\n     */ navigateInternal(url, options) {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n    /**\r\n     * Navigates to other pages outside the web application i.e. the Identity Provider\r\n     * @param url\r\n     * @param options\r\n     */ navigateExternal(url, options) {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n    /**\r\n     * Default navigation implementation invoked by the internal and external functions\r\n     * @param url\r\n     * @param options\r\n     */ static defaultNavigateWindow(url, options) {\n        if (options.noHistory) {\n            window.location.replace(url);\n        } else {\n            window.location.assign(url);\n        }\n        return new Promise((resolve)=>{\n            setTimeout(()=>{\n                resolve(true);\n            }, options.timeout);\n        });\n    }\n}\n //# sourceMappingURL=NavigationClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hdmlnYXRpb24vTmF2aWdhdGlvbkNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BO0lBQ0Y7Ozs7S0FJQyxHQUNEQyxpQkFBaUJDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE9BQU9ILGlCQUFpQkkscUJBQXFCLENBQUNGLEtBQUtDO0lBQ3ZEO0lBQ0E7Ozs7S0FJQyxHQUNERSxpQkFBaUJILEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE9BQU9ILGlCQUFpQkkscUJBQXFCLENBQUNGLEtBQUtDO0lBQ3ZEO0lBQ0E7Ozs7S0FJQyxHQUNELE9BQU9DLHNCQUFzQkYsR0FBRyxFQUFFQyxPQUFPLEVBQUU7UUFDdkMsSUFBSUEsUUFBUUcsU0FBUyxFQUFFO1lBQ25CQyxPQUFPQyxRQUFRLENBQUNDLE9BQU8sQ0FBQ1A7UUFDNUIsT0FDSztZQUNESyxPQUFPQyxRQUFRLENBQUNFLE1BQU0sQ0FBQ1I7UUFDM0I7UUFDQSxPQUFPLElBQUlTLFFBQVEsQ0FBQ0M7WUFDaEJDLFdBQVc7Z0JBQ1BELFFBQVE7WUFDWixHQUFHVCxRQUFRVyxPQUFPO1FBQ3RCO0lBQ0o7QUFDSjtBQUU0QixDQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uQ2xpZW50Lm1qcz81ZDQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIE5hdmlnYXRpb25DbGllbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBOYXZpZ2F0ZXMgdG8gb3RoZXIgcGFnZXMgd2l0aGluIHRoZSBzYW1lIHdlYiBhcHBsaWNhdGlvblxyXG4gICAgICogQHBhcmFtIHVybFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgbmF2aWdhdGVJbnRlcm5hbCh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gTmF2aWdhdGlvbkNsaWVudC5kZWZhdWx0TmF2aWdhdGVXaW5kb3codXJsLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTmF2aWdhdGVzIHRvIG90aGVyIHBhZ2VzIG91dHNpZGUgdGhlIHdlYiBhcHBsaWNhdGlvbiBpLmUuIHRoZSBJZGVudGl0eSBQcm92aWRlclxyXG4gICAgICogQHBhcmFtIHVybFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgbmF2aWdhdGVFeHRlcm5hbCh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gTmF2aWdhdGlvbkNsaWVudC5kZWZhdWx0TmF2aWdhdGVXaW5kb3codXJsLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBuYXZpZ2F0aW9uIGltcGxlbWVudGF0aW9uIGludm9rZWQgYnkgdGhlIGludGVybmFsIGFuZCBleHRlcm5hbCBmdW5jdGlvbnNcclxuICAgICAqIEBwYXJhbSB1cmxcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkZWZhdWx0TmF2aWdhdGVXaW5kb3codXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubm9IaXN0b3J5KSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sIG9wdGlvbnMudGltZW91dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTmF2aWdhdGlvbkNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmF2aWdhdGlvbkNsaWVudC5tanMubWFwXG4iXSwibmFtZXMiOlsiTmF2aWdhdGlvbkNsaWVudCIsIm5hdmlnYXRlSW50ZXJuYWwiLCJ1cmwiLCJvcHRpb25zIiwiZGVmYXVsdE5hdmlnYXRlV2luZG93IiwibmF2aWdhdGVFeHRlcm5hbCIsIm5vSGlzdG9yeSIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVwbGFjZSIsImFzc2lnbiIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchClient: () => (/* binding */ FetchClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */ class FetchClient {\n    /**\r\n     * Fetch Client for REST endpoints - Get request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */ async sendGetRequestAsync(url, options) {\n        let response;\n        let responseHeaders = {};\n        let responseStatus = 0;\n        const reqHeaders = getFetchHeaders(options);\n        try {\n            response = await fetch(url, {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.HTTP_REQUEST_TYPE.GET,\n                headers: reqHeaders\n            });\n        } catch (e) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(window.navigator.onLine ? _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.getRequestFailed : _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noNetworkConnectivity);\n        }\n        responseHeaders = getHeaderDict(response.headers);\n        try {\n            responseStatus = response.status;\n            return {\n                headers: responseHeaders,\n                body: await response.json(),\n                status: responseStatus\n            };\n        } catch (e) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createNetworkError)((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToParseResponse), responseStatus, responseHeaders);\n        }\n    }\n    /**\r\n     * Fetch Client for REST endpoints - Post request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */ async sendPostRequestAsync(url, options) {\n        const reqBody = options && options.body || \"\";\n        const reqHeaders = getFetchHeaders(options);\n        let response;\n        let responseStatus = 0;\n        let responseHeaders = {};\n        try {\n            response = await fetch(url, {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.HTTP_REQUEST_TYPE.POST,\n                headers: reqHeaders,\n                body: reqBody\n            });\n        } catch (e) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(window.navigator.onLine ? _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.postRequestFailed : _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noNetworkConnectivity);\n        }\n        responseHeaders = getHeaderDict(response.headers);\n        try {\n            responseStatus = response.status;\n            return {\n                headers: responseHeaders,\n                body: await response.json(),\n                status: responseStatus\n            };\n        } catch (e) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createNetworkError)((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToParseResponse), responseStatus, responseHeaders);\n        }\n    }\n}\n/**\r\n * Get Fetch API Headers object from string map\r\n * @param inputHeaders\r\n */ function getFetchHeaders(options) {\n    try {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.entries(optionsHeaders).forEach(([key, value])=>{\n            headers.append(key, value);\n        });\n        return headers;\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToBuildHeaders);\n    }\n}\n/**\r\n * Returns object representing response headers\r\n * @param headers\r\n * @returns\r\n */ function getHeaderDict(headers) {\n    try {\n        const headerDict = {};\n        headers.forEach((value, key)=>{\n            headerDict[key] = value;\n        });\n        return headerDict;\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToParseHeaders);\n    }\n}\n //# sourceMappingURL=FetchClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseOperatingContext: () => (/* binding */ BaseOperatingContext)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/Configuration.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Base class for operating context\r\n * Operating contexts are contexts in which MSAL.js is being run\r\n * More than one operating context may be available at a time\r\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\r\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\r\n */ class BaseOperatingContext {\n    static loggerCallback(level, message) {\n        switch(level){\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error:\n                // eslint-disable-next-line no-console\n                console.error(message);\n                return;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Info:\n                // eslint-disable-next-line no-console\n                console.info(message);\n                return;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Verbose:\n                // eslint-disable-next-line no-console\n                console.debug(message);\n                return;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning:\n                // eslint-disable-next-line no-console\n                console.warn(message);\n                return;\n            default:\n                // eslint-disable-next-line no-console\n                console.log(message);\n                return;\n        }\n    }\n    constructor(config){\n        /*\r\n         * If loaded in an environment where window is not available,\r\n         * set internal flag to false so that further requests fail.\r\n         * This is to support server-side rendering environments.\r\n         */ this.browserEnvironment = \"undefined\" !== \"undefined\";\n        this.config = (0,_config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_1__.buildConfiguration)(config, this.browserEnvironment);\n        let sessionStorage;\n        try {\n            sessionStorage = window[_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.SessionStorage];\n        // Mute errors if it's a non-browser environment or cookies are blocked.\n        } catch (e) {}\n        const logLevelKey = sessionStorage?.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.LOG_LEVEL_CACHE_KEY);\n        const piiLoggingKey = sessionStorage?.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.LOG_PII_CACHE_KEY)?.toLowerCase();\n        const piiLoggingEnabled = piiLoggingKey === \"true\" ? true : piiLoggingKey === \"false\" ? false : undefined;\n        const loggerOptions = {\n            ...this.config.system.loggerOptions\n        };\n        const logLevel = logLevelKey && Object.keys(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel).includes(logLevelKey) ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel[logLevelKey] : undefined;\n        if (logLevel) {\n            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\n            loggerOptions.logLevel = logLevel;\n        }\n        if (piiLoggingEnabled !== undefined) {\n            loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\n        }\n        this.logger = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Logger(loggerOptions, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_3__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_3__.version);\n        this.available = false;\n    }\n    /**\r\n     * Return the MSAL config\r\n     * @returns BrowserConfiguration\r\n     */ getConfig() {\n        return this.config;\n    }\n    /**\r\n     * Returns the MSAL Logger\r\n     * @returns Logger\r\n     */ getLogger() {\n        return this.logger;\n    }\n    isAvailable() {\n        return this.available;\n    }\n    isBrowserEnvironment() {\n        return this.browserEnvironment;\n    }\n}\n //# sourceMappingURL=BaseOperatingContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L29wZXJhdGluZ2NvbnRleHQvQmFzZU9wZXJhdGluZ0NvbnRleHQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQzhEO0FBQ0c7QUFDVjtBQUNzRDtBQUU3Rzs7O0NBR0MsR0FDRDs7Ozs7O0NBTUMsR0FDRCxNQUFNUTtJQUNGLE9BQU9DLGVBQWVDLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ2xDLE9BQVFEO1lBQ0osS0FBS1YsZ0VBQVFBLENBQUNZLEtBQUs7Z0JBQ2Ysc0NBQXNDO2dCQUN0Q0MsUUFBUUMsS0FBSyxDQUFDSDtnQkFDZDtZQUNKLEtBQUtYLGdFQUFRQSxDQUFDZSxJQUFJO2dCQUNkLHNDQUFzQztnQkFDdENGLFFBQVFHLElBQUksQ0FBQ0w7Z0JBQ2I7WUFDSixLQUFLWCxnRUFBUUEsQ0FBQ2lCLE9BQU87Z0JBQ2pCLHNDQUFzQztnQkFDdENKLFFBQVFLLEtBQUssQ0FBQ1A7Z0JBQ2Q7WUFDSixLQUFLWCxnRUFBUUEsQ0FBQ21CLE9BQU87Z0JBQ2pCLHNDQUFzQztnQkFDdENOLFFBQVFPLElBQUksQ0FBQ1Q7Z0JBQ2I7WUFDSjtnQkFDSSxzQ0FBc0M7Z0JBQ3RDRSxRQUFRUSxHQUFHLENBQUNWO2dCQUNaO1FBQ1I7SUFDSjtJQUNBVyxZQUFZQyxNQUFNLENBQUU7UUFDaEI7Ozs7U0FJQyxHQUNELElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsZ0JBQWtCO1FBQzVDLElBQUksQ0FBQ0QsTUFBTSxHQUFHckIsNkVBQWtCQSxDQUFDcUIsUUFBUSxJQUFJLENBQUNDLGtCQUFrQjtRQUNoRSxJQUFJQztRQUNKLElBQUk7WUFDQUEsaUJBQWlCQyxNQUFNLENBQUNyQiw2RUFBb0JBLENBQUNzQixjQUFjLENBQUM7UUFDNUQsd0VBQXdFO1FBQzVFLEVBQ0EsT0FBT0MsR0FBRyxDQUFFO1FBQ1osTUFBTUMsY0FBY0osZ0JBQWdCSyxRQUFReEIsNEVBQW1CQTtRQUMvRCxNQUFNeUIsZ0JBQWdCTixnQkFDaEJLLFFBQVF2QiwwRUFBaUJBLEdBQ3pCeUI7UUFDTixNQUFNQyxvQkFBb0JGLGtCQUFrQixTQUN0QyxPQUNBQSxrQkFBa0IsVUFDZCxRQUNBRztRQUNWLE1BQU1DLGdCQUFnQjtZQUFFLEdBQUcsSUFBSSxDQUFDWixNQUFNLENBQUNhLE1BQU0sQ0FBQ0QsYUFBYTtRQUFDO1FBQzVELE1BQU1FLFdBQVdSLGVBQWVTLE9BQU9DLElBQUksQ0FBQ3ZDLGdFQUFRQSxFQUFFd0MsUUFBUSxDQUFDWCxlQUN6RDdCLGdFQUFRLENBQUM2QixZQUFZLEdBQ3JCSztRQUNOLElBQUlHLFVBQVU7WUFDVkYsY0FBYzFCLGNBQWMsR0FBR0QscUJBQXFCQyxjQUFjO1lBQ2xFMEIsY0FBY0UsUUFBUSxHQUFHQTtRQUM3QjtRQUNBLElBQUlKLHNCQUFzQkMsV0FBVztZQUNqQ0MsY0FBY0YsaUJBQWlCLEdBQUdBO1FBQ3RDO1FBQ0EsSUFBSSxDQUFDUSxNQUFNLEdBQUcsSUFBSXhDLDhEQUFNQSxDQUFDa0MsZUFBZWhDLHNEQUFJQSxFQUFFQyx5REFBT0E7UUFDckQsSUFBSSxDQUFDc0MsU0FBUyxHQUFHO0lBQ3JCO0lBQ0E7OztLQUdDLEdBQ0RDLFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQ3BCLE1BQU07SUFDdEI7SUFDQTs7O0tBR0MsR0FDRHFCLFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQ0gsTUFBTTtJQUN0QjtJQUNBSSxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUNILFNBQVM7SUFDekI7SUFDQUksdUJBQXVCO1FBQ25CLE9BQU8sSUFBSSxDQUFDdEIsa0JBQWtCO0lBQ2xDO0FBQ0o7QUFFZ0MsQ0FDaEMsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L29wZXJhdGluZ2NvbnRleHQvQmFzZU9wZXJhdGluZ0NvbnRleHQubWpzP2QxZTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBMb2dMZXZlbCwgTG9nZ2VyIH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL2Jyb3dzZXInO1xuaW1wb3J0IHsgYnVpbGRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vY29uZmlnL0NvbmZpZ3VyYXRpb24ubWpzJztcbmltcG9ydCB7IG5hbWUsIHZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlTWV0YWRhdGEubWpzJztcbmltcG9ydCB7IEJyb3dzZXJDYWNoZUxvY2F0aW9uLCBMT0dfTEVWRUxfQ0FDSEVfS0VZLCBMT0dfUElJX0NBQ0hFX0tFWSB9IGZyb20gJy4uL3V0aWxzL0Jyb3dzZXJDb25zdGFudHMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBvcGVyYXRpbmcgY29udGV4dFxyXG4gKiBPcGVyYXRpbmcgY29udGV4dHMgYXJlIGNvbnRleHRzIGluIHdoaWNoIE1TQUwuanMgaXMgYmVpbmcgcnVuXHJcbiAqIE1vcmUgdGhhbiBvbmUgb3BlcmF0aW5nIGNvbnRleHQgbWF5IGJlIGF2YWlsYWJsZSBhdCBhIHRpbWVcclxuICogSXQncyBpbXBvcnRhbnQgZnJvbSBhIGxvZ2dpbmcgYW5kIHRlbGVtZXRyeSBwb2ludCBvZiB2aWV3IGZvciB1cyB0byBiZSBhYmxlIHRvIGlkZW50aWZ5IHRoZSBvcGVyYXRpbmcgY29udGV4dC5cclxuICogRm9yIGV4YW1wbGU6IFNvbWUgb3BlcmF0aW5nIGNvbnRleHRzIHdpbGwgcHJlLWNhY2hlIHRva2VucyBpbXBhY3RpbmcgcGVyZm9ybWFuY2UgdGVsZW1ldHJ5XHJcbiAqL1xyXG5jbGFzcyBCYXNlT3BlcmF0aW5nQ29udGV4dCB7XHJcbiAgICBzdGF0aWMgbG9nZ2VyQ2FsbGJhY2sobGV2ZWwsIG1lc3NhZ2UpIHtcclxuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWwuRXJyb3I6XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5JbmZvOlxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5WZXJib3NlOlxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWwuV2FybmluZzpcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBJZiBsb2FkZWQgaW4gYW4gZW52aXJvbm1lbnQgd2hlcmUgd2luZG93IGlzIG5vdCBhdmFpbGFibGUsXHJcbiAgICAgICAgICogc2V0IGludGVybmFsIGZsYWcgdG8gZmFsc2Ugc28gdGhhdCBmdXJ0aGVyIHJlcXVlc3RzIGZhaWwuXHJcbiAgICAgICAgICogVGhpcyBpcyB0byBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZyBlbnZpcm9ubWVudHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5icm93c2VyRW52aXJvbm1lbnQgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gYnVpbGRDb25maWd1cmF0aW9uKGNvbmZpZywgdGhpcy5icm93c2VyRW52aXJvbm1lbnQpO1xyXG4gICAgICAgIGxldCBzZXNzaW9uU3RvcmFnZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZSA9IHdpbmRvd1tCcm93c2VyQ2FjaGVMb2NhdGlvbi5TZXNzaW9uU3RvcmFnZV07XHJcbiAgICAgICAgICAgIC8vIE11dGUgZXJyb3JzIGlmIGl0J3MgYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCBvciBjb29raWVzIGFyZSBibG9ja2VkLlxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgY29uc3QgbG9nTGV2ZWxLZXkgPSBzZXNzaW9uU3RvcmFnZT8uZ2V0SXRlbShMT0dfTEVWRUxfQ0FDSEVfS0VZKTtcclxuICAgICAgICBjb25zdCBwaWlMb2dnaW5nS2V5ID0gc2Vzc2lvblN0b3JhZ2VcclxuICAgICAgICAgICAgPy5nZXRJdGVtKExPR19QSUlfQ0FDSEVfS0VZKVxyXG4gICAgICAgICAgICA/LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgY29uc3QgcGlpTG9nZ2luZ0VuYWJsZWQgPSBwaWlMb2dnaW5nS2V5ID09PSBcInRydWVcIlxyXG4gICAgICAgICAgICA/IHRydWVcclxuICAgICAgICAgICAgOiBwaWlMb2dnaW5nS2V5ID09PSBcImZhbHNlXCJcclxuICAgICAgICAgICAgICAgID8gZmFsc2VcclxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IGxvZ2dlck9wdGlvbnMgPSB7IC4uLnRoaXMuY29uZmlnLnN5c3RlbS5sb2dnZXJPcHRpb25zIH07XHJcbiAgICAgICAgY29uc3QgbG9nTGV2ZWwgPSBsb2dMZXZlbEtleSAmJiBPYmplY3Qua2V5cyhMb2dMZXZlbCkuaW5jbHVkZXMobG9nTGV2ZWxLZXkpXHJcbiAgICAgICAgICAgID8gTG9nTGV2ZWxbbG9nTGV2ZWxLZXldXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChsb2dMZXZlbCkge1xyXG4gICAgICAgICAgICBsb2dnZXJPcHRpb25zLmxvZ2dlckNhbGxiYWNrID0gQmFzZU9wZXJhdGluZ0NvbnRleHQubG9nZ2VyQ2FsbGJhY2s7XHJcbiAgICAgICAgICAgIGxvZ2dlck9wdGlvbnMubG9nTGV2ZWwgPSBsb2dMZXZlbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBpaUxvZ2dpbmdFbmFibGVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbG9nZ2VyT3B0aW9ucy5waWlMb2dnaW5nRW5hYmxlZCA9IHBpaUxvZ2dpbmdFbmFibGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvZ2dlciA9IG5ldyBMb2dnZXIobG9nZ2VyT3B0aW9ucywgbmFtZSwgdmVyc2lvbik7XHJcbiAgICAgICAgdGhpcy5hdmFpbGFibGUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBNU0FMIGNvbmZpZ1xyXG4gICAgICogQHJldHVybnMgQnJvd3NlckNvbmZpZ3VyYXRpb25cclxuICAgICAqL1xyXG4gICAgZ2V0Q29uZmlnKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgTVNBTCBMb2dnZXJcclxuICAgICAqIEByZXR1cm5zIExvZ2dlclxyXG4gICAgICovXHJcbiAgICBnZXRMb2dnZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9nZ2VyO1xyXG4gICAgfVxyXG4gICAgaXNBdmFpbGFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlO1xyXG4gICAgfVxyXG4gICAgaXNCcm93c2VyRW52aXJvbm1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnJvd3NlckVudmlyb25tZW50O1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IEJhc2VPcGVyYXRpbmdDb250ZXh0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlT3BlcmF0aW5nQ29udGV4dC5tanMubWFwXG4iXSwibmFtZXMiOlsiTG9nTGV2ZWwiLCJMb2dnZXIiLCJidWlsZENvbmZpZ3VyYXRpb24iLCJuYW1lIiwidmVyc2lvbiIsIkJyb3dzZXJDYWNoZUxvY2F0aW9uIiwiTE9HX0xFVkVMX0NBQ0hFX0tFWSIsIkxPR19QSUlfQ0FDSEVfS0VZIiwiQmFzZU9wZXJhdGluZ0NvbnRleHQiLCJsb2dnZXJDYWxsYmFjayIsImxldmVsIiwibWVzc2FnZSIsIkVycm9yIiwiY29uc29sZSIsImVycm9yIiwiSW5mbyIsImluZm8iLCJWZXJib3NlIiwiZGVidWciLCJXYXJuaW5nIiwid2FybiIsImxvZyIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiYnJvd3NlckVudmlyb25tZW50Iiwic2Vzc2lvblN0b3JhZ2UiLCJ3aW5kb3ciLCJTZXNzaW9uU3RvcmFnZSIsImUiLCJsb2dMZXZlbEtleSIsImdldEl0ZW0iLCJwaWlMb2dnaW5nS2V5IiwidG9Mb3dlckNhc2UiLCJwaWlMb2dnaW5nRW5hYmxlZCIsInVuZGVmaW5lZCIsImxvZ2dlck9wdGlvbnMiLCJzeXN0ZW0iLCJsb2dMZXZlbCIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsImxvZ2dlciIsImF2YWlsYWJsZSIsImdldENvbmZpZyIsImdldExvZ2dlciIsImlzQXZhaWxhYmxlIiwiaXNCcm93c2VyRW52aXJvbm1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppOperatingContext: () => (/* binding */ NestedAppOperatingContext)\n/* harmony export */ });\n/* harmony import */ var _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NestedAppOperatingContext extends _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseOperatingContext {\n    constructor(){\n        super(...arguments);\n        this.bridgeProxy = undefined;\n        this.accountContext = null;\n    }\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */ getModuleName() {\n        return NestedAppOperatingContext.MODULE_NAME;\n    }\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */ getId() {\n        return NestedAppOperatingContext.ID;\n    }\n    /**\r\n     * Returns the current BridgeProxy\r\n     * @returns IBridgeProxy | undefined\r\n     */ getBridgeProxy() {\n        return this.bridgeProxy;\n    }\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */ async initialize() {\n        try {\n            if (false) {}\n        } catch (ex) {\n            this.logger.infoPii(`Could not initialize Nested App Auth bridge (${ex})`);\n        }\n        this.logger.info(`Nested App Auth Bridge available: ${this.available}`);\n        return this.available;\n    }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */ NestedAppOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */ NestedAppOperatingContext.ID = \"NestedAppOperatingContext\";\n //# sourceMappingURL=NestedAppOperatingContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L29wZXJhdGluZ2NvbnRleHQvTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDa0U7QUFDYjtBQUVyRDs7O0NBR0MsR0FDRCxNQUFNRSxrQ0FBa0NGLDJFQUFvQkE7SUFDeERHLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxXQUFXLEdBQUdDO1FBQ25CLElBQUksQ0FBQ0MsY0FBYyxHQUFHO0lBQzFCO0lBQ0E7Ozs7S0FJQyxHQUNEQyxnQkFBZ0I7UUFDWixPQUFPTiwwQkFBMEJPLFdBQVc7SUFDaEQ7SUFDQTs7O0tBR0MsR0FDREMsUUFBUTtRQUNKLE9BQU9SLDBCQUEwQlMsRUFBRTtJQUN2QztJQUNBOzs7S0FHQyxHQUNEQyxpQkFBaUI7UUFDYixPQUFPLElBQUksQ0FBQ1AsV0FBVztJQUMzQjtJQUNBOzs7O0tBSUMsR0FDRCxNQUFNUSxhQUFhO1FBQ2YsSUFBSTtZQUNBLElBQUksS0FBNkIsRUFBRSxFQWFsQztRQUNMLEVBQ0EsT0FBT00sSUFBSTtZQUNQLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUMsQ0FBQyw2Q0FBNkMsRUFBRUYsR0FBRyxDQUFDLENBQUM7UUFDN0U7UUFDQSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLENBQUMsa0NBQWtDLEVBQUUsSUFBSSxDQUFDSixTQUFTLENBQUMsQ0FBQztRQUN0RSxPQUFPLElBQUksQ0FBQ0EsU0FBUztJQUN6QjtBQUNKO0FBQ0E7OztDQUdDLEdBQ0RoQiwwQkFBMEJPLFdBQVcsR0FBRztBQUN4Qzs7Q0FFQyxHQUNEUCwwQkFBMEJTLEVBQUUsR0FBRztBQUVNLENBQ3JDLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9vcGVyYXRpbmdjb250ZXh0L05lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQubWpzPzFhNWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBCYXNlT3BlcmF0aW5nQ29udGV4dCB9IGZyb20gJy4vQmFzZU9wZXJhdGluZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IEJyaWRnZVByb3h5IH0gZnJvbSAnLi4vbmFhL0JyaWRnZVByb3h5Lm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBOZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0IGV4dGVuZHMgQmFzZU9wZXJhdGluZ0NvbnRleHQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLmJyaWRnZVByb3h5ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuYWNjb3VudENvbnRleHQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIG1vZHVsZSBuYW1lLiAgSW50ZW5kZWQgZm9yIHVzZSB3aXRoIGltcG9ydCgpIHRvIGVuYWJsZSBkeW5hbWljIGltcG9ydFxyXG4gICAgICogb2YgdGhlIGltcGxlbWVudGF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG9wZXJhdGluZyBjb250ZXh0XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZXRNb2R1bGVOYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBOZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0Lk1PRFVMRV9OQU1FO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBvcGVyYXRpbmcgY29udGV4dFxyXG4gICAgICogQHJldHVybnMgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiBOZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0LklEO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IEJyaWRnZVByb3h5XHJcbiAgICAgKiBAcmV0dXJucyBJQnJpZGdlUHJveHkgfCB1bmRlZmluZWRcclxuICAgICAqL1xyXG4gICAgZ2V0QnJpZGdlUHJveHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnJpZGdlUHJveHk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBvcGVyYXRpbmcgY29udGV4dCBpcyBhdmFpbGFibGUuXHJcbiAgICAgKiBDb25maXJtcyB0aGF0IHRoZSBjb2RlIGlzIHJ1bm5pbmcgYSBicm93c2VyIHJhdGhlci4gIFRoaXMgaXMgcmVxdWlyZWQuXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPGJvb2xlYW4+IGluZGljYXRpbmcgd2hldGhlciB0aGlzIG9wZXJhdGluZyBjb250ZXh0IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGluaXRpYWxpemUoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93Ll9faW5pdGlhbGl6ZU5lc3RlZEFwcEF1dGggPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHdpbmRvdy5fX2luaXRpYWxpemVOZXN0ZWRBcHBBdXRoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBicmlkZ2VQcm94eSA9IGF3YWl0IEJyaWRnZVByb3h5LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAqIEJlY2F1c2Ugd2Ugd2FudCBzaW5nbGUgc2lnbiBvbiB3ZSBleHBlY3QgdGhlIGhvc3QgYXBwIHRvIHByb3ZpZGUgdGhlIGFjY291bnQgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgICogd2l0aCBhIG1pbiBzZXQgb2YgcGFyYW1zIHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGFjY291bnRcclxuICAgICAgICAgICAgICAgICAqIHRoaXMuYWNjb3VudCA9IG5lc3RlZEFwcC5nZXRBY2NvdW50QnlGaWx0ZXIoYnJpZGdlUHJveHkuZ2V0QWNjb3VudENvbnRleHQoKSk7XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHRoaXMuYWNjb3VudENvbnRleHQgPSBicmlkZ2VQcm94eS5nZXRBY2NvdW50Q29udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5icmlkZ2VQcm94eSA9IGJyaWRnZVByb3h5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFibGUgPSBicmlkZ2VQcm94eSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvUGlpKGBDb3VsZCBub3QgaW5pdGlhbGl6ZSBOZXN0ZWQgQXBwIEF1dGggYnJpZGdlICgke2V4fSlgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgTmVzdGVkIEFwcCBBdXRoIEJyaWRnZSBhdmFpbGFibGU6ICR7dGhpcy5hdmFpbGFibGV9YCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlO1xyXG4gICAgfVxyXG59XHJcbi8qXHJcbiAqIFRPRE86IE9uY2Ugd2UgaGF2ZSBkZXRlcm1pbmUgdGhlIGJ1bmRsaW5nIGNvZGUgcmV0dXJuIGhlcmUgdG8gc3BlY2lmeSB0aGUgbmFtZSBvZiB0aGUgYnVuZGxlXHJcbiAqIGNvbnRhaW5pbmcgdGhlIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIG9wZXJhdGluZyBjb250ZXh0XHJcbiAqL1xyXG5OZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0Lk1PRFVMRV9OQU1FID0gXCJcIjtcclxuLyoqXHJcbiAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgb3BlcmF0aW5nIGNvbnRleHRcclxuICovXHJcbk5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQuSUQgPSBcIk5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHRcIjtcblxuZXhwb3J0IHsgTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dC5tanMubWFwXG4iXSwibmFtZXMiOlsiQmFzZU9wZXJhdGluZ0NvbnRleHQiLCJCcmlkZ2VQcm94eSIsIk5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImJyaWRnZVByb3h5IiwidW5kZWZpbmVkIiwiYWNjb3VudENvbnRleHQiLCJnZXRNb2R1bGVOYW1lIiwiTU9EVUxFX05BTUUiLCJnZXRJZCIsIklEIiwiZ2V0QnJpZGdlUHJveHkiLCJpbml0aWFsaXplIiwid2luZG93IiwiX19pbml0aWFsaXplTmVzdGVkQXBwQXV0aCIsImNyZWF0ZSIsImdldEFjY291bnRDb250ZXh0IiwiYXZhaWxhYmxlIiwiZXgiLCJsb2dnZXIiLCJpbmZvUGlpIiwiaW5mbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardOperatingContext: () => (/* binding */ StandardOperatingContext)\n/* harmony export */ });\n/* harmony import */ var _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class StandardOperatingContext extends _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseOperatingContext {\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */ getModuleName() {\n        return StandardOperatingContext.MODULE_NAME;\n    }\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */ getId() {\n        return StandardOperatingContext.ID;\n    }\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */ async initialize() {\n        this.available = \"undefined\" !== \"undefined\";\n        return this.available;\n    /*\r\n         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\r\n         * We can move the current contents of the initialize method to here and verify that the WAM extension is available\r\n         */ }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */ StandardOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */ StandardOperatingContext.ID = \"StandardOperatingContext\";\n //# sourceMappingURL=StandardOperatingContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L29wZXJhdGluZ2NvbnRleHQvU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNrRTtBQUVsRTs7O0NBR0MsR0FDRCxNQUFNQyxpQ0FBaUNELDJFQUFvQkE7SUFDdkQ7Ozs7S0FJQyxHQUNERSxnQkFBZ0I7UUFDWixPQUFPRCx5QkFBeUJFLFdBQVc7SUFDL0M7SUFDQTs7O0tBR0MsR0FDREMsUUFBUTtRQUNKLE9BQU9ILHlCQUF5QkksRUFBRTtJQUN0QztJQUNBOzs7O0tBSUMsR0FDRCxNQUFNQyxhQUFhO1FBQ2YsSUFBSSxDQUFDQyxTQUFTLEdBQUcsZ0JBQWtCO1FBQ25DLE9BQU8sSUFBSSxDQUFDQSxTQUFTO0lBQ3JCOzs7U0FHQyxHQUNMO0FBQ0o7QUFDQTs7O0NBR0MsR0FDRE4seUJBQXlCRSxXQUFXLEdBQUc7QUFDdkM7O0NBRUMsR0FDREYseUJBQXlCSSxFQUFFLEdBQUc7QUFFTSxDQUNwQyxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3Qvb3BlcmF0aW5nY29udGV4dC9TdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQubWpzP2NlM2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBCYXNlT3BlcmF0aW5nQ29udGV4dCB9IGZyb20gJy4vQmFzZU9wZXJhdGluZ0NvbnRleHQubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIFN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dCBleHRlbmRzIEJhc2VPcGVyYXRpbmdDb250ZXh0IHtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBtb2R1bGUgbmFtZS4gIEludGVuZGVkIGZvciB1c2Ugd2l0aCBpbXBvcnQoKSB0byBlbmFibGUgZHluYW1pYyBpbXBvcnRcclxuICAgICAqIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBvcGVyYXRpbmcgY29udGV4dFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgZ2V0TW9kdWxlTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0Lk1PRFVMRV9OQU1FO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBvcGVyYXRpbmcgY29udGV4dFxyXG4gICAgICogQHJldHVybnMgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiBTdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQuSUQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBvcGVyYXRpbmcgY29udGV4dCBpcyBhdmFpbGFibGUuXHJcbiAgICAgKiBDb25maXJtcyB0aGF0IHRoZSBjb2RlIGlzIHJ1bm5pbmcgYSBicm93c2VyIHJhdGhlci4gIFRoaXMgaXMgcmVxdWlyZWQuXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPGJvb2xlYW4+IGluZGljYXRpbmcgd2hldGhlciB0aGlzIG9wZXJhdGluZyBjb250ZXh0IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGluaXRpYWxpemUoKSB7XHJcbiAgICAgICAgdGhpcy5hdmFpbGFibGUgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIE5PVEU6IFRoZSBzdGFuZGFyZCBjb250ZXh0IGlzIGF2YWlsYWJsZSBhcyBsb25nIGFzIHRoZXJlIGlzIGEgd2luZG93LiAgSWYvd2hlbiB3ZSBzcGxpdCBvdXQgV0FNIGZyb20gQnJvd3NlclxyXG4gICAgICAgICAqIFdlIGNhbiBtb3ZlIHRoZSBjdXJyZW50IGNvbnRlbnRzIG9mIHRoZSBpbml0aWFsaXplIG1ldGhvZCB0byBoZXJlIGFuZCB2ZXJpZnkgdGhhdCB0aGUgV0FNIGV4dGVuc2lvbiBpcyBhdmFpbGFibGVcclxuICAgICAgICAgKi9cclxuICAgIH1cclxufVxyXG4vKlxyXG4gKiBUT0RPOiBPbmNlIHdlIGhhdmUgZGV0ZXJtaW5lIHRoZSBidW5kbGluZyBjb2RlIHJldHVybiBoZXJlIHRvIHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhlIGJ1bmRsZVxyXG4gKiBjb250YWluaW5nIHRoZSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBvcGVyYXRpbmcgY29udGV4dFxyXG4gKi9cclxuU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0Lk1PRFVMRV9OQU1FID0gXCJcIjtcclxuLyoqXHJcbiAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgb3BlcmF0aW5nIGNvbnRleHRcclxuICovXHJcblN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dC5JRCA9IFwiU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0XCI7XG5cbmV4cG9ydCB7IFN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJCYXNlT3BlcmF0aW5nQ29udGV4dCIsIlN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dCIsImdldE1vZHVsZU5hbWUiLCJNT0RVTEVfTkFNRSIsImdldElkIiwiSUQiLCJpbml0aWFsaXplIiwiYXZhaWxhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/packageMetadata.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n/* eslint-disable header/header */ const name = \"@azure/msal-browser\";\nconst version = \"3.28.1\";\n //# sourceMappingURL=packageMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3BhY2thZ2VNZXRhZGF0YS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQSxnQ0FBZ0MsR0FDaEMsTUFBTUEsT0FBTztBQUNiLE1BQU1DLFVBQVU7QUFFUyxDQUN6Qiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvcGFja2FnZU1ldGFkYXRhLm1qcz83Nzk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgaGVhZGVyL2hlYWRlciAqL1xyXG5jb25zdCBuYW1lID0gXCJAYXp1cmUvbXNhbC1icm93c2VyXCI7XHJcbmNvbnN0IHZlcnNpb24gPSBcIjMuMjguMVwiO1xuXG5leHBvcnQgeyBuYW1lLCB2ZXJzaW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWNrYWdlTWV0YWRhdGEubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5hbWUiLCJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeBaseRequest: () => (/* binding */ initializeBaseRequest),\n/* harmony export */   initializeSilentRequest: () => (/* binding */ initializeSilentRequest)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Initializer function for all request APIs\r\n * @param request\r\n */ async function initializeBaseRequest(request, config, performanceClient, logger) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.InitializeBaseRequest, request.correlationId);\n    const authority = request.authority || config.auth.authority;\n    const scopes = [\n        ...request && request.scopes || []\n    ];\n    const validatedRequest = {\n        ...request,\n        correlationId: request.correlationId,\n        authority,\n        scopes\n    };\n    // Set authenticationScheme to BEARER if not explicitly set in the request\n    if (!validatedRequest.authenticationScheme) {\n        validatedRequest.authenticationScheme = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER;\n        logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n    } else {\n        if (validatedRequest.authenticationScheme === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.SSH) {\n            if (!request.sshJwk) {\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.missingSshJwk);\n            }\n            if (!request.sshKid) {\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.missingSshKid);\n            }\n        }\n        logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n    }\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\n    if (config.cache.claimsBasedCachingEnabled && request.claims && // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n    !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.StringUtils.isEmptyObj(request.claims)) {\n        validatedRequest.requestedClaimsHash = await (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.hashString)(request.claims);\n    }\n    return validatedRequest;\n}\nasync function initializeSilentRequest(request, account, config, performanceClient, logger) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.InitializeSilentRequest, request.correlationId);\n    const baseRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.invokeAsync)(initializeBaseRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.InitializeBaseRequest, logger, performanceClient, request.correlationId)(request, config, performanceClient, logger);\n    return {\n        ...request,\n        ...baseRequest,\n        account: account,\n        forceRefresh: request.forceRefresh || false\n    };\n}\n //# sourceMappingURL=RequestHelpers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3JlcXVlc3QvUmVxdWVzdEhlbHBlcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUM4SztBQUNySDtBQUV6RDs7O0NBR0MsR0FDRDs7O0NBR0MsR0FDRCxlQUFlTyxzQkFBc0JDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRUMsTUFBTTtJQUMzRUQsa0JBQWtCRSxtQkFBbUIsQ0FBQ1oseUVBQWlCQSxDQUFDYSxxQkFBcUIsRUFBRUwsUUFBUU0sYUFBYTtJQUNwRyxNQUFNQyxZQUFZUCxRQUFRTyxTQUFTLElBQUlOLE9BQU9PLElBQUksQ0FBQ0QsU0FBUztJQUM1RCxNQUFNRSxTQUFTO1dBQUssV0FBWVQsUUFBUVMsTUFBTSxJQUFLLEVBQUU7S0FBRTtJQUN2RCxNQUFNQyxtQkFBbUI7UUFDckIsR0FBR1YsT0FBTztRQUNWTSxlQUFlTixRQUFRTSxhQUFhO1FBQ3BDQztRQUNBRTtJQUNKO0lBQ0EsMEVBQTBFO0lBQzFFLElBQUksQ0FBQ0MsaUJBQWlCQyxvQkFBb0IsRUFBRTtRQUN4Q0QsaUJBQWlCQyxvQkFBb0IsR0FBR2pCLDRFQUFvQkEsQ0FBQ2tCLE1BQU07UUFDbkVULE9BQU9VLE9BQU8sQ0FBQztJQUNuQixPQUNLO1FBQ0QsSUFBSUgsaUJBQWlCQyxvQkFBb0IsS0FBS2pCLDRFQUFvQkEsQ0FBQ29CLEdBQUcsRUFBRTtZQUNwRSxJQUFJLENBQUNkLFFBQVFlLE1BQU0sRUFBRTtnQkFDakIsTUFBTXBCLDBGQUE4QkEsQ0FBQ0MscUVBQTJDO1lBQ3BGO1lBQ0EsSUFBSSxDQUFDSSxRQUFRaUIsTUFBTSxFQUFFO2dCQUNqQixNQUFNdEIsMEZBQThCQSxDQUFDQyxxRUFBMkM7WUFDcEY7UUFDSjtRQUNBTyxPQUFPVSxPQUFPLENBQUMsQ0FBQyw4QkFBOEIsRUFBRUgsaUJBQWlCQyxvQkFBb0IsQ0FBQywrQkFBK0IsQ0FBQztJQUMxSDtJQUNBLHlGQUF5RjtJQUN6RixJQUFJVixPQUFPa0IsS0FBSyxDQUFDQyx5QkFBeUIsSUFDdENwQixRQUFRcUIsTUFBTSxJQUNkLHFGQUFxRjtJQUNyRixDQUFDeEIsbUVBQVdBLENBQUN5QixVQUFVLENBQUN0QixRQUFRcUIsTUFBTSxHQUFHO1FBQ3pDWCxpQkFBaUJhLG1CQUFtQixHQUFHLE1BQU16QixxRUFBVUEsQ0FBQ0UsUUFBUXFCLE1BQU07SUFDMUU7SUFDQSxPQUFPWDtBQUNYO0FBQ0EsZUFBZWMsd0JBQXdCeEIsT0FBTyxFQUFFeUIsT0FBTyxFQUFFeEIsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRUMsTUFBTTtJQUN0RkQsa0JBQWtCRSxtQkFBbUIsQ0FBQ1oseUVBQWlCQSxDQUFDa0MsdUJBQXVCLEVBQUUxQixRQUFRTSxhQUFhO0lBQ3RHLE1BQU1xQixjQUFjLE1BQU1sQyx1RUFBV0EsQ0FBQ00sdUJBQXVCUCx5RUFBaUJBLENBQUNhLHFCQUFxQixFQUFFRixRQUFRRCxtQkFBbUJGLFFBQVFNLGFBQWEsRUFBRU4sU0FBU0MsUUFBUUMsbUJBQW1CQztJQUM1TCxPQUFPO1FBQ0gsR0FBR0gsT0FBTztRQUNWLEdBQUcyQixXQUFXO1FBQ2RGLFNBQVNBO1FBQ1RHLGNBQWM1QixRQUFRNEIsWUFBWSxJQUFJO0lBQzFDO0FBQ0o7QUFFMEQsQ0FDMUQsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3JlcXVlc3QvUmVxdWVzdEhlbHBlcnMubWpzP2M1YmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMSAyMDI1LTAxLTE0ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBQZXJmb3JtYW5jZUV2ZW50cywgaW52b2tlQXN5bmMsIEF1dGhlbnRpY2F0aW9uU2NoZW1lLCBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IsIENsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLCBTdHJpbmdVdGlscyB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IGhhc2hTdHJpbmcgfSBmcm9tICcuLi9jcnlwdG8vQnJvd3NlckNyeXB0by5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEluaXRpYWxpemVyIGZ1bmN0aW9uIGZvciBhbGwgcmVxdWVzdCBBUElzXHJcbiAqIEBwYXJhbSByZXF1ZXN0XHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBpbml0aWFsaXplQmFzZVJlcXVlc3QocmVxdWVzdCwgY29uZmlnLCBwZXJmb3JtYW5jZUNsaWVudCwgbG9nZ2VyKSB7XHJcbiAgICBwZXJmb3JtYW5jZUNsaWVudC5hZGRRdWV1ZU1lYXN1cmVtZW50KFBlcmZvcm1hbmNlRXZlbnRzLkluaXRpYWxpemVCYXNlUmVxdWVzdCwgcmVxdWVzdC5jb3JyZWxhdGlvbklkKTtcclxuICAgIGNvbnN0IGF1dGhvcml0eSA9IHJlcXVlc3QuYXV0aG9yaXR5IHx8IGNvbmZpZy5hdXRoLmF1dGhvcml0eTtcclxuICAgIGNvbnN0IHNjb3BlcyA9IFsuLi4oKHJlcXVlc3QgJiYgcmVxdWVzdC5zY29wZXMpIHx8IFtdKV07XHJcbiAgICBjb25zdCB2YWxpZGF0ZWRSZXF1ZXN0ID0ge1xyXG4gICAgICAgIC4uLnJlcXVlc3QsXHJcbiAgICAgICAgY29ycmVsYXRpb25JZDogcmVxdWVzdC5jb3JyZWxhdGlvbklkLFxyXG4gICAgICAgIGF1dGhvcml0eSxcclxuICAgICAgICBzY29wZXMsXHJcbiAgICB9O1xyXG4gICAgLy8gU2V0IGF1dGhlbnRpY2F0aW9uU2NoZW1lIHRvIEJFQVJFUiBpZiBub3QgZXhwbGljaXRseSBzZXQgaW4gdGhlIHJlcXVlc3RcclxuICAgIGlmICghdmFsaWRhdGVkUmVxdWVzdC5hdXRoZW50aWNhdGlvblNjaGVtZSkge1xyXG4gICAgICAgIHZhbGlkYXRlZFJlcXVlc3QuYXV0aGVudGljYXRpb25TY2hlbWUgPSBBdXRoZW50aWNhdGlvblNjaGVtZS5CRUFSRVI7XHJcbiAgICAgICAgbG9nZ2VyLnZlcmJvc2UoJ0F1dGhlbnRpY2F0aW9uIFNjaGVtZSB3YXNuXFwndCBleHBsaWNpdGx5IHNldCBpbiByZXF1ZXN0LCBkZWZhdWx0aW5nIHRvIFwiQmVhcmVyXCIgcmVxdWVzdCcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKHZhbGlkYXRlZFJlcXVlc3QuYXV0aGVudGljYXRpb25TY2hlbWUgPT09IEF1dGhlbnRpY2F0aW9uU2NoZW1lLlNTSCkge1xyXG4gICAgICAgICAgICBpZiAoIXJlcXVlc3Quc3NoSndrKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMubWlzc2luZ1NzaEp3ayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LnNzaEtpZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKENsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLm1pc3NpbmdTc2hLaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZ2dlci52ZXJib3NlKGBBdXRoZW50aWNhdGlvbiBTY2hlbWUgc2V0IHRvIFwiJHt2YWxpZGF0ZWRSZXF1ZXN0LmF1dGhlbnRpY2F0aW9uU2NoZW1lfVwiIGFzIGNvbmZpZ3VyZWQgaW4gQXV0aCByZXF1ZXN0YCk7XHJcbiAgICB9XHJcbiAgICAvLyBTZXQgcmVxdWVzdGVkIGNsYWltcyBoYXNoIGlmIGNsYWltcy1iYXNlZCBjYWNoaW5nIGlzIGVuYWJsZWQgYW5kIGNsYWltcyB3ZXJlIHJlcXVlc3RlZFxyXG4gICAgaWYgKGNvbmZpZy5jYWNoZS5jbGFpbXNCYXNlZENhY2hpbmdFbmFibGVkICYmXHJcbiAgICAgICAgcmVxdWVzdC5jbGFpbXMgJiZcclxuICAgICAgICAvLyBDaGVja3MgZm9yIGVtcHR5IHN0cmluZ2lmaWVkIG9iamVjdCBcInt9XCIgd2hpY2ggZG9lc24ndCBxdWFsaWZ5IGFzIHJlcXVlc3RlZCBjbGFpbXNcclxuICAgICAgICAhU3RyaW5nVXRpbHMuaXNFbXB0eU9iaihyZXF1ZXN0LmNsYWltcykpIHtcclxuICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LnJlcXVlc3RlZENsYWltc0hhc2ggPSBhd2FpdCBoYXNoU3RyaW5nKHJlcXVlc3QuY2xhaW1zKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWxpZGF0ZWRSZXF1ZXN0O1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVTaWxlbnRSZXF1ZXN0KHJlcXVlc3QsIGFjY291bnQsIGNvbmZpZywgcGVyZm9ybWFuY2VDbGllbnQsIGxvZ2dlcikge1xyXG4gICAgcGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5Jbml0aWFsaXplU2lsZW50UmVxdWVzdCwgcmVxdWVzdC5jb3JyZWxhdGlvbklkKTtcclxuICAgIGNvbnN0IGJhc2VSZXF1ZXN0ID0gYXdhaXQgaW52b2tlQXN5bmMoaW5pdGlhbGl6ZUJhc2VSZXF1ZXN0LCBQZXJmb3JtYW5jZUV2ZW50cy5Jbml0aWFsaXplQmFzZVJlcXVlc3QsIGxvZ2dlciwgcGVyZm9ybWFuY2VDbGllbnQsIHJlcXVlc3QuY29ycmVsYXRpb25JZCkocmVxdWVzdCwgY29uZmlnLCBwZXJmb3JtYW5jZUNsaWVudCwgbG9nZ2VyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4ucmVxdWVzdCxcclxuICAgICAgICAuLi5iYXNlUmVxdWVzdCxcclxuICAgICAgICBhY2NvdW50OiBhY2NvdW50LFxyXG4gICAgICAgIGZvcmNlUmVmcmVzaDogcmVxdWVzdC5mb3JjZVJlZnJlc2ggfHwgZmFsc2UsXHJcbiAgICB9O1xyXG59XG5cbmV4cG9ydCB7IGluaXRpYWxpemVCYXNlUmVxdWVzdCwgaW5pdGlhbGl6ZVNpbGVudFJlcXVlc3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcXVlc3RIZWxwZXJzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJQZXJmb3JtYW5jZUV2ZW50cyIsImludm9rZUFzeW5jIiwiQXV0aGVudGljYXRpb25TY2hlbWUiLCJjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IiLCJDbGllbnRDb25maWd1cmF0aW9uRXJyb3JDb2RlcyIsIlN0cmluZ1V0aWxzIiwiaGFzaFN0cmluZyIsImluaXRpYWxpemVCYXNlUmVxdWVzdCIsInJlcXVlc3QiLCJjb25maWciLCJwZXJmb3JtYW5jZUNsaWVudCIsImxvZ2dlciIsImFkZFF1ZXVlTWVhc3VyZW1lbnQiLCJJbml0aWFsaXplQmFzZVJlcXVlc3QiLCJjb3JyZWxhdGlvbklkIiwiYXV0aG9yaXR5IiwiYXV0aCIsInNjb3BlcyIsInZhbGlkYXRlZFJlcXVlc3QiLCJhdXRoZW50aWNhdGlvblNjaGVtZSIsIkJFQVJFUiIsInZlcmJvc2UiLCJTU0giLCJzc2hKd2siLCJtaXNzaW5nU3NoSndrIiwic3NoS2lkIiwibWlzc2luZ1NzaEtpZCIsImNhY2hlIiwiY2xhaW1zQmFzZWRDYWNoaW5nRW5hYmxlZCIsImNsYWltcyIsImlzRW1wdHlPYmoiLCJyZXF1ZXN0ZWRDbGFpbXNIYXNoIiwiaW5pdGlhbGl6ZVNpbGVudFJlcXVlc3QiLCJhY2NvdW50IiwiSW5pdGlhbGl6ZVNpbGVudFJlcXVlc3QiLCJiYXNlUmVxdWVzdCIsImZvcmNlUmVmcmVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializeResponse: () => (/* binding */ deserializeResponse),\n/* harmony export */   validateInteractionType: () => (/* binding */ validateInteractionType)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserProtocolUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function deserializeResponse(responseString, responseLocation, logger) {\n    // Deserialize hash fragment response parameters.\n    const serverParams = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.getDeserializedResponse(responseString);\n    if (!serverParams) {\n        if (!_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.stripLeadingHashOrQuery(responseString)) {\n            // Hash or Query string is empty\n            logger.error(`The request has returned to the redirectUri but a ${responseLocation} is not present. It's likely that the ${responseLocation} has been removed or the page has been redirected by code running on the redirectUri page.`);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.hashEmptyError);\n        } else {\n            logger.error(`A ${responseLocation} is present in the iframe but it does not contain known properties. It's likely that the ${responseLocation} has been replaced by code running on the redirectUri page.`);\n            logger.errorPii(`The ${responseLocation} detected is: ${responseString}`);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.hashDoesNotContainKnownProperties);\n        }\n    }\n    return serverParams;\n}\n/**\r\n * Returns the interaction type that the response object belongs to\r\n */ function validateInteractionType(response, browserCrypto, interactionType) {\n    if (!response.state) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noStateInHash);\n    }\n    const platformStateObj = (0,_utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.extractBrowserRequestState)(browserCrypto, response.state);\n    if (!platformStateObj) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.unableToParseState);\n    }\n    if (platformStateObj.interactionType !== interactionType) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.stateInteractionTypeMismatch);\n    }\n}\n //# sourceMappingURL=ResponseHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3Jlc3BvbnNlL1Jlc3BvbnNlSGFuZGxlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3NEO0FBQ2lCO0FBQ1E7QUFDeUY7QUFFeEs7OztDQUdDLEdBQ0QsU0FBU1Esb0JBQW9CQyxjQUFjLEVBQUVDLGdCQUFnQixFQUFFQyxNQUFNO0lBQ2pFLGlEQUFpRDtJQUNqRCxNQUFNQyxlQUFlWiwrRUFBZ0MsQ0FBQ1M7SUFDdEQsSUFBSSxDQUFDRyxjQUFjO1FBQ2YsSUFBSSxDQUFDWiwrRUFBZ0MsQ0FBQ1MsaUJBQWlCO1lBQ25ELGdDQUFnQztZQUNoQ0UsT0FBT0ksS0FBSyxDQUFDLENBQUMsa0RBQWtELEVBQUVMLGlCQUFpQixzQ0FBc0MsRUFBRUEsaUJBQWlCLDBGQUEwRixDQUFDO1lBQ3ZPLE1BQU1ULG1GQUFzQkEsQ0FBQ0UsNEVBQWNBO1FBQy9DLE9BQ0s7WUFDRFEsT0FBT0ksS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFTCxpQkFBaUIseUZBQXlGLEVBQUVBLGlCQUFpQiwyREFBMkQsQ0FBQztZQUMzTUMsT0FBT0ssUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFTixpQkFBaUIsY0FBYyxFQUFFRCxlQUFlLENBQUM7WUFDeEUsTUFBTVIsbUZBQXNCQSxDQUFDRywrRkFBaUNBO1FBQ2xFO0lBQ0o7SUFDQSxPQUFPUTtBQUNYO0FBQ0E7O0NBRUMsR0FDRCxTQUFTSyx3QkFBd0JDLFFBQVEsRUFBRUMsYUFBYSxFQUFFQyxlQUFlO0lBQ3JFLElBQUksQ0FBQ0YsU0FBU0csS0FBSyxFQUFFO1FBQ2pCLE1BQU1wQixtRkFBc0JBLENBQUNJLDJFQUFhQTtJQUM5QztJQUNBLE1BQU1pQixtQkFBbUJwQiwyRkFBMEJBLENBQUNpQixlQUFlRCxTQUFTRyxLQUFLO0lBQ2pGLElBQUksQ0FBQ0Msa0JBQWtCO1FBQ25CLE1BQU1yQixtRkFBc0JBLENBQUNLLGdGQUFrQkE7SUFDbkQ7SUFDQSxJQUFJZ0IsaUJBQWlCRixlQUFlLEtBQUtBLGlCQUFpQjtRQUN0RCxNQUFNbkIsbUZBQXNCQSxDQUFDTSwwRkFBNEJBO0lBQzdEO0FBQ0o7QUFFd0QsQ0FDeEQsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3Jlc3BvbnNlL1Jlc3BvbnNlSGFuZGxlci5tanM/YjYxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4xIDIwMjUtMDEtMTQgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IFVybFV0aWxzIH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL2Jyb3dzZXInO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3NlckF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IGV4dHJhY3RCcm93c2VyUmVxdWVzdFN0YXRlIH0gZnJvbSAnLi4vdXRpbHMvQnJvd3NlclByb3RvY29sVXRpbHMubWpzJztcbmltcG9ydCB7IGhhc2hFbXB0eUVycm9yLCBoYXNoRG9lc05vdENvbnRhaW5Lbm93blByb3BlcnRpZXMsIG5vU3RhdGVJbkhhc2gsIHVuYWJsZVRvUGFyc2VTdGF0ZSwgc3RhdGVJbnRlcmFjdGlvblR5cGVNaXNtYXRjaCB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVzZXJpYWxpemVSZXNwb25zZShyZXNwb25zZVN0cmluZywgcmVzcG9uc2VMb2NhdGlvbiwgbG9nZ2VyKSB7XHJcbiAgICAvLyBEZXNlcmlhbGl6ZSBoYXNoIGZyYWdtZW50IHJlc3BvbnNlIHBhcmFtZXRlcnMuXHJcbiAgICBjb25zdCBzZXJ2ZXJQYXJhbXMgPSBVcmxVdGlscy5nZXREZXNlcmlhbGl6ZWRSZXNwb25zZShyZXNwb25zZVN0cmluZyk7XHJcbiAgICBpZiAoIXNlcnZlclBhcmFtcykge1xyXG4gICAgICAgIGlmICghVXJsVXRpbHMuc3RyaXBMZWFkaW5nSGFzaE9yUXVlcnkocmVzcG9uc2VTdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIC8vIEhhc2ggb3IgUXVlcnkgc3RyaW5nIGlzIGVtcHR5XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgVGhlIHJlcXVlc3QgaGFzIHJldHVybmVkIHRvIHRoZSByZWRpcmVjdFVyaSBidXQgYSAke3Jlc3BvbnNlTG9jYXRpb259IGlzIG5vdCBwcmVzZW50LiBJdCdzIGxpa2VseSB0aGF0IHRoZSAke3Jlc3BvbnNlTG9jYXRpb259IGhhcyBiZWVuIHJlbW92ZWQgb3IgdGhlIHBhZ2UgaGFzIGJlZW4gcmVkaXJlY3RlZCBieSBjb2RlIHJ1bm5pbmcgb24gdGhlIHJlZGlyZWN0VXJpIHBhZ2UuYCk7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IoaGFzaEVtcHR5RXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBBICR7cmVzcG9uc2VMb2NhdGlvbn0gaXMgcHJlc2VudCBpbiB0aGUgaWZyYW1lIGJ1dCBpdCBkb2VzIG5vdCBjb250YWluIGtub3duIHByb3BlcnRpZXMuIEl0J3MgbGlrZWx5IHRoYXQgdGhlICR7cmVzcG9uc2VMb2NhdGlvbn0gaGFzIGJlZW4gcmVwbGFjZWQgYnkgY29kZSBydW5uaW5nIG9uIHRoZSByZWRpcmVjdFVyaSBwYWdlLmApO1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3JQaWkoYFRoZSAke3Jlc3BvbnNlTG9jYXRpb259IGRldGVjdGVkIGlzOiAke3Jlc3BvbnNlU3RyaW5nfWApO1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKGhhc2hEb2VzTm90Q29udGFpbktub3duUHJvcGVydGllcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlcnZlclBhcmFtcztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgaW50ZXJhY3Rpb24gdHlwZSB0aGF0IHRoZSByZXNwb25zZSBvYmplY3QgYmVsb25ncyB0b1xyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVJbnRlcmFjdGlvblR5cGUocmVzcG9uc2UsIGJyb3dzZXJDcnlwdG8sIGludGVyYWN0aW9uVHlwZSkge1xyXG4gICAgaWYgKCFyZXNwb25zZS5zdGF0ZSkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3Iobm9TdGF0ZUluSGFzaCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwbGF0Zm9ybVN0YXRlT2JqID0gZXh0cmFjdEJyb3dzZXJSZXF1ZXN0U3RhdGUoYnJvd3NlckNyeXB0bywgcmVzcG9uc2Uuc3RhdGUpO1xyXG4gICAgaWYgKCFwbGF0Zm9ybVN0YXRlT2JqKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcih1bmFibGVUb1BhcnNlU3RhdGUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHBsYXRmb3JtU3RhdGVPYmouaW50ZXJhY3Rpb25UeXBlICE9PSBpbnRlcmFjdGlvblR5cGUpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKHN0YXRlSW50ZXJhY3Rpb25UeXBlTWlzbWF0Y2gpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IGRlc2VyaWFsaXplUmVzcG9uc2UsIHZhbGlkYXRlSW50ZXJhY3Rpb25UeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXNwb25zZUhhbmRsZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlVybFV0aWxzIiwiY3JlYXRlQnJvd3NlckF1dGhFcnJvciIsImV4dHJhY3RCcm93c2VyUmVxdWVzdFN0YXRlIiwiaGFzaEVtcHR5RXJyb3IiLCJoYXNoRG9lc05vdENvbnRhaW5Lbm93blByb3BlcnRpZXMiLCJub1N0YXRlSW5IYXNoIiwidW5hYmxlVG9QYXJzZVN0YXRlIiwic3RhdGVJbnRlcmFjdGlvblR5cGVNaXNtYXRjaCIsImRlc2VyaWFsaXplUmVzcG9uc2UiLCJyZXNwb25zZVN0cmluZyIsInJlc3BvbnNlTG9jYXRpb24iLCJsb2dnZXIiLCJzZXJ2ZXJQYXJhbXMiLCJnZXREZXNlcmlhbGl6ZWRSZXNwb25zZSIsInN0cmlwTGVhZGluZ0hhc2hPclF1ZXJ5IiwiZXJyb3IiLCJlcnJvclBpaSIsInZhbGlkYXRlSW50ZXJhY3Rpb25UeXBlIiwicmVzcG9uc2UiLCJicm93c2VyQ3J5cHRvIiwiaW50ZXJhY3Rpb25UeXBlIiwic3RhdGUiLCJwbGF0Zm9ybVN0YXRlT2JqIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiId: () => (/* binding */ ApiId),\n/* harmony export */   BROWSER_PERF_ENABLED_KEY: () => (/* binding */ BROWSER_PERF_ENABLED_KEY),\n/* harmony export */   BrowserCacheLocation: () => (/* binding */ BrowserCacheLocation),\n/* harmony export */   BrowserConstants: () => (/* binding */ BrowserConstants),\n/* harmony export */   CacheLookupPolicy: () => (/* binding */ CacheLookupPolicy),\n/* harmony export */   DB_NAME: () => (/* binding */ DB_NAME),\n/* harmony export */   DB_TABLE_NAME: () => (/* binding */ DB_TABLE_NAME),\n/* harmony export */   DB_VERSION: () => (/* binding */ DB_VERSION),\n/* harmony export */   DEFAULT_REQUEST: () => (/* binding */ DEFAULT_REQUEST),\n/* harmony export */   HTTP_REQUEST_TYPE: () => (/* binding */ HTTP_REQUEST_TYPE),\n/* harmony export */   InMemoryCacheKeys: () => (/* binding */ InMemoryCacheKeys),\n/* harmony export */   InteractionStatus: () => (/* binding */ InteractionStatus),\n/* harmony export */   InteractionType: () => (/* binding */ InteractionType),\n/* harmony export */   KEY_FORMAT_JWK: () => (/* binding */ KEY_FORMAT_JWK),\n/* harmony export */   LOG_LEVEL_CACHE_KEY: () => (/* binding */ LOG_LEVEL_CACHE_KEY),\n/* harmony export */   LOG_PII_CACHE_KEY: () => (/* binding */ LOG_PII_CACHE_KEY),\n/* harmony export */   NativeConstants: () => (/* binding */ NativeConstants),\n/* harmony export */   NativeExtensionMethod: () => (/* binding */ NativeExtensionMethod),\n/* harmony export */   StaticCacheKeys: () => (/* binding */ StaticCacheKeys),\n/* harmony export */   TemporaryCacheKeys: () => (/* binding */ TemporaryCacheKeys),\n/* harmony export */   WrapperSKU: () => (/* binding */ WrapperSKU),\n/* harmony export */   iFrameRenewalPolicies: () => (/* binding */ iFrameRenewalPolicies)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Constants\r\n */ const BrowserConstants = {\n    /**\r\n     * Interaction in progress cache value\r\n     */ INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n    /**\r\n     * Invalid grant error code\r\n     */ INVALID_GRANT_ERROR: \"invalid_grant\",\n    /**\r\n     * Default popup window width\r\n     */ POPUP_WIDTH: 483,\n    /**\r\n     * Default popup window height\r\n     */ POPUP_HEIGHT: 600,\n    /**\r\n     * Name of the popup window starts with\r\n     */ POPUP_NAME_PREFIX: \"msal\",\n    /**\r\n     * Default popup monitor poll interval in milliseconds\r\n     */ DEFAULT_POLL_INTERVAL_MS: 30,\n    /**\r\n     * Msal-browser SKU\r\n     */ MSAL_SKU: \"msal.js.browser\"\n};\nconst NativeConstants = {\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n    MATS_TELEMETRY: \"MATS\"\n};\nconst NativeExtensionMethod = {\n    HandshakeRequest: \"Handshake\",\n    HandshakeResponse: \"HandshakeResponse\",\n    GetToken: \"GetToken\",\n    Response: \"Response\"\n};\nconst BrowserCacheLocation = {\n    LocalStorage: \"localStorage\",\n    SessionStorage: \"sessionStorage\",\n    MemoryStorage: \"memoryStorage\"\n};\n/**\r\n * HTTP Request types supported by MSAL.\r\n */ const HTTP_REQUEST_TYPE = {\n    GET: \"GET\",\n    POST: \"POST\"\n};\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */ const TemporaryCacheKeys = {\n    AUTHORITY: \"authority\",\n    ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n    SESSION_STATE: \"session.state\",\n    REQUEST_STATE: \"request.state\",\n    NONCE_IDTOKEN: \"nonce.id_token\",\n    ORIGIN_URI: \"request.origin\",\n    RENEW_STATUS: \"token.renew.status\",\n    URL_HASH: \"urlHash\",\n    REQUEST_PARAMS: \"request.params\",\n    SCOPES: \"scopes\",\n    INTERACTION_STATUS_KEY: \"interaction.status\",\n    CCS_CREDENTIAL: \"ccs.credential\",\n    CORRELATION_ID: \"request.correlationId\",\n    NATIVE_REQUEST: \"request.native\",\n    REDIRECT_CONTEXT: \"request.redirect.context\"\n};\nconst StaticCacheKeys = {\n    ACCOUNT_KEYS: \"msal.account.keys\",\n    TOKEN_KEYS: \"msal.token.keys\"\n};\n/**\r\n * Cache keys stored in-memory\r\n */ const InMemoryCacheKeys = {\n    WRAPPER_SKU: \"wrapper.sku\",\n    WRAPPER_VER: \"wrapper.version\"\n};\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */ const ApiId = {\n    acquireTokenRedirect: 861,\n    acquireTokenPopup: 862,\n    ssoSilent: 863,\n    acquireTokenSilent_authCode: 864,\n    handleRedirectPromise: 865,\n    acquireTokenByCode: 866,\n    acquireTokenSilent_silentFlow: 61,\n    logout: 961,\n    logoutPopup: 962\n};\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */ var InteractionType;\n(function(InteractionType) {\n    InteractionType[\"Redirect\"] = \"redirect\";\n    InteractionType[\"Popup\"] = \"popup\";\n    InteractionType[\"Silent\"] = \"silent\";\n    InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */ const InteractionStatus = {\n    /**\r\n     * Initial status before interaction occurs\r\n     */ Startup: \"startup\",\n    /**\r\n     * Status set when all login calls occuring\r\n     */ Login: \"login\",\n    /**\r\n     * Status set when logout call occuring\r\n     */ Logout: \"logout\",\n    /**\r\n     * Status set for acquireToken calls\r\n     */ AcquireToken: \"acquireToken\",\n    /**\r\n     * Status set for ssoSilent calls\r\n     */ SsoSilent: \"ssoSilent\",\n    /**\r\n     * Status set when handleRedirect in progress\r\n     */ HandleRedirect: \"handleRedirect\",\n    /**\r\n     * Status set when interaction is complete\r\n     */ None: \"none\"\n};\nconst DEFAULT_REQUEST = {\n    scopes: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */ const KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n    React: \"@azure/msal-react\",\n    Angular: \"@azure/msal-angular\"\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n     */ Default: 0,\n    /*\r\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n     * refresh tokens.\r\n     */ AccessToken: 1,\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n     * will not be renewed and acquireTokenSilent will fail.\r\n     */ AccessTokenAndRefreshToken: 2,\n    /*\r\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n     * renewed and acquireTokenSilent will fail.\r\n     */ RefreshToken: 3,\n    /*\r\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n     * setting \"forceRefresh: true\".\r\n     */ RefreshTokenAndNetwork: 4,\n    /*\r\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n     * always fail if 3rd party cookies are blocked by the browser.\r\n     */ Skip: 5\n};\nconst iFrameRenewalPolicies = [\n    CacheLookupPolicy.Default,\n    CacheLookupPolicy.Skip,\n    CacheLookupPolicy.RefreshTokenAndNetwork\n];\nconst LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\nconst LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\nconst BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\n //# sourceMappingURL=BrowserConstants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractBrowserRequestState: () => (/* binding */ extractBrowserRequestState)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Extracts the BrowserStateObject from the state string.\r\n * @param browserCrypto\r\n * @param state\r\n */ function extractBrowserRequestState(browserCrypto, state) {\n    if (!state) {\n        return null;\n    }\n    try {\n        const requestStateObj = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.ProtocolUtils.parseRequestState(browserCrypto, state);\n        return requestStateObj.libraryState.meta;\n    } catch (e) {\n        throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n    }\n}\n //# sourceMappingURL=BrowserProtocolUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3V0aWxzL0Jyb3dzZXJQcm90b2NvbFV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3dHO0FBRXhHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTRywyQkFBMkJDLGFBQWEsRUFBRUMsS0FBSztJQUNwRCxJQUFJLENBQUNBLE9BQU87UUFDUixPQUFPO0lBQ1g7SUFDQSxJQUFJO1FBQ0EsTUFBTUMsa0JBQWtCTixxRUFBYUEsQ0FBQ08saUJBQWlCLENBQUNILGVBQWVDO1FBQ3ZFLE9BQU9DLGdCQUFnQkUsWUFBWSxDQUFDQyxJQUFJO0lBQzVDLEVBQ0EsT0FBT0MsR0FBRztRQUNOLE1BQU1ULGlGQUFxQkEsQ0FBQ0Msb0VBQWlDO0lBQ2pFO0FBQ0o7QUFFc0MsQ0FDdEMsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3V0aWxzL0Jyb3dzZXJQcm90b2NvbFV0aWxzLm1qcz8yMWZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjEgMjAyNS0wMS0xNCAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgUHJvdG9jb2xVdGlscywgY3JlYXRlQ2xpZW50QXV0aEVycm9yLCBDbGllbnRBdXRoRXJyb3JDb2RlcyB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFeHRyYWN0cyB0aGUgQnJvd3NlclN0YXRlT2JqZWN0IGZyb20gdGhlIHN0YXRlIHN0cmluZy5cclxuICogQHBhcmFtIGJyb3dzZXJDcnlwdG9cclxuICogQHBhcmFtIHN0YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBleHRyYWN0QnJvd3NlclJlcXVlc3RTdGF0ZShicm93c2VyQ3J5cHRvLCBzdGF0ZSkge1xyXG4gICAgaWYgKCFzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0U3RhdGVPYmogPSBQcm90b2NvbFV0aWxzLnBhcnNlUmVxdWVzdFN0YXRlKGJyb3dzZXJDcnlwdG8sIHN0YXRlKTtcclxuICAgICAgICByZXR1cm4gcmVxdWVzdFN0YXRlT2JqLmxpYnJhcnlTdGF0ZS5tZXRhO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yQ29kZXMuaW52YWxpZFN0YXRlKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBleHRyYWN0QnJvd3NlclJlcXVlc3RTdGF0ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnJvd3NlclByb3RvY29sVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlByb3RvY29sVXRpbHMiLCJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJDbGllbnRBdXRoRXJyb3JDb2RlcyIsImV4dHJhY3RCcm93c2VyUmVxdWVzdFN0YXRlIiwiYnJvd3NlckNyeXB0byIsInN0YXRlIiwicmVxdWVzdFN0YXRlT2JqIiwicGFyc2VSZXF1ZXN0U3RhdGUiLCJsaWJyYXJ5U3RhdGUiLCJtZXRhIiwiZSIsImludmFsaWRTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockAPICallsBeforeInitialize: () => (/* binding */ blockAPICallsBeforeInitialize),\n/* harmony export */   blockAcquireTokenInPopups: () => (/* binding */ blockAcquireTokenInPopups),\n/* harmony export */   blockNonBrowserEnvironment: () => (/* binding */ blockNonBrowserEnvironment),\n/* harmony export */   blockRedirectInIframe: () => (/* binding */ blockRedirectInIframe),\n/* harmony export */   blockReloadInHiddenIframes: () => (/* binding */ blockReloadInHiddenIframes),\n/* harmony export */   clearHash: () => (/* binding */ clearHash),\n/* harmony export */   createGuid: () => (/* binding */ createGuid),\n/* harmony export */   getCurrentUri: () => (/* binding */ getCurrentUri),\n/* harmony export */   getHomepage: () => (/* binding */ getHomepage),\n/* harmony export */   invoke: () => (/* reexport safe */ _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.invoke),\n/* harmony export */   invokeAsync: () => (/* reexport safe */ _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.invokeAsync),\n/* harmony export */   isInIframe: () => (/* binding */ isInIframe),\n/* harmony export */   isInPopup: () => (/* binding */ isInPopup),\n/* harmony export */   preconnect: () => (/* binding */ preconnect),\n/* harmony export */   preflightCheck: () => (/* binding */ preflightCheck),\n/* harmony export */   redirectPreflightCheck: () => (/* binding */ redirectPreflightCheck),\n/* harmony export */   replaceHash: () => (/* binding */ replaceHash)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.1 2025-01-14 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Clears hash from window url.\r\n */ function clearHash(contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = \"\";\n    if (typeof contentWindow.history.replaceState === \"function\") {\n        // Full removes \"#\" from url\n        contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n    }\n}\n/**\r\n * Replaces current hash with hash from provided url\r\n */ function replaceHash(url) {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n/**\r\n * Returns boolean of whether the current window is in an iframe or not.\r\n */ function isInIframe() {\n    return window.parent !== window;\n}\n/**\r\n * Returns boolean of whether or not the current window is a popup opened by msal\r\n */ function isInPopup() {\n    return  false && 0;\n}\n// #endregion\n/**\r\n * Returns current window URL as redirect uri\r\n */ function getCurrentUri() {\n    return  false ? 0 : \"\";\n}\n/**\r\n * Gets the homepage url for the current window location.\r\n */ function getHomepage() {\n    const currentUrl = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n/**\r\n * Throws error if we have completed an auth and are\r\n * attempting another auth request inside an iframe.\r\n */ function blockReloadInHiddenIframes() {\n    const isResponseHash = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.UrlString.hashContainsKnownProperties(window.location.hash);\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && isInIframe()) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.blockIframeReload);\n    }\n}\n/**\r\n * Block redirect operations in iframes unless explicitly allowed\r\n * @param interactionType Interaction type for the request\r\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n */ function blockRedirectInIframe(allowRedirectInIframe) {\n    if (isInIframe() && !allowRedirectInIframe) {\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.redirectInIframe);\n    }\n}\n/**\r\n * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n */ function blockAcquireTokenInPopups() {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (isInPopup()) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.blockNestedPopups);\n    }\n}\n/**\r\n * Throws error if token requests are made in non-browser environment\r\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n */ function blockNonBrowserEnvironment() {\n    if (true) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.nonBrowserEnvironment);\n    }\n}\n/**\r\n * Throws error if initialize hasn't been called\r\n * @param initialized\r\n */ function blockAPICallsBeforeInitialize(initialized) {\n    if (!initialized) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.uninitializedPublicClientApplication);\n    }\n}\n/**\r\n * Helper to validate app environment before making an auth request\r\n * @param initialized\r\n */ function preflightCheck(initialized) {\n    // Block request if not in browser environment\n    blockNonBrowserEnvironment();\n    // Block auth requests inside a hidden iframe\n    blockReloadInHiddenIframes();\n    // Block redirectUri opened in a popup from calling MSAL APIs\n    blockAcquireTokenInPopups();\n    // Block token acquisition before initialize has been called\n    blockAPICallsBeforeInitialize(initialized);\n}\n/**\r\n * Helper to validate app enviornment before making redirect request\r\n * @param initialized\r\n * @param config\r\n */ function redirectPreflightCheck(initialized, config) {\n    preflightCheck(initialized);\n    blockRedirectInIframe(config.system.allowRedirectInIframe);\n    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n    if (config.cache.cacheLocation === _BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserCacheLocation.MemoryStorage && !config.cache.storeAuthStateInCookie) {\n        throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.inMemRedirectUnavailable);\n    }\n}\n/**\r\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\r\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\r\n * @returns\r\n */ function preconnect(authority) {\n    const link = document.createElement(\"link\");\n    link.rel = \"preconnect\";\n    link.href = new URL(authority).origin;\n    link.crossOrigin = \"anonymous\";\n    document.head.appendChild(link);\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n    window.setTimeout(()=>{\n        try {\n            document.head.removeChild(link);\n        } catch  {}\n    }, 10000); // 10s Timeout\n}\n/**\r\n * Wrapper function that creates a UUID v7 from the current timestamp.\r\n * @returns {string}\r\n */ function createGuid() {\n    return (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.createNewGuid)();\n}\n //# sourceMappingURL=BrowserUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildTenantProfile: () => (/* binding */ buildTenantProfile),\n/* harmony export */   tenantIdMatchesHomeTenant: () => (/* binding */ tenantIdMatchesHomeTenant),\n/* harmony export */   updateAccountTenantProfileData: () => (/* binding */ updateAccountTenantProfileData)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */ function tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\n    return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(\".\")[1];\n}\n/**\r\n * Build tenant profile\r\n * @param homeAccountId - Home account identifier for this account object\r\n * @param localAccountId - Local account identifer for this account object\r\n * @param tenantId - Full tenant or organizational id that this account belongs to\r\n * @param idTokenClaims - Claims from the ID token\r\n * @returns\r\n */ function buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {\n    if (idTokenClaims) {\n        const { oid, sub, tid, name, tfp, acr } = idTokenClaims;\n        /**\r\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n         */ const tenantId = tid || tfp || acr || \"\";\n        return {\n            tenantId: tenantId,\n            localAccountId: oid || sub || \"\",\n            name: name,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n        };\n    } else {\n        return {\n            tenantId,\n            localAccountId,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n        };\n    }\n}\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */ function updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {\n    let updatedAccountInfo = baseAccountInfo;\n    // Tenant Profile overrides passed in account info\n    if (tenantProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\n        updatedAccountInfo = {\n            ...baseAccountInfo,\n            ...tenantProfileOverride\n        };\n    }\n    // ID token claims override passed in account info and tenant profile\n    if (idTokenClaims) {\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...claimsSourcedTenantProfile } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);\n        updatedAccountInfo = {\n            ...updatedAccountInfo,\n            ...claimsSourcedTenantProfile,\n            idTokenClaims: idTokenClaims,\n            idToken: idTokenSecret\n        };\n        return updatedAccountInfo;\n    }\n    return updatedAccountInfo;\n}\n //# sourceMappingURL=AccountInfo.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BY2NvdW50SW5mby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7Ozs7O0NBS0MsR0FDRCxTQUFTQSwwQkFBMEJDLFFBQVEsRUFBRUMsYUFBYTtJQUN0RCxPQUFRLENBQUMsQ0FBQ0QsWUFDTixDQUFDLENBQUNDLGlCQUNGRCxhQUFhQyxjQUFjQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDaEQ7QUFDQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsbUJBQW1CRixhQUFhLEVBQUVHLGNBQWMsRUFBRUosUUFBUSxFQUFFSyxhQUFhO0lBQzlFLElBQUlBLGVBQWU7UUFDZixNQUFNLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR047UUFDMUM7Ozs7O1NBS0MsR0FDRCxNQUFNTCxXQUFXUSxPQUFPRSxPQUFPQyxPQUFPO1FBQ3RDLE9BQU87WUFDSFgsVUFBVUE7WUFDVkksZ0JBQWdCRSxPQUFPQyxPQUFPO1lBQzlCRSxNQUFNQTtZQUNORyxjQUFjYiwwQkFBMEJDLFVBQVVDO1FBQ3REO0lBQ0osT0FDSztRQUNELE9BQU87WUFDSEQ7WUFDQUk7WUFDQVEsY0FBY2IsMEJBQTBCQyxVQUFVQztRQUN0RDtJQUNKO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNZLCtCQUErQkMsZUFBZSxFQUFFQyxhQUFhLEVBQUVWLGFBQWEsRUFBRVcsYUFBYTtJQUNoRyxJQUFJQyxxQkFBcUJIO0lBQ3pCLGtEQUFrRDtJQUNsRCxJQUFJQyxlQUFlO1FBQ2YsNkRBQTZEO1FBQzdELE1BQU0sRUFBRUgsWUFBWSxFQUFFLEdBQUdNLHVCQUF1QixHQUFHSDtRQUNuREUscUJBQXFCO1lBQUUsR0FBR0gsZUFBZTtZQUFFLEdBQUdJLHFCQUFxQjtRQUFDO0lBQ3hFO0lBQ0EscUVBQXFFO0lBQ3JFLElBQUliLGVBQWU7UUFDZixxR0FBcUc7UUFDckcsNkRBQTZEO1FBQzdELE1BQU0sRUFBRU8sWUFBWSxFQUFFLEdBQUdPLDRCQUE0QixHQUFHaEIsbUJBQW1CVyxnQkFBZ0JiLGFBQWEsRUFBRWEsZ0JBQWdCVixjQUFjLEVBQUVVLGdCQUFnQmQsUUFBUSxFQUFFSztRQUNwS1kscUJBQXFCO1lBQ2pCLEdBQUdBLGtCQUFrQjtZQUNyQixHQUFHRSwwQkFBMEI7WUFDN0JkLGVBQWVBO1lBQ2ZlLFNBQVNKO1FBQ2I7UUFDQSxPQUFPQztJQUNYO0lBQ0EsT0FBT0E7QUFDWDtBQUV5RixDQUN6Rix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0FjY291bnRJbmZvLm1qcz9hZGY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGVuYW50SWQgbWF0Y2hlcyB0aGUgdXRpZCBwb3J0aW9uIG9mIGhvbWVBY2NvdW50SWRcclxuICogQHBhcmFtIHRlbmFudElkXHJcbiAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZW5hbnRJZE1hdGNoZXNIb21lVGVuYW50KHRlbmFudElkLCBob21lQWNjb3VudElkKSB7XHJcbiAgICByZXR1cm4gKCEhdGVuYW50SWQgJiZcclxuICAgICAgICAhIWhvbWVBY2NvdW50SWQgJiZcclxuICAgICAgICB0ZW5hbnRJZCA9PT0gaG9tZUFjY291bnRJZC5zcGxpdChcIi5cIilbMV0pO1xyXG59XHJcbi8qKlxyXG4gKiBCdWlsZCB0ZW5hbnQgcHJvZmlsZVxyXG4gKiBAcGFyYW0gaG9tZUFjY291bnRJZCAtIEhvbWUgYWNjb3VudCBpZGVudGlmaWVyIGZvciB0aGlzIGFjY291bnQgb2JqZWN0XHJcbiAqIEBwYXJhbSBsb2NhbEFjY291bnRJZCAtIExvY2FsIGFjY291bnQgaWRlbnRpZmVyIGZvciB0aGlzIGFjY291bnQgb2JqZWN0XHJcbiAqIEBwYXJhbSB0ZW5hbnRJZCAtIEZ1bGwgdGVuYW50IG9yIG9yZ2FuaXphdGlvbmFsIGlkIHRoYXQgdGhpcyBhY2NvdW50IGJlbG9uZ3MgdG9cclxuICogQHBhcmFtIGlkVG9rZW5DbGFpbXMgLSBDbGFpbXMgZnJvbSB0aGUgSUQgdG9rZW5cclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkVGVuYW50UHJvZmlsZShob21lQWNjb3VudElkLCBsb2NhbEFjY291bnRJZCwgdGVuYW50SWQsIGlkVG9rZW5DbGFpbXMpIHtcclxuICAgIGlmIChpZFRva2VuQ2xhaW1zKSB7XHJcbiAgICAgICAgY29uc3QgeyBvaWQsIHN1YiwgdGlkLCBuYW1lLCB0ZnAsIGFjciB9ID0gaWRUb2tlbkNsYWltcztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoZSBhdXRob3JpdHkgaXMgQUFEIG9yIEIyQywgd2UgZXhoYXVzdCBhbGwgdGhlIHBvc3NpYmxlIGNsYWltcyB0aGF0IGNhbiBzZXJ2ZSBhcyB0ZW5hbnQgSUQgd2l0aCB0aGUgZm9sbG93aW5nIHByZWNlZGVuY2U6XHJcbiAgICAgICAgICogdGlkIC0gVGVuYW50SUQgY2xhaW0gdGhhdCBpZGVudGlmaWVzIHRoZSB0ZW5hbnQgdGhhdCBpc3N1ZWQgdGhlIHRva2VuIGluIEFBRC4gRXhwZWN0ZWQgaW4gYWxsIEFBRCBJRCB0b2tlbnMsIG5vdCBwcmVzZW50IGluIEIyQyBJRCBUb2tlbnMuXHJcbiAgICAgICAgICogdGZwIC0gVHJ1c3QgRnJhbWV3b3JrIFBvbGljeSBjbGFpbSB0aGF0IGlkZW50aWZpZXMgdGhlIHBvbGljeSB0aGF0IHdhcyB1c2VkIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlci4gRnVuY3Rpb25zIGFzIHRlbmFudCBmb3IgQjJDIHNjZW5hcmlvcy5cclxuICAgICAgICAgKiBhY3IgLSBBdXRoZW50aWNhdGlvbiBDb250ZXh0IENsYXNzIFJlZmVyZW5jZSBjbGFpbSB1c2VkIG9ubHkgd2l0aCBvbGRlciBCMkMgcG9saWNpZXMuIEZhbGxiYWNrIGluIGNhc2UgdGZwIGlzIG5vdCBwcmVzZW50LCBidXQgbGlrZWx5IHdvbid0IGJlIHByZXNlbnQgYW55d2F5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHRlbmFudElkID0gdGlkIHx8IHRmcCB8fCBhY3IgfHwgXCJcIjtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0ZW5hbnRJZDogdGVuYW50SWQsXHJcbiAgICAgICAgICAgIGxvY2FsQWNjb3VudElkOiBvaWQgfHwgc3ViIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIGlzSG9tZVRlbmFudDogdGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCh0ZW5hbnRJZCwgaG9tZUFjY291bnRJZCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRlbmFudElkLFxyXG4gICAgICAgICAgICBsb2NhbEFjY291bnRJZCxcclxuICAgICAgICAgICAgaXNIb21lVGVuYW50OiB0ZW5hbnRJZE1hdGNoZXNIb21lVGVuYW50KHRlbmFudElkLCBob21lQWNjb3VudElkKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXBsYWNlcyBhY2NvdW50IGluZm8gdGhhdCB2YXJpZXMgYnkgdGVuYW50IHByb2ZpbGUgc291cmNlZCBmcm9tIHRoZSBJRCB0b2tlbiBjbGFpbXMgcGFzc2VkIGluIHdpdGggdGhlIHRlbmFudC1zcGVjaWZpYyBhY2NvdW50IGluZm9cclxuICogQHBhcmFtIGJhc2VBY2NvdW50SW5mb1xyXG4gKiBAcGFyYW0gaWRUb2tlbkNsYWltc1xyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQWNjb3VudFRlbmFudFByb2ZpbGVEYXRhKGJhc2VBY2NvdW50SW5mbywgdGVuYW50UHJvZmlsZSwgaWRUb2tlbkNsYWltcywgaWRUb2tlblNlY3JldCkge1xyXG4gICAgbGV0IHVwZGF0ZWRBY2NvdW50SW5mbyA9IGJhc2VBY2NvdW50SW5mbztcclxuICAgIC8vIFRlbmFudCBQcm9maWxlIG92ZXJyaWRlcyBwYXNzZWQgaW4gYWNjb3VudCBpbmZvXHJcbiAgICBpZiAodGVuYW50UHJvZmlsZSkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgICAgICBjb25zdCB7IGlzSG9tZVRlbmFudCwgLi4udGVuYW50UHJvZmlsZU92ZXJyaWRlIH0gPSB0ZW5hbnRQcm9maWxlO1xyXG4gICAgICAgIHVwZGF0ZWRBY2NvdW50SW5mbyA9IHsgLi4uYmFzZUFjY291bnRJbmZvLCAuLi50ZW5hbnRQcm9maWxlT3ZlcnJpZGUgfTtcclxuICAgIH1cclxuICAgIC8vIElEIHRva2VuIGNsYWltcyBvdmVycmlkZSBwYXNzZWQgaW4gYWNjb3VudCBpbmZvIGFuZCB0ZW5hbnQgcHJvZmlsZVxyXG4gICAgaWYgKGlkVG9rZW5DbGFpbXMpIHtcclxuICAgICAgICAvLyBJZ25vcmUgaXNIb21lVGVuYW50LCBsb2dpbkhpbnQsIGFuZCBzaWQgd2hpY2ggYXJlIHBhcnQgb2YgdGVuYW50IHByb2ZpbGUgYnV0IG5vdCBiYXNlIGFjY291bnQgaW5mb1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgICAgICBjb25zdCB7IGlzSG9tZVRlbmFudCwgLi4uY2xhaW1zU291cmNlZFRlbmFudFByb2ZpbGUgfSA9IGJ1aWxkVGVuYW50UHJvZmlsZShiYXNlQWNjb3VudEluZm8uaG9tZUFjY291bnRJZCwgYmFzZUFjY291bnRJbmZvLmxvY2FsQWNjb3VudElkLCBiYXNlQWNjb3VudEluZm8udGVuYW50SWQsIGlkVG9rZW5DbGFpbXMpO1xyXG4gICAgICAgIHVwZGF0ZWRBY2NvdW50SW5mbyA9IHtcclxuICAgICAgICAgICAgLi4udXBkYXRlZEFjY291bnRJbmZvLFxyXG4gICAgICAgICAgICAuLi5jbGFpbXNTb3VyY2VkVGVuYW50UHJvZmlsZSxcclxuICAgICAgICAgICAgaWRUb2tlbkNsYWltczogaWRUb2tlbkNsYWltcyxcclxuICAgICAgICAgICAgaWRUb2tlbjogaWRUb2tlblNlY3JldCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVkQWNjb3VudEluZm87XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXBkYXRlZEFjY291bnRJbmZvO1xyXG59XG5cbmV4cG9ydCB7IGJ1aWxkVGVuYW50UHJvZmlsZSwgdGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCwgdXBkYXRlQWNjb3VudFRlbmFudFByb2ZpbGVEYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY2NvdW50SW5mby5tanMubWFwXG4iXSwibmFtZXMiOlsidGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCIsInRlbmFudElkIiwiaG9tZUFjY291bnRJZCIsInNwbGl0IiwiYnVpbGRUZW5hbnRQcm9maWxlIiwibG9jYWxBY2NvdW50SWQiLCJpZFRva2VuQ2xhaW1zIiwib2lkIiwic3ViIiwidGlkIiwibmFtZSIsInRmcCIsImFjciIsImlzSG9tZVRlbmFudCIsInVwZGF0ZUFjY291bnRUZW5hbnRQcm9maWxlRGF0YSIsImJhc2VBY2NvdW50SW5mbyIsInRlbmFudFByb2ZpbGUiLCJpZFRva2VuU2VjcmV0IiwidXBkYXRlZEFjY291bnRJbmZvIiwidGVuYW50UHJvZmlsZU92ZXJyaWRlIiwiY2xhaW1zU291cmNlZFRlbmFudFByb2ZpbGUiLCJpZFRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/AuthToken.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkMaxAge: () => (/* binding */ checkMaxAge),\n/* harmony export */   extractTokenClaims: () => (/* binding */ extractTokenClaims),\n/* harmony export */   getJWSPayload: () => (/* binding */ getJWSPayload)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Extract token by decoding the rawToken\r\n *\r\n * @param encodedToken\r\n */ function extractTokenClaims(encodedToken, base64Decode) {\n    const jswPayload = getJWSPayload(encodedToken);\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded);\n    } catch (err) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.tokenParsingError);\n    }\n}\n/**\r\n * decode a JWT\r\n *\r\n * @param authToken\r\n */ function getJWSPayload(authToken) {\n    if (!authToken) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nullOrEmptyToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.tokenParsingError);\n    }\n    /**\r\n     * const crackedToken = {\r\n     *  header: matches[1],\r\n     *  JWSPayload: matches[2],\r\n     *  JWSSig: matches[3],\r\n     * };\r\n     */ return matches[2];\n}\n/**\r\n * Determine if the token's max_age has transpired\r\n */ function checkMaxAge(authTime, maxAge) {\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */ const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.maxAgeTranspired);\n    }\n}\n //# sourceMappingURL=AuthToken.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BdXRoVG9rZW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3FFO0FBQ3FDO0FBRTFHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTSSxtQkFBbUJDLFlBQVksRUFBRUMsWUFBWTtJQUNsRCxNQUFNQyxhQUFhQyxjQUFjSDtJQUNqQyw0Q0FBNEM7SUFDNUMsSUFBSTtRQUNBLDREQUE0RDtRQUM1RCxNQUFNSSxnQkFBZ0JILGFBQWFDO1FBQ25DLE9BQU9HLEtBQUtDLEtBQUssQ0FBQ0Y7SUFDdEIsRUFDQSxPQUFPRyxLQUFLO1FBQ1IsTUFBTVosaUZBQXFCQSxDQUFDQyw4RUFBaUJBO0lBQ2pEO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU08sY0FBY0ssU0FBUztJQUM1QixJQUFJLENBQUNBLFdBQVc7UUFDWixNQUFNYixpRkFBcUJBLENBQUNFLDZFQUFnQkE7SUFDaEQ7SUFDQSxNQUFNWSxrQkFBa0I7SUFDeEIsTUFBTUMsVUFBVUQsZ0JBQWdCRSxJQUFJLENBQUNIO0lBQ3JDLElBQUksQ0FBQ0UsV0FBV0EsUUFBUUUsTUFBTSxHQUFHLEdBQUc7UUFDaEMsTUFBTWpCLGlGQUFxQkEsQ0FBQ0MsOEVBQWlCQTtJQUNqRDtJQUNBOzs7Ozs7S0FNQyxHQUNELE9BQU9jLE9BQU8sQ0FBQyxFQUFFO0FBQ3JCO0FBQ0E7O0NBRUMsR0FDRCxTQUFTRyxZQUFZQyxRQUFRLEVBQUVDLE1BQU07SUFDakM7Ozs7S0FJQyxHQUNELE1BQU1DLGlCQUFpQixRQUFRLCtCQUErQjtJQUM5RCxJQUFJRCxXQUFXLEtBQUtFLEtBQUtDLEdBQUcsS0FBS0YsaUJBQWlCRixXQUFXQyxRQUFRO1FBQ2pFLE1BQU1wQixpRkFBcUJBLENBQUNHLDZFQUFnQkE7SUFDaEQ7QUFDSjtBQUUwRCxDQUMxRCxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0F1dGhUb2tlbi5tanM/N2FkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudEF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgdG9rZW5QYXJzaW5nRXJyb3IsIG51bGxPckVtcHR5VG9rZW4sIG1heEFnZVRyYW5zcGlyZWQgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEV4dHJhY3QgdG9rZW4gYnkgZGVjb2RpbmcgdGhlIHJhd1Rva2VuXHJcbiAqXHJcbiAqIEBwYXJhbSBlbmNvZGVkVG9rZW5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RUb2tlbkNsYWltcyhlbmNvZGVkVG9rZW4sIGJhc2U2NERlY29kZSkge1xyXG4gICAgY29uc3QganN3UGF5bG9hZCA9IGdldEpXU1BheWxvYWQoZW5jb2RlZFRva2VuKTtcclxuICAgIC8vIHRva2VuIHdpbGwgYmUgZGVjb2RlZCB0byBnZXQgdGhlIHVzZXJuYW1lXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIGJhc2U2NERlY29kZSgpIHNob3VsZCB0aHJvdyBhbiBlcnJvciBpZiB0aGVyZSBpcyBhbiBpc3N1ZVxyXG4gICAgICAgIGNvbnN0IGJhc2U2NERlY29kZWQgPSBiYXNlNjREZWNvZGUoanN3UGF5bG9hZCk7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0RGVjb2RlZCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKHRva2VuUGFyc2luZ0Vycm9yKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogZGVjb2RlIGEgSldUXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoVG9rZW5cclxuICovXHJcbmZ1bmN0aW9uIGdldEpXU1BheWxvYWQoYXV0aFRva2VuKSB7XHJcbiAgICBpZiAoIWF1dGhUb2tlbikge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihudWxsT3JFbXB0eVRva2VuKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRva2VuUGFydHNSZWdleCA9IC9eKFteXFwuXFxzXSopXFwuKFteXFwuXFxzXSspXFwuKFteXFwuXFxzXSopJC87XHJcbiAgICBjb25zdCBtYXRjaGVzID0gdG9rZW5QYXJ0c1JlZ2V4LmV4ZWMoYXV0aFRva2VuKTtcclxuICAgIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzLmxlbmd0aCA8IDQpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IodG9rZW5QYXJzaW5nRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25zdCBjcmFja2VkVG9rZW4gPSB7XHJcbiAgICAgKiAgaGVhZGVyOiBtYXRjaGVzWzFdLFxyXG4gICAgICogIEpXU1BheWxvYWQ6IG1hdGNoZXNbMl0sXHJcbiAgICAgKiAgSldTU2lnOiBtYXRjaGVzWzNdLFxyXG4gICAgICogfTtcclxuICAgICAqL1xyXG4gICAgcmV0dXJuIG1hdGNoZXNbMl07XHJcbn1cclxuLyoqXHJcbiAqIERldGVybWluZSBpZiB0aGUgdG9rZW4ncyBtYXhfYWdlIGhhcyB0cmFuc3BpcmVkXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja01heEFnZShhdXRoVGltZSwgbWF4QWdlKSB7XHJcbiAgICAvKlxyXG4gICAgICogcGVyIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0F1dGhSZXF1ZXN0XHJcbiAgICAgKiBUbyBmb3JjZSBhbiBpbW1lZGlhdGUgcmUtYXV0aGVudGljYXRpb246IElmIGFuIGFwcCByZXF1aXJlcyB0aGF0IGEgdXNlciByZS1hdXRoZW50aWNhdGUgcHJpb3IgdG8gYWNjZXNzLFxyXG4gICAgICogcHJvdmlkZSBhIHZhbHVlIG9mIDAgZm9yIHRoZSBtYXhfYWdlIHBhcmFtZXRlciBhbmQgdGhlIEFTIHdpbGwgZm9yY2UgYSBmcmVzaCBsb2dpbi5cclxuICAgICAqL1xyXG4gICAgY29uc3QgZml2ZU1pbnV0ZVNrZXcgPSAzMDAwMDA7IC8vIGZpdmUgbWludXRlcyBpbiBtaWxsaXNlY29uZHNcclxuICAgIGlmIChtYXhBZ2UgPT09IDAgfHwgRGF0ZS5ub3coKSAtIGZpdmVNaW51dGVTa2V3ID4gYXV0aFRpbWUgKyBtYXhBZ2UpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWF4QWdlVHJhbnNwaXJlZCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgY2hlY2tNYXhBZ2UsIGV4dHJhY3RUb2tlbkNsYWltcywgZ2V0SldTUGF5bG9hZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aFRva2VuLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJ0b2tlblBhcnNpbmdFcnJvciIsIm51bGxPckVtcHR5VG9rZW4iLCJtYXhBZ2VUcmFuc3BpcmVkIiwiZXh0cmFjdFRva2VuQ2xhaW1zIiwiZW5jb2RlZFRva2VuIiwiYmFzZTY0RGVjb2RlIiwianN3UGF5bG9hZCIsImdldEpXU1BheWxvYWQiLCJiYXNlNjREZWNvZGVkIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwiYXV0aFRva2VuIiwidG9rZW5QYXJ0c1JlZ2V4IiwibWF0Y2hlcyIsImV4ZWMiLCJsZW5ndGgiLCJjaGVja01heEFnZSIsImF1dGhUaW1lIiwibWF4QWdlIiwiZml2ZU1pbnV0ZVNrZXciLCJEYXRlIiwibm93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CcsCredentialType: () => (/* binding */ CcsCredentialType)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CcsCredentialType = {\n    HOME_ACCOUNT_ID: \"home_account_id\",\n    UPN: \"UPN\"\n};\n //# sourceMappingURL=CcsCredential.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DY3NDcmVkZW50aWFsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUEsb0JBQW9CO0lBQ3RCQyxpQkFBaUI7SUFDakJDLEtBQUs7QUFDVDtBQUU2QixDQUM3QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0Njc0NyZWRlbnRpYWwubWpzPzQ3NTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQ2NzQ3JlZGVudGlhbFR5cGUgPSB7XHJcbiAgICBIT01FX0FDQ09VTlRfSUQ6IFwiaG9tZV9hY2NvdW50X2lkXCIsXHJcbiAgICBVUE46IFwiVVBOXCIsXHJcbn07XG5cbmV4cG9ydCB7IENjc0NyZWRlbnRpYWxUeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DY3NDcmVkZW50aWFsLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDY3NDcmVkZW50aWFsVHlwZSIsIkhPTUVfQUNDT1VOVF9JRCIsIlVQTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildClientInfo: () => (/* binding */ buildClientInfo),\n/* harmony export */   buildClientInfoFromHomeAccountId: () => (/* binding */ buildClientInfoFromHomeAccountId)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */ function buildClientInfo(rawClientInfo, base64Decode) {\n    if (!rawClientInfo) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoEmptyError);\n    }\n    try {\n        const decodedClientInfo = base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo);\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoDecodingError);\n    }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */ function buildClientInfoFromHomeAccountId(homeAccountId) {\n    if (!homeAccountId) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoDecodingError);\n    }\n    const clientInfoParts = homeAccountId.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Separators.CLIENT_INFO_SEPARATOR, 2);\n    return {\n        uid: clientInfoParts[0],\n        utid: clientInfoParts.length < 2 ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING : clientInfoParts[1]\n    };\n}\n //# sourceMappingURL=ClientInfo.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DbGllbnRJbmZvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNxRTtBQUNOO0FBQ21DO0FBRWxHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTSyxnQkFBZ0JDLGFBQWEsRUFBRUMsWUFBWTtJQUNoRCxJQUFJLENBQUNELGVBQWU7UUFDaEIsTUFBTU4saUZBQXFCQSxDQUFDRyxpRkFBb0JBO0lBQ3BEO0lBQ0EsSUFBSTtRQUNBLE1BQU1LLG9CQUFvQkQsYUFBYUQ7UUFDdkMsT0FBT0csS0FBS0MsS0FBSyxDQUFDRjtJQUN0QixFQUNBLE9BQU9HLEdBQUc7UUFDTixNQUFNWCxpRkFBcUJBLENBQUNJLG9GQUF1QkE7SUFDdkQ7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNRLGlDQUFpQ0MsYUFBYTtJQUNuRCxJQUFJLENBQUNBLGVBQWU7UUFDaEIsTUFBTWIsaUZBQXFCQSxDQUFDSSxvRkFBdUJBO0lBQ3ZEO0lBQ0EsTUFBTVUsa0JBQWtCRCxjQUFjRSxLQUFLLENBQUNkLDREQUFVQSxDQUFDZSxxQkFBcUIsRUFBRTtJQUM5RSxPQUFPO1FBQ0hDLEtBQUtILGVBQWUsQ0FBQyxFQUFFO1FBQ3ZCSSxNQUFNSixnQkFBZ0JLLE1BQU0sR0FBRyxJQUN6QmpCLDJEQUFTQSxDQUFDa0IsWUFBWSxHQUN0Qk4sZUFBZSxDQUFDLEVBQUU7SUFDNUI7QUFDSjtBQUU2RCxDQUM3RCx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0NsaWVudEluZm8ubWpzPzNmNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IFNlcGFyYXRvcnMsIENvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgY2xpZW50SW5mb0VtcHR5RXJyb3IsIGNsaWVudEluZm9EZWNvZGluZ0Vycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiB0byBidWlsZCBhIGNsaWVudCBpbmZvIG9iamVjdCBmcm9tIHNlcnZlciBjbGllbnRJbmZvIHN0cmluZ1xyXG4gKiBAcGFyYW0gcmF3Q2xpZW50SW5mb1xyXG4gKiBAcGFyYW0gY3J5cHRvXHJcbiAqL1xyXG5mdW5jdGlvbiBidWlsZENsaWVudEluZm8ocmF3Q2xpZW50SW5mbywgYmFzZTY0RGVjb2RlKSB7XHJcbiAgICBpZiAoIXJhd0NsaWVudEluZm8pIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoY2xpZW50SW5mb0VtcHR5RXJyb3IpO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkZWNvZGVkQ2xpZW50SW5mbyA9IGJhc2U2NERlY29kZShyYXdDbGllbnRJbmZvKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVkQ2xpZW50SW5mbyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihjbGllbnRJbmZvRGVjb2RpbmdFcnJvcik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGJ1aWxkIGEgY2xpZW50IGluZm8gb2JqZWN0IGZyb20gY2FjaGVkIGhvbWVBY2NvdW50SWQgc3RyaW5nXHJcbiAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAqL1xyXG5mdW5jdGlvbiBidWlsZENsaWVudEluZm9Gcm9tSG9tZUFjY291bnRJZChob21lQWNjb3VudElkKSB7XHJcbiAgICBpZiAoIWhvbWVBY2NvdW50SWQpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoY2xpZW50SW5mb0RlY29kaW5nRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2xpZW50SW5mb1BhcnRzID0gaG9tZUFjY291bnRJZC5zcGxpdChTZXBhcmF0b3JzLkNMSUVOVF9JTkZPX1NFUEFSQVRPUiwgMik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVpZDogY2xpZW50SW5mb1BhcnRzWzBdLFxyXG4gICAgICAgIHV0aWQ6IGNsaWVudEluZm9QYXJ0cy5sZW5ndGggPCAyXHJcbiAgICAgICAgICAgID8gQ29uc3RhbnRzLkVNUFRZX1NUUklOR1xyXG4gICAgICAgICAgICA6IGNsaWVudEluZm9QYXJ0c1sxXSxcclxuICAgIH07XHJcbn1cblxuZXhwb3J0IHsgYnVpbGRDbGllbnRJbmZvLCBidWlsZENsaWVudEluZm9Gcm9tSG9tZUFjY291bnRJZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xpZW50SW5mby5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwiU2VwYXJhdG9ycyIsIkNvbnN0YW50cyIsImNsaWVudEluZm9FbXB0eUVycm9yIiwiY2xpZW50SW5mb0RlY29kaW5nRXJyb3IiLCJidWlsZENsaWVudEluZm8iLCJyYXdDbGllbnRJbmZvIiwiYmFzZTY0RGVjb2RlIiwiZGVjb2RlZENsaWVudEluZm8iLCJKU09OIiwicGFyc2UiLCJlIiwiYnVpbGRDbGllbnRJbmZvRnJvbUhvbWVBY2NvdW50SWQiLCJob21lQWNjb3VudElkIiwiY2xpZW50SW5mb1BhcnRzIiwic3BsaXQiLCJDTElFTlRfSU5GT19TRVBBUkFUT1IiLCJ1aWQiLCJ1dGlkIiwibGVuZ3RoIiwiRU1QVFlfU1RSSU5HIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTenantIdFromIdTokenClaims: () => (/* binding */ getTenantIdFromIdTokenClaims)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */ function getTenantIdFromIdTokenClaims(idTokenClaims) {\n    if (idTokenClaims) {\n        const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\n        return tenantId || null;\n    }\n    return null;\n}\n //# sourceMappingURL=TokenClaims.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9Ub2tlbkNsYWltcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0EsNkJBQTZCQyxhQUFhO0lBQy9DLElBQUlBLGVBQWU7UUFDZixNQUFNQyxXQUFXRCxjQUFjRSxHQUFHLElBQUlGLGNBQWNHLEdBQUcsSUFBSUgsY0FBY0ksR0FBRztRQUM1RSxPQUFPSCxZQUFZO0lBQ3ZCO0lBQ0EsT0FBTztBQUNYO0FBRXdDLENBQ3hDLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2FjY291bnQvVG9rZW5DbGFpbXMubWpzP2FmMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEdldHMgdGVuYW50SWQgZnJvbSBhdmFpbGFibGUgSUQgdG9rZW4gY2xhaW1zIHRvIHNldCBhcyBjcmVkZW50aWFsIHJlYWxtIHdpdGggdGhlIGZvbGxvd2luZyBwcmVjZWRlbmNlOlxyXG4gKiAxLiB0aWQgLSBpZiB0aGUgdG9rZW4gaXMgYWNxdWlyZWQgZnJvbSBhbiBBenVyZSBBRCB0ZW5hbnQgdGlkIHdpbGwgYmUgcHJlc2VudFxyXG4gKiAyLiB0ZnAgLSBpZiB0aGUgdG9rZW4gaXMgYWNxdWlyZWQgZnJvbSBhIG1vZGVybiBCMkMgdGVuYW50IHRmcCBzaG91bGQgYmUgcHJlc2VudFxyXG4gKiAzLiBhY3IgLSBpZiB0aGUgdG9rZW4gaXMgYWNxdWlyZWQgZnJvbSBhIGxlZ2FjeSBCMkMgdGVuYW50IGFjciBzaG91bGQgYmUgcHJlc2VudFxyXG4gKiBEb3duY2FzZWQgdG8gbWF0Y2ggdGhlIHJlYWxtIGNhc2UtaW5zZW5zaXRpdmUgY29tcGFyaXNvbiByZXF1aXJlbWVudHNcclxuICogQHBhcmFtIGlkVG9rZW5DbGFpbXNcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGdldFRlbmFudElkRnJvbUlkVG9rZW5DbGFpbXMoaWRUb2tlbkNsYWltcykge1xyXG4gICAgaWYgKGlkVG9rZW5DbGFpbXMpIHtcclxuICAgICAgICBjb25zdCB0ZW5hbnRJZCA9IGlkVG9rZW5DbGFpbXMudGlkIHx8IGlkVG9rZW5DbGFpbXMudGZwIHx8IGlkVG9rZW5DbGFpbXMuYWNyO1xyXG4gICAgICAgIHJldHVybiB0ZW5hbnRJZCB8fCBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuZXhwb3J0IHsgZ2V0VGVuYW50SWRGcm9tSWRUb2tlbkNsYWltcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG9rZW5DbGFpbXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImdldFRlbmFudElkRnJvbUlkVG9rZW5DbGFpbXMiLCJpZFRva2VuQ2xhaW1zIiwidGVuYW50SWQiLCJ0aWQiLCJ0ZnAiLCJhY3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/Authority.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Authority: () => (/* binding */ Authority),\n/* harmony export */   buildStaticAuthorityOptions: () => (/* binding */ buildStaticAuthorityOptions),\n/* harmony export */   formatAuthorityUri: () => (/* binding */ formatAuthorityUri),\n/* harmony export */   getTenantFromAuthorityString: () => (/* binding */ getTenantFromAuthorityString)\n/* harmony export */ });\n/* harmony import */ var _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AuthorityType.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _OpenIdConfigResponse_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./OpenIdConfigResponse.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./AuthorityMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ProtocolMode.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./AuthorityOptions.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _CloudInstanceDiscoveryResponse_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CloudInstanceDiscoveryResponse.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs\");\n/* harmony import */ var _CloudInstanceDiscoveryErrorResponse_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./CloudInstanceDiscoveryErrorResponse.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs\");\n/* harmony import */ var _RegionDiscovery_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RegionDiscovery.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../error/AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n * @internal\r\n */ class Authority {\n    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity){\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscoveryMetadata = {\n            region_used: undefined,\n            region_source: undefined,\n            region_outcome: undefined\n        };\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n        this.managedIdentity = managedIdentity || false;\n        this.regionDiscovery = new _RegionDiscovery_mjs__WEBPACK_IMPORTED_MODULE_0__.RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\n    }\n    /**\r\n     * Get {@link AuthorityType}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */ getAuthorityType(authorityUri) {\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n        if (authorityUri.HostNameAndPort.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CIAM_AUTH_URL)) {\n            return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Ciam;\n        }\n        const pathSegments = authorityUri.PathSegments;\n        if (pathSegments.length) {\n            switch(pathSegments[0].toLowerCase()){\n                case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.ADFS:\n                    return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs;\n                case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DSTS:\n                    return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Dsts;\n            }\n        }\n        return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Default;\n    }\n    // See above for AuthorityType\n    get authorityType() {\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\n    }\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */ get protocolMode() {\n        return this.authorityOptions.protocolMode;\n    }\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */ get options() {\n        return this.authorityOptions;\n    }\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */ get canonicalAuthority() {\n        return this._canonicalAuthority.urlString;\n    }\n    /**\r\n     * Sets canonical authority.\r\n     */ set canonicalAuthority(url) {\n        this._canonicalAuthority = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n    /**\r\n     * Get authority components.\r\n     */ get canonicalAuthorityUrlComponents() {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n        return this._canonicalAuthorityUrlComponents;\n    }\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */ get hostnameAndPort() {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n    /**\r\n     * Get tenant for authority.\r\n     */ get tenant() {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */ get authorizationEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.authorization_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */ get tokenEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    get deviceCodeEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */ get endSessionEndpoint() {\n        if (this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endSessionEndpointNotSupported);\n            }\n            return this.replacePath(this.metadata.end_session_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth issuer for requests\r\n     */ get selfSignedJwtAudience() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.issuer);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */ get jwksUri() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.jwks_uri);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */ canReplaceTenant(authorityUri) {\n        return authorityUri.PathSegments.length === 1 && !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) && this.getAuthorityType(authorityUri) === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Default && this.protocolMode === _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__.ProtocolMode.AAD;\n    }\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */ replaceTenant(urlString) {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */ replacePath(urlString) {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n        currentAuthorityParts.forEach((currentPart, index)=>{\n            let cachedPart = cachedAuthorityParts[index];\n            if (index === 0 && this.canReplaceTenant(cachedAuthorityUrlComponents)) {\n                const tenantId = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\n                /**\r\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n                 * always resolved with tenant id by OIDC.\r\n                 */ if (cachedPart !== tenantId) {\n                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\n                    cachedPart = tenantId;\n                }\n            }\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n        return this.replaceTenant(endpoint);\n    }\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */ get defaultOpenIdConfigurationEndpoint() {\n        const canonicalAuthorityHost = this.hostnameAndPort;\n        if (this.canonicalAuthority.endsWith(\"v2.0/\") || this.authorityType === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs || this.protocolMode !== _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__.ProtocolMode.AAD && !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost)) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n    /**\r\n     * Boolean that returns whether or not tenant discovery has been completed.\r\n     */ discoveryComplete() {\n        return !!this.metadata;\n    }\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */ async resolveEndpointsAsync() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n        const metadataEntity = this.getCurrentMetadataEntity();\n        const cloudDiscoverySource = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateCloudDiscoveryMetadata.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateEndpointMetadata.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\n            source: endpointSource\n        });\n        this.performanceClient?.addFields({\n            cloudDiscoverySource: cloudDiscoverySource,\n            authorityEndpointSource: endpointSource\n        }, this.correlationId);\n    }\n    /**\r\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\r\n     * from the configured canonical authority\r\n     * @returns\r\n     */ getCurrentMetadataEntity() {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = {\n                aliases: [],\n                preferred_cache: this.hostnameAndPort,\n                preferred_network: this.hostnameAndPort,\n                canonical_authority: this.canonicalAuthority,\n                authorization_endpoint: \"\",\n                token_endpoint: \"\",\n                end_session_endpoint: \"\",\n                issuer: \"\",\n                aliasesFromNetwork: false,\n                endpointsFromNetwork: false,\n                expiresAt: (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.generateAuthorityMetadataExpiresAt)(),\n                jwks_uri: \"\"\n            };\n        }\n        return metadataEntity;\n    }\n    /**\r\n     * Updates cached metadata based on metadata source and sets the instance's metadata\r\n     * property to the same value\r\n     * @param metadataEntity\r\n     * @param cloudDiscoverySource\r\n     * @param endpointMetadataResult\r\n     */ updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\n        if (cloudDiscoverySource !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE && endpointMetadataResult?.source !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.expiresAt = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.generateAuthorityMetadataExpiresAt)();\n            metadataEntity.canonical_authority = this.canonicalAuthority;\n        }\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */ async updateEndpointMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\n        if (localMetadata) {\n            if (localMetadata.source === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES) {\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\n                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                    if (localMetadata.metadata) {\n                        const hardcodedMetadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\n                        (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);\n                        metadataEntity.canonical_authority = this.canonicalAuthority;\n                    }\n                }\n            }\n            return localMetadata.source;\n        }\n        // Get metadata from network if local sources aren't available\n        let metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.getEndpointMetadataFromNetwork.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\n            }\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, metadata, true);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK;\n        } else {\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\n        }\n    }\n    /**\r\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\r\n     * response if the source is hardcoded metadata\r\n     * @param metadataEntity\r\n     * @returns\r\n     */ updateEndpointMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\n        const configMetadata = this.getEndpointMetadataFromConfig();\n        if (configMetadata) {\n            this.logger.verbose(\"Found endpoint metadata in authority configuration\");\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, configMetadata, false);\n            return {\n                source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG\n            };\n        }\n        this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\n        } else {\n            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            if (hardcodedMetadata) {\n                (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);\n                return {\n                    source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES,\n                    metadata: hardcodedMetadata\n                };\n            } else {\n                this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\n            }\n        }\n        // Check cached metadata entity expiration status\n        const metadataEntityExpired = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.isAuthorityMetadataExpired)(metadataEntity);\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntityExpired) {\n            // No need to update\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\n            return {\n                source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE\n            };\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */ isAuthoritySameType(metadataEntity) {\n        const cachedAuthorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n    /**\r\n     * Parse authorityMetadata config option\r\n     */ getEndpointMetadataFromConfig() {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata);\n            } catch (e) {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidAuthorityMetadata);\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */ async getEndpointMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n        const options = {};\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */ const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\n            const isValidResponse = (0,_OpenIdConfigResponse_mjs__WEBPACK_IMPORTED_MODULE_12__.isOpenIdConfigResponse)(response.body);\n            if (isValidResponse) {\n                return response.body;\n            } else {\n                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\n                return null;\n            }\n        } catch (e) {\n            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\n            return null;\n        }\n    }\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */ getEndpointMetadataFromHardcodedValues() {\n        if (this.hostnameAndPort in _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.EndpointMetadata) {\n            return _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.EndpointMetadata[this.hostnameAndPort];\n        }\n        return null;\n    }\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     * User selected Azure region will be used if configured.\r\n     */ async updateMetadataWithRegionalInformation(metadata) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\n        if (userConfiguredAzureRegion) {\n            if (userConfiguredAzureRegion !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n                this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n                this.regionDiscoveryMetadata.region_used = userConfiguredAzureRegion;\n                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\n            }\n            const autodetectedRegionName = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration?.environmentRegion, this.regionDiscoveryMetadata);\n            if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\n                this.regionDiscoveryMetadata.region_used = autodetectedRegionName;\n                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\n            }\n            this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n        }\n        return metadata;\n    }\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param metadataEntity\r\n     * @returns AuthorityMetadataSource\r\n     */ async updateCloudDiscoveryMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\n        if (localMetadataSource) {\n            return localMetadataSource;\n        }\n        // Fallback to network as metadata source\n        const metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.getCloudDiscoveryMetadataFromNetwork.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, metadata, true);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK;\n        }\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\n        throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.untrustedAuthority);\n    }\n    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, metadata, false);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG;\n        }\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\n        if (this.options.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\n        } else {\n            const hardcodedMetadata = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromHardcodedValues)(this.hostnameAndPort);\n            if (hardcodedMetadata) {\n                this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n                (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, hardcodedMetadata, false);\n                return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES;\n            }\n            this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\n        }\n        const metadataEntityExpired = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.isAuthorityMetadataExpired)(metadataEntity);\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\n            // No need to update\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE;\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */ getCloudDiscoveryMetadataFromConfig() {\n        // CIAM does not support cloud discovery metadata\n        if (this.authorityType === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Ciam) {\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n            try {\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n                const metadata = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromNetworkResponse)(parsedResponse.metadata, this.hostnameAndPort);\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n                if (metadata) {\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n                    return metadata;\n                } else {\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n                }\n            } catch (e) {\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidCloudDiscoveryMetadata);\n            }\n        }\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return null;\n    }\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */ async getCloudDiscoveryMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n        const instanceDiscoveryEndpoint = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options = {};\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */ let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\n            let typedResponseBody;\n            let metadata;\n            if ((0,_CloudInstanceDiscoveryResponse_mjs__WEBPACK_IMPORTED_MODULE_14__.isCloudInstanceDiscoveryResponse)(response.body)) {\n                typedResponseBody = response.body;\n                metadata = typedResponseBody.metadata;\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\n            } else if ((0,_CloudInstanceDiscoveryErrorResponse_mjs__WEBPACK_IMPORTED_MODULE_15__.isCloudInstanceDiscoveryErrorResponse)(response.body)) {\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\n                typedResponseBody = response.body;\n                if (typedResponseBody.error === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.INVALID_INSTANCE) {\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n                    return null;\n                }\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n                metadata = [];\n            } else {\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n                return null;\n            }\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            match = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromNetworkResponse)(metadata, this.hostnameAndPort);\n        } catch (error) {\n            if (error instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_16__.AuthError) {\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\n            } else {\n                const typedError = error;\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\n            }\n            return null;\n        }\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n        if (!match) {\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return match;\n    }\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */ isInKnownAuthorities() {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority)=>{\n            return authority && _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n        return matches.length > 0;\n    }\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */ static generateAuthority(authorityString, azureCloudOptions) {\n        let authorityAzureCloudInstance;\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== _AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_17__.AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n    }\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */ static createCloudDiscoveryMetadataFromHost(host) {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [\n                host\n            ]\n        };\n    }\n    /**\r\n     * helper function to generate environment from authority object\r\n     */ getPreferredCache() {\n        if (this.managedIdentity) {\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DEFAULT_AUTHORITY_HOST;\n        } else if (this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */ isAlias(host) {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n    /**\r\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\r\n     * @param host\r\n     */ isAliasOfKnownMicrosoftAuthority(host) {\n        return _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.InstanceDiscoveryMetadataAliases.has(host);\n    }\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */ static isPublicCloudAuthority(host) {\n        return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */ static buildRegionalAuthorityString(host, region, queryString) {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(host);\n        authorityUrlInstance.validateAsUri();\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n        // Include the query string portion of the url\n        const url = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n        return url;\n    }\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */ static replaceWithRegionalInformation(metadata, azureRegion) {\n        const regionalMetadata = {\n            ...metadata\n        };\n        regionalMetadata.authorization_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\n        regionalMetadata.token_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\n        if (regionalMetadata.end_session_endpoint) {\n            regionalMetadata.end_session_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\n        }\n        return regionalMetadata;\n    }\n    /**\r\n     * Transform CIAM_AUTHORIY as per the below rules:\r\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n     *\r\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n     *\r\n     * @param authority\r\n     */ static transformCIAMAuthority(authority) {\n        let ciamAuthority = authority;\n        const authorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(authority);\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\n        // check if transformation is needed\n        if (authorityUrlComponents.PathSegments.length === 0 && authorityUrlComponents.HostNameAndPort.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CIAM_AUTH_URL)) {\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\n        }\n        return ciamAuthority;\n    }\n}\n// Reserved tenant domain names that will not be replaced with tenant id\nAuthority.reservedTenantDomains = new Set([\n    \"{tenant}\",\n    \"{tenantid}\",\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.COMMON,\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.CONSUMERS,\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.ORGANIZATIONS\n]);\n/**\r\n * Extract tenantId from authority\r\n */ function getTenantFromAuthorityString(authority) {\n    const authorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(authority);\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\n    /**\r\n     * For credential matching purposes, tenantId is the last path segment of the authority URL:\r\n     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\r\n     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\r\n     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\r\n     *\r\n     * Note that we may not have any path segments in certain OIDC scenarios.\r\n     */ const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\n    switch(tenantId){\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.COMMON:\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.ORGANIZATIONS:\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.CONSUMERS:\n            return undefined;\n        default:\n            return tenantId;\n    }\n}\nfunction formatAuthorityUri(authorityUri) {\n    return authorityUri.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.FORWARD_SLASH) ? authorityUri : `${authorityUri}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.FORWARD_SLASH}`;\n}\nfunction buildStaticAuthorityOptions(authOptions) {\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\n    let cloudDiscoveryMetadata = undefined;\n    if (rawCloudDiscoveryMetadata) {\n        try {\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidCloudDiscoveryMetadata);\n        }\n    }\n    return {\n        canonicalAuthority: authOptions.authority ? formatAuthorityUri(authOptions.authority) : undefined,\n        knownAuthorities: authOptions.knownAuthorities,\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata\n    };\n}\n //# sourceMappingURL=Authority.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDiscoveredInstance: () => (/* binding */ createDiscoveredInstance)\n/* harmony export */ });\n/* harmony import */ var _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Authority.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */ async function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {\n    performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n    const authorityUriFinal = _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.Authority.transformCIAMAuthority((0,_Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.formatAuthorityUri)(authorityUri));\n    // Initialize authority and perform discovery endpoint check.\n    const acquireTokenAuthority = new _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.Authority(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);\n    try {\n        await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\n        return acquireTokenAuthority;\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.endpointResolutionError);\n    }\n}\n //# sourceMappingURL=AuthorityFactory.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eUZhY3RvcnkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNnRTtBQUNLO0FBQ2E7QUFDdEI7QUFDZ0I7QUFFNUU7OztDQUdDLEdBQ0Q7Ozs7Ozs7Ozs7Q0FVQyxHQUNELGVBQWVNLHlCQUF5QkMsWUFBWSxFQUFFQyxhQUFhLEVBQUVDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxpQkFBaUI7SUFDeklBLG1CQUFtQkMsb0JBQW9CWCwwRkFBaUJBLENBQUNZLHdDQUF3QyxFQUFFSDtJQUNuRyxNQUFNSSxvQkFBb0JoQixxREFBU0EsQ0FBQ2lCLHNCQUFzQixDQUFDaEIsa0VBQWtCQSxDQUFDTTtJQUM5RSw2REFBNkQ7SUFDN0QsTUFBTVcsd0JBQXdCLElBQUlsQixxREFBU0EsQ0FBQ2dCLG1CQUFtQlIsZUFBZUMsY0FBY0Msa0JBQWtCQyxRQUFRQyxlQUFlQztJQUNySSxJQUFJO1FBQ0EsTUFBTVQsd0VBQVdBLENBQUNjLHNCQUFzQkMscUJBQXFCLENBQUNDLElBQUksQ0FBQ0Ysd0JBQXdCZiwwRkFBaUJBLENBQUNrQiw4QkFBOEIsRUFBRVYsUUFBUUUsbUJBQW1CRDtRQUN4SyxPQUFPTTtJQUNYLEVBQ0EsT0FBT0ksR0FBRztRQUNOLE1BQU1wQixpRkFBcUJBLENBQUNHLG9GQUF1QkE7SUFDdkQ7QUFDSjtBQUVvQyxDQUNwQyw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hdXRob3JpdHkvQXV0aG9yaXR5RmFjdG9yeS5tanM/MGQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhvcml0eSwgZm9ybWF0QXV0aG9yaXR5VXJpIH0gZnJvbSAnLi9BdXRob3JpdHkubWpzJztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudEF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgUGVyZm9ybWFuY2VFdmVudHMgfSBmcm9tICcuLi90ZWxlbWV0cnkvcGVyZm9ybWFuY2UvUGVyZm9ybWFuY2VFdmVudC5tanMnO1xuaW1wb3J0IHsgaW52b2tlQXN5bmMgfSBmcm9tICcuLi91dGlscy9GdW5jdGlvbldyYXBwZXJzLm1qcyc7XG5pbXBvcnQgeyBlbmRwb2ludFJlc29sdXRpb25FcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ3JlYXRlIGFuIGF1dGhvcml0eSBvYmplY3Qgb2YgdGhlIGNvcnJlY3QgdHlwZSBiYXNlZCBvbiB0aGUgdXJsXHJcbiAqIFBlcmZvcm1zIGJhc2ljIGF1dGhvcml0eSB2YWxpZGF0aW9uIC0gY2hlY2tzIHRvIHNlZSBpZiB0aGUgYXV0aG9yaXR5IGlzIG9mIGEgdmFsaWQgdHlwZSAoaS5lLiBhYWQsIGIyYywgYWRmcylcclxuICpcclxuICogQWxzbyBwZXJmb3JtcyBlbmRwb2ludCBkaXNjb3ZlcnkuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRob3JpdHlVcmlcclxuICogQHBhcmFtIG5ldHdvcmtDbGllbnRcclxuICogQHBhcmFtIHByb3RvY29sTW9kZVxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZURpc2NvdmVyZWRJbnN0YW5jZShhdXRob3JpdHlVcmksIG5ldHdvcmtDbGllbnQsIGNhY2hlTWFuYWdlciwgYXV0aG9yaXR5T3B0aW9ucywgbG9nZ2VyLCBjb3JyZWxhdGlvbklkLCBwZXJmb3JtYW5jZUNsaWVudCkge1xyXG4gICAgcGVyZm9ybWFuY2VDbGllbnQ/LmFkZFF1ZXVlTWVhc3VyZW1lbnQoUGVyZm9ybWFuY2VFdmVudHMuQXV0aG9yaXR5RmFjdG9yeUNyZWF0ZURpc2NvdmVyZWRJbnN0YW5jZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICBjb25zdCBhdXRob3JpdHlVcmlGaW5hbCA9IEF1dGhvcml0eS50cmFuc2Zvcm1DSUFNQXV0aG9yaXR5KGZvcm1hdEF1dGhvcml0eVVyaShhdXRob3JpdHlVcmkpKTtcclxuICAgIC8vIEluaXRpYWxpemUgYXV0aG9yaXR5IGFuZCBwZXJmb3JtIGRpc2NvdmVyeSBlbmRwb2ludCBjaGVjay5cclxuICAgIGNvbnN0IGFjcXVpcmVUb2tlbkF1dGhvcml0eSA9IG5ldyBBdXRob3JpdHkoYXV0aG9yaXR5VXJpRmluYWwsIG5ldHdvcmtDbGllbnQsIGNhY2hlTWFuYWdlciwgYXV0aG9yaXR5T3B0aW9ucywgbG9nZ2VyLCBjb3JyZWxhdGlvbklkLCBwZXJmb3JtYW5jZUNsaWVudCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IGludm9rZUFzeW5jKGFjcXVpcmVUb2tlbkF1dGhvcml0eS5yZXNvbHZlRW5kcG9pbnRzQXN5bmMuYmluZChhY3F1aXJlVG9rZW5BdXRob3JpdHkpLCBQZXJmb3JtYW5jZUV2ZW50cy5BdXRob3JpdHlSZXNvbHZlRW5kcG9pbnRzQXN5bmMsIGxvZ2dlciwgcGVyZm9ybWFuY2VDbGllbnQsIGNvcnJlbGF0aW9uSWQpKCk7XHJcbiAgICAgICAgcmV0dXJuIGFjcXVpcmVUb2tlbkF1dGhvcml0eTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKGVuZHBvaW50UmVzb2x1dGlvbkVycm9yKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBjcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1dGhvcml0eUZhY3RvcnkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhvcml0eSIsImZvcm1hdEF1dGhvcml0eVVyaSIsImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsIlBlcmZvcm1hbmNlRXZlbnRzIiwiaW52b2tlQXN5bmMiLCJlbmRwb2ludFJlc29sdXRpb25FcnJvciIsImNyZWF0ZURpc2NvdmVyZWRJbnN0YW5jZSIsImF1dGhvcml0eVVyaSIsIm5ldHdvcmtDbGllbnQiLCJjYWNoZU1hbmFnZXIiLCJhdXRob3JpdHlPcHRpb25zIiwibG9nZ2VyIiwiY29ycmVsYXRpb25JZCIsInBlcmZvcm1hbmNlQ2xpZW50IiwiYWRkUXVldWVNZWFzdXJlbWVudCIsIkF1dGhvcml0eUZhY3RvcnlDcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UiLCJhdXRob3JpdHlVcmlGaW5hbCIsInRyYW5zZm9ybUNJQU1BdXRob3JpdHkiLCJhY3F1aXJlVG9rZW5BdXRob3JpdHkiLCJyZXNvbHZlRW5kcG9pbnRzQXN5bmMiLCJiaW5kIiwiQXV0aG9yaXR5UmVzb2x2ZUVuZHBvaW50c0FzeW5jIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EndpointMetadata: () => (/* binding */ EndpointMetadata),\n/* harmony export */   InstanceDiscoveryMetadata: () => (/* binding */ InstanceDiscoveryMetadata),\n/* harmony export */   InstanceDiscoveryMetadataAliases: () => (/* binding */ InstanceDiscoveryMetadataAliases),\n/* harmony export */   getAliasesFromMetadata: () => (/* binding */ getAliasesFromMetadata),\n/* harmony export */   getAliasesFromStaticSources: () => (/* binding */ getAliasesFromStaticSources),\n/* harmony export */   getCloudDiscoveryMetadataFromHardcodedValues: () => (/* binding */ getCloudDiscoveryMetadataFromHardcodedValues),\n/* harmony export */   getCloudDiscoveryMetadataFromNetworkResponse: () => (/* binding */ getCloudDiscoveryMetadataFromNetworkResponse),\n/* harmony export */   rawMetdataJSON: () => (/* binding */ rawMetdataJSON)\n/* harmony export */ });\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const rawMetdataJSON = {\n    endpointMetadata: {\n        \"login.microsoftonline.com\": {\n            token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\"\n        },\n        \"login.chinacloudapi.cn\": {\n            token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\"\n        },\n        \"login.microsoftonline.us\": {\n            token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\"\n        }\n    },\n    instanceDiscoveryMetadata: {\n        tenant_discovery_endpoint: \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n        metadata: [\n            {\n                preferred_network: \"login.microsoftonline.com\",\n                preferred_cache: \"login.windows.net\",\n                aliases: [\n                    \"login.microsoftonline.com\",\n                    \"login.windows.net\",\n                    \"login.microsoft.com\",\n                    \"sts.windows.net\"\n                ]\n            },\n            {\n                preferred_network: \"login.partner.microsoftonline.cn\",\n                preferred_cache: \"login.partner.microsoftonline.cn\",\n                aliases: [\n                    \"login.partner.microsoftonline.cn\",\n                    \"login.chinacloudapi.cn\"\n                ]\n            },\n            {\n                preferred_network: \"login.microsoftonline.de\",\n                preferred_cache: \"login.microsoftonline.de\",\n                aliases: [\n                    \"login.microsoftonline.de\"\n                ]\n            },\n            {\n                preferred_network: \"login.microsoftonline.us\",\n                preferred_cache: \"login.microsoftonline.us\",\n                aliases: [\n                    \"login.microsoftonline.us\",\n                    \"login.usgovcloudapi.net\"\n                ]\n            },\n            {\n                preferred_network: \"login-us.microsoftonline.com\",\n                preferred_cache: \"login-us.microsoftonline.com\",\n                aliases: [\n                    \"login-us.microsoftonline.com\"\n                ]\n            }\n        ]\n    }\n};\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\nconst InstanceDiscoveryMetadataAliases = new Set();\nInstanceDiscoveryMetadata.metadata.forEach((metadataEntry)=>{\n    metadataEntry.aliases.forEach((alias)=>{\n        InstanceDiscoveryMetadataAliases.add(alias);\n    });\n});\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */ function getAliasesFromStaticSources(staticAuthorityOptions, logger) {\n    let staticAliases;\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n    if (canonicalAuthority) {\n        const authorityHost = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_0__.UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\n        staticAliases = getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG, logger) || getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES, logger) || staticAuthorityOptions.knownAuthorities;\n    }\n    return staticAliases || [];\n}\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */ function getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n    if (authorityHost && cloudDiscoveryMetadata) {\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\n        if (metadata) {\n            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\n            return metadata.aliases;\n        } else {\n            logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\n        }\n    }\n    return null;\n}\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */ function getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\n    return metadata;\n}\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */ function getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\n    for(let i = 0; i < response.length; i++){\n        const metadata = response[i];\n        if (metadata.aliases.includes(authorityHost)) {\n            return metadata;\n        }\n    }\n    return null;\n}\n //# sourceMappingURL=AuthorityMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureCloudInstance: () => (/* binding */ AzureCloudInstance)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const AzureCloudInstance = {\n    // AzureCloudInstance is not specified.\n    None: \"none\",\n    // Microsoft Azure public cloud\n    AzurePublic: \"https://login.microsoftonline.com\",\n    // Microsoft PPE\n    AzurePpe: \"https://login.windows-ppe.net\",\n    // Microsoft Chinese national/regional cloud\n    AzureChina: \"https://login.chinacloudapi.cn\",\n    // Microsoft German national/regional cloud (\"Black Forest\")\n    AzureGermany: \"https://login.microsoftonline.de\",\n    // US Government cloud\n    AzureUsGovernment: \"https://login.microsoftonline.us\"\n};\n //# sourceMappingURL=AuthorityOptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eU9wdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQSxxQkFBcUI7SUFDdkIsdUNBQXVDO0lBQ3ZDQyxNQUFNO0lBQ04sK0JBQStCO0lBQy9CQyxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCQyxVQUFVO0lBQ1YsNENBQTRDO0lBQzVDQyxZQUFZO0lBQ1osNERBQTREO0lBQzVEQyxjQUFjO0lBQ2Qsc0JBQXNCO0lBQ3RCQyxtQkFBbUI7QUFDdkI7QUFFOEIsQ0FDOUIsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eU9wdGlvbnMubWpzPzQ3YjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQXp1cmVDbG91ZEluc3RhbmNlID0ge1xyXG4gICAgLy8gQXp1cmVDbG91ZEluc3RhbmNlIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAgICBOb25lOiBcIm5vbmVcIixcclxuICAgIC8vIE1pY3Jvc29mdCBBenVyZSBwdWJsaWMgY2xvdWRcclxuICAgIEF6dXJlUHVibGljOiBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbVwiLFxyXG4gICAgLy8gTWljcm9zb2Z0IFBQRVxyXG4gICAgQXp1cmVQcGU6IFwiaHR0cHM6Ly9sb2dpbi53aW5kb3dzLXBwZS5uZXRcIixcclxuICAgIC8vIE1pY3Jvc29mdCBDaGluZXNlIG5hdGlvbmFsL3JlZ2lvbmFsIGNsb3VkXHJcbiAgICBBenVyZUNoaW5hOiBcImh0dHBzOi8vbG9naW4uY2hpbmFjbG91ZGFwaS5jblwiLFxyXG4gICAgLy8gTWljcm9zb2Z0IEdlcm1hbiBuYXRpb25hbC9yZWdpb25hbCBjbG91ZCAoXCJCbGFjayBGb3Jlc3RcIilcclxuICAgIEF6dXJlR2VybWFueTogXCJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5kZVwiLFxyXG4gICAgLy8gVVMgR292ZXJubWVudCBjbG91ZFxyXG4gICAgQXp1cmVVc0dvdmVybm1lbnQ6IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUudXNcIixcclxufTtcblxuZXhwb3J0IHsgQXp1cmVDbG91ZEluc3RhbmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRob3JpdHlPcHRpb25zLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBenVyZUNsb3VkSW5zdGFuY2UiLCJOb25lIiwiQXp1cmVQdWJsaWMiLCJBenVyZVBwZSIsIkF6dXJlQ2hpbmEiLCJBenVyZUdlcm1hbnkiLCJBenVyZVVzR292ZXJubWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthorityType: () => (/* binding */ AuthorityType)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Authority types supported by MSAL.\r\n */ const AuthorityType = {\n    Default: 0,\n    Adfs: 1,\n    Dsts: 2,\n    Ciam: 3\n};\n //# sourceMappingURL=AuthorityType.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eVR5cGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Q0FFQyxHQUNELE1BQU1BLGdCQUFnQjtJQUNsQkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsTUFBTTtBQUNWO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9BdXRob3JpdHlUeXBlLm1qcz9mZmExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBdXRob3JpdHkgdHlwZXMgc3VwcG9ydGVkIGJ5IE1TQUwuXHJcbiAqL1xyXG5jb25zdCBBdXRob3JpdHlUeXBlID0ge1xyXG4gICAgRGVmYXVsdDogMCxcclxuICAgIEFkZnM6IDEsXHJcbiAgICBEc3RzOiAyLFxyXG4gICAgQ2lhbTogMyxcclxufTtcblxuZXhwb3J0IHsgQXV0aG9yaXR5VHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aG9yaXR5VHlwZS5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aG9yaXR5VHlwZSIsIkRlZmF1bHQiLCJBZGZzIiwiRHN0cyIsIkNpYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCloudInstanceDiscoveryErrorResponse: () => (/* binding */ isCloudInstanceDiscoveryErrorResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isCloudInstanceDiscoveryErrorResponse(response) {\n    return response.hasOwnProperty(\"error\") && response.hasOwnProperty(\"error_description\");\n}\n //# sourceMappingURL=CloudInstanceDiscoveryErrorResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlFcnJvclJlc3BvbnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0Esc0NBQXNDQyxRQUFRO0lBQ25ELE9BQVFBLFNBQVNDLGNBQWMsQ0FBQyxZQUM1QkQsU0FBU0MsY0FBYyxDQUFDO0FBQ2hDO0FBRWlELENBQ2pELGdFQUFnRSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9DbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZS5tanM/ODRhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gKHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiZXJyb3JcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImVycm9yX2Rlc2NyaXB0aW9uXCIpKTtcclxufVxuXG5leHBvcnQgeyBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlFcnJvclJlc3BvbnNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZS5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNDbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZSIsInJlc3BvbnNlIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCloudInstanceDiscoveryResponse: () => (/* binding */ isCloudInstanceDiscoveryResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isCloudInstanceDiscoveryResponse(response) {\n    return response.hasOwnProperty(\"tenant_discovery_endpoint\") && response.hasOwnProperty(\"metadata\");\n}\n //# sourceMappingURL=CloudInstanceDiscoveryResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELFNBQVNBLGlDQUFpQ0MsUUFBUTtJQUM5QyxPQUFRQSxTQUFTQyxjQUFjLENBQUMsZ0NBQzVCRCxTQUFTQyxjQUFjLENBQUM7QUFDaEM7QUFFNEMsQ0FDNUMsMkRBQTJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZS5tanM/ZWY5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIChyZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcInRlbmFudF9kaXNjb3ZlcnlfZW5kcG9pbnRcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcIm1ldGFkYXRhXCIpKTtcclxufVxuXG5leHBvcnQgeyBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xvdWRJbnN0YW5jZURpc2NvdmVyeVJlc3BvbnNlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZSIsInJlc3BvbnNlIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isOpenIdConfigResponse: () => (/* binding */ isOpenIdConfigResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isOpenIdConfigResponse(response) {\n    return response.hasOwnProperty(\"authorization_endpoint\") && response.hasOwnProperty(\"token_endpoint\") && response.hasOwnProperty(\"issuer\") && response.hasOwnProperty(\"jwks_uri\");\n}\n //# sourceMappingURL=OpenIdConfigResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L09wZW5JZENvbmZpZ1Jlc3BvbnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0EsdUJBQXVCQyxRQUFRO0lBQ3BDLE9BQVFBLFNBQVNDLGNBQWMsQ0FBQyw2QkFDNUJELFNBQVNDLGNBQWMsQ0FBQyxxQkFDeEJELFNBQVNDLGNBQWMsQ0FBQyxhQUN4QkQsU0FBU0MsY0FBYyxDQUFDO0FBQ2hDO0FBRWtDLENBQ2xDLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9PcGVuSWRDb25maWdSZXNwb25zZS5tanM/Y2ZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc09wZW5JZENvbmZpZ1Jlc3BvbnNlKHJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gKHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiYXV0aG9yaXphdGlvbl9lbmRwb2ludFwiKSAmJlxyXG4gICAgICAgIHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwidG9rZW5fZW5kcG9pbnRcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImlzc3VlclwiKSAmJlxyXG4gICAgICAgIHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiandrc191cmlcIikpO1xyXG59XG5cbmV4cG9ydCB7IGlzT3BlbklkQ29uZmlnUmVzcG9uc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZW5JZENvbmZpZ1Jlc3BvbnNlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc09wZW5JZENvbmZpZ1Jlc3BvbnNlIiwicmVzcG9uc2UiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProtocolMode: () => (/* binding */ ProtocolMode)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Protocol modes supported by MSAL.\r\n */ const ProtocolMode = {\n    AAD: \"AAD\",\n    OIDC: \"OIDC\"\n};\n //# sourceMappingURL=ProtocolMode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L1Byb3RvY29sTW9kZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUEsZUFBZTtJQUNqQkMsS0FBSztJQUNMQyxNQUFNO0FBQ1Y7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L1Byb3RvY29sTW9kZS5tanM/NWQxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdG9jb2wgbW9kZXMgc3VwcG9ydGVkIGJ5IE1TQUwuXHJcbiAqL1xyXG5jb25zdCBQcm90b2NvbE1vZGUgPSB7XHJcbiAgICBBQUQ6IFwiQUFEXCIsXHJcbiAgICBPSURDOiBcIk9JRENcIixcclxufTtcblxuZXhwb3J0IHsgUHJvdG9jb2xNb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm90b2NvbE1vZGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlByb3RvY29sTW9kZSIsIkFBRCIsIk9JREMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegionDiscovery: () => (/* binding */ RegionDiscovery)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class RegionDiscovery {\n    constructor(networkInterface, logger, performanceClient, correlationId){\n        this.networkInterface = networkInterface;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */ async detectRegion(environmentRegion, regionDiscoveryMetadata) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n        // Initialize auto detected region with the region from the envrionment\n        let autodetectedRegionName = environmentRegion;\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n            try {\n                const localIMDSVersionResponse = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getRegionFromIMDS.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_VERSION, options);\n                if (localIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.IMDS;\n                }\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\n                if (localIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpBadRequest) {\n                    const currentIMDSVersion = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getCurrentVersion.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n                    const currentIMDSVersionResponse = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getRegionFromIMDS.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\n                    if (currentIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.IMDS;\n                    }\n                }\n            } catch (e) {\n                regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            }\n        } else {\n            regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n        return autodetectedRegionName || null;\n    }\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */ async getRegionFromIMDS(version, options) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return this.networkInterface.sendGetRequestAsync(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_TIMEOUT);\n    }\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */ async getCurrentVersion(options) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_ENDPOINT}?format=json`, options);\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n// Options for the IMDS endpoint request\nRegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n        Metadata: \"true\"\n    }\n};\n //# sourceMappingURL=RegionDiscovery.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheManager: () => (/* binding */ CacheManager),\n/* harmony export */   DefaultStorageClass: () => (/* binding */ DefaultStorageClass)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../request/ScopeSet.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entities/AccountEntity.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../account/AccountInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _authority_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../authority/AuthorityMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\");\n/* harmony import */ var _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/CacheError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/CacheErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n * @internal\r\n */ class CacheManager {\n    constructor(clientId, cryptoImpl, logger, staticAuthorityOptions){\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n        this.commonLogger = logger.clone(_packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__.version);\n        this.staticAuthorityOptions = staticAuthorityOptions;\n    }\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return this.buildTenantProfiles(this.getAccountsFilteredBy(accountFilter || {}), accountFilter);\n    }\n    /**\r\n     * Gets first tenanted AccountInfo object found based on provided filters\r\n     */ getAccountInfoFilteredBy(accountFilter) {\n        const allAccounts = this.getAllAccounts(accountFilter);\n        if (allAccounts.length > 1) {\n            // If one or more accounts are found, prioritize accounts that have an ID token\n            const sortedAccounts = allAccounts.sort((account)=>{\n                return account.idTokenClaims ? -1 : 1;\n            });\n            return sortedAccounts[0];\n        } else if (allAccounts.length === 1) {\n            // If only one account is found, return it regardless of whether a matching ID token was found\n            return allAccounts[0];\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * Returns a single matching\r\n     * @param accountFilter\r\n     * @returns\r\n     */ getBaseAccountInfo(accountFilter) {\n        const accountEntities = this.getAccountsFilteredBy(accountFilter);\n        if (accountEntities.length > 0) {\n            return accountEntities[0].getAccountInfo();\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters\r\n     * and builds the account info objects from the matching ID token's claims\r\n     * @param cachedAccounts\r\n     * @param accountFilter\r\n     * @returns Array of AccountInfo objects that match account and tenant profile filters\r\n     */ buildTenantProfiles(cachedAccounts, accountFilter) {\n        return cachedAccounts.flatMap((accountEntity)=>{\n            return this.getTenantProfilesFromAccountEntity(accountEntity, accountFilter?.tenantId, accountFilter);\n        });\n    }\n    getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, tenantProfileFilter) {\n        let tenantedAccountInfo = null;\n        let idTokenClaims;\n        if (tenantProfileFilter) {\n            if (!this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter)) {\n                return null;\n            }\n        }\n        const idToken = this.getIdToken(accountInfo, tokenKeys, tenantProfile.tenantId);\n        if (idToken) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_1__.extractTokenClaims)(idToken.secret, this.cryptoImpl.base64Decode);\n            if (!this.idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter)) {\n                // ID token sourced claims don't match so this tenant profile is not a match\n                return null;\n            }\n        }\n        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims\n        tenantedAccountInfo = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.updateAccountTenantProfileData)(accountInfo, tenantProfile, idTokenClaims, idToken?.secret);\n        return tenantedAccountInfo;\n    }\n    getTenantProfilesFromAccountEntity(accountEntity, targetTenantId, tenantProfileFilter) {\n        const accountInfo = accountEntity.getAccountInfo();\n        let searchTenantProfiles = accountInfo.tenantProfiles || new Map();\n        const tokenKeys = this.getTokenKeys();\n        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists\n        if (targetTenantId) {\n            const tenantProfile = searchTenantProfiles.get(targetTenantId);\n            if (tenantProfile) {\n                // Reduce search field to just this tenant profile\n                searchTenantProfiles = new Map([\n                    [\n                        targetTenantId,\n                        tenantProfile\n                    ]\n                ]);\n            } else {\n                // No tenant profile for search tenant ID, return empty array\n                return [];\n            }\n        }\n        const matchingTenantProfiles = [];\n        searchTenantProfiles.forEach((tenantProfile)=>{\n            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, tenantProfileFilter);\n            if (tenantedAccountInfo) {\n                matchingTenantProfiles.push(tenantedAccountInfo);\n            }\n        });\n        return matchingTenantProfiles;\n    }\n    tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter) {\n        if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTenantProfile(tenantProfile, tenantProfileFilter.localAccountId)) {\n            return false;\n        }\n        if (!!tenantProfileFilter.name && !(tenantProfile.name === tenantProfileFilter.name)) {\n            return false;\n        }\n        if (tenantProfileFilter.isHomeTenant !== undefined && !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)) {\n            return false;\n        }\n        return true;\n    }\n    idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter) {\n        // Tenant Profile filtering\n        if (tenantProfileFilter) {\n            if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTokenClaims(idTokenClaims, tenantProfileFilter.localAccountId)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.loginHint && !this.matchLoginHintFromTokenClaims(idTokenClaims, tenantProfileFilter.loginHint)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.username && !this.matchUsername(idTokenClaims.preferred_username, tenantProfileFilter.username)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.name && !this.matchName(idTokenClaims, tenantProfileFilter.name)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.sid && !this.matchSid(idTokenClaims, tenantProfileFilter.sid)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */ async saveCacheRecord(cacheRecord, storeInCache, correlationId) {\n        if (!cacheRecord) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.invalidCacheRecord);\n        }\n        try {\n            if (!!cacheRecord.account) {\n                this.setAccount(cacheRecord.account);\n            }\n            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\n                this.setIdTokenCredential(cacheRecord.idToken);\n            }\n            if (!!cacheRecord.accessToken && storeInCache?.accessToken !== false) {\n                await this.saveAccessToken(cacheRecord.accessToken);\n            }\n            if (!!cacheRecord.refreshToken && storeInCache?.refreshToken !== false) {\n                this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n            if (!!cacheRecord.appMetadata) {\n                this.setAppMetadata(cacheRecord.appMetadata);\n            }\n        } catch (e) {\n            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);\n            if (e instanceof Error) {\n                this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${e.message}`, correlationId);\n                if (e.name === \"QuotaExceededError\" || e.name === \"NS_ERROR_DOM_QUOTA_REACHED\" || e.message.includes(\"exceeded the quota\")) {\n                    this.commonLogger?.error(`CacheManager.saveCacheRecord: exceeded storage quota`, correlationId);\n                    throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(_error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cacheQuotaExceededErrorCode);\n                } else {\n                    throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(e.name, e.message);\n                }\n            } else {\n                this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${e}`, correlationId);\n                throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(_error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cacheUnknownErrorCode);\n            }\n        }\n    }\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */ async saveAccessToken(credential) {\n        const accessTokenFilter = {\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n            tokenType: credential.tokenType,\n            requestedClaimsHash: credential.requestedClaimsHash\n        };\n        const tokenKeys = this.getTokenKeys();\n        const currentScopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(credential.target);\n        const removedAccessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n                return;\n            }\n            const tokenEntity = this.getAccessTokenCredential(key);\n            if (tokenEntity && this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n                const tokenScopeSet = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    removedAccessTokens.push(this.removeAccessToken(key));\n                }\n            }\n        });\n        await Promise.all(removedAccessTokens);\n        this.setAccessTokenCredential(credential);\n    }\n    /**\r\n     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache\r\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param accountFilter - An object containing Account properties to filter by\r\n     */ getAccountsFilteredBy(accountFilter) {\n        const allAccountKeys = this.getAccountKeys();\n        const matchingAccounts = [];\n        allAccountKeys.forEach((cacheKey)=>{\n            if (!this.isAccountKey(cacheKey, accountFilter.homeAccountId)) {\n                // Don't parse value if the key doesn't match the account filters\n                return;\n            }\n            const entity = this.getAccount(cacheKey, this.commonLogger);\n            // Match base account fields\n            if (!entity) {\n                return;\n            }\n            if (!!accountFilter.homeAccountId && !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.username && !this.matchUsername(entity.username, accountFilter.username)) {\n                return;\n            }\n            if (!!accountFilter.environment && !this.matchEnvironment(entity, accountFilter.environment)) {\n                return;\n            }\n            if (!!accountFilter.realm && !this.matchRealm(entity, accountFilter.realm)) {\n                return;\n            }\n            if (!!accountFilter.nativeAccountId && !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.authorityType && !this.matchAuthorityType(entity, accountFilter.authorityType)) {\n                return;\n            }\n            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts\n            const tenantProfileFilter = {\n                localAccountId: accountFilter?.localAccountId,\n                name: accountFilter?.name\n            };\n            const matchingTenantProfiles = entity.tenantProfiles?.filter((tenantProfile)=>{\n                return this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter);\n            });\n            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) {\n                // No tenant profile for this account matches filter, don't add to list of matching accounts\n                return;\n            }\n            matchingAccounts.push(entity);\n        });\n        return matchingAccounts;\n    }\n    /**\r\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n     * @param key\r\n     * @param homeAccountId\r\n     * @param tenantId\r\n     * @returns\r\n     */ isAccountKey(key, homeAccountId, tenantId) {\n        if (key.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR).length < 3) {\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n            return false;\n        }\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n            return false;\n        }\n        // Do not check environment as aliasing can cause false negatives\n        return true;\n    }\n    /**\r\n     * Returns true if the given key matches our credential key schema.\r\n     * @param key\r\n     */ isCredentialKey(key) {\n        if (key.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR).length < 6) {\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        const lowerCaseKey = key.toLowerCase();\n        // Credential keys must indicate what credential type they represent\n        if (lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ID_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\n            return false;\n        }\n        if (lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\n            // Refresh tokens must contain the client id or family id\n            const clientIdValidation = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}${this.clientId}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}`;\n            const familyIdValidation = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}`;\n            if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n                return false;\n            }\n        } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n            // Tokens must contain the clientId\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */ credentialMatchesFilter(entity, filter) {\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n            return false;\n        }\n        if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n            return false;\n        }\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */ if (typeof filter.homeAccountId === \"string\" && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n            return false;\n        }\n        if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n            return false;\n        }\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n            return false;\n        }\n        if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\n            return false;\n        }\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n            return false;\n        }\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */ if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n            return false;\n        }\n        // If request OR cached entity has requested Claims Hash, check if they match\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n            // Don't match if either is undefined or they are different\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n                return false;\n            }\n        }\n        // Access Token with Auth Scheme specific matching\n        if (entity.credentialType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n            if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\n                return false;\n            }\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n            if (filter.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.SSH) {\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */ getAppMetadataFilteredBy(filter) {\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata = {};\n        allCacheKeys.forEach((cacheKey)=>{\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n                return;\n            }\n            if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n                return;\n            }\n            matchingAppMetadata[cacheKey] = entity;\n        });\n        return matchingAppMetadata;\n    }\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */ getAuthorityMetadataByAlias(host) {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n        allCacheKeys.forEach((cacheKey)=>{\n            // don't parse any non-authorityMetadata type cache entities\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n            matchedEntity = entity;\n        });\n        return matchedEntity;\n    }\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */ async removeAllAccounts() {\n        const allAccountKeys = this.getAccountKeys();\n        const removedAccounts = [];\n        allAccountKeys.forEach((cacheKey)=>{\n            removedAccounts.push(this.removeAccount(cacheKey));\n        });\n        await Promise.all(removedAccounts);\n    }\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */ async removeAccount(accountKey) {\n        const account = this.getAccount(accountKey, this.commonLogger);\n        if (!account) {\n            return;\n        }\n        await this.removeAccountContext(account);\n        this.removeItem(accountKey);\n    }\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */ async removeAccountContext(account) {\n        const allTokenKeys = this.getTokenKeys();\n        const accountId = account.generateAccountId();\n        const removedCredentials = [];\n        allTokenKeys.idToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                this.removeIdToken(key);\n            }\n        });\n        allTokenKeys.accessToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(this.removeAccessToken(key));\n            }\n        });\n        allTokenKeys.refreshToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                this.removeRefreshToken(key);\n            }\n        });\n        await Promise.all(removedCredentials);\n    }\n    /**\r\n     * Migrates a single-tenant account and all it's associated alternate cross-tenant account objects in the\r\n     * cache into a condensed multi-tenant account object with tenant profiles.\r\n     * @param accountKey\r\n     * @param accountEntity\r\n     * @param logger\r\n     * @returns\r\n     */ updateOutdatedCachedAccount(accountKey, accountEntity, logger) {\n        // Only update if account entity is defined and has no tenantProfiles object (is outdated)\n        if (accountEntity && accountEntity.isSingleTenant()) {\n            this.commonLogger?.verbose(\"updateOutdatedCachedAccount: Found a single-tenant (outdated) account entity in the cache, migrating to multi-tenant account entity\");\n            // Get keys of all accounts belonging to user\n            const matchingAccountKeys = this.getAccountKeys().filter((key)=>{\n                return key.startsWith(accountEntity.homeAccountId);\n            });\n            // Get all account entities belonging to user\n            const accountsToMerge = [];\n            matchingAccountKeys.forEach((key)=>{\n                const account = this.getCachedAccountEntity(key);\n                if (account) {\n                    accountsToMerge.push(account);\n                }\n            });\n            // Set base account to home account if available, any account if not\n            const baseAccount = accountsToMerge.find((account)=>{\n                return (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.tenantIdMatchesHomeTenant)(account.realm, account.homeAccountId);\n            }) || accountsToMerge[0];\n            // Populate tenant profiles built from each account entity belonging to the user\n            baseAccount.tenantProfiles = accountsToMerge.map((account)=>{\n                return {\n                    tenantId: account.realm,\n                    localAccountId: account.localAccountId,\n                    name: account.name,\n                    isHomeTenant: (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.tenantIdMatchesHomeTenant)(account.realm, account.homeAccountId)\n                };\n            });\n            const updatedAccount = CacheManager.toObject(new _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__.AccountEntity(), {\n                ...baseAccount\n            });\n            const newAccountKey = updatedAccount.generateAccountKey();\n            // Clear cache of legacy account objects that have been collpsed into tenant profiles\n            matchingAccountKeys.forEach((key)=>{\n                if (key !== newAccountKey) {\n                    this.removeOutdatedAccount(accountKey);\n                }\n            });\n            // Cache updated account object\n            this.setAccount(updatedAccount);\n            logger?.verbose(\"Updated an outdated account entity in the cache\");\n            return updatedAccount;\n        }\n        // No update is necessary\n        return accountEntity;\n    }\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */ async removeAccessToken(key) {\n        const credential = this.getAccessTokenCredential(key);\n        if (!credential) {\n            return;\n        }\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\n        if (credential.credentialType.toLowerCase() === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\n            if (credential.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.POP) {\n                const accessTokenWithAuthSchemeEntity = credential;\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\n                if (kid) {\n                    try {\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\n                    } catch (error) {\n                        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.bindingKeyNotRemoved);\n                    }\n                }\n            }\n        }\n        return this.removeItem(key);\n    }\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */ removeAppMetadata() {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey)=>{\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey);\n            }\n        });\n        return true;\n    }\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */ readAccountFromCache(account) {\n        const accountKey = _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__.AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey, this.commonLogger);\n    }\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param targetRealm {?string}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getIdToken(account, tokenKeys, targetRealm, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\n        const idTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ID_TOKEN,\n            clientId: this.clientId,\n            realm: targetRealm\n        };\n        const idTokenMap = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n        const numIdTokens = idTokenMap.size;\n        if (numIdTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n            return null;\n        } else if (numIdTokens > 1) {\n            let tokensToBeRemoved = idTokenMap;\n            // Multiple tenant profiles and no tenant specified, pick home account\n            if (!targetRealm) {\n                const homeIdTokenMap = new Map();\n                idTokenMap.forEach((idToken, key)=>{\n                    if (idToken.realm === account.tenantId) {\n                        homeIdTokenMap.set(key, idToken);\n                    }\n                });\n                const numHomeIdTokens = homeIdTokenMap.size;\n                if (numHomeIdTokens < 1) {\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result\");\n                    return idTokenMap.values().next().value;\n                } else if (numHomeIdTokens === 1) {\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile\");\n                    return homeIdTokenMap.values().next().value;\n                } else {\n                    // Multiple ID tokens for home tenant profile, remove all and return null\n                    tokensToBeRemoved = homeIdTokenMap;\n                }\n            }\n            // Multiple tokens for a single tenant profile, remove all and return null\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple matching ID tokens found, clearing them\");\n            tokensToBeRemoved.forEach((idToken, key)=>{\n                this.removeIdToken(key);\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({\n                    multiMatchedID: idTokenMap.size\n                }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning ID token\");\n        return idTokenMap.values().next().value;\n    }\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */ getIdTokensByFilter(filter, tokenKeys) {\n        const idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\n        const idTokens = new Map();\n        idTokenKeys.forEach((key)=>{\n            if (!this.idTokenKeyMatchesFilter(key, {\n                clientId: this.clientId,\n                ...filter\n            })) {\n                return;\n            }\n            const idToken = this.getIdTokenCredential(key);\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\n                idTokens.set(key, idToken);\n            }\n        });\n        return idTokens;\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */ idTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */ removeIdToken(key) {\n        this.removeItem(key);\n    }\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */ removeRefreshToken(key) {\n        this.removeItem(key);\n    }\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param request {BaseAuthRequest}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getAccessToken(account, request, tokenKeys, targetRealm, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n        const scopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.createSearchScopes(request.scopes);\n        const authScheme = request.authenticationScheme || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER;\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */ const credentialType = authScheme && authScheme.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER.toLowerCase() ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN;\n        const accessTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId: this.clientId,\n            realm: targetRealm || account.tenantId,\n            target: scopes,\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash\n        };\n        const accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\n        const accessTokens = [];\n        accessTokenKeys.forEach((key)=>{\n            // Validate key\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n                const accessToken = this.getAccessTokenCredential(key);\n                // Validate value\n                if (accessToken && this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n                    accessTokens.push(accessToken);\n                }\n            }\n        });\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n            return null;\n        } else if (numAccessTokens > 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\n            accessTokens.forEach((accessToken)=>{\n                void this.removeAccessToken((0,_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_10__.generateCredentialKey)(accessToken));\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({\n                    multiMatchedAT: accessTokens.length\n                }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n        return accessTokens[0];\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */ accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.target) {\n            const scopes = filter.target.asArray();\n            for(let i = 0; i < scopes.length; i++){\n                if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache lookup a missing scope would be a cache miss\n                    return false;\n                } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\n                    return true;\n                }\n            }\n        }\n        return true;\n    }\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */ getAccessTokensByFilter(filter) {\n        const tokenKeys = this.getTokenKeys();\n        const accessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\n                return;\n            }\n            const accessToken = this.getAccessTokenCredential(key);\n            if (accessToken && this.credentialMatchesFilter(accessToken, filter)) {\n                accessTokens.push(accessToken);\n            }\n        });\n        return accessTokens;\n    }\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param account {AccountInfo}\r\n     * @param familyRT {boolean}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getRefreshToken(account, familyRT, tokenKeys, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n        const id = familyRT ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID : undefined;\n        const refreshTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN,\n            clientId: this.clientId,\n            familyId: id\n        };\n        const refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\n        const refreshTokens = [];\n        refreshTokenKeys.forEach((key)=>{\n            // Validate key\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n                const refreshToken = this.getRefreshTokenCredential(key);\n                // Validate value\n                if (refreshToken && this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n                    refreshTokens.push(refreshToken);\n                }\n            }\n        });\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\n            performanceClient.addFields({\n                multiMatchedRT: numRefreshTokens\n            }, correlationId);\n        }\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n        return refreshTokens[0];\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */ refreshTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\n            return false;\n        }\n        // If familyId is used, clientId is not in the key\n        if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */ readAppMetadataFromCache(environment) {\n        const appMetadataFilter = {\n            environment,\n            clientId: this.clientId\n        };\n        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries = Object.keys(appMetadata).map((key)=>appMetadata[key]);\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        } else if (numAppMetadata > 1) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.multipleMatchingAppMetadata);\n        }\n        return appMetadataEntries[0];\n    }\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */ isAppMetadataFOCI(environment) {\n        const appMetadata = this.readAppMetadataFromCache(environment);\n        return !!(appMetadata && appMetadata.familyId === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID);\n    }\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */ matchHomeAccountId(entity, homeAccountId) {\n        return !!(typeof entity.homeAccountId === \"string\" && homeAccountId === entity.homeAccountId);\n    }\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */ matchLocalAccountIdFromTokenClaims(tokenClaims, localAccountId) {\n        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;\n        return localAccountId === idTokenLocalAccountId;\n    }\n    matchLocalAccountIdFromTenantProfile(tenantProfile, localAccountId) {\n        return tenantProfile.localAccountId === localAccountId;\n    }\n    /**\r\n     * helper to match names\r\n     * @param entity\r\n     * @param name\r\n     * @returns true if the downcased name properties are present and match in the filter and the entity\r\n     */ matchName(claims, name) {\n        return !!(name.toLowerCase() === claims.name?.toLowerCase());\n    }\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */ matchUsername(cachedUsername, filterUsername) {\n        return !!(cachedUsername && typeof cachedUsername === \"string\" && filterUsername?.toLowerCase() === cachedUsername.toLowerCase());\n    }\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */ matchUserAssertionHash(entity, userAssertionHash) {\n        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n    }\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */ matchEnvironment(entity, environment) {\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\n        if (this.staticAuthorityOptions) {\n            const staticAliases = (0,_authority_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_11__.getAliasesFromStaticSources)(this.staticAuthorityOptions, this.commonLogger);\n            if (staticAliases.includes(environment) && staticAliases.includes(entity.environment)) {\n                return true;\n            }\n        }\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n            return true;\n        }\n        return false;\n    }\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */ matchCredentialType(entity, credentialType) {\n        return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n    }\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */ matchClientId(entity, clientId) {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */ matchFamilyId(entity, familyId) {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */ matchRealm(entity, realm) {\n        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());\n    }\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */ matchNativeAccountId(entity, nativeAccountId) {\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n    }\n    /**\r\n     * helper to match loginHint which can be either:\r\n     * 1. login_hint ID token claim\r\n     * 2. username in cached account object\r\n     * 3. upn in ID token claims\r\n     * @param entity\r\n     * @param loginHint\r\n     * @returns\r\n     */ matchLoginHintFromTokenClaims(tokenClaims, loginHint) {\n        if (tokenClaims.login_hint === loginHint) {\n            return true;\n        }\n        if (tokenClaims.preferred_username === loginHint) {\n            return true;\n        }\n        if (tokenClaims.upn === loginHint) {\n            return true;\n        }\n        return false;\n    }\n    /**\r\n     * Helper to match sid\r\n     * @param entity\r\n     * @param sid\r\n     * @returns true if the sid claim is present and matches the filter\r\n     */ matchSid(idTokenClaims, sid) {\n        return idTokenClaims.sid === sid;\n    }\n    matchAuthorityType(entity, authorityType) {\n        return !!(entity.authorityType && authorityType.toLowerCase() === entity.authorityType.toLowerCase());\n    }\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */ matchTarget(entity, target) {\n        const isNotAccessTokenCredential = entity.credentialType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN && entity.credentialType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        if (isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n        const entityScopeSet = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(entity.target);\n        return entityScopeSet.containsScopeSet(target);\n    }\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */ matchTokenType(entity, tokenType) {\n        return !!(entity.tokenType && entity.tokenType === tokenType);\n    }\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param keyId\r\n     */ matchKeyId(entity, keyId) {\n        return !!(entity.keyId && entity.keyId === keyId);\n    }\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */ isAppMetadata(key) {\n        return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.APP_METADATA) !== -1;\n    }\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */ isAuthorityMetadata(key) {\n        return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */ generateAuthorityMetadataCacheKey(authority) {\n        return `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */ static toObject(obj, json) {\n        for(const propertyName in json){\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n/** @internal */ class DefaultStorageClass extends CacheManager {\n    setAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getCachedAccountEntity() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setIdTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getIdTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAccessTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccessTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setRefreshTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getRefreshTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAppMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAppMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setServerTelemetry() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getServerTelemetry() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAuthorityMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAuthorityMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAuthorityMetadataKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setThrottlingCache() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getThrottlingCache() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    removeItem() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccountKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getTokenKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    updateCredentialCacheKey() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    removeOutdatedAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n}\n //# sourceMappingURL=CacheManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountEntity: () => (/* binding */ AccountEntity)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../account/AccountInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../authority/AuthorityType.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../account/TokenClaims.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\");\n/* harmony import */ var _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../authority/ProtocolMode.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      nativeAccountId: Account identifier on the native device\r\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n * }\r\n * @internal\r\n */ class AccountEntity {\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */ generateAccountId() {\n        const accountId = [\n            this.homeAccountId,\n            this.environment\n        ];\n        return accountId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */ generateAccountKey() {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId\n        });\n    }\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */ getAccountInfo() {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            nativeAccountId: this.nativeAccountId,\n            authorityType: this.authorityType,\n            // Deserialize tenant profiles array into a Map\n            tenantProfiles: new Map((this.tenantProfiles || []).map((tenantProfile)=>{\n                return [\n                    tenantProfile.tenantId,\n                    tenantProfile\n                ];\n            }))\n        };\n    }\n    /**\r\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\r\n     */ isSingleTenant() {\n        return !this.tenantProfiles;\n    }\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */ static generateAccountCacheKey(accountInterface) {\n        const homeTenantId = accountInterface.homeAccountId.split(\".\")[1];\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            homeTenantId || accountInterface.tenantId || \"\"\n        ];\n        return accountKey.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param accountDetails\r\n     */ static createAccount(accountDetails, authority, base64Decode) {\n        const account = new AccountEntity();\n        if (authority.authorityType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Adfs) {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.ADFS_ACCOUNT_TYPE;\n        } else if (authority.protocolMode === _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_2__.ProtocolMode.AAD) {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        } else {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        }\n        let clientInfo;\n        if (accountDetails.clientInfo && base64Decode) {\n            clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__.buildClientInfo)(accountDetails.clientInfo, base64Decode);\n        }\n        account.clientInfo = accountDetails.clientInfo;\n        account.homeAccountId = accountDetails.homeAccountId;\n        account.nativeAccountId = accountDetails.nativeAccountId;\n        const env = accountDetails.environment || authority && authority.getPreferredCache();\n        if (!env) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.invalidCacheEnvironment);\n        }\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm = clientInfo?.utid || (0,_account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_6__.getTenantIdFromIdTokenClaims)(accountDetails.idTokenClaims) || \"\";\n        // How do you account for MSA CID here?\n        account.localAccountId = clientInfo?.uid || accountDetails.idTokenClaims?.oid || accountDetails.idTokenClaims?.sub || \"\";\n        /*\r\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n         * policy is configured to return more than 1 email.\r\n         */ const preferredUsername = accountDetails.idTokenClaims?.preferred_username || accountDetails.idTokenClaims?.upn;\n        const email = accountDetails.idTokenClaims?.emails ? accountDetails.idTokenClaims.emails[0] : null;\n        account.username = preferredUsername || email || \"\";\n        account.name = accountDetails.idTokenClaims?.name || \"\";\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n        account.msGraphHost = accountDetails.msGraphHost;\n        if (accountDetails.tenantProfiles) {\n            account.tenantProfiles = accountDetails.tenantProfiles;\n        } else {\n            const tenantProfile = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_7__.buildTenantProfile)(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);\n            account.tenantProfiles = [\n                tenantProfile\n            ];\n        }\n        return account;\n    }\n    /**\r\n     * Creates an AccountEntity object from AccountInfo\r\n     * @param accountInfo\r\n     * @param cloudGraphHostName\r\n     * @param msGraphHost\r\n     * @returns\r\n     */ static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n        const account = new AccountEntity();\n        account.authorityType = accountInfo.authorityType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = accountInfo.homeAccountId;\n        account.localAccountId = accountInfo.localAccountId;\n        account.nativeAccountId = accountInfo.nativeAccountId;\n        account.realm = accountInfo.tenantId;\n        account.environment = accountInfo.environment;\n        account.username = accountInfo.username;\n        account.name = accountInfo.name;\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n        // Serialize tenant profiles map into an array\n        account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);\n        return account;\n    }\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */ static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n        // since ADFS/DSTS do not have tid and does not set client_info\n        if (!(authType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Adfs || authType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Dsts)) {\n            // for cases where there is clientInfo\n            if (serverClientInfo) {\n                try {\n                    const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__.buildClientInfo)(serverClientInfo, cryptoObj.base64Decode);\n                    if (clientInfo.uid && clientInfo.utid) {\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\n                    }\n                } catch (e) {}\n            }\n            logger.warning(\"No client info in response\");\n        }\n        // default to \"sub\" claim\n        return idTokenClaims?.sub || \"\";\n    }\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */ static isAccountEntity(entity) {\n        if (!entity) {\n            return false;\n        }\n        return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n    }\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */ static accountInfoIsEqual(accountA, accountB, compareClaims) {\n        if (!accountA || !accountB) {\n            return false;\n        }\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = accountA.idTokenClaims || {};\n            const accountBClaims = accountB.idTokenClaims || {};\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n        }\n        return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n    }\n}\n //# sourceMappingURL=AccountEntity.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY2FjaGUvZW50aXRpZXMvQWNjb3VudEVudGl0eS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3lFO0FBQ1Y7QUFDSTtBQUNLO0FBQ047QUFDVztBQUNiO0FBQ2U7QUFFL0U7OztDQUdDLEdBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FzQkMsR0FDRCxNQUFNUztJQUNGOztLQUVDLEdBQ0RDLG9CQUFvQjtRQUNoQixNQUFNQyxZQUFZO1lBQUMsSUFBSSxDQUFDQyxhQUFhO1lBQUUsSUFBSSxDQUFDQyxXQUFXO1NBQUM7UUFDeEQsT0FBT0YsVUFBVUcsSUFBSSxDQUFDZCw0REFBVUEsQ0FBQ2UsbUJBQW1CLEVBQUVDLFdBQVc7SUFDckU7SUFDQTs7S0FFQyxHQUNEQyxxQkFBcUI7UUFDakIsT0FBT1IsY0FBY1MsdUJBQXVCLENBQUM7WUFDekNOLGVBQWUsSUFBSSxDQUFDQSxhQUFhO1lBQ2pDQyxhQUFhLElBQUksQ0FBQ0EsV0FBVztZQUM3Qk0sVUFBVSxJQUFJLENBQUNDLEtBQUs7WUFDcEJDLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQ3ZCQyxnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1FBQ3ZDO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxpQkFBaUI7UUFDYixPQUFPO1lBQ0hYLGVBQWUsSUFBSSxDQUFDQSxhQUFhO1lBQ2pDQyxhQUFhLElBQUksQ0FBQ0EsV0FBVztZQUM3Qk0sVUFBVSxJQUFJLENBQUNDLEtBQUs7WUFDcEJDLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQ3ZCQyxnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1lBQ25DRSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmQyxpQkFBaUIsSUFBSSxDQUFDQSxlQUFlO1lBQ3JDQyxlQUFlLElBQUksQ0FBQ0EsYUFBYTtZQUNqQywrQ0FBK0M7WUFDL0NDLGdCQUFnQixJQUFJQyxJQUFJLENB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S0FBS29FLFNBQVNwRSxhQUFhLElBQ3JEbUUsU0FBU3pELGNBQWMsS0FBSzBELFNBQVMxRCxjQUFjLElBQ25EeUQsU0FBUzFELFFBQVEsS0FBSzJELFNBQVMzRCxRQUFRLElBQ3ZDMEQsU0FBUzVELFFBQVEsS0FBSzZELFNBQVM3RCxRQUFRLElBQ3ZDNEQsU0FBU2xFLFdBQVcsS0FBS21FLFNBQVNuRSxXQUFXLElBQzdDa0UsU0FBU3RELGVBQWUsS0FBS3VELFNBQVN2RCxlQUFlLElBQ3JEeUQ7SUFDUjtBQUNKO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2NhY2hlL2VudGl0aWVzL0FjY291bnRFbnRpdHkubWpzPzcwNDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBTZXBhcmF0b3JzLCBDYWNoZUFjY291bnRUeXBlIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBidWlsZENsaWVudEluZm8gfSBmcm9tICcuLi8uLi9hY2NvdW50L0NsaWVudEluZm8ubWpzJztcbmltcG9ydCB7IGJ1aWxkVGVuYW50UHJvZmlsZSB9IGZyb20gJy4uLy4uL2FjY291bnQvQWNjb3VudEluZm8ubWpzJztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudEF1dGhFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgQXV0aG9yaXR5VHlwZSB9IGZyb20gJy4uLy4uL2F1dGhvcml0eS9BdXRob3JpdHlUeXBlLm1qcyc7XG5pbXBvcnQgeyBnZXRUZW5hbnRJZEZyb21JZFRva2VuQ2xhaW1zIH0gZnJvbSAnLi4vLi4vYWNjb3VudC9Ub2tlbkNsYWltcy5tanMnO1xuaW1wb3J0IHsgUHJvdG9jb2xNb2RlIH0gZnJvbSAnLi4vLi4vYXV0aG9yaXR5L1Byb3RvY29sTW9kZS5tanMnO1xuaW1wb3J0IHsgaW52YWxpZENhY2hlRW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi9lcnJvci9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCBkZWZpbmVzIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBhbiBBY2NvdW50IGZpZWxkIChiYXNlZCBvbiB1bml2ZXJzYWwgY2FjaGUgc2NoZW1hIGltcGxlbWVudGVkIGJ5IGFsbCBNU0FMcykuXHJcbiAqXHJcbiAqIEtleSA6IFZhbHVlIFNjaGVtYVxyXG4gKlxyXG4gKiBLZXk6IDxob21lX2FjY291bnRfaWQ+LTxlbnZpcm9ubWVudD4tPHJlYWxtKj5cclxuICpcclxuICogVmFsdWUgU2NoZW1hOlxyXG4gKiB7XHJcbiAqICAgICAgaG9tZUFjY291bnRJZDogaG9tZSBhY2NvdW50IGlkZW50aWZpZXIgZm9yIHRoZSBhdXRoIHNjaGVtZSxcclxuICogICAgICBlbnZpcm9ubWVudDogZW50aXR5IHRoYXQgaXNzdWVkIHRoZSB0b2tlbiwgcmVwcmVzZW50ZWQgYXMgYSBmdWxsIGhvc3RcclxuICogICAgICByZWFsbTogRnVsbCB0ZW5hbnQgb3Igb3JnYW5pemF0aW9uYWwgaWRlbnRpZmllciB0aGF0IHRoZSBhY2NvdW50IGJlbG9uZ3MgdG9cclxuICogICAgICBsb2NhbEFjY291bnRJZDogT3JpZ2luYWwgdGVuYW50LXNwZWNpZmljIGFjY291bnRJRCwgdXN1YWxseSB1c2VkIGZvciBsZWdhY3kgY2FzZXNcclxuICogICAgICB1c2VybmFtZTogcHJpbWFyeSB1c2VybmFtZSB0aGF0IHJlcHJlc2VudHMgdGhlIHVzZXIsIHVzdWFsbHkgY29ycmVzcG9uZHMgdG8gcHJlZmVycmVkX3VzZXJuYW1lIGluIHRoZSB2MiBlbmRwdFxyXG4gKiAgICAgIGF1dGhvcml0eVR5cGU6IEFjY291bnRzIGF1dGhvcml0eSB0eXBlIGFzIGEgc3RyaW5nXHJcbiAqICAgICAgbmFtZTogRnVsbCBuYW1lIGZvciB0aGUgYWNjb3VudCwgaW5jbHVkaW5nIGdpdmVuIG5hbWUgYW5kIGZhbWlseSBuYW1lLFxyXG4gKiAgICAgIGxhc3RNb2RpZmljYXRpb25UaW1lOiBsYXN0IHRpbWUgdGhpcyBlbnRpdHkgd2FzIG1vZGlmaWVkIGluIHRoZSBjYWNoZVxyXG4gKiAgICAgIGxhc3RNb2RpZmljYXRpb25BcHA6XHJcbiAqICAgICAgbmF0aXZlQWNjb3VudElkOiBBY2NvdW50IGlkZW50aWZpZXIgb24gdGhlIG5hdGl2ZSBkZXZpY2VcclxuICogICAgICB0ZW5hbnRQcm9maWxlczogQXJyYXkgb2YgdGVuYW50IHByb2ZpbGUgb2JqZWN0cyBmb3IgZWFjaCB0ZW5hbnQgdGhhdCB0aGUgYWNjb3VudCBoYXMgYXV0aGVudGljYXRlZCB3aXRoIGluIHRoZSBicm93c2VyXHJcbiAqIH1cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jbGFzcyBBY2NvdW50RW50aXR5IHtcclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgQWNjb3VudCBJZCBrZXkgY29tcG9uZW50IGFzIHBlciB0aGUgc2NoZW1hOiA8aG9tZV9hY2NvdW50X2lkPi08ZW52aXJvbm1lbnQ+XHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlQWNjb3VudElkKCkge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRJZCA9IFt0aGlzLmhvbWVBY2NvdW50SWQsIHRoaXMuZW52aXJvbm1lbnRdO1xyXG4gICAgICAgIHJldHVybiBhY2NvdW50SWQuam9pbihTZXBhcmF0b3JzLkNBQ0hFX0tFWV9TRVBBUkFUT1IpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIEFjY291bnQgQ2FjaGUgS2V5IGFzIHBlciB0aGUgc2NoZW1hOiA8aG9tZV9hY2NvdW50X2lkPi08ZW52aXJvbm1lbnQ+LTxyZWFsbSo+XHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlQWNjb3VudEtleSgpIHtcclxuICAgICAgICByZXR1cm4gQWNjb3VudEVudGl0eS5nZW5lcmF0ZUFjY291bnRDYWNoZUtleSh7XHJcbiAgICAgICAgICAgIGhvbWVBY2NvdW50SWQ6IHRoaXMuaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuZW52aXJvbm1lbnQsXHJcbiAgICAgICAgICAgIHRlbmFudElkOiB0aGlzLnJlYWxtLFxyXG4gICAgICAgICAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZSxcclxuICAgICAgICAgICAgbG9jYWxBY2NvdW50SWQ6IHRoaXMubG9jYWxBY2NvdW50SWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIEFjY291bnRJbmZvIGludGVyZmFjZSBmb3IgdGhpcyBhY2NvdW50LlxyXG4gICAgICovXHJcbiAgICBnZXRBY2NvdW50SW5mbygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBob21lQWNjb3VudElkOiB0aGlzLmhvbWVBY2NvdW50SWQsXHJcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB0aGlzLmVudmlyb25tZW50LFxyXG4gICAgICAgICAgICB0ZW5hbnRJZDogdGhpcy5yZWFsbSxcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMudXNlcm5hbWUsXHJcbiAgICAgICAgICAgIGxvY2FsQWNjb3VudElkOiB0aGlzLmxvY2FsQWNjb3VudElkLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIG5hdGl2ZUFjY291bnRJZDogdGhpcy5uYXRpdmVBY2NvdW50SWQsXHJcbiAgICAgICAgICAgIGF1dGhvcml0eVR5cGU6IHRoaXMuYXV0aG9yaXR5VHlwZSxcclxuICAgICAgICAgICAgLy8gRGVzZXJpYWxpemUgdGVuYW50IHByb2ZpbGVzIGFycmF5IGludG8gYSBNYXBcclxuICAgICAgICAgICAgdGVuYW50UHJvZmlsZXM6IG5ldyBNYXAoKHRoaXMudGVuYW50UHJvZmlsZXMgfHwgW10pLm1hcCgodGVuYW50UHJvZmlsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0ZW5hbnRQcm9maWxlLnRlbmFudElkLCB0ZW5hbnRQcm9maWxlXTtcclxuICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYWNjb3VudCBlbnRpdHkgaXMgaW4gc2luZ2xlIHRlbmFudCBmb3JtYXQgKG91dGRhdGVkKSwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICAgKi9cclxuICAgIGlzU2luZ2xlVGVuYW50KCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy50ZW5hbnRQcm9maWxlcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGFjY291bnQga2V5IGZyb20gaW50ZXJmYWNlXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudEludGVyZmFjZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2VuZXJhdGVBY2NvdW50Q2FjaGVLZXkoYWNjb3VudEludGVyZmFjZSkge1xyXG4gICAgICAgIGNvbnN0IGhvbWVUZW5hbnRJZCA9IGFjY291bnRJbnRlcmZhY2UuaG9tZUFjY291bnRJZC5zcGxpdChcIi5cIilbMV07XHJcbiAgICAgICAgY29uc3QgYWNjb3VudEtleSA9IFtcclxuICAgICAgICAgICAgYWNjb3VudEludGVyZmFjZS5ob21lQWNjb3VudElkLFxyXG4gICAgICAgICAgICBhY2NvdW50SW50ZXJmYWNlLmVudmlyb25tZW50IHx8IFwiXCIsXHJcbiAgICAgICAgICAgIGhvbWVUZW5hbnRJZCB8fCBhY2NvdW50SW50ZXJmYWNlLnRlbmFudElkIHx8IFwiXCIsXHJcbiAgICAgICAgXTtcclxuICAgICAgICByZXR1cm4gYWNjb3VudEtleS5qb2luKFNlcGFyYXRvcnMuQ0FDSEVfS0VZX1NFUEFSQVRPUikudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQnVpbGQgQWNjb3VudCBjYWNoZSBmcm9tIElkVG9rZW4sIGNsaWVudEluZm8gYW5kIGF1dGhvcml0eS9wb2xpY3kuIEFzc29jaWF0ZWQgd2l0aCBBQUQuXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudERldGFpbHNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUFjY291bnQoYWNjb3VudERldGFpbHMsIGF1dGhvcml0eSwgYmFzZTY0RGVjb2RlKSB7XHJcbiAgICAgICAgY29uc3QgYWNjb3VudCA9IG5ldyBBY2NvdW50RW50aXR5KCk7XHJcbiAgICAgICAgaWYgKGF1dGhvcml0eS5hdXRob3JpdHlUeXBlID09PSBBdXRob3JpdHlUeXBlLkFkZnMpIHtcclxuICAgICAgICAgICAgYWNjb3VudC5hdXRob3JpdHlUeXBlID0gQ2FjaGVBY2NvdW50VHlwZS5BREZTX0FDQ09VTlRfVFlQRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXV0aG9yaXR5LnByb3RvY29sTW9kZSA9PT0gUHJvdG9jb2xNb2RlLkFBRCkge1xyXG4gICAgICAgICAgICBhY2NvdW50LmF1dGhvcml0eVR5cGUgPSBDYWNoZUFjY291bnRUeXBlLk1TU1RTX0FDQ09VTlRfVFlQRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFjY291bnQuYXV0aG9yaXR5VHlwZSA9IENhY2hlQWNjb3VudFR5cGUuR0VORVJJQ19BQ0NPVU5UX1RZUEU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjbGllbnRJbmZvO1xyXG4gICAgICAgIGlmIChhY2NvdW50RGV0YWlscy5jbGllbnRJbmZvICYmIGJhc2U2NERlY29kZSkge1xyXG4gICAgICAgICAgICBjbGllbnRJbmZvID0gYnVpbGRDbGllbnRJbmZvKGFjY291bnREZXRhaWxzLmNsaWVudEluZm8sIGJhc2U2NERlY29kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjY291bnQuY2xpZW50SW5mbyA9IGFjY291bnREZXRhaWxzLmNsaWVudEluZm87XHJcbiAgICAgICAgYWNjb3VudC5ob21lQWNjb3VudElkID0gYWNjb3VudERldGFpbHMuaG9tZUFjY291bnRJZDtcclxuICAgICAgICBhY2NvdW50Lm5hdGl2ZUFjY291bnRJZCA9IGFjY291bnREZXRhaWxzLm5hdGl2ZUFjY291bnRJZDtcclxuICAgICAgICBjb25zdCBlbnYgPSBhY2NvdW50RGV0YWlscy5lbnZpcm9ubWVudCB8fFxyXG4gICAgICAgICAgICAoYXV0aG9yaXR5ICYmIGF1dGhvcml0eS5nZXRQcmVmZXJyZWRDYWNoZSgpKTtcclxuICAgICAgICBpZiAoIWVudikge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoaW52YWxpZENhY2hlRW52aXJvbm1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY2NvdW50LmVudmlyb25tZW50ID0gZW52O1xyXG4gICAgICAgIC8vIG5vbiBBQUQgc2NlbmFyaW9zIGNhbiBoYXZlIGVtcHR5IHJlYWxtXHJcbiAgICAgICAgYWNjb3VudC5yZWFsbSA9XHJcbiAgICAgICAgICAgIGNsaWVudEluZm8/LnV0aWQgfHxcclxuICAgICAgICAgICAgICAgIGdldFRlbmFudElkRnJvbUlkVG9rZW5DbGFpbXMoYWNjb3VudERldGFpbHMuaWRUb2tlbkNsYWltcykgfHxcclxuICAgICAgICAgICAgICAgIFwiXCI7XHJcbiAgICAgICAgLy8gSG93IGRvIHlvdSBhY2NvdW50IGZvciBNU0EgQ0lEIGhlcmU/XHJcbiAgICAgICAgYWNjb3VudC5sb2NhbEFjY291bnRJZCA9XHJcbiAgICAgICAgICAgIGNsaWVudEluZm8/LnVpZCB8fFxyXG4gICAgICAgICAgICAgICAgYWNjb3VudERldGFpbHMuaWRUb2tlbkNsYWltcz8ub2lkIHx8XHJcbiAgICAgICAgICAgICAgICBhY2NvdW50RGV0YWlscy5pZFRva2VuQ2xhaW1zPy5zdWIgfHxcclxuICAgICAgICAgICAgICAgIFwiXCI7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBJbiBCMkMgc2NlbmFyaW9zIHRoZSBlbWFpbHMgY2xhaW0gaXMgdXNlZCBpbnN0ZWFkIG9mIHByZWZlcnJlZF91c2VybmFtZSBhbmQgaXQgaXMgYW4gYXJyYXkuXHJcbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyBpdCB3aWxsIGNvbnRhaW4gYSBzaW5nbGUgZW1haWwuIFRoaXMgZmllbGQgc2hvdWxkIG5vdCBiZSByZWxpZWQgdXBvbiBpZiBhIGN1c3RvbVxyXG4gICAgICAgICAqIHBvbGljeSBpcyBjb25maWd1cmVkIHRvIHJldHVybiBtb3JlIHRoYW4gMSBlbWFpbC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBwcmVmZXJyZWRVc2VybmFtZSA9IGFjY291bnREZXRhaWxzLmlkVG9rZW5DbGFpbXM/LnByZWZlcnJlZF91c2VybmFtZSB8fFxyXG4gICAgICAgICAgICBhY2NvdW50RGV0YWlscy5pZFRva2VuQ2xhaW1zPy51cG47XHJcbiAgICAgICAgY29uc3QgZW1haWwgPSBhY2NvdW50RGV0YWlscy5pZFRva2VuQ2xhaW1zPy5lbWFpbHNcclxuICAgICAgICAgICAgPyBhY2NvdW50RGV0YWlscy5pZFRva2VuQ2xhaW1zLmVtYWlsc1swXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgYWNjb3VudC51c2VybmFtZSA9IHByZWZlcnJlZFVzZXJuYW1lIHx8IGVtYWlsIHx8IFwiXCI7XHJcbiAgICAgICAgYWNjb3VudC5uYW1lID0gYWNjb3VudERldGFpbHMuaWRUb2tlbkNsYWltcz8ubmFtZSB8fCBcIlwiO1xyXG4gICAgICAgIGFjY291bnQuY2xvdWRHcmFwaEhvc3ROYW1lID0gYWNjb3VudERldGFpbHMuY2xvdWRHcmFwaEhvc3ROYW1lO1xyXG4gICAgICAgIGFjY291bnQubXNHcmFwaEhvc3QgPSBhY2NvdW50RGV0YWlscy5tc0dyYXBoSG9zdDtcclxuICAgICAgICBpZiAoYWNjb3VudERldGFpbHMudGVuYW50UHJvZmlsZXMpIHtcclxuICAgICAgICAgICAgYWNjb3VudC50ZW5hbnRQcm9maWxlcyA9IGFjY291bnREZXRhaWxzLnRlbmFudFByb2ZpbGVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdGVuYW50UHJvZmlsZSA9IGJ1aWxkVGVuYW50UHJvZmlsZShhY2NvdW50RGV0YWlscy5ob21lQWNjb3VudElkLCBhY2NvdW50LmxvY2FsQWNjb3VudElkLCBhY2NvdW50LnJlYWxtLCBhY2NvdW50RGV0YWlscy5pZFRva2VuQ2xhaW1zKTtcclxuICAgICAgICAgICAgYWNjb3VudC50ZW5hbnRQcm9maWxlcyA9IFt0ZW5hbnRQcm9maWxlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFjY291bnQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gQWNjb3VudEVudGl0eSBvYmplY3QgZnJvbSBBY2NvdW50SW5mb1xyXG4gICAgICogQHBhcmFtIGFjY291bnRJbmZvXHJcbiAgICAgKiBAcGFyYW0gY2xvdWRHcmFwaEhvc3ROYW1lXHJcbiAgICAgKiBAcGFyYW0gbXNHcmFwaEhvc3RcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVGcm9tQWNjb3VudEluZm8oYWNjb3VudEluZm8sIGNsb3VkR3JhcGhIb3N0TmFtZSwgbXNHcmFwaEhvc3QpIHtcclxuICAgICAgICBjb25zdCBhY2NvdW50ID0gbmV3IEFjY291bnRFbnRpdHkoKTtcclxuICAgICAgICBhY2NvdW50LmF1dGhvcml0eVR5cGUgPVxyXG4gICAgICAgICAgICBhY2NvdW50SW5mby5hdXRob3JpdHlUeXBlIHx8IENhY2hlQWNjb3VudFR5cGUuR0VORVJJQ19BQ0NPVU5UX1RZUEU7XHJcbiAgICAgICAgYWNjb3VudC5ob21lQWNjb3VudElkID0gYWNjb3VudEluZm8uaG9tZUFjY291bnRJZDtcclxuICAgICAgICBhY2NvdW50LmxvY2FsQWNjb3VudElkID0gYWNjb3VudEluZm8ubG9jYWxBY2NvdW50SWQ7XHJcbiAgICAgICAgYWNjb3VudC5uYXRpdmVBY2NvdW50SWQgPSBhY2NvdW50SW5mby5uYXRpdmVBY2NvdW50SWQ7XHJcbiAgICAgICAgYWNjb3VudC5yZWFsbSA9IGFjY291bnRJbmZvLnRlbmFudElkO1xyXG4gICAgICAgIGFjY291bnQuZW52aXJvbm1lbnQgPSBhY2NvdW50SW5mby5lbnZpcm9ubWVudDtcclxuICAgICAgICBhY2NvdW50LnVzZXJuYW1lID0gYWNjb3VudEluZm8udXNlcm5hbWU7XHJcbiAgICAgICAgYWNjb3VudC5uYW1lID0gYWNjb3VudEluZm8ubmFtZTtcclxuICAgICAgICBhY2NvdW50LmNsb3VkR3JhcGhIb3N0TmFtZSA9IGNsb3VkR3JhcGhIb3N0TmFtZTtcclxuICAgICAgICBhY2NvdW50Lm1zR3JhcGhIb3N0ID0gbXNHcmFwaEhvc3Q7XHJcbiAgICAgICAgLy8gU2VyaWFsaXplIHRlbmFudCBwcm9maWxlcyBtYXAgaW50byBhbiBhcnJheVxyXG4gICAgICAgIGFjY291bnQudGVuYW50UHJvZmlsZXMgPSBBcnJheS5mcm9tKGFjY291bnRJbmZvLnRlbmFudFByb2ZpbGVzPy52YWx1ZXMoKSB8fCBbXSk7XHJcbiAgICAgICAgcmV0dXJuIGFjY291bnQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIEhvbWVBY2NvdW50SWQgZnJvbSBzZXJ2ZXIgcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJDbGllbnRJbmZvXHJcbiAgICAgKiBAcGFyYW0gYXV0aFR5cGVcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdlbmVyYXRlSG9tZUFjY291bnRJZChzZXJ2ZXJDbGllbnRJbmZvLCBhdXRoVHlwZSwgbG9nZ2VyLCBjcnlwdG9PYmosIGlkVG9rZW5DbGFpbXMpIHtcclxuICAgICAgICAvLyBzaW5jZSBBREZTL0RTVFMgZG8gbm90IGhhdmUgdGlkIGFuZCBkb2VzIG5vdCBzZXQgY2xpZW50X2luZm9cclxuICAgICAgICBpZiAoIShhdXRoVHlwZSA9PT0gQXV0aG9yaXR5VHlwZS5BZGZzIHx8XHJcbiAgICAgICAgICAgIGF1dGhUeXBlID09PSBBdXRob3JpdHlUeXBlLkRzdHMpKSB7XHJcbiAgICAgICAgICAgIC8vIGZvciBjYXNlcyB3aGVyZSB0aGVyZSBpcyBjbGllbnRJbmZvXHJcbiAgICAgICAgICAgIGlmIChzZXJ2ZXJDbGllbnRJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudEluZm8gPSBidWlsZENsaWVudEluZm8oc2VydmVyQ2xpZW50SW5mbywgY3J5cHRvT2JqLmJhc2U2NERlY29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWVudEluZm8udWlkICYmIGNsaWVudEluZm8udXRpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7Y2xpZW50SW5mby51aWR9LiR7Y2xpZW50SW5mby51dGlkfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKFwiTm8gY2xpZW50IGluZm8gaW4gcmVzcG9uc2VcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRlZmF1bHQgdG8gXCJzdWJcIiBjbGFpbVxyXG4gICAgICAgIHJldHVybiBpZFRva2VuQ2xhaW1zPy5zdWIgfHwgXCJcIjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIGFuIGVudGl0eTogY2hlY2tzIGZvciBhbGwgZXhwZWN0ZWQgcGFyYW1zXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0FjY291bnRFbnRpdHkoZW50aXR5KSB7XHJcbiAgICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcImhvbWVBY2NvdW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiZW52aXJvbm1lbnRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwicmVhbG1cIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwibG9jYWxBY2NvdW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwidXNlcm5hbWVcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiYXV0aG9yaXR5VHlwZVwiKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgd2hldGhlciAyIGFjY291bnRJbmZvIG9iamVjdHMgcmVwcmVzZW50IHRoZSBzYW1lIGFjY291bnRcclxuICAgICAqIEBwYXJhbSBhY2NvdW50QVxyXG4gICAgICogQHBhcmFtIGFjY291bnRCXHJcbiAgICAgKiBAcGFyYW0gY29tcGFyZUNsYWltcyAtIElmIHNldCB0byB0cnVlIGlkVG9rZW5DbGFpbXMgd2lsbCBhbHNvIGJlIGNvbXBhcmVkIHRvIGRldGVybWluZSBhY2NvdW50IGVxdWFsaXR5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhY2NvdW50SW5mb0lzRXF1YWwoYWNjb3VudEEsIGFjY291bnRCLCBjb21wYXJlQ2xhaW1zKSB7XHJcbiAgICAgICAgaWYgKCFhY2NvdW50QSB8fCAhYWNjb3VudEIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY2xhaW1zTWF0Y2ggPSB0cnVlOyAvLyBkZWZhdWx0IHRvIHRydWUgc28gYXMgdG8gbm90IGZhaWwgY29tcGFyaXNvbiBiZWxvdyBpZiBjb21wYXJlQ2xhaW1zOiBmYWxzZVxyXG4gICAgICAgIGlmIChjb21wYXJlQ2xhaW1zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnRBQ2xhaW1zID0gKGFjY291bnRBLmlkVG9rZW5DbGFpbXMgfHxcclxuICAgICAgICAgICAgICAgIHt9KTtcclxuICAgICAgICAgICAgY29uc3QgYWNjb3VudEJDbGFpbXMgPSAoYWNjb3VudEIuaWRUb2tlbkNsYWltcyB8fFxyXG4gICAgICAgICAgICAgICAge30pO1xyXG4gICAgICAgICAgICAvLyBpc3N1ZWQgYXQgdGltZXN0YW1wIGFuZCBub25jZSBhcmUgZXhwZWN0ZWQgdG8gY2hhbmdlIGVhY2ggdGltZSBhIG5ldyBpZCB0b2tlbiBpcyBhY3F1aXJlZFxyXG4gICAgICAgICAgICBjbGFpbXNNYXRjaCA9XHJcbiAgICAgICAgICAgICAgICBhY2NvdW50QUNsYWltcy5pYXQgPT09IGFjY291bnRCQ2xhaW1zLmlhdCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRBQ2xhaW1zLm5vbmNlID09PSBhY2NvdW50QkNsYWltcy5ub25jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChhY2NvdW50QS5ob21lQWNjb3VudElkID09PSBhY2NvdW50Qi5ob21lQWNjb3VudElkICYmXHJcbiAgICAgICAgICAgIGFjY291bnRBLmxvY2FsQWNjb3VudElkID09PSBhY2NvdW50Qi5sb2NhbEFjY291bnRJZCAmJlxyXG4gICAgICAgICAgICBhY2NvdW50QS51c2VybmFtZSA9PT0gYWNjb3VudEIudXNlcm5hbWUgJiZcclxuICAgICAgICAgICAgYWNjb3VudEEudGVuYW50SWQgPT09IGFjY291bnRCLnRlbmFudElkICYmXHJcbiAgICAgICAgICAgIGFjY291bnRBLmVudmlyb25tZW50ID09PSBhY2NvdW50Qi5lbnZpcm9ubWVudCAmJlxyXG4gICAgICAgICAgICBhY2NvdW50QS5uYXRpdmVBY2NvdW50SWQgPT09IGFjY291bnRCLm5hdGl2ZUFjY291bnRJZCAmJlxyXG4gICAgICAgICAgICBjbGFpbXNNYXRjaCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQWNjb3VudEVudGl0eSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjb3VudEVudGl0eS5tanMubWFwXG4iXSwibmFtZXMiOlsiU2VwYXJhdG9ycyIsIkNhY2hlQWNjb3VudFR5cGUiLCJidWlsZENsaWVudEluZm8iLCJidWlsZFRlbmFudFByb2ZpbGUiLCJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJBdXRob3JpdHlUeXBlIiwiZ2V0VGVuYW50SWRGcm9tSWRUb2tlbkNsYWltcyIsIlByb3RvY29sTW9kZSIsImludmFsaWRDYWNoZUVudmlyb25tZW50IiwiQWNjb3VudEVudGl0eSIsImdlbmVyYXRlQWNjb3VudElkIiwiYWNjb3VudElkIiwiaG9tZUFjY291bnRJZCIsImVudmlyb25tZW50Iiwiam9pbiIsIkNBQ0hFX0tFWV9TRVBBUkFUT1IiLCJ0b0xvd2VyQ2FzZSIsImdlbmVyYXRlQWNjb3VudEtleSIsImdlbmVyYXRlQWNjb3VudENhY2hlS2V5IiwidGVuYW50SWQiLCJyZWFsbSIsInVzZXJuYW1lIiwibG9jYWxBY2NvdW50SWQiLCJnZXRBY2NvdW50SW5mbyIsIm5hbWUiLCJuYXRpdmVBY2NvdW50SWQiLCJhdXRob3JpdHlUeXBlIiwidGVuYW50UHJvZmlsZXMiLCJNYXAiLCJtYXAiLCJ0ZW5hbnRQcm9maWxlIiwiaXNTaW5nbGVUZW5hbnQiLCJhY2NvdW50SW50ZXJmYWNlIiwiaG9tZVRlbmFudElkIiwic3BsaXQiLCJhY2NvdW50S2V5IiwiY3JlYXRlQWNjb3VudCIsImFjY291bnREZXRhaWxzIiwiYXV0aG9yaXR5IiwiYmFzZTY0RGVjb2RlIiwiYWNjb3VudCIsIkFkZnMiLCJBREZTX0FDQ09VTlRfVFlQRSIsInByb3RvY29sTW9kZSIsIkFBRCIsIk1TU1RTX0FDQ09VTlRfVFlQRSIsIkdFTkVSSUNfQUNDT1VOVF9UWVBFIiwiY2xpZW50SW5mbyIsImVudiIsImdldFByZWZlcnJlZENhY2hlIiwidXRpZCIsImlkVG9rZW5DbGFpbXMiLCJ1aWQiLCJvaWQiLCJzdWIiLCJwcmVmZXJyZWRVc2VybmFtZSIsInByZWZlcnJlZF91c2VybmFtZSIsInVwbiIsImVtYWlsIiwiZW1haWxzIiwiY2xvdWRHcmFwaEhvc3ROYW1lIiwibXNHcmFwaEhvc3QiLCJjcmVhdGVGcm9tQWNjb3VudEluZm8iLCJhY2NvdW50SW5mbyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImdlbmVyYXRlSG9tZUFjY291bnRJZCIsInNlcnZlckNsaWVudEluZm8iLCJhdXRoVHlwZSIsImxvZ2dlciIsImNyeXB0b09iaiIsIkRzdHMiLCJlIiwid2FybmluZyIsImlzQWNjb3VudEVudGl0eSIsImVudGl0eSIsImhhc093blByb3BlcnR5IiwiYWNjb3VudEluZm9Jc0VxdWFsIiwiYWNjb3VudEEiLCJhY2NvdW50QiIsImNvbXBhcmVDbGFpbXMiLCJjbGFpbXNNYXRjaCIsImFjY291bnRBQ2xhaW1zIiwiYWNjb3VudEJDbGFpbXMiLCJpYXQiLCJub25jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenCacheContext: () => (/* binding */ TokenCacheContext)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ class TokenCacheContext {\n    constructor(tokenCache, hasChanged){\n        this.cache = tokenCache;\n        this.hasChanged = hasChanged;\n    }\n    /**\r\n     * boolean which indicates the changes in cache\r\n     */ get cacheHasChanged() {\n        return this.hasChanged;\n    }\n    /**\r\n     * function to retrieve the token cache\r\n     */ get tokenCache() {\n        return this.cache;\n    }\n}\n //# sourceMappingURL=TokenCacheContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY2FjaGUvcGVyc2lzdGVuY2UvVG9rZW5DYWNoZUNvbnRleHQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7O0NBR0MsR0FBRyxNQUFNQTtJQUNOQyxZQUFZQyxVQUFVLEVBQUVDLFVBQVUsQ0FBRTtRQUNoQyxJQUFJLENBQUNDLEtBQUssR0FBR0Y7UUFDYixJQUFJLENBQUNDLFVBQVUsR0FBR0E7SUFDdEI7SUFDQTs7S0FFQyxHQUNELElBQUlFLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQ0YsVUFBVTtJQUMxQjtJQUNBOztLQUVDLEdBQ0QsSUFBSUQsYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDRSxLQUFLO0lBQ3JCO0FBQ0o7QUFFNkIsQ0FDN0IsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY2FjaGUvcGVyc2lzdGVuY2UvVG9rZW5DYWNoZUNvbnRleHQubWpzPzlkNjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgaW5zdGFuY2UgaGVscHMgdHJhY2sgdGhlIG1lbW9yeSBjaGFuZ2VzIGZhY2lsaXRhdGluZ1xyXG4gKiBkZWNpc2lvbnMgdG8gcmVhZCBmcm9tIGFuZCB3cml0ZSB0byB0aGUgcGVyc2lzdGVudCBjYWNoZVxyXG4gKi8gY2xhc3MgVG9rZW5DYWNoZUNvbnRleHQge1xyXG4gICAgY29uc3RydWN0b3IodG9rZW5DYWNoZSwgaGFzQ2hhbmdlZCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGUgPSB0b2tlbkNhY2hlO1xyXG4gICAgICAgIHRoaXMuaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGJvb2xlYW4gd2hpY2ggaW5kaWNhdGVzIHRoZSBjaGFuZ2VzIGluIGNhY2hlXHJcbiAgICAgKi9cclxuICAgIGdldCBjYWNoZUhhc0NoYW5nZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQ2hhbmdlZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gcmV0cmlldmUgdGhlIHRva2VuIGNhY2hlXHJcbiAgICAgKi9cclxuICAgIGdldCB0b2tlbkNhY2hlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFRva2VuQ2FjaGVDb250ZXh0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub2tlbkNhY2hlQ29udGV4dC5tanMubWFwXG4iXSwibmFtZXMiOlsiVG9rZW5DYWNoZUNvbnRleHQiLCJjb25zdHJ1Y3RvciIsInRva2VuQ2FjaGUiLCJoYXNDaGFuZ2VkIiwiY2FjaGUiLCJjYWNoZUhhc0NoYW5nZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccessTokenEntity: () => (/* binding */ createAccessTokenEntity),\n/* harmony export */   createIdTokenEntity: () => (/* binding */ createIdTokenEntity),\n/* harmony export */   createRefreshTokenEntity: () => (/* binding */ createRefreshTokenEntity),\n/* harmony export */   generateAppMetadataKey: () => (/* binding */ generateAppMetadataKey),\n/* harmony export */   generateAuthorityMetadataExpiresAt: () => (/* binding */ generateAuthorityMetadataExpiresAt),\n/* harmony export */   generateCredentialKey: () => (/* binding */ generateCredentialKey),\n/* harmony export */   isAccessTokenEntity: () => (/* binding */ isAccessTokenEntity),\n/* harmony export */   isAppMetadataEntity: () => (/* binding */ isAppMetadataEntity),\n/* harmony export */   isAuthorityMetadataEntity: () => (/* binding */ isAuthorityMetadataEntity),\n/* harmony export */   isAuthorityMetadataExpired: () => (/* binding */ isAuthorityMetadataExpired),\n/* harmony export */   isCredentialEntity: () => (/* binding */ isCredentialEntity),\n/* harmony export */   isIdTokenEntity: () => (/* binding */ isIdTokenEntity),\n/* harmony export */   isRefreshTokenEntity: () => (/* binding */ isRefreshTokenEntity),\n/* harmony export */   isServerTelemetryEntity: () => (/* binding */ isServerTelemetryEntity),\n/* harmony export */   isThrottlingEntity: () => (/* binding */ isThrottlingEntity),\n/* harmony export */   updateAuthorityEndpointMetadata: () => (/* binding */ updateAuthorityEndpointMetadata),\n/* harmony export */   updateCloudDiscoveryMetadata: () => (/* binding */ updateCloudDiscoveryMetadata)\n/* harmony export */ });\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\r\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\r\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\r\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\r\n * @param credentialEntity\r\n * @returns\r\n */ function generateCredentialKey(credentialEntity) {\n    const credentialKey = [\n        generateAccountId(credentialEntity),\n        generateCredentialId(credentialEntity),\n        generateTarget(credentialEntity),\n        generateClaimsHash(credentialEntity),\n        generateScheme(credentialEntity)\n    ];\n    return credentialKey.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */ function createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n    const idTokenEntity = {\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: idToken,\n        realm: tenantId\n    };\n    return idTokenEntity;\n}\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */ function createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n    const atEntity = {\n        homeAccountId: homeAccountId,\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN,\n        secret: accessToken,\n        cachedAt: (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)().toString(),\n        expiresOn: expiresOn.toString(),\n        extendedExpiresOn: extExpiresOn.toString(),\n        environment: environment,\n        clientId: clientId,\n        realm: tenantId,\n        target: scopes,\n        tokenType: tokenType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER\n    };\n    if (userAssertionHash) {\n        atEntity.userAssertionHash = userAssertionHash;\n    }\n    if (refreshOn) {\n        atEntity.refreshOn = refreshOn.toString();\n    }\n    if (requestedClaims) {\n        atEntity.requestedClaims = requestedClaims;\n        atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */ if (atEntity.tokenType?.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER.toLowerCase()) {\n        atEntity.credentialType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        switch(atEntity.tokenType){\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.POP:\n                // Make sure keyId is present and add it to credential\n                const tokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_2__.extractTokenClaims)(accessToken, base64Decode);\n                if (!tokenClaims?.cnf?.kid) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenClaimsCnfRequiredForSignedJwt);\n                }\n                atEntity.keyId = tokenClaims.cnf.kid;\n                break;\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.SSH:\n                atEntity.keyId = keyId;\n        }\n    }\n    return atEntity;\n}\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */ function createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\n    const rtEntity = {\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: refreshToken\n    };\n    if (userAssertionHash) {\n        rtEntity.userAssertionHash = userAssertionHash;\n    }\n    if (familyId) {\n        rtEntity.familyId = familyId;\n    }\n    if (expiresOn) {\n        rtEntity.expiresOn = expiresOn.toString();\n    }\n    return rtEntity;\n}\nfunction isCredentialEntity(entity) {\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAccessTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isIdTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN;\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isRefreshTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN;\n}\n/**\r\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n */ function generateAccountId(credentialEntity) {\n    const accountId = [\n        credentialEntity.homeAccountId,\n        credentialEntity.environment\n    ];\n    return accountId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n */ function generateCredentialId(credentialEntity) {\n    const clientOrFamilyId = credentialEntity.credentialType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN ? credentialEntity.familyId || credentialEntity.clientId : credentialEntity.clientId;\n    const credentialId = [\n        credentialEntity.credentialType,\n        clientOrFamilyId,\n        credentialEntity.realm || \"\"\n    ];\n    return credentialId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate target key component as per schema: <target>\r\n */ function generateTarget(credentialEntity) {\n    return (credentialEntity.target || \"\").toLowerCase();\n}\n/**\r\n * Generate requested claims key component as per schema: <requestedClaims>\r\n */ function generateClaimsHash(credentialEntity) {\n    return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n/**\r\n * Generate scheme key componenet as per schema: <scheme>\r\n */ function generateScheme(credentialEntity) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */ return credentialEntity.tokenType && credentialEntity.tokenType.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER.toLowerCase() ? credentialEntity.tokenType.toLowerCase() : \"\";\n}\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */ function isServerTelemetryEntity(key, entity) {\n    const validateKey = key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    let validateEntity = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"failedRequests\") && entity.hasOwnProperty(\"errors\") && entity.hasOwnProperty(\"cacheHits\");\n    }\n    return validateKey && validateEntity;\n}\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */ function isThrottlingEntity(key, entity) {\n    let validateKey = false;\n    if (key) {\n        validateKey = key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX) === 0;\n    }\n    let validateEntity = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\n    }\n    return validateKey && validateEntity;\n}\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */ function generateAppMetadataKey({ environment, clientId }) {\n    const appMetaDataKeyArray = [\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA,\n        environment,\n        clientId\n    ];\n    return appMetaDataKeyArray.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAppMetadataEntity(key, entity) {\n    if (!entity) {\n        return false;\n    }\n    return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA) === 0 && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"environment\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAuthorityMetadataEntity(key, entity) {\n    if (!entity) {\n        return false;\n    }\n    return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n}\n/**\r\n * Reset the exiresAt value\r\n */ function generateAuthorityMetadataExpiresAt() {\n    return (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)() + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n}\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\n    authorityMetadata.authorization_endpoint = updatedValues.authorization_endpoint;\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\n    authorityMetadata.issuer = updatedValues.issuer;\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\n}\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\n    authorityMetadata.aliases = updatedValues.aliases;\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\n}\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */ function isAuthorityMetadataExpired(metadata) {\n    return metadata.expiresAt <= (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)();\n}\n //# sourceMappingURL=CacheHelpers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthorizationCodeClient: () => (/* binding */ AuthorizationCodeClient)\n/* harmony export */ });\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _request_RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../request/RequestValidator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/ClientAssertionUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */ class AuthorizationCodeClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n        // Flag to indicate if client is for hybrid spa auth code redemption\n        this.includeRedirectUri = true;\n        this.oidcDefaultScopes = this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n    }\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */ async getAuthCodeUrl(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n        const queryString = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.createAuthCodeUrlQueryString.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateQueryString, this.logger, this.performanceClient, request.correlationId)(request);\n        return _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */ async acquireToken(request, authCodePayload) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n        if (!request.code) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.requestCannotBeMade);\n        }\n        const reqTimestamp = (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.nowSeconds)();\n        const response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.executeTokenRequest.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\n    }\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */ handleFragmentResponse(serverParams, cachedState) {\n        // Handle responses.\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState);\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.authorizationCodeMissingFromServerResponse);\n        }\n        return serverParams;\n    }\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */ getLogoutUri(logoutRequest) {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__.logoutRequestEmpty);\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n        // Construct logout URI\n        return _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */ async executeTokenRequest(authority, request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.createTokenRequestBody.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        let ccsCredential = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.executePostToTokenEndpoint.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\n    }\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */ async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.tokenBodyParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.CLIENT_ID] || this.config.authOptions.clientId);\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */ if (!this.includeRedirectUri) {\n            // Just validate\n            _request_RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_15__.RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes, true, this.oidcDefaultScopes);\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(await (0,_utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_17__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        parameterBuilder.addGrantType(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n        if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.POP) {\n            const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__.PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__.missingSshJwk);\n            }\n        }\n        if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_19__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        let ccsCred = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch(ccsCred.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.RETURN_SPA_CODE]: \"1\"\n            });\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */ async createAuthCodeUrlQueryString(request) {\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateQueryString, correlationId);\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.extraQueryParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.CLIENT_ID] || this.config.authOptions.clientId);\n        const requestScopes = [\n            ...request.scopes || [],\n            ...request.extraScopesToConsent || []\n        ];\n        parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n        parameterBuilder.addCorrelationId(correlationId);\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        if (!(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        }\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                let accountLoginHintClaim = this.extractLoginHint(request.account);\n                if (accountLoginHintClaim && request.domainHint) {\n                    this.logger.warning(`AuthorizationCodeClient.createAuthCodeUrlQueryString: \"domainHint\" param is set, skipping opaque \"login_hint\" claim. Please consider not passing domainHint`);\n                    accountLoginHintClaim = null;\n                }\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (accountSid && request.prompt === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.NONE) {\n                    /*\r\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                     * SessionId is only used in silent calls\r\n                     */ this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        this.addExtraQueryParams(request, parameterBuilder);\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.POP) {\n                const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__.PopTokenGenerator(this.cryptoUtils);\n                // req_cnf is always sent as a string for SPAs\n                let reqCnfData;\n                if (!request.popKid) {\n                    const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                    reqCnfData = generatedReqCnfData.reqCnfString;\n                } else {\n                    reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n                }\n                parameterBuilder.addPopToken(reqCnfData);\n            }\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */ createLogoutUrlQueryString(request) {\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n        this.addExtraQueryParams(request, parameterBuilder);\n        return parameterBuilder.createQueryString();\n    }\n    addExtraQueryParams(request, parameterBuilder) {\n        const hasRequestInstanceAware = request.extraQueryParameters && request.extraQueryParameters.hasOwnProperty(\"instance_aware\");\n        // Set instance_aware flag if config auth param is set\n        if (!hasRequestInstanceAware && this.config.authOptions.instanceAware) {\n            request.extraQueryParameters = request.extraQueryParameters || {};\n            request.extraQueryParameters[\"instance_aware\"] = \"true\";\n        }\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n    }\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */ extractAccountSid(account) {\n        return account.idTokenClaims?.sid || null;\n    }\n    extractLoginHint(account) {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n //# sourceMappingURL=AuthorizationCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/BaseClient.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseClient: () => (/* binding */ BaseClient)\n/* harmony export */ });\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger/Logger.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _authority_AuthorityFactory_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../authority/AuthorityFactory.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../network/ThrottlingUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_NetworkError_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/NetworkError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */ class BaseClient {\n    constructor(configuration, performanceClient){\n        // Set the configuration\n        this.config = (0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_0__.buildClientConfiguration)(configuration);\n        // Initialize the logger\n        this.logger = new _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.Logger(this.config.loggerOptions, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.version);\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */ createTokenRequestHeaders(ccsCred) {\n        const headers = {};\n        headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_TYPE] = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch(ccsCred.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_5__.buildClientInfoFromHomeAccountId)(ccsCred.credential);\n                        headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__.CcsCredentialType.UPN:\n                    headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */ async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n        }\n        const response = await this.sendPostRequest(thumbprint, tokenEndpoint, {\n            body: queryString,\n            headers: headers\n        }, correlationId);\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n        return response;\n    }\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint - Request thumbprint for throttling\r\n     * @param tokenEndpoint - Endpoint to make the POST to\r\n     * @param options - Body and Headers to include on the POST request\r\n     * @param correlationId - CorrelationId for telemetry\r\n     */ async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\n        _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n        let response;\n        try {\n            response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_7__.invokeAsync)(this.networkClient.sendPostRequestAsync.bind(this.networkClient), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__.PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\n            const responseHeaders = response.headers || {};\n            this.performanceClient?.addFields({\n                refreshTokenSize: response.body.refresh_token?.length || 0,\n                httpVerToken: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_HTTP_VERSION] || \"\",\n                requestId: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_REQUEST_ID] || \"\"\n            }, correlationId);\n        } catch (e) {\n            if (e instanceof _error_NetworkError_mjs__WEBPACK_IMPORTED_MODULE_9__.NetworkError) {\n                const responseHeaders = e.responseHeaders;\n                if (responseHeaders) {\n                    this.performanceClient?.addFields({\n                        httpVerToken: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_HTTP_VERSION] || \"\",\n                        requestId: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_REQUEST_ID] || \"\",\n                        contentTypeHeader: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_TYPE] || undefined,\n                        contentLengthHeader: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_LENGTH] || undefined,\n                        httpStatus: e.httpStatus\n                    }, correlationId);\n                }\n                throw e.error;\n            }\n            if (e instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.AuthError) {\n                throw e;\n            } else {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.networkError);\n            }\n        }\n        _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n        return response;\n    }\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */ async updateAuthority(cloudInstanceHostname, correlationId) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__.PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority = await (0,_authority_AuthorityFactory_mjs__WEBPACK_IMPORTED_MODULE_13__.createDiscoveredInstance)(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\n        this.authority = cloudInstanceAuthority;\n    }\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */ createTokenQueryParameters(request) {\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_14__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n        parameterBuilder.addCorrelationId(request.correlationId);\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=BaseClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RefreshTokenClient: () => (/* binding */ RefreshTokenClient)\n/* harmony export */ });\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/ClientAssertionUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/InteractionRequiredAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */ class RefreshTokenClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n    }\n    async acquireToken(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        const reqTimestamp = (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.nowSeconds)();\n        const response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.executeTokenRequest.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_5__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        responseHandler.validateTokenResponse(response.body);\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\n    }\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */ async acquireTokenByRefreshToken(request) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__.tokenRequestEmpty);\n        }\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_9__.noAccountInSilentRequest);\n        }\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError && e.errorCode === _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.noTokensFound;\n                const clientMismatchErrorWithFamilyRT = e instanceof _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_12__.ServerError && e.errorCode === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Errors.INVALID_GRANT_ERROR && e.subError === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Errors.CLIENT_MISMATCH_ERROR;\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n                // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n    }\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */ async acquireTokenWithCachedRefreshToken(request, foci) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invoke)(this.cacheManager.getRefreshToken.bind(this.cacheManager), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, undefined, this.performanceClient, request.correlationId);\n        if (!refreshToken) {\n            throw (0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.createInteractionRequiredAuthError)(_error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.noTokensFound);\n        }\n        if (refreshToken.expiresOn && (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.isTokenExpired)(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds || DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\n            throw (0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.createInteractionRequiredAuthError)(_error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.refreshTokenExpired);\n        }\n        // attach cached RT size to the current measurement\n        const refreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n        try {\n            return await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\n        } catch (e) {\n            if (e instanceof _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError && e.subError === _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.badToken) {\n                // Remove bad refresh token from cache\n                this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\n                const badRefreshTokenKey = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_14__.generateCredentialKey)(refreshToken);\n                this.cacheManager.removeRefreshToken(badRefreshTokenKey);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */ async executeTokenRequest(request, authority) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_15__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createTokenRequestBody.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.executePostToTokenEndpoint.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\n    }\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */ async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n        const correlationId = request.correlationId;\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_16__.RequestParameterBuilder(correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.tokenBodyParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_17__.CLIENT_ID] || this.config.authOptions.clientId);\n        if (request.redirectUri) {\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        parameterBuilder.addScopes(request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n        parameterBuilder.addGrantType(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.GrantType.REFRESH_TOKEN_GRANT);\n        parameterBuilder.addClientInfo();\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_18__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        parameterBuilder.addRefreshToken(request.refreshToken);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(await (0,_utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_19__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.POP) {\n            const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_20__.PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__.missingSshJwk);\n            }\n        }\n        if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_21__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch(request.ccsCredential.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_22__.buildClientInfoFromHomeAccountId)(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=RefreshTokenClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentFlowClient: () => (/* binding */ SilentFlowClient)\n/* harmony export */ });\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RefreshTokenClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _authority_Authority_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../authority/Authority.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class SilentFlowClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n    }\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */ async acquireToken(request) {\n        try {\n            const [authResponse, cacheOutcome] = await this.acquireCachedToken({\n                ...request,\n                scopes: request.scopes?.length ? request.scopes : [\n                    ..._utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES\n                ]\n            });\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (cacheOutcome === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\n                // refresh the access token in the background\n                const refreshTokenClient = new _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__.RefreshTokenClient(this.config, this.performanceClient);\n                refreshTokenClient.acquireTokenByRefreshToken(request).catch(()=>{\n                // do nothing, this is running in the background and no action is to be taken upon success or failure\n                });\n            }\n            // return the cached token\n            return authResponse;\n        } catch (e) {\n            if (e instanceof _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError && e.errorCode === _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired) {\n                const refreshTokenClient = new _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__.RefreshTokenClient(this.config, this.performanceClient);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */ async acquireCachedToken(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\n        let lastCacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NOT_APPLICABLE;\n        if (request.forceRefresh || !this.config.cacheOptions.claimsBasedCachingEnabled && !_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.StringUtils.isEmptyObj(request.claims)) {\n            // Must refresh due to present force_refresh flag.\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.noAccountInSilentRequest);\n        }\n        const requestTenantId = request.account.tenantId || (0,_authority_Authority_mjs__WEBPACK_IMPORTED_MODULE_7__.getTenantFromAuthorityString)(request.authority);\n        const tokenKeys = this.cacheManager.getTokenKeys();\n        const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId, this.performanceClient, request.correlationId);\n        if (!cachedAccessToken) {\n            // must refresh due to non-existent access_token\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        } else if ((0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.wasClockTurnedBack)(cachedAccessToken.cachedAt) || (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.isTokenExpired)(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            // must refresh due to the expires_in value\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        } else if (cachedAccessToken.refreshOn && (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.isTokenExpired)(cachedAccessToken.refreshOn, 0)) {\n            // must refresh (in the background) due to the refresh_in value\n            lastCacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED;\n        // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\n        }\n        const environment = request.authority || this.authority.getPreferredCache();\n        const cacheRecord = {\n            account: this.cacheManager.readAccountFromCache(request.account),\n            accessToken: cachedAccessToken,\n            idToken: this.cacheManager.getIdToken(request.account, tokenKeys, requestTenantId, this.performanceClient, request.correlationId),\n            refreshToken: null,\n            appMetadata: this.cacheManager.readAppMetadataFromCache(environment)\n        };\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n        return [\n            await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_9__.invokeAsync)(this.generateResultFromCacheRecord.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),\n            lastCacheOutcome\n        ];\n    }\n    setCacheOutcome(cacheOutcome, correlationId) {\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\n        this.performanceClient?.addFields({\n            cacheOutcome: cacheOutcome\n        }, correlationId);\n        if (cacheOutcome !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NOT_APPLICABLE) {\n            this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\n        }\n    }\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */ async generateResultFromCacheRecord(cacheRecord, request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\n        let idTokenClaims;\n        if (cacheRecord.idToken) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__.extractTokenClaims)(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\n        }\n        // token max_age check\n        if (request.maxAge || request.maxAge === 0) {\n            const authTime = idTokenClaims?.auth_time;\n            if (!authTime) {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.authTimeNotFound);\n            }\n            (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__.checkMaxAge)(authTime, request.maxAge);\n        }\n        return _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_11__.ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\n    }\n}\n //# sourceMappingURL=SilentFlowClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_SYSTEM_OPTIONS: () => (/* binding */ DEFAULT_SYSTEM_OPTIONS),\n/* harmony export */   buildClientConfiguration: () => (/* binding */ buildClientConfiguration),\n/* harmony export */   isOidcProtocolMode: () => (/* binding */ isOidcProtocolMode)\n/* harmony export */ });\n/* harmony import */ var _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/ICrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger/Logger.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _authority_AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../authority/AuthorityOptions.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _cache_CacheManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/CacheManager.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../authority/ProtocolMode.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_SYSTEM_OPTIONS = {\n    tokenRenewalOffsetSeconds: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n    loggerCallback: ()=>{\n    // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Info,\n    correlationId: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n    claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n    async sendGetRequestAsync () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.methodNotImplemented);\n    },\n    async sendPostRequestAsync () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.methodNotImplemented);\n    }\n};\nconst DEFAULT_LIBRARY_INFO = {\n    sku: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.SKU,\n    version: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__.version,\n    cpu: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n    os: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n    clientSecret: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n    clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n    azureCloudInstance: _authority_AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_5__.AzureCloudInstance.None,\n    tenant: `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n    application: {\n        appName: \"\",\n        appVersion: \"\"\n    }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */ function buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache }) {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption\n    };\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: {\n            ...DEFAULT_SYSTEM_OPTIONS,\n            ...userSystemOptions\n        },\n        loggerOptions: loggerOptions,\n        cacheOptions: {\n            ...DEFAULT_CACHE_OPTIONS,\n            ...userCacheOptions\n        },\n        storageInterface: storageImplementation || new _cache_CacheManager_mjs__WEBPACK_IMPORTED_MODULE_6__.DefaultStorageClass(userAuthOptions.clientId, _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION, new _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.Logger(loggerOptions)),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: {\n            ...DEFAULT_LIBRARY_INFO,\n            ...libraryInfo\n        },\n        telemetry: {\n            ...DEFAULT_TELEMETRY_OPTIONS,\n            ...telemetry\n        },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null\n    };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */ function buildAuthOptions(authOptions) {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        instanceAware: false,\n        ...authOptions\n    };\n}\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */ function isOidcProtocolMode(config) {\n    return config.authOptions.authority.options.protocolMode === _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_8__.ProtocolMode.OIDC;\n}\n //# sourceMappingURL=ClientConfiguration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCESS_TOKEN: () => (/* binding */ ACCESS_TOKEN),\n/* harmony export */   BROKER_CLIENT_ID: () => (/* binding */ BROKER_CLIENT_ID),\n/* harmony export */   BROKER_REDIRECT_URI: () => (/* binding */ BROKER_REDIRECT_URI),\n/* harmony export */   CCS_HEADER: () => (/* binding */ CCS_HEADER),\n/* harmony export */   CLAIMS: () => (/* binding */ CLAIMS),\n/* harmony export */   CLIENT_ASSERTION: () => (/* binding */ CLIENT_ASSERTION),\n/* harmony export */   CLIENT_ASSERTION_TYPE: () => (/* binding */ CLIENT_ASSERTION_TYPE),\n/* harmony export */   CLIENT_ID: () => (/* binding */ CLIENT_ID),\n/* harmony export */   CLIENT_INFO: () => (/* binding */ CLIENT_INFO),\n/* harmony export */   CLIENT_REQUEST_ID: () => (/* binding */ CLIENT_REQUEST_ID),\n/* harmony export */   CLIENT_SECRET: () => (/* binding */ CLIENT_SECRET),\n/* harmony export */   CODE: () => (/* binding */ CODE),\n/* harmony export */   CODE_CHALLENGE: () => (/* binding */ CODE_CHALLENGE),\n/* harmony export */   CODE_CHALLENGE_METHOD: () => (/* binding */ CODE_CHALLENGE_METHOD),\n/* harmony export */   CODE_VERIFIER: () => (/* binding */ CODE_VERIFIER),\n/* harmony export */   DEVICE_CODE: () => (/* binding */ DEVICE_CODE),\n/* harmony export */   DOMAIN_HINT: () => (/* binding */ DOMAIN_HINT),\n/* harmony export */   ERROR: () => (/* binding */ ERROR),\n/* harmony export */   ERROR_DESCRIPTION: () => (/* binding */ ERROR_DESCRIPTION),\n/* harmony export */   EXPIRES_IN: () => (/* binding */ EXPIRES_IN),\n/* harmony export */   FOCI: () => (/* binding */ FOCI),\n/* harmony export */   GRANT_TYPE: () => (/* binding */ GRANT_TYPE),\n/* harmony export */   ID_TOKEN: () => (/* binding */ ID_TOKEN),\n/* harmony export */   ID_TOKEN_HINT: () => (/* binding */ ID_TOKEN_HINT),\n/* harmony export */   LOGIN_HINT: () => (/* binding */ LOGIN_HINT),\n/* harmony export */   LOGOUT_HINT: () => (/* binding */ LOGOUT_HINT),\n/* harmony export */   NATIVE_BROKER: () => (/* binding */ NATIVE_BROKER),\n/* harmony export */   NONCE: () => (/* binding */ NONCE),\n/* harmony export */   OBO_ASSERTION: () => (/* binding */ OBO_ASSERTION),\n/* harmony export */   ON_BEHALF_OF: () => (/* binding */ ON_BEHALF_OF),\n/* harmony export */   POST_LOGOUT_URI: () => (/* binding */ POST_LOGOUT_URI),\n/* harmony export */   PROMPT: () => (/* binding */ PROMPT),\n/* harmony export */   REDIRECT_URI: () => (/* binding */ REDIRECT_URI),\n/* harmony export */   REFRESH_TOKEN: () => (/* binding */ REFRESH_TOKEN),\n/* harmony export */   REFRESH_TOKEN_EXPIRES_IN: () => (/* binding */ REFRESH_TOKEN_EXPIRES_IN),\n/* harmony export */   REQUESTED_TOKEN_USE: () => (/* binding */ REQUESTED_TOKEN_USE),\n/* harmony export */   REQ_CNF: () => (/* binding */ REQ_CNF),\n/* harmony export */   RESPONSE_MODE: () => (/* binding */ RESPONSE_MODE),\n/* harmony export */   RESPONSE_TYPE: () => (/* binding */ RESPONSE_TYPE),\n/* harmony export */   RETURN_SPA_CODE: () => (/* binding */ RETURN_SPA_CODE),\n/* harmony export */   SCOPE: () => (/* binding */ SCOPE),\n/* harmony export */   SESSION_STATE: () => (/* binding */ SESSION_STATE),\n/* harmony export */   SID: () => (/* binding */ SID),\n/* harmony export */   STATE: () => (/* binding */ STATE),\n/* harmony export */   TOKEN_TYPE: () => (/* binding */ TOKEN_TYPE),\n/* harmony export */   X_APP_NAME: () => (/* binding */ X_APP_NAME),\n/* harmony export */   X_APP_VER: () => (/* binding */ X_APP_VER),\n/* harmony export */   X_CLIENT_CPU: () => (/* binding */ X_CLIENT_CPU),\n/* harmony export */   X_CLIENT_CURR_TELEM: () => (/* binding */ X_CLIENT_CURR_TELEM),\n/* harmony export */   X_CLIENT_EXTRA_SKU: () => (/* binding */ X_CLIENT_EXTRA_SKU),\n/* harmony export */   X_CLIENT_LAST_TELEM: () => (/* binding */ X_CLIENT_LAST_TELEM),\n/* harmony export */   X_CLIENT_OS: () => (/* binding */ X_CLIENT_OS),\n/* harmony export */   X_CLIENT_SKU: () => (/* binding */ X_CLIENT_SKU),\n/* harmony export */   X_CLIENT_VER: () => (/* binding */ X_CLIENT_VER),\n/* harmony export */   X_MS_LIB_CAPABILITY: () => (/* binding */ X_MS_LIB_CAPABILITY)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CLIENT_ID = \"client_id\";\nconst REDIRECT_URI = \"redirect_uri\";\nconst RESPONSE_TYPE = \"response_type\";\nconst RESPONSE_MODE = \"response_mode\";\nconst GRANT_TYPE = \"grant_type\";\nconst CLAIMS = \"claims\";\nconst SCOPE = \"scope\";\nconst ERROR = \"error\";\nconst ERROR_DESCRIPTION = \"error_description\";\nconst ACCESS_TOKEN = \"access_token\";\nconst ID_TOKEN = \"id_token\";\nconst REFRESH_TOKEN = \"refresh_token\";\nconst EXPIRES_IN = \"expires_in\";\nconst REFRESH_TOKEN_EXPIRES_IN = \"refresh_token_expires_in\";\nconst STATE = \"state\";\nconst NONCE = \"nonce\";\nconst PROMPT = \"prompt\";\nconst SESSION_STATE = \"session_state\";\nconst CLIENT_INFO = \"client_info\";\nconst CODE = \"code\";\nconst CODE_CHALLENGE = \"code_challenge\";\nconst CODE_CHALLENGE_METHOD = \"code_challenge_method\";\nconst CODE_VERIFIER = \"code_verifier\";\nconst CLIENT_REQUEST_ID = \"client-request-id\";\nconst X_CLIENT_SKU = \"x-client-SKU\";\nconst X_CLIENT_VER = \"x-client-VER\";\nconst X_CLIENT_OS = \"x-client-OS\";\nconst X_CLIENT_CPU = \"x-client-CPU\";\nconst X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\nconst X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\nconst X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\nconst X_APP_NAME = \"x-app-name\";\nconst X_APP_VER = \"x-app-ver\";\nconst POST_LOGOUT_URI = \"post_logout_redirect_uri\";\nconst ID_TOKEN_HINT = \"id_token_hint\";\nconst DEVICE_CODE = \"device_code\";\nconst CLIENT_SECRET = \"client_secret\";\nconst CLIENT_ASSERTION = \"client_assertion\";\nconst CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\nconst TOKEN_TYPE = \"token_type\";\nconst REQ_CNF = \"req_cnf\";\nconst OBO_ASSERTION = \"assertion\";\nconst REQUESTED_TOKEN_USE = \"requested_token_use\";\nconst ON_BEHALF_OF = \"on_behalf_of\";\nconst FOCI = \"foci\";\nconst CCS_HEADER = \"X-AnchorMailbox\";\nconst RETURN_SPA_CODE = \"return_spa_code\";\nconst NATIVE_BROKER = \"nativebroker\";\nconst LOGOUT_HINT = \"logout_hint\";\nconst SID = \"sid\";\nconst LOGIN_HINT = \"login_hint\";\nconst DOMAIN_HINT = \"domain_hint\";\nconst X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\nconst BROKER_CLIENT_ID = \"brk_client_id\";\nconst BROKER_REDIRECT_URI = \"brk_redirect_uri\";\n //# sourceMappingURL=AADServerParamKeys.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY29uc3RhbnRzL0FBRFNlcnZlclBhcmFtS2V5cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLFlBQVk7QUFDbEIsTUFBTUMsZUFBZTtBQUNyQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsU0FBUztBQUNmLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxRQUFRO0FBQ2QsTUFBTUMsb0JBQW9CO0FBQzFCLE1BQU1DLGVBQWU7QUFDckIsTUFBTUMsV0FBVztBQUNqQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQywyQkFBMkI7QUFDakMsTUFBTUMsUUFBUTtBQUNkLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxTQUFTO0FBQ2YsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsT0FBTztBQUNiLE1BQU1DLGlCQUFpQjtBQUN2QixNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLGVBQWU7QUFDckIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLHNCQUFzQjtBQUM1QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsc0JBQXNCO0FBQzVCLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsWUFBWTtBQUNsQixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG1CQUFtQjtBQUN6QixNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxVQUFVO0FBQ2hCLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsZUFBZTtBQUNyQixNQUFNQyxPQUFPO0FBQ2IsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsTUFBTTtBQUNaLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsbUJBQW1CO0FBQ3pCLE1BQU1DLHNCQUFzQjtBQUV5dkIsQ0FDcnhCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2NvbnN0YW50cy9BQURTZXJ2ZXJQYXJhbUtleXMubWpzPzNlYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQ0xJRU5UX0lEID0gXCJjbGllbnRfaWRcIjtcclxuY29uc3QgUkVESVJFQ1RfVVJJID0gXCJyZWRpcmVjdF91cmlcIjtcclxuY29uc3QgUkVTUE9OU0VfVFlQRSA9IFwicmVzcG9uc2VfdHlwZVwiO1xyXG5jb25zdCBSRVNQT05TRV9NT0RFID0gXCJyZXNwb25zZV9tb2RlXCI7XHJcbmNvbnN0IEdSQU5UX1RZUEUgPSBcImdyYW50X3R5cGVcIjtcclxuY29uc3QgQ0xBSU1TID0gXCJjbGFpbXNcIjtcclxuY29uc3QgU0NPUEUgPSBcInNjb3BlXCI7XHJcbmNvbnN0IEVSUk9SID0gXCJlcnJvclwiO1xyXG5jb25zdCBFUlJPUl9ERVNDUklQVElPTiA9IFwiZXJyb3JfZGVzY3JpcHRpb25cIjtcclxuY29uc3QgQUNDRVNTX1RPS0VOID0gXCJhY2Nlc3NfdG9rZW5cIjtcclxuY29uc3QgSURfVE9LRU4gPSBcImlkX3Rva2VuXCI7XHJcbmNvbnN0IFJFRlJFU0hfVE9LRU4gPSBcInJlZnJlc2hfdG9rZW5cIjtcclxuY29uc3QgRVhQSVJFU19JTiA9IFwiZXhwaXJlc19pblwiO1xyXG5jb25zdCBSRUZSRVNIX1RPS0VOX0VYUElSRVNfSU4gPSBcInJlZnJlc2hfdG9rZW5fZXhwaXJlc19pblwiO1xyXG5jb25zdCBTVEFURSA9IFwic3RhdGVcIjtcclxuY29uc3QgTk9OQ0UgPSBcIm5vbmNlXCI7XHJcbmNvbnN0IFBST01QVCA9IFwicHJvbXB0XCI7XHJcbmNvbnN0IFNFU1NJT05fU1RBVEUgPSBcInNlc3Npb25fc3RhdGVcIjtcclxuY29uc3QgQ0xJRU5UX0lORk8gPSBcImNsaWVudF9pbmZvXCI7XHJcbmNvbnN0IENPREUgPSBcImNvZGVcIjtcclxuY29uc3QgQ09ERV9DSEFMTEVOR0UgPSBcImNvZGVfY2hhbGxlbmdlXCI7XHJcbmNvbnN0IENPREVfQ0hBTExFTkdFX01FVEhPRCA9IFwiY29kZV9jaGFsbGVuZ2VfbWV0aG9kXCI7XHJcbmNvbnN0IENPREVfVkVSSUZJRVIgPSBcImNvZGVfdmVyaWZpZXJcIjtcclxuY29uc3QgQ0xJRU5UX1JFUVVFU1RfSUQgPSBcImNsaWVudC1yZXF1ZXN0LWlkXCI7XHJcbmNvbnN0IFhfQ0xJRU5UX1NLVSA9IFwieC1jbGllbnQtU0tVXCI7XHJcbmNvbnN0IFhfQ0xJRU5UX1ZFUiA9IFwieC1jbGllbnQtVkVSXCI7XHJcbmNvbnN0IFhfQ0xJRU5UX09TID0gXCJ4LWNsaWVudC1PU1wiO1xyXG5jb25zdCBYX0NMSUVOVF9DUFUgPSBcIngtY2xpZW50LUNQVVwiO1xyXG5jb25zdCBYX0NMSUVOVF9DVVJSX1RFTEVNID0gXCJ4LWNsaWVudC1jdXJyZW50LXRlbGVtZXRyeVwiO1xyXG5jb25zdCBYX0NMSUVOVF9MQVNUX1RFTEVNID0gXCJ4LWNsaWVudC1sYXN0LXRlbGVtZXRyeVwiO1xyXG5jb25zdCBYX01TX0xJQl9DQVBBQklMSVRZID0gXCJ4LW1zLWxpYi1jYXBhYmlsaXR5XCI7XHJcbmNvbnN0IFhfQVBQX05BTUUgPSBcIngtYXBwLW5hbWVcIjtcclxuY29uc3QgWF9BUFBfVkVSID0gXCJ4LWFwcC12ZXJcIjtcclxuY29uc3QgUE9TVF9MT0dPVVRfVVJJID0gXCJwb3N0X2xvZ291dF9yZWRpcmVjdF91cmlcIjtcclxuY29uc3QgSURfVE9LRU5fSElOVCA9IFwiaWRfdG9rZW5faGludFwiO1xyXG5jb25zdCBERVZJQ0VfQ09ERSA9IFwiZGV2aWNlX2NvZGVcIjtcclxuY29uc3QgQ0xJRU5UX1NFQ1JFVCA9IFwiY2xpZW50X3NlY3JldFwiO1xyXG5jb25zdCBDTElFTlRfQVNTRVJUSU9OID0gXCJjbGllbnRfYXNzZXJ0aW9uXCI7XHJcbmNvbnN0IENMSUVOVF9BU1NFUlRJT05fVFlQRSA9IFwiY2xpZW50X2Fzc2VydGlvbl90eXBlXCI7XHJcbmNvbnN0IFRPS0VOX1RZUEUgPSBcInRva2VuX3R5cGVcIjtcclxuY29uc3QgUkVRX0NORiA9IFwicmVxX2NuZlwiO1xyXG5jb25zdCBPQk9fQVNTRVJUSU9OID0gXCJhc3NlcnRpb25cIjtcclxuY29uc3QgUkVRVUVTVEVEX1RPS0VOX1VTRSA9IFwicmVxdWVzdGVkX3Rva2VuX3VzZVwiO1xyXG5jb25zdCBPTl9CRUhBTEZfT0YgPSBcIm9uX2JlaGFsZl9vZlwiO1xyXG5jb25zdCBGT0NJID0gXCJmb2NpXCI7XHJcbmNvbnN0IENDU19IRUFERVIgPSBcIlgtQW5jaG9yTWFpbGJveFwiO1xyXG5jb25zdCBSRVRVUk5fU1BBX0NPREUgPSBcInJldHVybl9zcGFfY29kZVwiO1xyXG5jb25zdCBOQVRJVkVfQlJPS0VSID0gXCJuYXRpdmVicm9rZXJcIjtcclxuY29uc3QgTE9HT1VUX0hJTlQgPSBcImxvZ291dF9oaW50XCI7XHJcbmNvbnN0IFNJRCA9IFwic2lkXCI7XHJcbmNvbnN0IExPR0lOX0hJTlQgPSBcImxvZ2luX2hpbnRcIjtcclxuY29uc3QgRE9NQUlOX0hJTlQgPSBcImRvbWFpbl9oaW50XCI7XHJcbmNvbnN0IFhfQ0xJRU5UX0VYVFJBX1NLVSA9IFwieC1jbGllbnQteHRyYS1za3VcIjtcclxuY29uc3QgQlJPS0VSX0NMSUVOVF9JRCA9IFwiYnJrX2NsaWVudF9pZFwiO1xyXG5jb25zdCBCUk9LRVJfUkVESVJFQ1RfVVJJID0gXCJicmtfcmVkaXJlY3RfdXJpXCI7XG5cbmV4cG9ydCB7IEFDQ0VTU19UT0tFTiwgQlJPS0VSX0NMSUVOVF9JRCwgQlJPS0VSX1JFRElSRUNUX1VSSSwgQ0NTX0hFQURFUiwgQ0xBSU1TLCBDTElFTlRfQVNTRVJUSU9OLCBDTElFTlRfQVNTRVJUSU9OX1RZUEUsIENMSUVOVF9JRCwgQ0xJRU5UX0lORk8sIENMSUVOVF9SRVFVRVNUX0lELCBDTElFTlRfU0VDUkVULCBDT0RFLCBDT0RFX0NIQUxMRU5HRSwgQ09ERV9DSEFMTEVOR0VfTUVUSE9ELCBDT0RFX1ZFUklGSUVSLCBERVZJQ0VfQ09ERSwgRE9NQUlOX0hJTlQsIEVSUk9SLCBFUlJPUl9ERVNDUklQVElPTiwgRVhQSVJFU19JTiwgRk9DSSwgR1JBTlRfVFlQRSwgSURfVE9LRU4sIElEX1RPS0VOX0hJTlQsIExPR0lOX0hJTlQsIExPR09VVF9ISU5ULCBOQVRJVkVfQlJPS0VSLCBOT05DRSwgT0JPX0FTU0VSVElPTiwgT05fQkVIQUxGX09GLCBQT1NUX0xPR09VVF9VUkksIFBST01QVCwgUkVESVJFQ1RfVVJJLCBSRUZSRVNIX1RPS0VOLCBSRUZSRVNIX1RPS0VOX0VYUElSRVNfSU4sIFJFUVVFU1RFRF9UT0tFTl9VU0UsIFJFUV9DTkYsIFJFU1BPTlNFX01PREUsIFJFU1BPTlNFX1RZUEUsIFJFVFVSTl9TUEFfQ09ERSwgU0NPUEUsIFNFU1NJT05fU1RBVEUsIFNJRCwgU1RBVEUsIFRPS0VOX1RZUEUsIFhfQVBQX05BTUUsIFhfQVBQX1ZFUiwgWF9DTElFTlRfQ1BVLCBYX0NMSUVOVF9DVVJSX1RFTEVNLCBYX0NMSUVOVF9FWFRSQV9TS1UsIFhfQ0xJRU5UX0xBU1RfVEVMRU0sIFhfQ0xJRU5UX09TLCBYX0NMSUVOVF9TS1UsIFhfQ0xJRU5UX1ZFUiwgWF9NU19MSUJfQ0FQQUJJTElUWSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QUFEU2VydmVyUGFyYW1LZXlzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDTElFTlRfSUQiLCJSRURJUkVDVF9VUkkiLCJSRVNQT05TRV9UWVBFIiwiUkVTUE9OU0VfTU9ERSIsIkdSQU5UX1RZUEUiLCJDTEFJTVMiLCJTQ09QRSIsIkVSUk9SIiwiRVJST1JfREVTQ1JJUFRJT04iLCJBQ0NFU1NfVE9LRU4iLCJJRF9UT0tFTiIsIlJFRlJFU0hfVE9LRU4iLCJFWFBJUkVTX0lOIiwiUkVGUkVTSF9UT0tFTl9FWFBJUkVTX0lOIiwiU1RBVEUiLCJOT05DRSIsIlBST01QVCIsIlNFU1NJT05fU1RBVEUiLCJDTElFTlRfSU5GTyIsIkNPREUiLCJDT0RFX0NIQUxMRU5HRSIsIkNPREVfQ0hBTExFTkdFX01FVEhPRCIsIkNPREVfVkVSSUZJRVIiLCJDTElFTlRfUkVRVUVTVF9JRCIsIlhfQ0xJRU5UX1NLVSIsIlhfQ0xJRU5UX1ZFUiIsIlhfQ0xJRU5UX09TIiwiWF9DTElFTlRfQ1BVIiwiWF9DTElFTlRfQ1VSUl9URUxFTSIsIlhfQ0xJRU5UX0xBU1RfVEVMRU0iLCJYX01TX0xJQl9DQVBBQklMSVRZIiwiWF9BUFBfTkFNRSIsIlhfQVBQX1ZFUiIsIlBPU1RfTE9HT1VUX1VSSSIsIklEX1RPS0VOX0hJTlQiLCJERVZJQ0VfQ09ERSIsIkNMSUVOVF9TRUNSRVQiLCJDTElFTlRfQVNTRVJUSU9OIiwiQ0xJRU5UX0FTU0VSVElPTl9UWVBFIiwiVE9LRU5fVFlQRSIsIlJFUV9DTkYiLCJPQk9fQVNTRVJUSU9OIiwiUkVRVUVTVEVEX1RPS0VOX1VTRSIsIk9OX0JFSEFMRl9PRiIsIkZPQ0kiLCJDQ1NfSEVBREVSIiwiUkVUVVJOX1NQQV9DT0RFIiwiTkFUSVZFX0JST0tFUiIsIkxPR09VVF9ISU5UIiwiU0lEIiwiTE9HSU5fSElOVCIsIkRPTUFJTl9ISU5UIiwiWF9DTElFTlRfRVhUUkFfU0tVIiwiQlJPS0VSX0NMSUVOVF9JRCIsIkJST0tFUl9SRURJUkVDVF9VUkkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CRYPTO_IMPLEMENTATION: () => (/* binding */ DEFAULT_CRYPTO_IMPLEMENTATION)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_CRYPTO_IMPLEMENTATION = {\n    createNewGuid: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64Decode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64Encode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64UrlEncode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    encodeKid: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async getPublicKeyThumbprint () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async removeTokenBindingKey () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async clearKeystore () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async signJwt () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async hashString () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    }\n};\n //# sourceMappingURL=ICrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY3J5cHRvL0lDcnlwdG8ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNxRTtBQUNJO0FBRXpFOzs7Q0FHQyxHQUNELE1BQU1FLGdDQUFnQztJQUNsQ0MsZUFBZTtRQUNYLE1BQU1ILGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBRyxjQUFjO1FBQ1YsTUFBTUosaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0FJLGNBQWM7UUFDVixNQUFNTCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQUssaUJBQWlCO1FBQ2IsTUFBTU4saUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0FNLFdBQVc7UUFDUCxNQUFNUCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQSxNQUFNTztRQUNGLE1BQU1SLGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBLE1BQU1RO1FBQ0YsTUFBTVQsaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0EsTUFBTVM7UUFDRixNQUFNVixpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQSxNQUFNVTtRQUNGLE1BQU1YLGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBLE1BQU1XO1FBQ0YsTUFBTVosaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0FBQ0o7QUFFeUMsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY3J5cHRvL0lDcnlwdG8ubWpzPzZlNGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IG1ldGhvZE5vdEltcGxlbWVudGVkIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IERFRkFVTFRfQ1JZUFRPX0lNUExFTUVOVEFUSU9OID0ge1xyXG4gICAgY3JlYXRlTmV3R3VpZDogKCkgPT4ge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYmFzZTY0RGVjb2RlOiAoKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBiYXNlNjRFbmNvZGU6ICgpID0+IHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGJhc2U2NFVybEVuY29kZTogKCkgPT4ge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgZW5jb2RlS2lkOiAoKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRQdWJsaWNLZXlUaHVtYnByaW50KCkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgcmVtb3ZlVG9rZW5CaW5kaW5nS2V5KCkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgY2xlYXJLZXlzdG9yZSgpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIHNpZ25Kd3QoKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBoYXNoU3RyaW5nKCkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG59O1xuXG5leHBvcnQgeyBERUZBVUxUX0NSWVBUT19JTVBMRU1FTlRBVElPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwibWV0aG9kTm90SW1wbGVtZW50ZWQiLCJERUZBVUxUX0NSWVBUT19JTVBMRU1FTlRBVElPTiIsImNyZWF0ZU5ld0d1aWQiLCJiYXNlNjREZWNvZGUiLCJiYXNlNjRFbmNvZGUiLCJiYXNlNjRVcmxFbmNvZGUiLCJlbmNvZGVLaWQiLCJnZXRQdWJsaWNLZXlUaHVtYnByaW50IiwicmVtb3ZlVG9rZW5CaW5kaW5nS2V5IiwiY2xlYXJLZXlzdG9yZSIsInNpZ25Kd3QiLCJoYXNoU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JoseHeader: () => (/* binding */ JoseHeader)\n/* harmony export */ });\n/* harmony import */ var _error_JoseHeaderError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/JoseHeaderError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/JoseHeaderErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class JoseHeader {\n    constructor(options){\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n    /**\r\n     * Builds SignedHttpRequest formatted JOSE Header from the\r\n     * JOSE Header options provided or previously set on the object and returns\r\n     * the stringified header object.\r\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n     * @param shrHeaderOptions\r\n     * @returns\r\n     */ static getShrHeaderString(shrHeaderOptions) {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw (0,_error_JoseHeaderError_mjs__WEBPACK_IMPORTED_MODULE_0__.createJoseHeaderError)(_error_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.missingKidError);\n        }\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw (0,_error_JoseHeaderError_mjs__WEBPACK_IMPORTED_MODULE_0__.createJoseHeaderError)(_error_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.missingAlgError);\n        }\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JsonWebTokenTypes.Pop,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg\n        });\n        return JSON.stringify(shrHeader);\n    }\n}\n //# sourceMappingURL=JoseHeader.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY3J5cHRvL0pvc2VIZWFkZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDcUU7QUFDVjtBQUMwQjtBQUVyRjs7O0NBR0MsR0FDRCxjQUFjLEdBQ2QsTUFBTUk7SUFDRkMsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLElBQUksQ0FBQ0MsR0FBRyxHQUFHRCxRQUFRQyxHQUFHO1FBQ3RCLElBQUksQ0FBQ0MsR0FBRyxHQUFHRixRQUFRRSxHQUFHO1FBQ3RCLElBQUksQ0FBQ0MsR0FBRyxHQUFHSCxRQUFRRyxHQUFHO0lBQzFCO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE9BQU9DLG1CQUFtQkMsZ0JBQWdCLEVBQUU7UUFDeEMsc0NBQXNDO1FBQ3RDLElBQUksQ0FBQ0EsaUJBQWlCRixHQUFHLEVBQUU7WUFDdkIsTUFBTVQsaUZBQXFCQSxDQUFDRSw0RUFBZUE7UUFDL0M7UUFDQSxvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDUyxpQkFBaUJILEdBQUcsRUFBRTtZQUN2QixNQUFNUixpRkFBcUJBLENBQUNHLDRFQUFlQTtRQUMvQztRQUNBLE1BQU1TLFlBQVksSUFBSVIsV0FBVztZQUM3QixzR0FBc0c7WUFDdEdHLEtBQUtJLGlCQUFpQkosR0FBRyxJQUFJTixtRUFBaUJBLENBQUNZLEdBQUc7WUFDbERKLEtBQUtFLGlCQUFpQkYsR0FBRztZQUN6QkQsS0FBS0csaUJBQWlCSCxHQUFHO1FBQzdCO1FBQ0EsT0FBT00sS0FBS0MsU0FBUyxDQUFDSDtJQUMxQjtBQUNKO0FBRXNCLENBQ3RCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2NyeXB0by9Kb3NlSGVhZGVyLm1qcz9kYjQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlSm9zZUhlYWRlckVycm9yIH0gZnJvbSAnLi4vZXJyb3IvSm9zZUhlYWRlckVycm9yLm1qcyc7XG5pbXBvcnQgeyBKc29uV2ViVG9rZW5UeXBlcyB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgbWlzc2luZ0tpZEVycm9yLCBtaXNzaW5nQWxnRXJyb3IgfSBmcm9tICcuLi9lcnJvci9Kb3NlSGVhZGVyRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5jbGFzcyBKb3NlSGVhZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLnR5cCA9IG9wdGlvbnMudHlwO1xyXG4gICAgICAgIHRoaXMuYWxnID0gb3B0aW9ucy5hbGc7XHJcbiAgICAgICAgdGhpcy5raWQgPSBvcHRpb25zLmtpZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQnVpbGRzIFNpZ25lZEh0dHBSZXF1ZXN0IGZvcm1hdHRlZCBKT1NFIEhlYWRlciBmcm9tIHRoZVxyXG4gICAgICogSk9TRSBIZWFkZXIgb3B0aW9ucyBwcm92aWRlZCBvciBwcmV2aW91c2x5IHNldCBvbiB0aGUgb2JqZWN0IGFuZCByZXR1cm5zXHJcbiAgICAgKiB0aGUgc3RyaW5naWZpZWQgaGVhZGVyIG9iamVjdC5cclxuICAgICAqIFRocm93cyBpZiBrZXlJZCBvciBhbGdvcml0aG0gYXJlbid0IHByb3ZpZGVkIHNpbmNlIHRoZXkgYXJlIHJlcXVpcmVkIGZvciBBY2Nlc3MgVG9rZW4gQmluZGluZy5cclxuICAgICAqIEBwYXJhbSBzaHJIZWFkZXJPcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0U2hySGVhZGVyU3RyaW5nKHNockhlYWRlck9wdGlvbnMpIHtcclxuICAgICAgICAvLyBLZXlJRCBpcyByZXF1aXJlZCBvbiB0aGUgU0hSIGhlYWRlclxyXG4gICAgICAgIGlmICghc2hySGVhZGVyT3B0aW9ucy5raWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlSm9zZUhlYWRlckVycm9yKG1pc3NpbmdLaWRFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFsZyBpcyByZXF1aXJlZCBvbiB0aGUgU0hSIGhlYWRlclxyXG4gICAgICAgIGlmICghc2hySGVhZGVyT3B0aW9ucy5hbGcpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlSm9zZUhlYWRlckVycm9yKG1pc3NpbmdBbGdFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNockhlYWRlciA9IG5ldyBKb3NlSGVhZGVyKHtcclxuICAgICAgICAgICAgLy8gQWNjZXNzIFRva2VuIFBvUCBoZWFkZXJzIG11c3QgaGF2ZSB0eXBlIHBvcCwgYnV0IHRoZSB0eXBlIGhlYWRlciBjYW4gYmUgb3ZlcnJpZGVuIGZvciBzcGVjaWFsIGNhc2VzXHJcbiAgICAgICAgICAgIHR5cDogc2hySGVhZGVyT3B0aW9ucy50eXAgfHwgSnNvbldlYlRva2VuVHlwZXMuUG9wLFxyXG4gICAgICAgICAgICBraWQ6IHNockhlYWRlck9wdGlvbnMua2lkLFxyXG4gICAgICAgICAgICBhbGc6IHNockhlYWRlck9wdGlvbnMuYWxnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzaHJIZWFkZXIpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IEpvc2VIZWFkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUpvc2VIZWFkZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUpvc2VIZWFkZXJFcnJvciIsIkpzb25XZWJUb2tlblR5cGVzIiwibWlzc2luZ0tpZEVycm9yIiwibWlzc2luZ0FsZ0Vycm9yIiwiSm9zZUhlYWRlciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInR5cCIsImFsZyIsImtpZCIsImdldFNockhlYWRlclN0cmluZyIsInNockhlYWRlck9wdGlvbnMiLCJzaHJIZWFkZXIiLCJQb3AiLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PopTokenGenerator: () => (/* binding */ PopTokenGenerator)\n/* harmony export */ });\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const KeyLocation = {\n    SW: \"sw\",\n    UHW: \"uhw\"\n};\n/** @internal */ class PopTokenGenerator {\n    constructor(cryptoUtils, performanceClient){\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */ async generateCnf(request, logger) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n        const reqCnf = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.generateKid.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\n        const reqCnfString = this.cryptoUtils.base64UrlEncode(JSON.stringify(reqCnf));\n        return {\n            kid: reqCnf.kid,\n            reqCnfString\n        };\n    }\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */ async generateKid(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */ async signPopToken(accessToken, keyId, request) {\n        return this.signPayload(accessToken, keyId, request);\n    }\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */ async signPayload(payload, keyId, request, claims) {\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions } = request;\n        const resourceUrlString = resourceRequestUri ? new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_2__.UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return this.cryptoUtils.signJwt({\n            at: payload,\n            ts: (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.nowSeconds)(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: resourceUrlComponents?.QueryString ? [\n                [],\n                resourceUrlComponents.QueryString\n            ] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, keyId, shrOptions, request.correlationId);\n    }\n}\n //# sourceMappingURL=PopTokenGenerator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/AuthError.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthError: () => (/* binding */ AuthError),\n/* harmony export */   AuthErrorCodes: () => (/* reexport module object */ _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   AuthErrorMessage: () => (/* binding */ AuthErrorMessage),\n/* harmony export */   AuthErrorMessages: () => (/* binding */ AuthErrorMessages),\n/* harmony export */   createAuthError: () => (/* binding */ createAuthError)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const AuthErrorMessages = {\n    [_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError]: \"Unexpected error in authentication.\",\n    [_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\"\n};\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */ const AuthErrorMessage = {\n    unexpectedError: {\n        code: _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError,\n        desc: AuthErrorMessages[_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError]\n    },\n    postRequestFailed: {\n        code: _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed,\n        desc: AuthErrorMessages[_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]\n    }\n};\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */ class AuthError extends Error {\n    constructor(errorCode, errorMessage, suberror){\n        const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;\n        super(errorString);\n        Object.setPrototypeOf(this, AuthError.prototype);\n        this.errorCode = errorCode || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.errorMessage = errorMessage || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.subError = suberror || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.name = \"AuthError\";\n    }\n    setCorrelationId(correlationId) {\n        this.correlationId = correlationId;\n    }\n}\nfunction createAuthError(code, additionalMessage) {\n    return new AuthError(code, additionalMessage ? `${AuthErrorMessages[code]} ${additionalMessage}` : AuthErrorMessages[code]);\n}\n //# sourceMappingURL=AuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQXV0aEVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ21EO0FBQ3VCO0FBQ25CO0FBQzdCO0FBRTFCOzs7Q0FHQyxHQUNELE1BQU1JLG9CQUFvQjtJQUN0QixDQUFDSCxnRUFBZUEsQ0FBQyxFQUFFO0lBQ25CLENBQUNDLGtFQUFpQkEsQ0FBQyxFQUFFO0FBQ3pCO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUcsbUJBQW1CO0lBQ3JCSixpQkFBaUI7UUFDYkssTUFBTUwsZ0VBQWVBO1FBQ3JCTSxNQUFNSCxpQkFBaUIsQ0FBQ0gsZ0VBQWVBLENBQUM7SUFDNUM7SUFDQUMsbUJBQW1CO1FBQ2ZJLE1BQU1KLGtFQUFpQkE7UUFDdkJLLE1BQU1ILGlCQUFpQixDQUFDRixrRUFBaUJBLENBQUM7SUFDOUM7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTU0sa0JBQWtCQztJQUNwQkMsWUFBWUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLFFBQVEsQ0FBRTtRQUMzQyxNQUFNQyxjQUFjRixlQUNkLENBQUMsRUFBRUQsVUFBVSxFQUFFLEVBQUVDLGFBQWEsQ0FBQyxHQUMvQkQ7UUFDTixLQUFLLENBQUNHO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUVSLFVBQVVTLFNBQVM7UUFDL0MsSUFBSSxDQUFDTixTQUFTLEdBQUdBLGFBQWFYLDJEQUFTQSxDQUFDa0IsWUFBWTtRQUNwRCxJQUFJLENBQUNOLFlBQVksR0FBR0EsZ0JBQWdCWiwyREFBU0EsQ0FBQ2tCLFlBQVk7UUFDMUQsSUFBSSxDQUFDQyxRQUFRLEdBQUdOLFlBQVliLDJEQUFTQSxDQUFDa0IsWUFBWTtRQUNsRCxJQUFJLENBQUNFLElBQUksR0FBRztJQUNoQjtJQUNBQyxpQkFBaUJDLGFBQWEsRUFBRTtRQUM1QixJQUFJLENBQUNBLGFBQWEsR0FBR0E7SUFDekI7QUFDSjtBQUNBLFNBQVNDLGdCQUFnQmpCLElBQUksRUFBRWtCLGlCQUFpQjtJQUM1QyxPQUFPLElBQUloQixVQUFVRixNQUFNa0Isb0JBQ3JCLENBQUMsRUFBRXBCLGlCQUFpQixDQUFDRSxLQUFLLENBQUMsQ0FBQyxFQUFFa0Isa0JBQWtCLENBQUMsR0FDakRwQixpQkFBaUIsQ0FBQ0UsS0FBSztBQUNqQztBQUUyRSxDQUMzRSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9BdXRoRXJyb3IubWpzPzM0ZTciXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9Db25zdGFudHMubWpzJztcbmltcG9ydCB7IHVuZXhwZWN0ZWRFcnJvciwgcG9zdFJlcXVlc3RGYWlsZWQgfSBmcm9tICcuL0F1dGhFcnJvckNvZGVzLm1qcyc7XG5pbXBvcnQgKiBhcyBBdXRoRXJyb3JDb2RlcyBmcm9tICcuL0F1dGhFcnJvckNvZGVzLm1qcyc7XG5leHBvcnQgeyBBdXRoRXJyb3JDb2RlcyB9O1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQXV0aEVycm9yTWVzc2FnZXMgPSB7XHJcbiAgICBbdW5leHBlY3RlZEVycm9yXTogXCJVbmV4cGVjdGVkIGVycm9yIGluIGF1dGhlbnRpY2F0aW9uLlwiLFxyXG4gICAgW3Bvc3RSZXF1ZXN0RmFpbGVkXTogXCJQb3N0IHJlcXVlc3QgZmFpbGVkIGZyb20gdGhlIG5ldHdvcmssIGNvdWxkIGJlIGEgNHh4LzV4eCBvciBhIG5ldHdvcmsgdW5hdmFpbGFiaWxpdHkuIFBsZWFzZSBjaGVjayB0aGUgZXhhY3QgZXJyb3IgY29kZSBmb3IgZGV0YWlscy5cIixcclxufTtcclxuLyoqXHJcbiAqIEF1dGhFcnJvck1lc3NhZ2UgY2xhc3MgY29udGFpbmluZyBzdHJpbmcgY29uc3RhbnRzIHVzZWQgYnkgZXJyb3IgY29kZXMgYW5kIG1lc3NhZ2VzLlxyXG4gKiBAZGVwcmVjYXRlZCBVc2UgQXV0aEVycm9yQ29kZXMgaW5zdGVhZFxyXG4gKi9cclxuY29uc3QgQXV0aEVycm9yTWVzc2FnZSA9IHtcclxuICAgIHVuZXhwZWN0ZWRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IHVuZXhwZWN0ZWRFcnJvcixcclxuICAgICAgICBkZXNjOiBBdXRoRXJyb3JNZXNzYWdlc1t1bmV4cGVjdGVkRXJyb3JdLFxyXG4gICAgfSxcclxuICAgIHBvc3RSZXF1ZXN0RmFpbGVkOiB7XHJcbiAgICAgICAgY29kZTogcG9zdFJlcXVlc3RGYWlsZWQsXHJcbiAgICAgICAgZGVzYzogQXV0aEVycm9yTWVzc2FnZXNbcG9zdFJlcXVlc3RGYWlsZWRdLFxyXG4gICAgfSxcclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYWwgZXJyb3IgY2xhc3MgdGhyb3duIGJ5IHRoZSBNU0FMLmpzIGxpYnJhcnkuXHJcbiAqL1xyXG5jbGFzcyBBdXRoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSwgc3ViZXJyb3IpIHtcclxuICAgICAgICBjb25zdCBlcnJvclN0cmluZyA9IGVycm9yTWVzc2FnZVxyXG4gICAgICAgICAgICA/IGAke2Vycm9yQ29kZX06ICR7ZXJyb3JNZXNzYWdlfWBcclxuICAgICAgICAgICAgOiBlcnJvckNvZGU7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JTdHJpbmcpO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBdXRoRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICB0aGlzLmVycm9yQ29kZSA9IGVycm9yQ29kZSB8fCBDb25zdGFudHMuRU1QVFlfU1RSSU5HO1xyXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5zdWJFcnJvciA9IHN1YmVycm9yIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBdXRoRXJyb3JcIjtcclxuICAgIH1cclxuICAgIHNldENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZCkge1xyXG4gICAgICAgIHRoaXMuY29ycmVsYXRpb25JZCA9IGNvcnJlbGF0aW9uSWQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlQXV0aEVycm9yKGNvZGUsIGFkZGl0aW9uYWxNZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IEF1dGhFcnJvcihjb2RlLCBhZGRpdGlvbmFsTWVzc2FnZVxyXG4gICAgICAgID8gYCR7QXV0aEVycm9yTWVzc2FnZXNbY29kZV19ICR7YWRkaXRpb25hbE1lc3NhZ2V9YFxyXG4gICAgICAgIDogQXV0aEVycm9yTWVzc2FnZXNbY29kZV0pO1xyXG59XG5cbmV4cG9ydCB7IEF1dGhFcnJvciwgQXV0aEVycm9yTWVzc2FnZSwgQXV0aEVycm9yTWVzc2FnZXMsIGNyZWF0ZUF1dGhFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aEVycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJ1bmV4cGVjdGVkRXJyb3IiLCJwb3N0UmVxdWVzdEZhaWxlZCIsIkF1dGhFcnJvckNvZGVzIiwiQXV0aEVycm9yTWVzc2FnZXMiLCJBdXRoRXJyb3JNZXNzYWdlIiwiY29kZSIsImRlc2MiLCJBdXRoRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JDb2RlIiwiZXJyb3JNZXNzYWdlIiwic3ViZXJyb3IiLCJlcnJvclN0cmluZyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiRU1QVFlfU1RSSU5HIiwic3ViRXJyb3IiLCJuYW1lIiwic2V0Q29ycmVsYXRpb25JZCIsImNvcnJlbGF0aW9uSWQiLCJjcmVhdGVBdXRoRXJyb3IiLCJhZGRpdGlvbmFsTWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postRequestFailed: () => (/* binding */ postRequestFailed),\n/* harmony export */   unexpectedError: () => (/* binding */ unexpectedError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const unexpectedError = \"unexpected_error\";\nconst postRequestFailed = \"post_request_failed\";\n //# sourceMappingURL=AuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQXV0aEVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNQSxrQkFBa0I7QUFDeEIsTUFBTUMsb0JBQW9CO0FBRW9CLENBQzlDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL0F1dGhFcnJvckNvZGVzLm1qcz9jYzdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBdXRoRXJyb3JNZXNzYWdlIGNsYXNzIGNvbnRhaW5pbmcgc3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcy5cclxuICovXHJcbmNvbnN0IHVuZXhwZWN0ZWRFcnJvciA9IFwidW5leHBlY3RlZF9lcnJvclwiO1xyXG5jb25zdCBwb3N0UmVxdWVzdEZhaWxlZCA9IFwicG9zdF9yZXF1ZXN0X2ZhaWxlZFwiO1xuXG5leHBvcnQgeyBwb3N0UmVxdWVzdEZhaWxlZCwgdW5leHBlY3RlZEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRoRXJyb3JDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsidW5leHBlY3RlZEVycm9yIiwicG9zdFJlcXVlc3RGYWlsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/CacheError.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheError: () => (/* binding */ CacheError),\n/* harmony export */   CacheErrorCodes: () => (/* reexport module object */ _CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   CacheErrorMessages: () => (/* binding */ CacheErrorMessages)\n/* harmony export */ });\n/* harmony import */ var _CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CacheErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CacheErrorMessages = {\n    [_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheQuotaExceededErrorCode]: \"Exceeded cache storage capacity.\",\n    [_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheUnknownErrorCode]: \"Unexpected error occurred when using cache storage.\"\n};\n/**\r\n * Error thrown when there is an error with the cache\r\n */ class CacheError extends Error {\n    constructor(errorCode, errorMessage){\n        const message = errorMessage || (CacheErrorMessages[errorCode] ? CacheErrorMessages[errorCode] : CacheErrorMessages[_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheUnknownErrorCode]);\n        super(`${errorCode}: ${message}`);\n        Object.setPrototypeOf(this, CacheError.prototype);\n        this.name = \"CacheError\";\n        this.errorCode = errorCode;\n        this.errorMessage = message;\n    }\n}\n //# sourceMappingURL=CacheError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUMyRjtBQUNsQztBQUM5QjtBQUUzQjs7O0NBR0MsR0FDRCxNQUFNRyxxQkFBcUI7SUFDdkIsQ0FBQ0YsNkVBQTJCQSxDQUFDLEVBQUU7SUFDL0IsQ0FBQ0QsdUVBQXFCQSxDQUFDLEVBQUU7QUFDN0I7QUFDQTs7Q0FFQyxHQUNELE1BQU1JLG1CQUFtQkM7SUFDckJDLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxDQUFFO1FBQ2pDLE1BQU1DLFVBQVVELGdCQUNYTCxDQUFBQSxrQkFBa0IsQ0FBQ0ksVUFBVSxHQUN4Qkosa0JBQWtCLENBQUNJLFVBQVUsR0FDN0JKLGtCQUFrQixDQUFDSCx1RUFBcUJBLENBQUM7UUFDbkQsS0FBSyxDQUFDLENBQUMsRUFBRU8sVUFBVSxFQUFFLEVBQUVFLFFBQVEsQ0FBQztRQUNoQ0MsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRVAsV0FBV1EsU0FBUztRQUNoRCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ04sU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNDLFlBQVksR0FBR0M7SUFDeEI7QUFDSjtBQUUwQyxDQUMxQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9DYWNoZUVycm9yLm1qcz8xMGIwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY2FjaGVVbmtub3duRXJyb3JDb2RlLCBjYWNoZVF1b3RhRXhjZWVkZWRFcnJvckNvZGUgfSBmcm9tICcuL0NhY2hlRXJyb3JDb2Rlcy5tanMnO1xuaW1wb3J0ICogYXMgQ2FjaGVFcnJvckNvZGVzIGZyb20gJy4vQ2FjaGVFcnJvckNvZGVzLm1qcyc7XG5leHBvcnQgeyBDYWNoZUVycm9yQ29kZXMgfTtcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IENhY2hlRXJyb3JNZXNzYWdlcyA9IHtcclxuICAgIFtjYWNoZVF1b3RhRXhjZWVkZWRFcnJvckNvZGVdOiBcIkV4Y2VlZGVkIGNhY2hlIHN0b3JhZ2UgY2FwYWNpdHkuXCIsXHJcbiAgICBbY2FjaGVVbmtub3duRXJyb3JDb2RlXTogXCJVbmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoZW4gdXNpbmcgY2FjaGUgc3RvcmFnZS5cIixcclxufTtcclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIHdpdGggdGhlIGNhY2hlXHJcbiAqL1xyXG5jbGFzcyBDYWNoZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3JNZXNzYWdlIHx8XHJcbiAgICAgICAgICAgIChDYWNoZUVycm9yTWVzc2FnZXNbZXJyb3JDb2RlXVxyXG4gICAgICAgICAgICAgICAgPyBDYWNoZUVycm9yTWVzc2FnZXNbZXJyb3JDb2RlXVxyXG4gICAgICAgICAgICAgICAgOiBDYWNoZUVycm9yTWVzc2FnZXNbY2FjaGVVbmtub3duRXJyb3JDb2RlXSk7XHJcbiAgICAgICAgc3VwZXIoYCR7ZXJyb3JDb2RlfTogJHttZXNzYWdlfWApO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDYWNoZUVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDYWNoZUVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XHJcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENhY2hlRXJyb3IsIENhY2hlRXJyb3JNZXNzYWdlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FjaGVFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiY2FjaGVVbmtub3duRXJyb3JDb2RlIiwiY2FjaGVRdW90YUV4Y2VlZGVkRXJyb3JDb2RlIiwiQ2FjaGVFcnJvckNvZGVzIiwiQ2FjaGVFcnJvck1lc3NhZ2VzIiwiQ2FjaGVFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvckNvZGUiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheQuotaExceededErrorCode: () => (/* binding */ cacheQuotaExceededErrorCode),\n/* harmony export */   cacheUnknownErrorCode: () => (/* binding */ cacheUnknownErrorCode)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const cacheQuotaExceededErrorCode = \"cache_quota_exceeded\";\nconst cacheUnknownErrorCode = \"cache_error_unknown\";\n //# sourceMappingURL=CacheErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLDhCQUE4QjtBQUNwQyxNQUFNQyx3QkFBd0I7QUFFZ0MsQ0FDOUQsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvckNvZGVzLm1qcz85MDVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGNhY2hlUXVvdGFFeGNlZWRlZEVycm9yQ29kZSA9IFwiY2FjaGVfcXVvdGFfZXhjZWVkZWRcIjtcclxuY29uc3QgY2FjaGVVbmtub3duRXJyb3JDb2RlID0gXCJjYWNoZV9lcnJvcl91bmtub3duXCI7XG5cbmV4cG9ydCB7IGNhY2hlUXVvdGFFeGNlZWRlZEVycm9yQ29kZSwgY2FjaGVVbmtub3duRXJyb3JDb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWNoZUVycm9yQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNhY2hlUXVvdGFFeGNlZWRlZEVycm9yQ29kZSIsImNhY2hlVW5rbm93bkVycm9yQ29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientAuthError: () => (/* binding */ ClientAuthError),\n/* harmony export */   ClientAuthErrorCodes: () => (/* reexport module object */ _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   ClientAuthErrorMessage: () => (/* binding */ ClientAuthErrorMessage),\n/* harmony export */   ClientAuthErrorMessages: () => (/* binding */ ClientAuthErrorMessages),\n/* harmony export */   createClientAuthError: () => (/* binding */ createClientAuthError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const ClientAuthErrorMessages = {\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError]: \"The client info was empty\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError]: \"Token cannot be parsed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken]: \"The token is null or empty\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError]: \"Endpoints cannot be resolved\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError]: \"Network request failed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized]: \"The hash parameters could not be deserialized\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState]: \"State was not the expected format\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch]: \"State mismatch error\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound]: \"State not found\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch]: \"Nonce mismatch error\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet]: \"Cannot append ScopeSet\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired]: \"Device code is expired.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord]: \"Cache record object was null or undefined.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound]: \"No account found in cache for given key.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject]: \"No crypto object detected.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType]: \"Unexpected credential type.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached]: \"User defined timeout for device code polling reached\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled]: \"User cancelled the flow.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.methodNotImplemented]: \"This method has not been implemented\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\"\n};\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */ const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError]\n    },\n    clientInfoEmptyError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError]\n    },\n    tokenParsingError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError]\n    },\n    nullOrEmptyToken: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken]\n    },\n    endpointResolutionError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError]\n    },\n    networkError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError]\n    },\n    unableToGetOpenidConfigError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError]\n    },\n    hashNotDeserialized: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized]\n    },\n    invalidStateError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState]\n    },\n    stateMismatchError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch]\n    },\n    stateNotFoundError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound]\n    },\n    nonceMismatchError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch]\n    },\n    authTimeNotFoundError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound]\n    },\n    maxAgeTranspired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired]\n    },\n    multipleMatchingTokens: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens]\n    },\n    multipleMatchingAccounts: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts]\n    },\n    multipleMatchingAppMetadata: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata]\n    },\n    tokenRequestCannotBeMade: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade]\n    },\n    removeEmptyScopeError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope]\n    },\n    appendScopeSetError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet]\n    },\n    emptyInputScopeSetError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet]\n    },\n    DeviceCodePollingCancelled: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled]\n    },\n    DeviceCodeExpired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired]\n    },\n    DeviceCodeUnknownError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError]\n    },\n    NoAccountInSilentRequest: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest]\n    },\n    invalidCacheRecord: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord]\n    },\n    invalidCacheEnvironment: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment]\n    },\n    noAccountFound: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound]\n    },\n    noCryptoObj: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject]\n    },\n    unexpectedCredentialType: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType]\n    },\n    invalidAssertion: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion]\n    },\n    invalidClientCredential: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential]\n    },\n    tokenRefreshRequired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired]\n    },\n    userTimeoutReached: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached]\n    },\n    tokenClaimsRequired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt]\n    },\n    noAuthorizationCodeFromServer: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse]\n    },\n    bindingKeyNotRemovedError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved]\n    },\n    logoutNotSupported: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported]\n    },\n    keyIdMissing: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing]\n    },\n    noNetworkConnectivity: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]\n    },\n    userCanceledError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled]\n    },\n    missingTenantIdError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError]\n    },\n    nestedAppAuthBridgeDisabled: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled]\n    }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */ class ClientAuthError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, additionalMessage){\n        super(errorCode, additionalMessage ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}` : ClientAuthErrorMessages[errorCode]);\n        this.name = \"ClientAuthError\";\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n}\nfunction createClientAuthError(errorCode, additionalMessage) {\n    return new ClientAuthError(errorCode, additionalMessage);\n}\n //# sourceMappingURL=ClientAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2xpZW50QXV0aEVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQzRDO0FBQ3U4QjtBQUNoN0I7QUFDbkM7QUFFaEM7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNOEMsMEJBQTBCO0lBQzVCLENBQUM3Qyw4RUFBdUJBLENBQUMsRUFBRTtJQUMzQixDQUFDQywyRUFBb0JBLENBQUMsRUFBRTtJQUN4QixDQUFDQyx3RUFBaUJBLENBQUMsRUFBRTtJQUNyQixDQUFDQyx1RUFBZ0JBLENBQUMsRUFBRTtJQUNwQixDQUFDQyw4RUFBdUJBLENBQUMsRUFBRTtJQUMzQixDQUFDQyxtRUFBWUEsQ0FBQyxFQUFFO0lBQ2hCLENBQUNDLHdFQUFpQkEsQ0FBQyxFQUFFO0lBQ3JCLENBQUNDLDBFQUFtQkEsQ0FBQyxFQUFFO0lBQ3ZCLENBQUNDLG1FQUFZQSxDQUFDLEVBQUU7SUFDaEIsQ0FBQ0Msb0VBQWFBLENBQUMsRUFBRTtJQUNqQixDQUFDQyxvRUFBYUEsQ0FBQyxFQUFFO0lBQ2pCLENBQUNDLG9FQUFhQSxDQUFDLEVBQUU7SUFDakIsQ0FBQ0MsdUVBQWdCQSxDQUFDLEVBQUUsOEVBQ2hCLHdGQUNBO0lBQ0osQ0FBQ0MsdUVBQWdCQSxDQUFDLEVBQUU7SUFDcEIsQ0FBQ0MsNkVBQXNCQSxDQUFDLEVBQUUscUVBQ3RCO0lBQ0osQ0FBQ0MsK0VBQXdCQSxDQUFDLEVBQUU7SUFDNUIsQ0FBQ0Msa0ZBQTJCQSxDQUFDLEVBQUU7SUFDL0IsQ0FBQ0MsMEVBQW1CQSxDQUFDLEVBQUU7SUFDdkIsQ0FBQ0MsNkVBQXNCQSxDQUFDLEVBQUU7SUFDMUIsQ0FBQ0MsMkVBQW9CQSxDQUFDLEVBQUU7SUFDeEIsQ0FBQ0MseUVBQWtCQSxDQUFDLEVBQUU7SUFDdEIsQ0FBQ0MsaUZBQTBCQSxDQUFDLEVBQUU7SUFDOUIsQ0FBQ0Msd0VBQWlCQSxDQUFD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QUlILGdCQUFnQkUsV0FBV0M7QUFDMUM7QUFFbUcsQ0FDbkcsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2xpZW50QXV0aEVycm9yLm1qcz8yYjY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yIH0gZnJvbSAnLi9BdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IGNsaWVudEluZm9EZWNvZGluZ0Vycm9yLCBjbGllbnRJbmZvRW1wdHlFcnJvciwgdG9rZW5QYXJzaW5nRXJyb3IsIG51bGxPckVtcHR5VG9rZW4sIGVuZHBvaW50UmVzb2x1dGlvbkVycm9yLCBuZXR3b3JrRXJyb3IsIG9wZW5JZENvbmZpZ0Vycm9yLCBoYXNoTm90RGVzZXJpYWxpemVkLCBpbnZhbGlkU3RhdGUsIHN0YXRlTWlzbWF0Y2gsIHN0YXRlTm90Rm91bmQsIG5vbmNlTWlzbWF0Y2gsIGF1dGhUaW1lTm90Rm91bmQsIG1heEFnZVRyYW5zcGlyZWQsIG11bHRpcGxlTWF0Y2hpbmdUb2tlbnMsIG11bHRpcGxlTWF0Y2hpbmdBY2NvdW50cywgbXVsdGlwbGVNYXRjaGluZ0FwcE1ldGFkYXRhLCByZXF1ZXN0Q2Fubm90QmVNYWRlLCBjYW5ub3RSZW1vdmVFbXB0eVNjb3BlLCBjYW5ub3RBcHBlbmRTY29wZVNldCwgZW1wdHlJbnB1dFNjb3BlU2V0LCBkZXZpY2VDb2RlUG9sbGluZ0NhbmNlbGxlZCwgZGV2aWNlQ29kZUV4cGlyZWQsIGRldmljZUNvZGVVbmtub3duRXJyb3IsIG5vQWNjb3VudEluU2lsZW50UmVxdWVzdCwgaW52YWxpZENhY2hlUmVjb3JkLCBpbnZhbGlkQ2FjaGVFbnZpcm9ubWVudCwgbm9BY2NvdW50Rm91bmQsIG5vQ3J5cHRvT2JqZWN0LCB1bmV4cGVjdGVkQ3JlZGVudGlhbFR5cGUsIGludmFsaWRBc3NlcnRpb24sIGludmFsaWRDbGllbnRDcmVkZW50aWFsLCB0b2tlblJlZnJlc2hSZXF1aXJlZCwgdXNlclRpbWVvdXRSZWFjaGVkLCB0b2tlbkNsYWltc0NuZlJlcXVpcmVkRm9yU2lnbmVkSnd0LCBhdXRob3JpemF0aW9uQ29kZU1pc3NpbmdGcm9tU2VydmVyUmVzcG9uc2UsIGJpbmRpbmdLZXlOb3RSZW1vdmVkLCBlbmRTZXNzaW9uRW5kcG9pbnROb3RTdXBwb3J0ZWQsIGtleUlkTWlzc2luZywgbm9OZXR3b3JrQ29ubmVjdGl2aXR5LCB1c2VyQ2FuY2VsZWQsIG1pc3NpbmdUZW5hbnRJZEVycm9yLCBuZXN0ZWRBcHBBdXRoQnJpZGdlRGlzYWJsZWQsIG1ldGhvZE5vdEltcGxlbWVudGVkIH0gZnJvbSAnLi9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuaW1wb3J0ICogYXMgQ2xpZW50QXV0aEVycm9yQ29kZXMgZnJvbSAnLi9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuZXhwb3J0IHsgQ2xpZW50QXV0aEVycm9yQ29kZXMgfTtcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlIGNsYXNzIGNvbnRhaW5pbmcgc3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcy5cclxuICovXHJcbmNvbnN0IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzID0ge1xyXG4gICAgW2NsaWVudEluZm9EZWNvZGluZ0Vycm9yXTogXCJUaGUgY2xpZW50IGluZm8gY291bGQgbm90IGJlIHBhcnNlZC9kZWNvZGVkIGNvcnJlY3RseVwiLFxyXG4gICAgW2NsaWVudEluZm9FbXB0eUVycm9yXTogXCJUaGUgY2xpZW50IGluZm8gd2FzIGVtcHR5XCIsXHJcbiAgICBbdG9rZW5QYXJzaW5nRXJyb3JdOiBcIlRva2VuIGNhbm5vdCBiZSBwYXJzZWRcIixcclxuICAgIFtudWxsT3JFbXB0eVRva2VuXTogXCJUaGUgdG9rZW4gaXMgbnVsbCBvciBlbXB0eVwiLFxyXG4gICAgW2VuZHBvaW50UmVzb2x1dGlvbkVycm9yXTogXCJFbmRwb2ludHMgY2Fubm90IGJlIHJlc29sdmVkXCIsXHJcbiAgICBbbmV0d29ya0Vycm9yXTogXCJOZXR3b3JrIHJlcXVlc3QgZmFpbGVkXCIsXHJcbiAgICBbb3BlbklkQ29uZmlnRXJyb3JdOiBcIkNvdWxkIG5vdCByZXRyaWV2ZSBlbmRwb2ludHMuIENoZWNrIHlvdXIgYXV0aG9yaXR5IGFuZCB2ZXJpZnkgdGhlIC53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uIGVuZHBvaW50IHJldHVybnMgdGhlIHJlcXVpcmVkIGVuZHBvaW50cy5cIixcclxuICAgIFtoYXNoTm90RGVzZXJpYWxpemVkXTogXCJUaGUgaGFzaCBwYXJhbWV0ZXJzIGNvdWxkIG5vdCBiZSBkZXNlcmlhbGl6ZWRcIixcclxuICAgIFtpbnZhbGlkU3RhdGVdOiBcIlN0YXRlIHdhcyBub3QgdGhlIGV4cGVjdGVkIGZvcm1hdFwiLFxyXG4gICAgW3N0YXRlTWlzbWF0Y2hdOiBcIlN0YXRlIG1pc21hdGNoIGVycm9yXCIsXHJcbiAgICBbc3RhdGVOb3RGb3VuZF06IFwiU3RhdGUgbm90IGZvdW5kXCIsXHJcbiAgICBbbm9uY2VNaXNtYXRjaF06IFwiTm9uY2UgbWlzbWF0Y2ggZXJyb3JcIixcclxuICAgIFthdXRoVGltZU5vdEZvdW5kXTogXCJNYXggQWdlIHdhcyByZXF1ZXN0ZWQgYW5kIHRoZSBJRCB0b2tlbiBpcyBtaXNzaW5nIHRoZSBhdXRoX3RpbWUgdmFyaWFibGUuXCIgK1xyXG4gICAgICAgIFwiIGF1dGhfdGltZSBpcyBhbiBvcHRpb25hbCBjbGFpbSBhbmQgaXMgbm90IGVuYWJsZWQgYnkgZGVmYXVsdCAtIGl0IG11c3QgYmUgZW5hYmxlZC5cIiArXHJcbiAgICAgICAgXCIgU2VlIGh0dHBzOi8vYWthLm1zL21zYWxqcy9vcHRpb25hbC1jbGFpbXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIsXHJcbiAgICBbbWF4QWdlVHJhbnNwaXJlZF06IFwiTWF4IEFnZSBpcyBzZXQgdG8gMCwgb3IgdG9vIG11Y2ggdGltZSBoYXMgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCBlbmQtdXNlciBhdXRoZW50aWNhdGlvbi5cIixcclxuICAgIFttdWx0aXBsZU1hdGNoaW5nVG9rZW5zXTogXCJUaGUgY2FjaGUgY29udGFpbnMgbXVsdGlwbGUgdG9rZW5zIHNhdGlzZnlpbmcgdGhlIHJlcXVpcmVtZW50cy4gXCIgK1xyXG4gICAgICAgIFwiQ2FsbCBBY3F1aXJlVG9rZW4gYWdhaW4gcHJvdmlkaW5nIG1vcmUgcmVxdWlyZW1lbnRzIHN1Y2ggYXMgYXV0aG9yaXR5IG9yIGFjY291bnQuXCIsXHJcbiAgICBbbXVsdGlwbGVNYXRjaGluZ0FjY291bnRzXTogXCJUaGUgY2FjaGUgY29udGFpbnMgbXVsdGlwbGUgYWNjb3VudHMgc2F0aXNmeWluZyB0aGUgZ2l2ZW4gcGFyYW1ldGVycy4gUGxlYXNlIHBhc3MgbW9yZSBpbmZvIHRvIG9idGFpbiB0aGUgY29ycmVjdCBhY2NvdW50XCIsXHJcbiAgICBbbXVsdGlwbGVNYXRjaGluZ0FwcE1ldGFkYXRhXTogXCJUaGUgY2FjaGUgY29udGFpbnMgbXVsdGlwbGUgYXBwTWV0YWRhdGEgc2F0aXNmeWluZyB0aGUgZ2l2ZW4gcGFyYW1ldGVycy4gUGxlYXNlIHBhc3MgbW9yZSBpbmZvIHRvIG9idGFpbiB0aGUgY29ycmVjdCBhcHBNZXRhZGF0YVwiLFxyXG4gICAgW3JlcXVlc3RDYW5ub3RCZU1hZGVdOiBcIlRva2VuIHJlcXVlc3QgY2Fubm90IGJlIG1hZGUgd2l0aG91dCBhdXRob3JpemF0aW9uIGNvZGUgb3IgcmVmcmVzaCB0b2tlbi5cIixcclxuICAgIFtjYW5ub3RSZW1vdmVFbXB0eVNjb3BlXTogXCJDYW5ub3QgcmVtb3ZlIG51bGwgb3IgZW1wdHkgc2NvcGUgZnJvbSBTY29wZVNldFwiLFxyXG4gICAgW2Nhbm5vdEFwcGVuZFNjb3BlU2V0XTogXCJDYW5ub3QgYXBwZW5kIFNjb3BlU2V0XCIsXHJcbiAgICBbZW1wdHlJbnB1dFNjb3BlU2V0XTogXCJFbXB0eSBpbnB1dCBTY29wZVNldCBjYW5ub3QgYmUgcHJvY2Vzc2VkXCIsXHJcbiAgICBbZGV2aWNlQ29kZVBvbGxpbmdDYW5jZWxsZWRdOiBcIkNhbGxlciBoYXMgY2FuY2VsbGVkIHRva2VuIGVuZHBvaW50IHBvbGxpbmcgZHVyaW5nIGRldmljZSBjb2RlIGZsb3cgYnkgc2V0dGluZyBEZXZpY2VDb2RlUmVxdWVzdC5jYW5jZWwgPSB0cnVlLlwiLFxyXG4gICAgW2RldmljZUNvZGVFeHBpcmVkXTogXCJEZXZpY2UgY29kZSBpcyBleHBpcmVkLlwiLFxyXG4gICAgW2RldmljZUNvZGVVbmtub3duRXJyb3JdOiBcIkRldmljZSBjb2RlIHN0b3BwZWQgcG9sbGluZyBmb3IgdW5rbm93biByZWFzb25zLlwiLFxyXG4gICAgW25vQWNjb3VudEluU2lsZW50UmVxdWVzdF06IFwiUGxlYXNlIHBhc3MgYW4gYWNjb3VudCBvYmplY3QsIHNpbGVudCBmbG93IGlzIG5vdCBzdXBwb3J0ZWQgd2l0aG91dCBhY2NvdW50IGluZm9ybWF0aW9uXCIsXHJcbiAgICBbaW52YWxpZENhY2hlUmVjb3JkXTogXCJDYWNoZSByZWNvcmQgb2JqZWN0IHdhcyBudWxsIG9yIHVuZGVmaW5lZC5cIixcclxuICAgIFtpbnZhbGlkQ2FjaGVFbnZpcm9ubWVudF06IFwiSW52YWxpZCBlbnZpcm9ubWVudCB3aGVuIGF0dGVtcHRpbmcgdG8gY3JlYXRlIGNhY2hlIGVudHJ5XCIsXHJcbiAgICBbbm9BY2NvdW50Rm91bmRdOiBcIk5vIGFjY291bnQgZm91bmQgaW4gY2FjaGUgZm9yIGdpdmVuIGtleS5cIixcclxuICAgIFtub0NyeXB0b09iamVjdF06IFwiTm8gY3J5cHRvIG9iamVjdCBkZXRlY3RlZC5cIixcclxuICAgIFt1bmV4cGVjdGVkQ3JlZGVudGlhbFR5cGVdOiBcIlVuZXhwZWN0ZWQgY3JlZGVudGlhbCB0eXBlLlwiLFxyXG4gICAgW2ludmFsaWRBc3NlcnRpb25dOiBcIkNsaWVudCBhc3NlcnRpb24gbXVzdCBtZWV0IHJlcXVpcmVtZW50cyBkZXNjcmliZWQgaW4gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc1MTVcIixcclxuICAgIFtpbnZhbGlkQ2xpZW50Q3JlZGVudGlhbF06IFwiQ2xpZW50IGNyZWRlbnRpYWwgKHNlY3JldCwgY2VydGlmaWNhdGUsIG9yIGFzc2VydGlvbikgbXVzdCBub3QgYmUgZW1wdHkgd2hlbiBjcmVhdGluZyBhIGNvbmZpZGVudGlhbCBjbGllbnQuIEFuIGFwcGxpY2F0aW9uIHNob3VsZCBhdCBtb3N0IGhhdmUgb25lIGNyZWRlbnRpYWxcIixcclxuICAgIFt0b2tlblJlZnJlc2hSZXF1aXJlZF06IFwiQ2Fubm90IHJldHVybiB0b2tlbiBmcm9tIGNhY2hlIGJlY2F1c2UgaXQgbXVzdCBiZSByZWZyZXNoZWQuIFRoaXMgbWF5IGJlIGR1ZSB0byBvbmUgb2YgdGhlIGZvbGxvd2luZyByZWFzb25zOiBmb3JjZVJlZnJlc2ggcGFyYW1ldGVyIGlzIHNldCB0byB0cnVlLCBjbGFpbXMgaGF2ZSBiZWVuIHJlcXVlc3RlZCwgdGhlcmUgaXMgbm8gY2FjaGVkIGFjY2VzcyB0b2tlbiBvciBpdCBpcyBleHBpcmVkLlwiLFxyXG4gICAgW3VzZXJUaW1lb3V0UmVhY2hlZF06IFwiVXNlciBkZWZpbmVkIHRpbWVvdXQgZm9yIGRldmljZSBjb2RlIHBvbGxpbmcgcmVhY2hlZFwiLFxyXG4gICAgW3Rva2VuQ2xhaW1zQ25mUmVxdWlyZWRGb3JTaWduZWRKd3RdOiBcIkNhbm5vdCBnZW5lcmF0ZSBhIFBPUCBqd3QgaWYgdGhlIHRva2VuX2NsYWltcyBhcmUgbm90IHBvcHVsYXRlZFwiLFxyXG4gICAgW2F1dGhvcml6YXRpb25Db2RlTWlzc2luZ0Zyb21TZXJ2ZXJSZXNwb25zZV06IFwiU2VydmVyIHJlc3BvbnNlIGRvZXMgbm90IGNvbnRhaW4gYW4gYXV0aG9yaXphdGlvbiBjb2RlIHRvIHByb2NlZWRcIixcclxuICAgIFtiaW5kaW5nS2V5Tm90UmVtb3ZlZF06IFwiQ291bGQgbm90IHJlbW92ZSB0aGUgY3JlZGVudGlhbCdzIGJpbmRpbmcga2V5IGZyb20gc3RvcmFnZS5cIixcclxuICAgIFtlbmRTZXNzaW9uRW5kcG9pbnROb3RTdXBwb3J0ZWRdOiBcIlRoZSBwcm92aWRlZCBhdXRob3JpdHkgZG9lcyBub3Qgc3VwcG9ydCBsb2dvdXRcIixcclxuICAgIFtrZXlJZE1pc3NpbmddOiBcIkEga2V5SWQgdmFsdWUgaXMgbWlzc2luZyBmcm9tIHRoZSByZXF1ZXN0ZWQgYm91bmQgdG9rZW4ncyBjYWNoZSByZWNvcmQgYW5kIGlzIHJlcXVpcmVkIHRvIG1hdGNoIHRoZSB0b2tlbiB0byBpdCdzIHN0b3JlZCBiaW5kaW5nIGtleS5cIixcclxuICAgIFtub05ldHdvcmtDb25uZWN0aXZpdHldOiBcIk5vIG5ldHdvcmsgY29ubmVjdGl2aXR5LiBDaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24uXCIsXHJcbiAgICBbdXNlckNhbmNlbGVkXTogXCJVc2VyIGNhbmNlbGxlZCB0aGUgZmxvdy5cIixcclxuICAgIFttaXNzaW5nVGVuYW50SWRFcnJvcl06IFwiQSB0ZW5hbnQgaWQgLSBub3QgY29tbW9uLCBvcmdhbml6YXRpb25zLCBvciBjb25zdW1lcnMgLSBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIHVzaW5nIHRoZSBjbGllbnRfY3JlZGVudGlhbHMgZmxvdy5cIixcclxuICAgIFttZXRob2ROb3RJbXBsZW1lbnRlZF06IFwiVGhpcyBtZXRob2QgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkXCIsXHJcbiAgICBbbmVzdGVkQXBwQXV0aEJyaWRnZURpc2FibGVkXTogXCJUaGUgbmVzdGVkIGFwcCBhdXRoIGJyaWRnZSBpcyBkaXNhYmxlZFwiLFxyXG59O1xyXG4vKipcclxuICogU3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcy5cclxuICogQGRlcHJlY2F0ZWQgVXNlIENsaWVudEF1dGhFcnJvckNvZGVzIGluc3RlYWRcclxuICovXHJcbmNvbnN0IENsaWVudEF1dGhFcnJvck1lc3NhZ2UgPSB7XHJcbiAgICBjbGllbnRJbmZvRGVjb2RpbmdFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IGNsaWVudEluZm9EZWNvZGluZ0Vycm9yLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2NsaWVudEluZm9EZWNvZGluZ0Vycm9yXSxcclxuICAgIH0sXHJcbiAgICBjbGllbnRJbmZvRW1wdHlFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IGNsaWVudEluZm9FbXB0eUVycm9yLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2NsaWVudEluZm9FbXB0eUVycm9yXSxcclxuICAgIH0sXHJcbiAgICB0b2tlblBhcnNpbmdFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IHRva2VuUGFyc2luZ0Vycm9yLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW3Rva2VuUGFyc2luZ0Vycm9yXSxcclxuICAgIH0sXHJcbiAgICBudWxsT3JFbXB0eVRva2VuOiB7XHJcbiAgICAgICAgY29kZTogbnVsbE9yRW1wdHlUb2tlbixcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1tudWxsT3JFbXB0eVRva2VuXSxcclxuICAgIH0sXHJcbiAgICBlbmRwb2ludFJlc29sdXRpb25FcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IGVuZHBvaW50UmVzb2x1dGlvbkVycm9yLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2VuZHBvaW50UmVzb2x1dGlvbkVycm9yXSxcclxuICAgIH0sXHJcbiAgICBuZXR3b3JrRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBuZXR3b3JrRXJyb3IsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbmV0d29ya0Vycm9yXSxcclxuICAgIH0sXHJcbiAgICB1bmFibGVUb0dldE9wZW5pZENvbmZpZ0Vycm9yOiB7XHJcbiAgICAgICAgY29kZTogb3BlbklkQ29uZmlnRXJyb3IsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbb3BlbklkQ29uZmlnRXJyb3JdLFxyXG4gICAgfSxcclxuICAgIGhhc2hOb3REZXNlcmlhbGl6ZWQ6IHtcclxuICAgICAgICBjb2RlOiBoYXNoTm90RGVzZXJpYWxpemVkLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2hhc2hOb3REZXNlcmlhbGl6ZWRdLFxyXG4gICAgfSxcclxuICAgIGludmFsaWRTdGF0ZUVycm9yOiB7XHJcbiAgICAgICAgY29kZTogaW52YWxpZFN0YXRlLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2ludmFsaWRTdGF0ZV0sXHJcbiAgICB9LFxyXG4gICAgc3RhdGVNaXNtYXRjaEVycm9yOiB7XHJcbiAgICAgICAgY29kZTogc3RhdGVNaXNtYXRjaCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1tzdGF0ZU1pc21hdGNoXSxcclxuICAgIH0sXHJcbiAgICBzdGF0ZU5vdEZvdW5kRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBzdGF0ZU5vdEZvdW5kLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW3N0YXRlTm90Rm91bmRdLFxyXG4gICAgfSxcclxuICAgIG5vbmNlTWlzbWF0Y2hFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IG5vbmNlTWlzbWF0Y2gsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbm9uY2VNaXNtYXRjaF0sXHJcbiAgICB9LFxyXG4gICAgYXV0aFRpbWVOb3RGb3VuZEVycm9yOiB7XHJcbiAgICAgICAgY29kZTogYXV0aFRpbWVOb3RGb3VuZCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1thdXRoVGltZU5vdEZvdW5kXSxcclxuICAgIH0sXHJcbiAgICBtYXhBZ2VUcmFuc3BpcmVkOiB7XHJcbiAgICAgICAgY29kZTogbWF4QWdlVHJhbnNwaXJlZCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1ttYXhBZ2VUcmFuc3BpcmVkXSxcclxuICAgIH0sXHJcbiAgICBtdWx0aXBsZU1hdGNoaW5nVG9rZW5zOiB7XHJcbiAgICAgICAgY29kZTogbXVsdGlwbGVNYXRjaGluZ1Rva2VucyxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1ttdWx0aXBsZU1hdGNoaW5nVG9rZW5zXSxcclxuICAgIH0sXHJcbiAgICBtdWx0aXBsZU1hdGNoaW5nQWNjb3VudHM6IHtcclxuICAgICAgICBjb2RlOiBtdWx0aXBsZU1hdGNoaW5nQWNjb3VudHMsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbXVsdGlwbGVNYXRjaGluZ0FjY291bnRzXSxcclxuICAgIH0sXHJcbiAgICBtdWx0aXBsZU1hdGNoaW5nQXBwTWV0YWRhdGE6IHtcclxuICAgICAgICBjb2RlOiBtdWx0aXBsZU1hdGNoaW5nQXBwTWV0YWRhdGEsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbXVsdGlwbGVNYXRjaGluZ0FwcE1ldGFkYXRhXSxcclxuICAgIH0sXHJcbiAgICB0b2tlblJlcXVlc3RDYW5ub3RCZU1hZGU6IHtcclxuICAgICAgICBjb2RlOiByZXF1ZXN0Q2Fubm90QmVNYWRlLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW3JlcXVlc3RDYW5ub3RCZU1hZGVdLFxyXG4gICAgfSxcclxuICAgIHJlbW92ZUVtcHR5U2NvcGVFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IGNhbm5vdFJlbW92ZUVtcHR5U2NvcGUsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbY2Fubm90UmVtb3ZlRW1wdHlTY29wZV0sXHJcbiAgICB9LFxyXG4gICAgYXBwZW5kU2NvcGVTZXRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IGNhbm5vdEFwcGVuZFNjb3BlU2V0LFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2Nhbm5vdEFwcGVuZFNjb3BlU2V0XSxcclxuICAgIH0sXHJcbiAgICBlbXB0eUlucHV0U2NvcGVTZXRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IGVtcHR5SW5wdXRTY29wZVNldCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1tlbXB0eUlucHV0U2NvcGVTZXRdLFxyXG4gICAgfSxcclxuICAgIERldmljZUNvZGVQb2xsaW5nQ2FuY2VsbGVkOiB7XHJcbiAgICAgICAgY29kZTogZGV2aWNlQ29kZVBvbGxpbmdDYW5jZWxsZWQsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbZGV2aWNlQ29kZVBvbGxpbmdDYW5jZWxsZWRdLFxyXG4gICAgfSxcclxuICAgIERldmljZUNvZGVFeHBpcmVkOiB7XHJcbiAgICAgICAgY29kZTogZGV2aWNlQ29kZUV4cGlyZWQsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbZGV2aWNlQ29kZUV4cGlyZWRdLFxyXG4gICAgfSxcclxuICAgIERldmljZUNvZGVVbmtub3duRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBkZXZpY2VDb2RlVW5rbm93bkVycm9yLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2RldmljZUNvZGVVbmtub3duRXJyb3JdLFxyXG4gICAgfSxcclxuICAgIE5vQWNjb3VudEluU2lsZW50UmVxdWVzdDoge1xyXG4gICAgICAgIGNvZGU6IG5vQWNjb3VudEluU2lsZW50UmVxdWVzdCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1tub0FjY291bnRJblNpbGVudFJlcXVlc3RdLFxyXG4gICAgfSxcclxuICAgIGludmFsaWRDYWNoZVJlY29yZDoge1xyXG4gICAgICAgIGNvZGU6IGludmFsaWRDYWNoZVJlY29yZCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1tpbnZhbGlkQ2FjaGVSZWNvcmRdLFxyXG4gICAgfSxcclxuICAgIGludmFsaWRDYWNoZUVudmlyb25tZW50OiB7XHJcbiAgICAgICAgY29kZTogaW52YWxpZENhY2hlRW52aXJvbm1lbnQsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbaW52YWxpZENhY2hlRW52aXJvbm1lbnRdLFxyXG4gICAgfSxcclxuICAgIG5vQWNjb3VudEZvdW5kOiB7XHJcbiAgICAgICAgY29kZTogbm9BY2NvdW50Rm91bmQsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbm9BY2NvdW50Rm91bmRdLFxyXG4gICAgfSxcclxuICAgIG5vQ3J5cHRvT2JqOiB7XHJcbiAgICAgICAgY29kZTogbm9DcnlwdG9PYmplY3QsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbm9DcnlwdG9PYmplY3RdLFxyXG4gICAgfSxcclxuICAgIHVuZXhwZWN0ZWRDcmVkZW50aWFsVHlwZToge1xyXG4gICAgICAgIGNvZGU6IHVuZXhwZWN0ZWRDcmVkZW50aWFsVHlwZSxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1t1bmV4cGVjdGVkQ3JlZGVudGlhbFR5cGVdLFxyXG4gICAgfSxcclxuICAgIGludmFsaWRBc3NlcnRpb246IHtcclxuICAgICAgICBjb2RlOiBpbnZhbGlkQXNzZXJ0aW9uLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2ludmFsaWRBc3NlcnRpb25dLFxyXG4gICAgfSxcclxuICAgIGludmFsaWRDbGllbnRDcmVkZW50aWFsOiB7XHJcbiAgICAgICAgY29kZTogaW52YWxpZENsaWVudENyZWRlbnRpYWwsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbaW52YWxpZENsaWVudENyZWRlbnRpYWxdLFxyXG4gICAgfSxcclxuICAgIHRva2VuUmVmcmVzaFJlcXVpcmVkOiB7XHJcbiAgICAgICAgY29kZTogdG9rZW5SZWZyZXNoUmVxdWlyZWQsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbdG9rZW5SZWZyZXNoUmVxdWlyZWRdLFxyXG4gICAgfSxcclxuICAgIHVzZXJUaW1lb3V0UmVhY2hlZDoge1xyXG4gICAgICAgIGNvZGU6IHVzZXJUaW1lb3V0UmVhY2hlZCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1t1c2VyVGltZW91dFJlYWNoZWRdLFxyXG4gICAgfSxcclxuICAgIHRva2VuQ2xhaW1zUmVxdWlyZWQ6IHtcclxuICAgICAgICBjb2RlOiB0b2tlbkNsYWltc0NuZlJlcXVpcmVkRm9yU2lnbmVkSnd0LFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW3Rva2VuQ2xhaW1zQ25mUmVxdWlyZWRGb3JTaWduZWRKd3RdLFxyXG4gICAgfSxcclxuICAgIG5vQXV0aG9yaXphdGlvbkNvZGVGcm9tU2VydmVyOiB7XHJcbiAgICAgICAgY29kZTogYXV0aG9yaXphdGlvbkNvZGVNaXNzaW5nRnJvbVNlcnZlclJlc3BvbnNlLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2F1dGhvcml6YXRpb25Db2RlTWlzc2luZ0Zyb21TZXJ2ZXJSZXNwb25zZV0sXHJcbiAgICB9LFxyXG4gICAgYmluZGluZ0tleU5vdFJlbW92ZWRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IGJpbmRpbmdLZXlOb3RSZW1vdmVkLFxyXG4gICAgICAgIGRlc2M6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2JpbmRpbmdLZXlOb3RSZW1vdmVkXSxcclxuICAgIH0sXHJcbiAgICBsb2dvdXROb3RTdXBwb3J0ZWQ6IHtcclxuICAgICAgICBjb2RlOiBlbmRTZXNzaW9uRW5kcG9pbnROb3RTdXBwb3J0ZWQsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbZW5kU2Vzc2lvbkVuZHBvaW50Tm90U3VwcG9ydGVkXSxcclxuICAgIH0sXHJcbiAgICBrZXlJZE1pc3Npbmc6IHtcclxuICAgICAgICBjb2RlOiBrZXlJZE1pc3NpbmcsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNba2V5SWRNaXNzaW5nXSxcclxuICAgIH0sXHJcbiAgICBub05ldHdvcmtDb25uZWN0aXZpdHk6IHtcclxuICAgICAgICBjb2RlOiBub05ldHdvcmtDb25uZWN0aXZpdHksXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbm9OZXR3b3JrQ29ubmVjdGl2aXR5XSxcclxuICAgIH0sXHJcbiAgICB1c2VyQ2FuY2VsZWRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IHVzZXJDYW5jZWxlZCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1t1c2VyQ2FuY2VsZWRdLFxyXG4gICAgfSxcclxuICAgIG1pc3NpbmdUZW5hbnRJZEVycm9yOiB7XHJcbiAgICAgICAgY29kZTogbWlzc2luZ1RlbmFudElkRXJyb3IsXHJcbiAgICAgICAgZGVzYzogQ2xpZW50QXV0aEVycm9yTWVzc2FnZXNbbWlzc2luZ1RlbmFudElkRXJyb3JdLFxyXG4gICAgfSxcclxuICAgIG5lc3RlZEFwcEF1dGhCcmlkZ2VEaXNhYmxlZDoge1xyXG4gICAgICAgIGNvZGU6IG5lc3RlZEFwcEF1dGhCcmlkZ2VEaXNhYmxlZCxcclxuICAgICAgICBkZXNjOiBDbGllbnRBdXRoRXJyb3JNZXNzYWdlc1tuZXN0ZWRBcHBBdXRoQnJpZGdlRGlzYWJsZWRdLFxyXG4gICAgfSxcclxufTtcclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIGluIHRoZSBjbGllbnQgY29kZSBydW5uaW5nIG9uIHRoZSBicm93c2VyLlxyXG4gKi9cclxuY2xhc3MgQ2xpZW50QXV0aEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgYWRkaXRpb25hbE1lc3NhZ2UpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGFkZGl0aW9uYWxNZXNzYWdlXHJcbiAgICAgICAgICAgID8gYCR7Q2xpZW50QXV0aEVycm9yTWVzc2FnZXNbZXJyb3JDb2RlXX06ICR7YWRkaXRpb25hbE1lc3NhZ2V9YFxyXG4gICAgICAgICAgICA6IENsaWVudEF1dGhFcnJvck1lc3NhZ2VzW2Vycm9yQ29kZV0pO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ2xpZW50QXV0aEVycm9yXCI7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsaWVudEF1dGhFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudEF1dGhFcnJvcihlcnJvckNvZGUsIGFkZGl0aW9uYWxNZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihlcnJvckNvZGUsIGFkZGl0aW9uYWxNZXNzYWdlKTtcclxufVxuXG5leHBvcnQgeyBDbGllbnRBdXRoRXJyb3IsIENsaWVudEF1dGhFcnJvck1lc3NhZ2UsIENsaWVudEF1dGhFcnJvck1lc3NhZ2VzLCBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsaWVudEF1dGhFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aEVycm9yIiwiY2xpZW50SW5mb0RlY29kaW5nRXJyb3IiLCJjbGllbnRJbmZvRW1wdHlFcnJvciIsInRva2VuUGFyc2luZ0Vycm9yIiwibnVsbE9yRW1wdHlUb2tlbiIsImVuZHBvaW50UmVzb2x1dGlvbkVycm9yIiwibmV0d29ya0Vycm9yIiwib3BlbklkQ29uZmlnRXJyb3IiLCJoYXNoTm90RGVzZXJpYWxpemVkIiwiaW52YWxpZFN0YXRlIiwic3RhdGVNaXNtYXRjaCIsInN0YXRlTm90Rm91bmQiLCJub25jZU1pc21hdGNoIiwiYXV0aFRpbWVOb3RGb3VuZCIsIm1heEFnZVRyYW5zcGlyZWQiLCJtdWx0aXBsZU1hdGNoaW5nVG9rZW5zIiwibXVsdGlwbGVNYXRjaGluZ0FjY291bnRzIiwibXVsdGlwbGVNYXRjaGluZ0FwcE1ldGFkYXRhIiwicmVxdWVzdENhbm5vdEJlTWFkZSIsImNhbm5vdFJlbW92ZUVtcHR5U2NvcGUiLCJjYW5ub3RBcHBlbmRTY29wZVNldCIsImVtcHR5SW5wdXRTY29wZVNldCIsImRldmljZUNvZGVQb2xsaW5nQ2FuY2VsbGVkIiwiZGV2aWNlQ29kZUV4cGlyZWQiLCJkZXZpY2VDb2RlVW5rbm93bkVycm9yIiwibm9BY2NvdW50SW5TaWxlbnRSZXF1ZXN0IiwiaW52YWxpZENhY2hlUmVjb3JkIiwiaW52YWxpZENhY2hlRW52aXJvbm1lbnQiLCJub0FjY291bnRGb3VuZCIsIm5vQ3J5cHRvT2JqZWN0IiwidW5leHBlY3RlZENyZWRlbnRpYWxUeXBlIiwiaW52YWxpZEFzc2VydGlvbiIsImludmFsaWRDbGllbnRDcmVkZW50aWFsIiwidG9rZW5SZWZyZXNoUmVxdWlyZWQiLCJ1c2VyVGltZW91dFJlYWNoZWQiLCJ0b2tlbkNsYWltc0NuZlJlcXVpcmVkRm9yU2lnbmVkSnd0IiwiYXV0aG9yaXphdGlvbkNvZGVNaXNzaW5nRnJvbVNlcnZlclJlc3BvbnNlIiwiYmluZGluZ0tleU5vdFJlbW92ZWQiLCJlbmRTZXNzaW9uRW5kcG9pbnROb3RTdXBwb3J0ZWQiLCJrZXlJZE1pc3NpbmciLCJub05ldHdvcmtDb25uZWN0aXZpdHkiLCJ1c2VyQ2FuY2VsZWQiLCJtaXNzaW5nVGVuYW50SWRFcnJvciIsIm5lc3RlZEFwcEF1dGhCcmlkZ2VEaXNhYmxlZCIsIm1ldGhvZE5vdEltcGxlbWVudGVkIiwiQ2xpZW50QXV0aEVycm9yQ29kZXMiLCJDbGllbnRBdXRoRXJyb3JNZXNzYWdlcyIsIkNsaWVudEF1dGhFcnJvck1lc3NhZ2UiLCJjb2RlIiwiZGVzYyIsInVuYWJsZVRvR2V0T3BlbmlkQ29uZmlnRXJyb3IiLCJpbnZhbGlkU3RhdGVFcnJvciIsInN0YXRlTWlzbWF0Y2hFcnJvciIsInN0YXRlTm90Rm91bmRFcnJvciIsIm5vbmNlTWlzbWF0Y2hFcnJvciIsImF1dGhUaW1lTm90Rm91bmRFcnJvciIsInRva2VuUmVxdWVzdENhbm5vdEJlTWFkZSIsInJlbW92ZUVtcHR5U2NvcGVFcnJvciIsImFwcGVuZFNjb3BlU2V0RXJyb3IiLCJlbXB0eUlucHV0U2NvcGVTZXRFcnJvciIsIkRldmljZUNvZGVQb2xsaW5nQ2FuY2VsbGVkIiwiRGV2aWNlQ29kZUV4cGlyZWQiLCJEZXZpY2VDb2RlVW5rbm93bkVycm9yIiwiTm9BY2NvdW50SW5TaWxlbnRSZXF1ZXN0Iiwibm9DcnlwdG9PYmoiLCJ0b2tlbkNsYWltc1JlcXVpcmVkIiwibm9BdXRob3JpemF0aW9uQ29kZUZyb21TZXJ2ZXIiLCJiaW5kaW5nS2V5Tm90UmVtb3ZlZEVycm9yIiwibG9nb3V0Tm90U3VwcG9ydGVkIiwidXNlckNhbmNlbGVkRXJyb3IiLCJDbGllbnRBdXRoRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImFkZGl0aW9uYWxNZXNzYWdlIiwibmFtZSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiY3JlYXRlQ2xpZW50QXV0aEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authTimeNotFound: () => (/* binding */ authTimeNotFound),\n/* harmony export */   authorizationCodeMissingFromServerResponse: () => (/* binding */ authorizationCodeMissingFromServerResponse),\n/* harmony export */   bindingKeyNotRemoved: () => (/* binding */ bindingKeyNotRemoved),\n/* harmony export */   cannotAppendScopeSet: () => (/* binding */ cannotAppendScopeSet),\n/* harmony export */   cannotRemoveEmptyScope: () => (/* binding */ cannotRemoveEmptyScope),\n/* harmony export */   clientInfoDecodingError: () => (/* binding */ clientInfoDecodingError),\n/* harmony export */   clientInfoEmptyError: () => (/* binding */ clientInfoEmptyError),\n/* harmony export */   deviceCodeExpired: () => (/* binding */ deviceCodeExpired),\n/* harmony export */   deviceCodePollingCancelled: () => (/* binding */ deviceCodePollingCancelled),\n/* harmony export */   deviceCodeUnknownError: () => (/* binding */ deviceCodeUnknownError),\n/* harmony export */   emptyInputScopeSet: () => (/* binding */ emptyInputScopeSet),\n/* harmony export */   endSessionEndpointNotSupported: () => (/* binding */ endSessionEndpointNotSupported),\n/* harmony export */   endpointResolutionError: () => (/* binding */ endpointResolutionError),\n/* harmony export */   hashNotDeserialized: () => (/* binding */ hashNotDeserialized),\n/* harmony export */   invalidAssertion: () => (/* binding */ invalidAssertion),\n/* harmony export */   invalidCacheEnvironment: () => (/* binding */ invalidCacheEnvironment),\n/* harmony export */   invalidCacheRecord: () => (/* binding */ invalidCacheRecord),\n/* harmony export */   invalidClientCredential: () => (/* binding */ invalidClientCredential),\n/* harmony export */   invalidState: () => (/* binding */ invalidState),\n/* harmony export */   keyIdMissing: () => (/* binding */ keyIdMissing),\n/* harmony export */   maxAgeTranspired: () => (/* binding */ maxAgeTranspired),\n/* harmony export */   methodNotImplemented: () => (/* binding */ methodNotImplemented),\n/* harmony export */   missingTenantIdError: () => (/* binding */ missingTenantIdError),\n/* harmony export */   multipleMatchingAccounts: () => (/* binding */ multipleMatchingAccounts),\n/* harmony export */   multipleMatchingAppMetadata: () => (/* binding */ multipleMatchingAppMetadata),\n/* harmony export */   multipleMatchingTokens: () => (/* binding */ multipleMatchingTokens),\n/* harmony export */   nestedAppAuthBridgeDisabled: () => (/* binding */ nestedAppAuthBridgeDisabled),\n/* harmony export */   networkError: () => (/* binding */ networkError),\n/* harmony export */   noAccountFound: () => (/* binding */ noAccountFound),\n/* harmony export */   noAccountInSilentRequest: () => (/* binding */ noAccountInSilentRequest),\n/* harmony export */   noCryptoObject: () => (/* binding */ noCryptoObject),\n/* harmony export */   noNetworkConnectivity: () => (/* binding */ noNetworkConnectivity),\n/* harmony export */   nonceMismatch: () => (/* binding */ nonceMismatch),\n/* harmony export */   nullOrEmptyToken: () => (/* binding */ nullOrEmptyToken),\n/* harmony export */   openIdConfigError: () => (/* binding */ openIdConfigError),\n/* harmony export */   requestCannotBeMade: () => (/* binding */ requestCannotBeMade),\n/* harmony export */   stateMismatch: () => (/* binding */ stateMismatch),\n/* harmony export */   stateNotFound: () => (/* binding */ stateNotFound),\n/* harmony export */   tokenClaimsCnfRequiredForSignedJwt: () => (/* binding */ tokenClaimsCnfRequiredForSignedJwt),\n/* harmony export */   tokenParsingError: () => (/* binding */ tokenParsingError),\n/* harmony export */   tokenRefreshRequired: () => (/* binding */ tokenRefreshRequired),\n/* harmony export */   unexpectedCredentialType: () => (/* binding */ unexpectedCredentialType),\n/* harmony export */   userCanceled: () => (/* binding */ userCanceled),\n/* harmony export */   userTimeoutReached: () => (/* binding */ userTimeoutReached)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const clientInfoDecodingError = \"client_info_decoding_error\";\nconst clientInfoEmptyError = \"client_info_empty_error\";\nconst tokenParsingError = \"token_parsing_error\";\nconst nullOrEmptyToken = \"null_or_empty_token\";\nconst endpointResolutionError = \"endpoints_resolution_error\";\nconst networkError = \"network_error\";\nconst openIdConfigError = \"openid_config_error\";\nconst hashNotDeserialized = \"hash_not_deserialized\";\nconst invalidState = \"invalid_state\";\nconst stateMismatch = \"state_mismatch\";\nconst stateNotFound = \"state_not_found\";\nconst nonceMismatch = \"nonce_mismatch\";\nconst authTimeNotFound = \"auth_time_not_found\";\nconst maxAgeTranspired = \"max_age_transpired\";\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\nconst requestCannotBeMade = \"request_cannot_be_made\";\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\nconst emptyInputScopeSet = \"empty_input_scopeset\";\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\nconst deviceCodeExpired = \"device_code_expired\";\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\nconst invalidCacheRecord = \"invalid_cache_record\";\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\nconst noAccountFound = \"no_account_found\";\nconst noCryptoObject = \"no_crypto_object\";\nconst unexpectedCredentialType = \"unexpected_credential_type\";\nconst invalidAssertion = \"invalid_assertion\";\nconst invalidClientCredential = \"invalid_client_credential\";\nconst tokenRefreshRequired = \"token_refresh_required\";\nconst userTimeoutReached = \"user_timeout_reached\";\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\nconst keyIdMissing = \"key_id_missing\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst userCanceled = \"user_canceled\";\nconst missingTenantIdError = \"missing_tenant_id_error\";\nconst methodNotImplemented = \"method_not_implemented\";\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n //# sourceMappingURL=ClientAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientConfigurationError: () => (/* binding */ ClientConfigurationError),\n/* harmony export */   ClientConfigurationErrorCodes: () => (/* reexport module object */ _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   ClientConfigurationErrorMessage: () => (/* binding */ ClientConfigurationErrorMessage),\n/* harmony export */   ClientConfigurationErrorMessages: () => (/* binding */ ClientConfigurationErrorMessages),\n/* harmony export */   createClientConfigurationError: () => (/* binding */ createClientConfigurationError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const ClientConfigurationErrorMessages = {\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError]: \"Could not parse the given claims request object.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError]: \"URL could not be parsed into appropriate segments.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError]: \"URL was empty or null.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue]: \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty]: \"The logout request was null or undefined.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader]: \"Invalid authentication header provided\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker]: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\n};\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */ const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty]\n    },\n    claimsRequestParsingError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError]\n    },\n    authorityUriInsecure: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure]\n    },\n    urlParseError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError]\n    },\n    urlEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError]\n    },\n    emptyScopesError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError]\n    },\n    invalidPrompt: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue]\n    },\n    invalidClaimsRequest: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims]\n    },\n    tokenRequestEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty]\n    },\n    logoutRequestEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty]\n    },\n    invalidCodeChallengeMethod: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod]\n    },\n    invalidCodeChallengeParams: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing]\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata]\n    },\n    invalidAuthorityMetadata: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata]\n    },\n    untrustedAuthority: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority]\n    },\n    missingSshJwk: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk]\n    },\n    missingSshKid: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid]\n    },\n    missingNonceAuthenticationHeader: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader]\n    },\n    invalidAuthenticationHeader: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader]\n    },\n    cannotSetOIDCOptions: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions]\n    },\n    cannotAllowNativeBroker: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker]\n    },\n    authorityMismatch: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch]\n    }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */ class ClientConfigurationError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode){\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n}\nfunction createClientConfigurationError(errorCode) {\n    return new ClientConfigurationError(errorCode);\n}\n //# sourceMappingURL=ClientConfigurationError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorityMismatch: () => (/* binding */ authorityMismatch),\n/* harmony export */   authorityUriInsecure: () => (/* binding */ authorityUriInsecure),\n/* harmony export */   cannotAllowNativeBroker: () => (/* binding */ cannotAllowNativeBroker),\n/* harmony export */   cannotSetOIDCOptions: () => (/* binding */ cannotSetOIDCOptions),\n/* harmony export */   claimsRequestParsingError: () => (/* binding */ claimsRequestParsingError),\n/* harmony export */   emptyInputScopesError: () => (/* binding */ emptyInputScopesError),\n/* harmony export */   invalidAuthenticationHeader: () => (/* binding */ invalidAuthenticationHeader),\n/* harmony export */   invalidAuthorityMetadata: () => (/* binding */ invalidAuthorityMetadata),\n/* harmony export */   invalidClaims: () => (/* binding */ invalidClaims),\n/* harmony export */   invalidCloudDiscoveryMetadata: () => (/* binding */ invalidCloudDiscoveryMetadata),\n/* harmony export */   invalidCodeChallengeMethod: () => (/* binding */ invalidCodeChallengeMethod),\n/* harmony export */   invalidPromptValue: () => (/* binding */ invalidPromptValue),\n/* harmony export */   logoutRequestEmpty: () => (/* binding */ logoutRequestEmpty),\n/* harmony export */   missingNonceAuthenticationHeader: () => (/* binding */ missingNonceAuthenticationHeader),\n/* harmony export */   missingSshJwk: () => (/* binding */ missingSshJwk),\n/* harmony export */   missingSshKid: () => (/* binding */ missingSshKid),\n/* harmony export */   pkceParamsMissing: () => (/* binding */ pkceParamsMissing),\n/* harmony export */   redirectUriEmpty: () => (/* binding */ redirectUriEmpty),\n/* harmony export */   tokenRequestEmpty: () => (/* binding */ tokenRequestEmpty),\n/* harmony export */   untrustedAuthority: () => (/* binding */ untrustedAuthority),\n/* harmony export */   urlEmptyError: () => (/* binding */ urlEmptyError),\n/* harmony export */   urlParseError: () => (/* binding */ urlParseError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const redirectUriEmpty = \"redirect_uri_empty\";\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\nconst authorityUriInsecure = \"authority_uri_insecure\";\nconst urlParseError = \"url_parse_error\";\nconst urlEmptyError = \"empty_url_error\";\nconst emptyInputScopesError = \"empty_input_scopes_error\";\nconst invalidPromptValue = \"invalid_prompt_value\";\nconst invalidClaims = \"invalid_claims\";\nconst tokenRequestEmpty = \"token_request_empty\";\nconst logoutRequestEmpty = \"logout_request_empty\";\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\nconst pkceParamsMissing = \"pkce_params_missing\";\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\nconst untrustedAuthority = \"untrusted_authority\";\nconst missingSshJwk = \"missing_ssh_jwk\";\nconst missingSshKid = \"missing_ssh_kid\";\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\nconst cannotAllowNativeBroker = \"cannot_allow_native_broker\";\nconst authorityMismatch = \"authority_mismatch\";\n //# sourceMappingURL=ClientConfigurationErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQSxtQkFBbUI7QUFDekIsTUFBTUMsNEJBQTRCO0FBQ2xDLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLHdCQUF3QjtBQUM5QixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsNkJBQTZCO0FBQ25DLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxnQ0FBZ0M7QUFDdEMsTUFBTUMsMkJBQTJCO0FBQ2pDLE1BQU1DLHFCQUFxQjtBQUMzQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG1DQUFtQztBQUN6QyxNQUFNQyw4QkFBOEI7QUFDcEMsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyxvQkFBb0I7QUFFNmMsQ0FDdmUsMERBQTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMubWpzP2NmZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgcmVkaXJlY3RVcmlFbXB0eSA9IFwicmVkaXJlY3RfdXJpX2VtcHR5XCI7XHJcbmNvbnN0IGNsYWltc1JlcXVlc3RQYXJzaW5nRXJyb3IgPSBcImNsYWltc19yZXF1ZXN0X3BhcnNpbmdfZXJyb3JcIjtcclxuY29uc3QgYXV0aG9yaXR5VXJpSW5zZWN1cmUgPSBcImF1dGhvcml0eV91cmlfaW5zZWN1cmVcIjtcclxuY29uc3QgdXJsUGFyc2VFcnJvciA9IFwidXJsX3BhcnNlX2Vycm9yXCI7XHJcbmNvbnN0IHVybEVtcHR5RXJyb3IgPSBcImVtcHR5X3VybF9lcnJvclwiO1xyXG5jb25zdCBlbXB0eUlucHV0U2NvcGVzRXJyb3IgPSBcImVtcHR5X2lucHV0X3Njb3Blc19lcnJvclwiO1xyXG5jb25zdCBpbnZhbGlkUHJvbXB0VmFsdWUgPSBcImludmFsaWRfcHJvbXB0X3ZhbHVlXCI7XHJcbmNvbnN0IGludmFsaWRDbGFpbXMgPSBcImludmFsaWRfY2xhaW1zXCI7XHJcbmNvbnN0IHRva2VuUmVxdWVzdEVtcHR5ID0gXCJ0b2tlbl9yZXF1ZXN0X2VtcHR5XCI7XHJcbmNvbnN0IGxvZ291dFJlcXVlc3RFbXB0eSA9IFwibG9nb3V0X3JlcXVlc3RfZW1wdHlcIjtcclxuY29uc3QgaW52YWxpZENvZGVDaGFsbGVuZ2VNZXRob2QgPSBcImludmFsaWRfY29kZV9jaGFsbGVuZ2VfbWV0aG9kXCI7XHJcbmNvbnN0IHBrY2VQYXJhbXNNaXNzaW5nID0gXCJwa2NlX3BhcmFtc19taXNzaW5nXCI7XHJcbmNvbnN0IGludmFsaWRDbG91ZERpc2NvdmVyeU1ldGFkYXRhID0gXCJpbnZhbGlkX2Nsb3VkX2Rpc2NvdmVyeV9tZXRhZGF0YVwiO1xyXG5jb25zdCBpbnZhbGlkQXV0aG9yaXR5TWV0YWRhdGEgPSBcImludmFsaWRfYXV0aG9yaXR5X21ldGFkYXRhXCI7XHJcbmNvbnN0IHVudHJ1c3RlZEF1dGhvcml0eSA9IFwidW50cnVzdGVkX2F1dGhvcml0eVwiO1xyXG5jb25zdCBtaXNzaW5nU3NoSndrID0gXCJtaXNzaW5nX3NzaF9qd2tcIjtcclxuY29uc3QgbWlzc2luZ1NzaEtpZCA9IFwibWlzc2luZ19zc2hfa2lkXCI7XHJcbmNvbnN0IG1pc3NpbmdOb25jZUF1dGhlbnRpY2F0aW9uSGVhZGVyID0gXCJtaXNzaW5nX25vbmNlX2F1dGhlbnRpY2F0aW9uX2hlYWRlclwiO1xyXG5jb25zdCBpbnZhbGlkQXV0aGVudGljYXRpb25IZWFkZXIgPSBcImludmFsaWRfYXV0aGVudGljYXRpb25faGVhZGVyXCI7XHJcbmNvbnN0IGNhbm5vdFNldE9JRENPcHRpb25zID0gXCJjYW5ub3Rfc2V0X09JRENPcHRpb25zXCI7XHJcbmNvbnN0IGNhbm5vdEFsbG93TmF0aXZlQnJva2VyID0gXCJjYW5ub3RfYWxsb3dfbmF0aXZlX2Jyb2tlclwiO1xyXG5jb25zdCBhdXRob3JpdHlNaXNtYXRjaCA9IFwiYXV0aG9yaXR5X21pc21hdGNoXCI7XG5cbmV4cG9ydCB7IGF1dGhvcml0eU1pc21hdGNoLCBhdXRob3JpdHlVcmlJbnNlY3VyZSwgY2Fubm90QWxsb3dOYXRpdmVCcm9rZXIsIGNhbm5vdFNldE9JRENPcHRpb25zLCBjbGFpbXNSZXF1ZXN0UGFyc2luZ0Vycm9yLCBlbXB0eUlucHV0U2NvcGVzRXJyb3IsIGludmFsaWRBdXRoZW50aWNhdGlvbkhlYWRlciwgaW52YWxpZEF1dGhvcml0eU1ldGFkYXRhLCBpbnZhbGlkQ2xhaW1zLCBpbnZhbGlkQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YSwgaW52YWxpZENvZGVDaGFsbGVuZ2VNZXRob2QsIGludmFsaWRQcm9tcHRWYWx1ZSwgbG9nb3V0UmVxdWVzdEVtcHR5LCBtaXNzaW5nTm9uY2VBdXRoZW50aWNhdGlvbkhlYWRlciwgbWlzc2luZ1NzaEp3aywgbWlzc2luZ1NzaEtpZCwgcGtjZVBhcmFtc01pc3NpbmcsIHJlZGlyZWN0VXJpRW1wdHksIHRva2VuUmVxdWVzdEVtcHR5LCB1bnRydXN0ZWRBdXRob3JpdHksIHVybEVtcHR5RXJyb3IsIHVybFBhcnNlRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJyZWRpcmVjdFVyaUVtcHR5IiwiY2xhaW1zUmVxdWVzdFBhcnNpbmdFcnJvciIsImF1dGhvcml0eVVyaUluc2VjdXJlIiwidXJsUGFyc2VFcnJvciIsInVybEVtcHR5RXJyb3IiLCJlbXB0eUlucHV0U2NvcGVzRXJyb3IiLCJpbnZhbGlkUHJvbXB0VmFsdWUiLCJpbnZhbGlkQ2xhaW1zIiwidG9rZW5SZXF1ZXN0RW1wdHkiLCJsb2dvdXRSZXF1ZXN0RW1wdHkiLCJpbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZCIsInBrY2VQYXJhbXNNaXNzaW5nIiwiaW52YWxpZENsb3VkRGlzY292ZXJ5TWV0YWRhdGEiLCJpbnZhbGlkQXV0aG9yaXR5TWV0YWRhdGEiLCJ1bnRydXN0ZWRBdXRob3JpdHkiLCJtaXNzaW5nU3NoSndrIiwibWlzc2luZ1NzaEtpZCIsIm1pc3NpbmdOb25jZUF1dGhlbnRpY2F0aW9uSGVhZGVyIiwiaW52YWxpZEF1dGhlbnRpY2F0aW9uSGVhZGVyIiwiY2Fubm90U2V0T0lEQ09wdGlvbnMiLCJjYW5ub3RBbGxvd05hdGl2ZUJyb2tlciIsImF1dGhvcml0eU1pc21hdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractionRequiredAuthError: () => (/* binding */ InteractionRequiredAuthError),\n/* harmony export */   InteractionRequiredAuthErrorCodes: () => (/* reexport module object */ _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   InteractionRequiredAuthErrorMessage: () => (/* binding */ InteractionRequiredAuthErrorMessage),\n/* harmony export */   InteractionRequiredAuthSubErrorMessage: () => (/* binding */ InteractionRequiredAuthSubErrorMessage),\n/* harmony export */   InteractionRequiredServerErrorMessage: () => (/* binding */ InteractionRequiredServerErrorMessage),\n/* harmony export */   createInteractionRequiredAuthError: () => (/* binding */ createInteractionRequiredAuthError),\n/* harmony export */   isInteractionRequiredError: () => (/* binding */ isInteractionRequiredError)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InteractionRequiredAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */ const InteractionRequiredServerErrorMessage = [\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.consentRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.loginRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken\n];\nconst InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n    \"bad_token\"\n];\nconst InteractionRequiredAuthErrorMessages = {\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.refreshTokenExpired]: \"Refresh token has expired.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\"\n};\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */ const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound]\n    },\n    native_account_unavailable: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable]\n    },\n    bad_token: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken]\n    }\n};\n/**\r\n * Error thrown when user interaction is required.\r\n */ class InteractionRequiredAuthError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo){\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n        this.timestamp = timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.traceId = traceId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.correlationId = correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.claims = claims || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n        this.errorNo = errorNo;\n    }\n}\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */ function isInteractionRequiredError(errorCode, errorString, subError) {\n    const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some((irErrorCode)=>{\n        return errorString.indexOf(irErrorCode) > -1;\n    });\n    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n}\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */ function createInteractionRequiredAuthError(errorCode) {\n    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\n}\n //# sourceMappingURL=InteractionRequiredAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNtRDtBQUNQO0FBQzBJO0FBQ3pGO0FBQ2hEO0FBRTdDOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTVUsd0NBQXdDO0lBQzFDSix1RkFBbUJBO0lBQ25CQyxtRkFBZUE7SUFDZkMsaUZBQWFBO0lBQ2JKLDRFQUFRQTtDQUNYO0FBQ0QsTUFBTU8seUNBQXlDO0lBQzNDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsTUFBTUMsdUNBQXVDO0lBQ3pDLENBQUNWLGlGQUFhQSxDQUFDLEVBQUU7SUFDakIsQ0FBQ0MsNEZBQXdCQSxDQUFDLEVBQUU7SUFDNUIsQ0FBQ0UsdUZBQW1CQSxDQUFDLEVBQUU7SUFDdkIsQ0FBQ0QsNEVBQVFBLENBQUMsRUFBRTtBQUNoQjtBQUNBOzs7Q0FHQyxHQUNELE1BQU1TLHNDQUFzQztJQUN4Q0Msb0JBQW9CO1FBQ2hCQyxNQUFNYixpRkFBYUE7UUFDbkJjLE1BQU1KLG9DQUFvQyxDQUFDVixpRkFBYUEsQ0FBQztJQUM3RDtJQUNBZSw0QkFBNEI7UUFDeEJGLE1BQU1aLDRGQUF3QkE7UUFDOUJhLE1BQU1KLG9DQUFvQyxDQUFDVCw0RkFBd0JBLENBQUM7SUFDeEU7SUFDQWUsV0FBVztRQUNQSCxNQUFNWCw0RUFBUUE7UUFDZFksTUFBTUosb0NBQW9DLENBQUNSLDRFQUFRQSxDQUFDO0lBQ3hEO0FBQ0o7QUFDQTs7Q0FFQyxHQUNELE1BQU1lLHFDQUFxQ2xCLHFEQUFTQTtJQUNoRG1CLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxhQUFhLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxDQUFFO1FBQy9GLEtBQUssQ0FBQ1AsV0FBV0MsY0FBY0M7UUFDL0JNLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUVYLDZCQUE2QlksU0FBUztRQUNsRSxJQUFJLENBQUNQLFNBQVMsR0FBR0EsYUFBYXhCLDJEQUFTQSxDQUFDZ0MsWUFBWTtRQUNwRCxJQUFJLENBQUNQLE9BQU8sR0FBR0EsV0FBV3pCLDJEQUFTQSxDQUFDZ0MsWUFBWTtRQUNoRCxJQUFJLENBQUNOLGFBQWEsR0FBR0EsaUJBQWlCMUIsMkRBQVNBLENBQUNnQyxZQUFZO1FBQzVELElBQUksQ0FBQ0wsTUFBTSxHQUFHQSxVQUFVM0IsMkRBQVNBLENBQUNnQyxZQUFZO1FBQzlDLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDTCxPQUFPLEdBQUdBO0lBQ25CO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNNLDJCQUEyQmIsU0FBUyxFQUFFYyxXQUFXLEVBQUVaLFFBQVE7SUFDaEUsTUFBTWEsaUNBQWlDLENBQUMsQ0FBQ2YsYUFDckNYLHNDQUFzQzJCLE9BQU8sQ0FBQ2hCLGFBQWEsQ0FBQztJQUNoRSxNQUFNaUIsZ0NBQWdDLENBQUMsQ0FBQ2YsWUFDcENaLHVDQUF1QzBCLE9BQU8sQ0FBQ2QsWUFBWSxDQUFDO0lBQ2hFLE1BQU1nQixpQ0FBaUMsQ0FBQyxDQUFDSixlQUNyQ3pCLHNDQUFzQzhCLElBQUksQ0FBQyxDQUFDQztRQUN4QyxPQUFPTixZQUFZRSxPQUFPLENBQUNJLGVBQWUsQ0FBQztJQUMvQztJQUNKLE9BQVFMLGtDQUNKRyxrQ0FDQUQ7QUFDUjtBQUNBOztDQUVDLEdBQ0QsU0FBU0ksbUNBQW1DckIsU0FBUztJQUNqRCxPQUFPLElBQUlGLDZCQUE2QkUsV0FBV1Qsb0NBQW9DLENBQUNTLFVBQVU7QUFDdEc7QUFFNE4sQ0FDNU4seURBQXlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvci5tanM/NDcxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgQXV0aEVycm9yIH0gZnJvbSAnLi9BdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IG5vVG9rZW5zRm91bmQsIG5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSwgYmFkVG9rZW4sIHJlZnJlc2hUb2tlbkV4cGlyZWQsIGludGVyYWN0aW9uUmVxdWlyZWQsIGNvbnNlbnRSZXF1aXJlZCwgbG9naW5SZXF1aXJlZCB9IGZyb20gJy4vSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvckNvZGVzLm1qcyc7XG5pbXBvcnQgKiBhcyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMgZnJvbSAnLi9JbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMubWpzJztcbmV4cG9ydCB7IEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2RlcyB9O1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEludGVyYWN0aW9uUmVxdWlyZWRTZXJ2ZXJFcnJvck1lc3NhZ2UgY29udGFpbnMgc3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcyByZXR1cm5lZCBieSB0aGUgc2VydmVyIGluZGljYXRpbmcgaW50ZXJhY3Rpb24gaXMgcmVxdWlyZWRcclxuICovXHJcbmNvbnN0IEludGVyYWN0aW9uUmVxdWlyZWRTZXJ2ZXJFcnJvck1lc3NhZ2UgPSBbXHJcbiAgICBpbnRlcmFjdGlvblJlcXVpcmVkLFxyXG4gICAgY29uc2VudFJlcXVpcmVkLFxyXG4gICAgbG9naW5SZXF1aXJlZCxcclxuICAgIGJhZFRva2VuLFxyXG5dO1xyXG5jb25zdCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aFN1YkVycm9yTWVzc2FnZSA9IFtcclxuICAgIFwibWVzc2FnZV9vbmx5XCIsXHJcbiAgICBcImFkZGl0aW9uYWxfYWN0aW9uXCIsXHJcbiAgICBcImJhc2ljX2FjdGlvblwiLFxyXG4gICAgXCJ1c2VyX3Bhc3N3b3JkX2V4cGlyZWRcIixcclxuICAgIFwiY29uc2VudF9yZXF1aXJlZFwiLFxyXG4gICAgXCJiYWRfdG9rZW5cIixcclxuXTtcclxuY29uc3QgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvck1lc3NhZ2VzID0ge1xyXG4gICAgW25vVG9rZW5zRm91bmRdOiBcIk5vIHJlZnJlc2ggdG9rZW4gZm91bmQgaW4gdGhlIGNhY2hlLiBQbGVhc2Ugc2lnbi1pbi5cIixcclxuICAgIFtuYXRpdmVBY2NvdW50VW5hdmFpbGFibGVdOiBcIlRoZSByZXF1ZXN0ZWQgYWNjb3VudCBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBuYXRpdmUgYnJva2VyLiBJdCBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQgb3IgbG9nZ2VkIG91dC4gUGxlYXNlIHNpZ24taW4gYWdhaW4gdXNpbmcgYW4gaW50ZXJhY3RpdmUgQVBJLlwiLFxyXG4gICAgW3JlZnJlc2hUb2tlbkV4cGlyZWRdOiBcIlJlZnJlc2ggdG9rZW4gaGFzIGV4cGlyZWQuXCIsXHJcbiAgICBbYmFkVG9rZW5dOiBcIklkZW50aXR5IHByb3ZpZGVyIHJldHVybmVkIGJhZF90b2tlbiBkdWUgdG8gYW4gZXhwaXJlZCBvciBpbnZhbGlkIHJlZnJlc2ggdG9rZW4uIFBsZWFzZSBpbnZva2UgYW4gaW50ZXJhY3RpdmUgQVBJIHRvIHJlc29sdmUuXCIsXHJcbn07XHJcbi8qKlxyXG4gKiBJbnRlcmFjdGlvbiByZXF1aXJlZCBlcnJvcnMgZGVmaW5lZCBieSB0aGUgU0RLXHJcbiAqIEBkZXByZWNhdGVkIFVzZSBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMgaW5zdGVhZFxyXG4gKi9cclxuY29uc3QgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvck1lc3NhZ2UgPSB7XHJcbiAgICBub1Rva2Vuc0ZvdW5kRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBub1Rva2Vuc0ZvdW5kLFxyXG4gICAgICAgIGRlc2M6IEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JNZXNzYWdlc1tub1Rva2Vuc0ZvdW5kXSxcclxuICAgIH0sXHJcbiAgICBuYXRpdmVfYWNjb3VudF91bmF2YWlsYWJsZToge1xyXG4gICAgICAgIGNvZGU6IG5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSxcclxuICAgICAgICBkZXNjOiBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZXNbbmF0aXZlQWNjb3VudFVuYXZhaWxhYmxlXSxcclxuICAgIH0sXHJcbiAgICBiYWRfdG9rZW46IHtcclxuICAgICAgICBjb2RlOiBiYWRUb2tlbixcclxuICAgICAgICBkZXNjOiBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZXNbYmFkVG9rZW5dLFxyXG4gICAgfSxcclxufTtcclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHVzZXIgaW50ZXJhY3Rpb24gaXMgcmVxdWlyZWQuXHJcbiAqL1xyXG5jbGFzcyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlLCBzdWJFcnJvciwgdGltZXN0YW1wLCB0cmFjZUlkLCBjb3JyZWxhdGlvbklkLCBjbGFpbXMsIGVycm9yTm8pIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSwgc3ViRXJyb3IpO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSB0aW1lc3RhbXAgfHwgQ29uc3RhbnRzLkVNUFRZX1NUUklORztcclxuICAgICAgICB0aGlzLnRyYWNlSWQgPSB0cmFjZUlkIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5jb3JyZWxhdGlvbklkID0gY29ycmVsYXRpb25JZCB8fCBDb25zdGFudHMuRU1QVFlfU1RSSU5HO1xyXG4gICAgICAgIHRoaXMuY2xhaW1zID0gY2xhaW1zIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5lcnJvck5vID0gZXJyb3JObztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGFuIGVycm9yIHRocm93biBieSB0aGUgc2VydmVyIHJlcXVpcmVzIGludGVyYWN0aW9uIHRvIHJlc29sdmVcclxuICogQHBhcmFtIGVycm9yQ29kZVxyXG4gKiBAcGFyYW0gZXJyb3JTdHJpbmdcclxuICogQHBhcmFtIHN1YkVycm9yXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvcihlcnJvckNvZGUsIGVycm9yU3RyaW5nLCBzdWJFcnJvcikge1xyXG4gICAgY29uc3QgaXNJbnRlcmFjdGlvblJlcXVpcmVkRXJyb3JDb2RlID0gISFlcnJvckNvZGUgJiZcclxuICAgICAgICBJbnRlcmFjdGlvblJlcXVpcmVkU2VydmVyRXJyb3JNZXNzYWdlLmluZGV4T2YoZXJyb3JDb2RlKSA+IC0xO1xyXG4gICAgY29uc3QgaXNJbnRlcmFjdGlvblJlcXVpcmVkU3ViRXJyb3IgPSAhIXN1YkVycm9yICYmXHJcbiAgICAgICAgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhTdWJFcnJvck1lc3NhZ2UuaW5kZXhPZihzdWJFcnJvcikgPiAtMTtcclxuICAgIGNvbnN0IGlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yRGVzYyA9ICEhZXJyb3JTdHJpbmcgJiZcclxuICAgICAgICBJbnRlcmFjdGlvblJlcXVpcmVkU2VydmVyRXJyb3JNZXNzYWdlLnNvbWUoKGlyRXJyb3JDb2RlKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvclN0cmluZy5pbmRleE9mKGlyRXJyb3JDb2RlKSA+IC0xO1xyXG4gICAgICAgIH0pO1xyXG4gICAgcmV0dXJuIChpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckNvZGUgfHxcclxuICAgICAgICBpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckRlc2MgfHxcclxuICAgICAgICBpc0ludGVyYWN0aW9uUmVxdWlyZWRTdWJFcnJvcik7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvclxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvcihlcnJvckNvZGUpIHtcclxuICAgIHJldHVybiBuZXcgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvcihlcnJvckNvZGUsIEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JNZXNzYWdlc1tlcnJvckNvZGVdKTtcclxufVxuXG5leHBvcnQgeyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZSwgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhTdWJFcnJvck1lc3NhZ2UsIEludGVyYWN0aW9uUmVxdWlyZWRTZXJ2ZXJFcnJvck1lc3NhZ2UsIGNyZWF0ZUludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IsIGlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJBdXRoRXJyb3IiLCJub1Rva2Vuc0ZvdW5kIiwibmF0aXZlQWNjb3VudFVuYXZhaWxhYmxlIiwiYmFkVG9rZW4iLCJyZWZyZXNoVG9rZW5FeHBpcmVkIiwiaW50ZXJhY3Rpb25SZXF1aXJlZCIsImNvbnNlbnRSZXF1aXJlZCIsImxvZ2luUmVxdWlyZWQiLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMiLCJJbnRlcmFjdGlvblJlcXVpcmVkU2VydmVyRXJyb3JNZXNzYWdlIiwiSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhTdWJFcnJvck1lc3NhZ2UiLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZXMiLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZSIsIm5vVG9rZW5zRm91bmRFcnJvciIsImNvZGUiLCJkZXNjIiwibmF0aXZlX2FjY291bnRfdW5hdmFpbGFibGUiLCJiYWRfdG9rZW4iLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvckNvZGUiLCJlcnJvck1lc3NhZ2UiLCJzdWJFcnJvciIsInRpbWVzdGFtcCIsInRyYWNlSWQiLCJjb3JyZWxhdGlvbklkIiwiY2xhaW1zIiwiZXJyb3JObyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiRU1QVFlfU1RSSU5HIiwibmFtZSIsImlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yIiwiZXJyb3JTdHJpbmciLCJpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckNvZGUiLCJpbmRleE9mIiwiaXNJbnRlcmFjdGlvblJlcXVpcmVkU3ViRXJyb3IiLCJpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckRlc2MiLCJzb21lIiwiaXJFcnJvckNvZGUiLCJjcmVhdGVJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   badToken: () => (/* binding */ badToken),\n/* harmony export */   consentRequired: () => (/* binding */ consentRequired),\n/* harmony export */   interactionRequired: () => (/* binding */ interactionRequired),\n/* harmony export */   loginRequired: () => (/* binding */ loginRequired),\n/* harmony export */   nativeAccountUnavailable: () => (/* binding */ nativeAccountUnavailable),\n/* harmony export */   noTokensFound: () => (/* binding */ noTokensFound),\n/* harmony export */   refreshTokenExpired: () => (/* binding */ refreshTokenExpired)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Codes defined by MSAL\nconst noTokensFound = \"no_tokens_found\";\nconst nativeAccountUnavailable = \"native_account_unavailable\";\nconst refreshTokenExpired = \"refresh_token_expired\";\n// Codes potentially returned by server\nconst interactionRequired = \"interaction_required\";\nconst consentRequired = \"consent_required\";\nconst loginRequired = \"login_required\";\nconst badToken = \"bad_token\";\n //# sourceMappingURL=InteractionRequiredAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Qsd0JBQXdCO0FBQ3hCLE1BQU1BLGdCQUFnQjtBQUN0QixNQUFNQywyQkFBMkI7QUFDakMsTUFBTUMsc0JBQXNCO0FBQzVCLHVDQUF1QztBQUN2QyxNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxXQUFXO0FBRXNILENBQ3ZJLDhEQUE4RCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL0ludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2Rlcy5tanM/NGYwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb2RlcyBkZWZpbmVkIGJ5IE1TQUxcclxuY29uc3Qgbm9Ub2tlbnNGb3VuZCA9IFwibm9fdG9rZW5zX2ZvdW5kXCI7XHJcbmNvbnN0IG5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSA9IFwibmF0aXZlX2FjY291bnRfdW5hdmFpbGFibGVcIjtcclxuY29uc3QgcmVmcmVzaFRva2VuRXhwaXJlZCA9IFwicmVmcmVzaF90b2tlbl9leHBpcmVkXCI7XHJcbi8vIENvZGVzIHBvdGVudGlhbGx5IHJldHVybmVkIGJ5IHNlcnZlclxyXG5jb25zdCBpbnRlcmFjdGlvblJlcXVpcmVkID0gXCJpbnRlcmFjdGlvbl9yZXF1aXJlZFwiO1xyXG5jb25zdCBjb25zZW50UmVxdWlyZWQgPSBcImNvbnNlbnRfcmVxdWlyZWRcIjtcclxuY29uc3QgbG9naW5SZXF1aXJlZCA9IFwibG9naW5fcmVxdWlyZWRcIjtcclxuY29uc3QgYmFkVG9rZW4gPSBcImJhZF90b2tlblwiO1xuXG5leHBvcnQgeyBiYWRUb2tlbiwgY29uc2VudFJlcXVpcmVkLCBpbnRlcmFjdGlvblJlcXVpcmVkLCBsb2dpblJlcXVpcmVkLCBuYXRpdmVBY2NvdW50VW5hdmFpbGFibGUsIG5vVG9rZW5zRm91bmQsIHJlZnJlc2hUb2tlbkV4cGlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsibm9Ub2tlbnNGb3VuZCIsIm5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSIsInJlZnJlc2hUb2tlbkV4cGlyZWQiLCJpbnRlcmFjdGlvblJlcXVpcmVkIiwiY29uc2VudFJlcXVpcmVkIiwibG9naW5SZXF1aXJlZCIsImJhZFRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JoseHeaderError: () => (/* binding */ JoseHeaderError),\n/* harmony export */   JoseHeaderErrorMessages: () => (/* binding */ JoseHeaderErrorMessages),\n/* harmony export */   createJoseHeaderError: () => (/* binding */ createJoseHeaderError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JoseHeaderErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const JoseHeaderErrorMessages = {\n    [_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingKidError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.\",\n    [_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingAlgError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided.\"\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */ class JoseHeaderError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        this.name = \"JoseHeaderError\";\n        Object.setPrototypeOf(this, JoseHeaderError.prototype);\n    }\n}\n/** Returns JoseHeaderError object */ function createJoseHeaderError(code) {\n    return new JoseHeaderError(code, JoseHeaderErrorMessages[code]);\n}\n //# sourceMappingURL=JoseHeaderError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSm9zZUhlYWRlckVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUM0QztBQUNrQztBQUU5RTs7O0NBR0MsR0FDRCxNQUFNRywwQkFBMEI7SUFDNUIsQ0FBQ0Ysc0VBQWVBLENBQUMsRUFBRTtJQUNuQixDQUFDQyxzRUFBZUEsQ0FBQyxFQUFFO0FBQ3ZCO0FBQ0E7O0NBRUMsR0FDRCxNQUFNRSx3QkFBd0JKLHFEQUFTQTtJQUNuQ0ssWUFBWUMsU0FBUyxFQUFFQyxZQUFZLENBQUU7UUFDakMsS0FBSyxDQUFDRCxXQUFXQztRQUNqQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFTixnQkFBZ0JPLFNBQVM7SUFDekQ7QUFDSjtBQUNBLG1DQUFtQyxHQUNuQyxTQUFTQyxzQkFBc0JDLElBQUk7SUFDL0IsT0FBTyxJQUFJVCxnQkFBZ0JTLE1BQU1WLHVCQUF1QixDQUFDVSxLQUFLO0FBQ2xFO0FBRTJFLENBQzNFLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL0pvc2VIZWFkZXJFcnJvci5tanM/Y2UwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gJy4vQXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBtaXNzaW5nS2lkRXJyb3IsIG1pc3NpbmdBbGdFcnJvciB9IGZyb20gJy4vSm9zZUhlYWRlckVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEpvc2VIZWFkZXJFcnJvck1lc3NhZ2VzID0ge1xyXG4gICAgW21pc3NpbmdLaWRFcnJvcl06IFwiVGhlIEpPU0UgSGVhZGVyIGZvciB0aGUgcmVxdWVzdGVkIEpXVCwgSldTIG9yIEpXSyBvYmplY3QgcmVxdWlyZXMgYSBrZXlJZCB0byBiZSBjb25maWd1cmVkIGFzIHRoZSAna2lkJyBoZWFkZXIgY2xhaW0uIE5vICdraWQnIHZhbHVlIHdhcyBwcm92aWRlZC5cIixcclxuICAgIFttaXNzaW5nQWxnRXJyb3JdOiBcIlRoZSBKT1NFIEhlYWRlciBmb3IgdGhlIHJlcXVlc3RlZCBKV1QsIEpXUyBvciBKV0sgb2JqZWN0IHJlcXVpcmVzIGFuIGFsZ29yaXRobSB0byBiZSBzcGVjaWZpZWQgYXMgdGhlICdhbGcnIGhlYWRlciBjbGFpbS4gTm8gJ2FsZycgdmFsdWUgd2FzIHByb3ZpZGVkLlwiLFxyXG59O1xyXG4vKipcclxuICogRXJyb3IgdGhyb3duIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3IgaW4gdGhlIGNsaWVudCBjb2RlIHJ1bm5pbmcgb24gdGhlIGJyb3dzZXIuXHJcbiAqL1xyXG5jbGFzcyBKb3NlSGVhZGVyRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJKb3NlSGVhZGVyRXJyb3JcIjtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSm9zZUhlYWRlckVycm9yLnByb3RvdHlwZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqIFJldHVybnMgSm9zZUhlYWRlckVycm9yIG9iamVjdCAqL1xyXG5mdW5jdGlvbiBjcmVhdGVKb3NlSGVhZGVyRXJyb3IoY29kZSkge1xyXG4gICAgcmV0dXJuIG5ldyBKb3NlSGVhZGVyRXJyb3IoY29kZSwgSm9zZUhlYWRlckVycm9yTWVzc2FnZXNbY29kZV0pO1xyXG59XG5cbmV4cG9ydCB7IEpvc2VIZWFkZXJFcnJvciwgSm9zZUhlYWRlckVycm9yTWVzc2FnZXMsIGNyZWF0ZUpvc2VIZWFkZXJFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Sm9zZUhlYWRlckVycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRoRXJyb3IiLCJtaXNzaW5nS2lkRXJyb3IiLCJtaXNzaW5nQWxnRXJyb3IiLCJKb3NlSGVhZGVyRXJyb3JNZXNzYWdlcyIsIkpvc2VIZWFkZXJFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JDb2RlIiwiZXJyb3JNZXNzYWdlIiwibmFtZSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiY3JlYXRlSm9zZUhlYWRlckVycm9yIiwiY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   missingAlgError: () => (/* binding */ missingAlgError),\n/* harmony export */   missingKidError: () => (/* binding */ missingKidError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const missingKidError = \"missing_kid_error\";\nconst missingAlgError = \"missing_alg_error\";\n //# sourceMappingURL=JoseHeaderErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSm9zZUhlYWRlckVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUEsa0JBQWtCO0FBQ3hCLE1BQU1DLGtCQUFrQjtBQUVvQixDQUM1QyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9Kb3NlSGVhZGVyRXJyb3JDb2Rlcy5tanM/ODNlMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBtaXNzaW5nS2lkRXJyb3IgPSBcIm1pc3Npbmdfa2lkX2Vycm9yXCI7XHJcbmNvbnN0IG1pc3NpbmdBbGdFcnJvciA9IFwibWlzc2luZ19hbGdfZXJyb3JcIjtcblxuZXhwb3J0IHsgbWlzc2luZ0FsZ0Vycm9yLCBtaXNzaW5nS2lkRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUpvc2VIZWFkZXJFcnJvckNvZGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJtaXNzaW5nS2lkRXJyb3IiLCJtaXNzaW5nQWxnRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/NetworkError.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   createNetworkError: () => (/* binding */ createNetworkError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Represents network related errors\r\n */ class NetworkError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(error, httpStatus, responseHeaders){\n        super(error.errorCode, error.errorMessage, error.subError);\n        Object.setPrototypeOf(this, NetworkError.prototype);\n        this.name = \"NetworkError\";\n        this.error = error;\n        this.httpStatus = httpStatus;\n        this.responseHeaders = responseHeaders;\n    }\n}\n/**\r\n * Creates NetworkError object for a failed network request\r\n * @param error - Error to be thrown back to the caller\r\n * @param httpStatus - Status code of the network request\r\n * @param responseHeaders - Response headers of the network request, when available\r\n * @returns NetworkError object\r\n */ function createNetworkError(error, httpStatus, responseHeaders) {\n    return new NetworkError(error, httpStatus, responseHeaders);\n}\n //# sourceMappingURL=NetworkError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvTmV0d29ya0Vycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNEM7QUFFNUM7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNQyxxQkFBcUJELHFEQUFTQTtJQUNoQ0UsWUFBWUMsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLGVBQWUsQ0FBRTtRQUM1QyxLQUFLLENBQUNGLE1BQU1HLFNBQVMsRUFBRUgsTUFBTUksWUFBWSxFQUFFSixNQUFNSyxRQUFRO1FBQ3pEQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFVCxhQUFhVSxTQUFTO1FBQ2xELElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDVCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtJQUMzQjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsbUJBQW1CVixLQUFLLEVBQUVDLFVBQVUsRUFBRUMsZUFBZTtJQUMxRCxPQUFPLElBQUlKLGFBQWFFLE9BQU9DLFlBQVlDO0FBQy9DO0FBRTRDLENBQzVDLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL05ldHdvcmtFcnJvci5tanM/YmIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gJy4vQXV0aEVycm9yLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVwcmVzZW50cyBuZXR3b3JrIHJlbGF0ZWQgZXJyb3JzXHJcbiAqL1xyXG5jbGFzcyBOZXR3b3JrRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3IsIGh0dHBTdGF0dXMsIHJlc3BvbnNlSGVhZGVycykge1xyXG4gICAgICAgIHN1cGVyKGVycm9yLmVycm9yQ29kZSwgZXJyb3IuZXJyb3JNZXNzYWdlLCBlcnJvci5zdWJFcnJvcik7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE5ldHdvcmtFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiTmV0d29ya0Vycm9yXCI7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuaHR0cFN0YXR1cyA9IGh0dHBTdGF0dXM7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUhlYWRlcnMgPSByZXNwb25zZUhlYWRlcnM7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgTmV0d29ya0Vycm9yIG9iamVjdCBmb3IgYSBmYWlsZWQgbmV0d29yayByZXF1ZXN0XHJcbiAqIEBwYXJhbSBlcnJvciAtIEVycm9yIHRvIGJlIHRocm93biBiYWNrIHRvIHRoZSBjYWxsZXJcclxuICogQHBhcmFtIGh0dHBTdGF0dXMgLSBTdGF0dXMgY29kZSBvZiB0aGUgbmV0d29yayByZXF1ZXN0XHJcbiAqIEBwYXJhbSByZXNwb25zZUhlYWRlcnMgLSBSZXNwb25zZSBoZWFkZXJzIG9mIHRoZSBuZXR3b3JrIHJlcXVlc3QsIHdoZW4gYXZhaWxhYmxlXHJcbiAqIEByZXR1cm5zIE5ldHdvcmtFcnJvciBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZU5ldHdvcmtFcnJvcihlcnJvciwgaHR0cFN0YXR1cywgcmVzcG9uc2VIZWFkZXJzKSB7XHJcbiAgICByZXR1cm4gbmV3IE5ldHdvcmtFcnJvcihlcnJvciwgaHR0cFN0YXR1cywgcmVzcG9uc2VIZWFkZXJzKTtcclxufVxuXG5leHBvcnQgeyBOZXR3b3JrRXJyb3IsIGNyZWF0ZU5ldHdvcmtFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmV0d29ya0Vycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRoRXJyb3IiLCJOZXR3b3JrRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwiaHR0cFN0YXR1cyIsInJlc3BvbnNlSGVhZGVycyIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsInN1YkVycm9yIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJuYW1lIiwiY3JlYXRlTmV0d29ya0Vycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ServerError.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerError: () => (/* binding */ ServerError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */ class ServerError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(errorCode, errorMessage, subError, errorNo, status){\n        super(errorCode, errorMessage, subError);\n        this.name = \"ServerError\";\n        this.errorNo = errorNo;\n        this.status = status;\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n}\n //# sourceMappingURL=ServerError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvU2VydmVyRXJyb3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQzRDO0FBRTVDOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUMsb0JBQW9CRCxxREFBU0E7SUFDL0JFLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxDQUFFO1FBQzVELEtBQUssQ0FBQ0osV0FBV0MsY0FBY0M7UUFDL0IsSUFBSSxDQUFDRyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNGLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZEUsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRVQsWUFBWVUsU0FBUztJQUNyRDtBQUNKO0FBRXVCLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL1NlcnZlckVycm9yLm1qcz9mNTA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yIH0gZnJvbSAnLi9BdXRoRXJyb3IubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFcnJvciB0aHJvd24gd2hlbiB0aGVyZSBpcyBhbiBlcnJvciB3aXRoIHRoZSBzZXJ2ZXIgY29kZSwgZm9yIGV4YW1wbGUsIHVuYXZhaWxhYmlsaXR5LlxyXG4gKi9cclxuY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UsIHN1YkVycm9yLCBlcnJvck5vLCBzdGF0dXMpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSwgc3ViRXJyb3IpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiU2VydmVyRXJyb3JcIjtcclxuICAgICAgICB0aGlzLmVycm9yTm8gPSBlcnJvck5vO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTZXJ2ZXJFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFNlcnZlckVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXJ2ZXJFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aEVycm9yIiwiU2VydmVyRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsInN1YkVycm9yIiwiZXJyb3JObyIsInN0YXR1cyIsIm5hbWUiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/logger/Logger.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   Logger: () => (/* binding */ Logger)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Log message level.\r\n */ var LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */ class Logger {\n    constructor(loggerOptions, packageName, packageVersion){\n        // Current log level, defaults to info.\n        this.level = LogLevel.Info;\n        const defaultLoggerCallback = ()=>{\n            return;\n        };\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\n        this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n        this.level = typeof setLoggerOptions.logLevel === \"number\" ? setLoggerOptions.logLevel : LogLevel.Info;\n        this.correlationId = setLoggerOptions.correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.packageName = packageName || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n    }\n    static createDefaultLoggerOptions() {\n        return {\n            loggerCallback: ()=>{\n            // allow users to not set loggerCallback\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Info\n        };\n    }\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */ clone(packageName, packageVersion, correlationId) {\n        return new Logger({\n            loggerCallback: this.localCallback,\n            piiLoggingEnabled: this.piiLoggingEnabled,\n            logLevel: this.level,\n            correlationId: correlationId || this.correlationId\n        }, packageName, packageVersion);\n    }\n    /**\r\n     * Log message with required options.\r\n     */ logMessage(logMessage, options) {\n        if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n    /**\r\n     * Execute callback with message.\r\n     */ executeCallback(level, message, containsPii) {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n    /**\r\n     * Logs error messages.\r\n     */ error(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs error messages with PII.\r\n     */ errorPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs warning messages.\r\n     */ warning(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs warning messages with PII.\r\n     */ warningPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs info messages.\r\n     */ info(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs info messages with PII.\r\n     */ infoPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs verbose messages.\r\n     */ verbose(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs verbose messages with PII.\r\n     */ verbosePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs trace messages.\r\n     */ trace(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs trace messages with PII.\r\n     */ tracePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */ isPiiLoggingEnabled() {\n        return this.piiLoggingEnabled || false;\n    }\n}\n //# sourceMappingURL=Logger.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StubbedNetworkModule: () => (/* binding */ StubbedNetworkModule)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const StubbedNetworkModule = {\n    sendGetRequestAsync: ()=>{\n        return Promise.reject((0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented));\n    },\n    sendPostRequestAsync: ()=>{\n        return Promise.reject((0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented));\n    }\n};\n //# sourceMappingURL=INetworkModule.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvbmV0d29yay9JTmV0d29ya01vZHVsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3FFO0FBQ0k7QUFFekU7OztDQUdDLEdBQ0QsTUFBTUUsdUJBQXVCO0lBQ3pCQyxxQkFBcUI7UUFDakIsT0FBT0MsUUFBUUMsTUFBTSxDQUFDTCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEU7SUFDQUssc0JBQXNCO1FBQ2xCLE9BQU9GLFFBQVFDLE1BQU0sQ0FBQ0wsaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BFO0FBQ0o7QUFFZ0MsQ0FDaEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvbmV0d29yay9JTmV0d29ya01vZHVsZS5tanM/MTY4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudEF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgbWV0aG9kTm90SW1wbGVtZW50ZWQgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgU3R1YmJlZE5ldHdvcmtNb2R1bGUgPSB7XHJcbiAgICBzZW5kR2V0UmVxdWVzdEFzeW5jOiAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCkpO1xyXG4gICAgfSxcclxuICAgIHNlbmRQb3N0UmVxdWVzdEFzeW5jOiAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCkpO1xyXG4gICAgfSxcclxufTtcblxuZXhwb3J0IHsgU3R1YmJlZE5ldHdvcmtNb2R1bGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlOZXR3b3JrTW9kdWxlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJtZXRob2ROb3RJbXBsZW1lbnRlZCIsIlN0dWJiZWROZXR3b3JrTW9kdWxlIiwic2VuZEdldFJlcXVlc3RBc3luYyIsIlByb21pc2UiLCJyZWplY3QiLCJzZW5kUG9zdFJlcXVlc3RBc3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThrottlingUtils: () => (/* binding */ ThrottlingUtils)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class ThrottlingUtils {\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */ static generateThrottlingStorageKey(thumbprint) {\n        return `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */ static preProcess(cacheManager, thumbprint) {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_1__.ServerError(value.errorCodes?.join(\" \") || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */ static postProcess(cacheManager, thumbprint, response) {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n        }\n    }\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */ static checkResponseStatus(response) {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */ static checkResponseForRetryAfter(response) {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */ static calculateThrottleTime(throttleTime) {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(currentSeconds + (time || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n    }\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n        const thumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n //# sourceMappingURL=ThrottlingUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/packageMetadata.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/* eslint-disable header/header */ const name = \"@azure/msal-common\";\nconst version = \"14.16.0\";\n //# sourceMappingURL=packageMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcGFja2FnZU1ldGFkYXRhLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBLGdDQUFnQyxHQUNoQyxNQUFNQSxPQUFPO0FBQ2IsTUFBTUMsVUFBVTtBQUVTLENBQ3pCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3BhY2thZ2VNZXRhZGF0YS5tanM/ZTBmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGhlYWRlci9oZWFkZXIgKi9cclxuY29uc3QgbmFtZSA9IFwiQGF6dXJlL21zYWwtY29tbW9uXCI7XHJcbmNvbnN0IHZlcnNpb24gPSBcIjE0LjE2LjBcIjtcblxuZXhwb3J0IHsgbmFtZSwgdmVyc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFja2FnZU1ldGFkYXRhLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJuYW1lIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestParameterBuilder: () => (/* binding */ RequestParameterBuilder)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScopeSet.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestValidator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function instrumentBrokerParams(parameters, correlationId, performanceClient) {\n    if (!correlationId) {\n        return;\n    }\n    const clientId = parameters.get(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ID);\n    if (clientId && parameters.has(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_CLIENT_ID)) {\n        performanceClient?.addFields({\n            embeddedClientId: clientId,\n            embeddedRedirectUri: parameters.get(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REDIRECT_URI)\n        }, correlationId);\n    }\n}\n/** @internal */ class RequestParameterBuilder {\n    constructor(correlationId, performanceClient){\n        this.parameters = new Map();\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n    /**\r\n     * add response_type = code\r\n     */ addResponseTypeCode() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_TYPE, encodeURIComponent(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CODE_RESPONSE_TYPE));\n    }\n    /**\r\n     * add response_type = token id_token\r\n     */ addResponseTypeForTokenAndIdToken() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_TYPE, encodeURIComponent(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.TOKEN_RESPONSE_TYPE} ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.ID_TOKEN_RESPONSE_TYPE}`));\n    }\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */ addResponseMode(responseMode) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ResponseMode.QUERY));\n    }\n    /**\r\n     * Add flag to indicate STS should attempt to use WAM if available\r\n     */ addNativeBroker() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.NATIVE_BROKER, encodeURIComponent(\"1\"));\n    }\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */ addScopes(scopes, addOidcScopes = true, defaultScopes = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES) {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes ? [\n            ...scopes || [],\n            ...defaultScopes\n        ] : scopes || [];\n        const scopeSet = new _ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_2__.ScopeSet(requestScopes);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */ addClientId(clientId) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ID, encodeURIComponent(clientId));\n    }\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */ addRedirectUri(redirectUri) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */ addPostLogoutRedirectUri(redirectUri) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */ addIdTokenHint(idTokenHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */ addDomainHint(domainHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */ addLoginHint(loginHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */ addCcsUpn(loginHint) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */ addCcsOid(clientInfo) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */ addSid(sid) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.SID, encodeURIComponent(sid));\n    }\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */ addClaims(claims, clientCapabilities) {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */ addCorrelationId(correlationId) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */ addLibraryInfo(libraryInfo) {\n        // Telemetry Info\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_VER, libraryInfo.version);\n        if (libraryInfo.os) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_CPU, libraryInfo.cpu);\n        }\n    }\n    /**\r\n     * Add client telemetry parameters\r\n     * @param appTelemetry\r\n     */ addApplicationTelemetry(appTelemetry) {\n        if (appTelemetry?.appName) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_APP_NAME, appTelemetry.appName);\n        }\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_APP_VER, appTelemetry.appVersion);\n        }\n    }\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */ addPrompt(prompt) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.PROMPT}`, encodeURIComponent(prompt));\n    }\n    /**\r\n     * add state\r\n     * @param state\r\n     */ addState(state) {\n        if (state) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.STATE, encodeURIComponent(state));\n        }\n    }\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */ addNonce(nonce) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.NONCE, encodeURIComponent(nonce));\n    }\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */ addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        } else {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.pkceParamsMissing);\n        }\n    }\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */ addAuthorizationCode(code) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE, encodeURIComponent(code));\n    }\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */ addDeviceCode(code) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.DEVICE_CODE, encodeURIComponent(code));\n    }\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */ addRefreshToken(refreshToken) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */ addCodeVerifier(codeVerifier) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */ addClientSecret(clientSecret) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */ addClientAssertion(clientAssertion) {\n        if (clientAssertion) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n        }\n    }\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */ addClientAssertionType(clientAssertionType) {\n        if (clientAssertionType) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n        }\n    }\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */ addOboAssertion(oboAssertion) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */ addRequestTokenUse(tokenUse) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */ addGrantType(grantType) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n    /**\r\n     * add client info\r\n     *\r\n     */ addClientInfo() {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CLIENT_INFO, \"1\");\n    }\n    /**\r\n     * add extraQueryParams\r\n     * @param eQParams\r\n     */ addExtraQueryParameters(eQParams) {\n        Object.entries(eQParams).forEach(([key, value])=>{\n            if (!this.parameters.has(key) && value) {\n                this.parameters.set(key, value);\n            }\n        });\n    }\n    addClientCapabilitiesToClaims(claims, clientCapabilities) {\n        let mergedClaims;\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch (e) {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.invalidClaims);\n            }\n        }\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN][_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities\n            };\n        }\n        return JSON.stringify(mergedClaims);\n    }\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */ addUsername(username) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.PasswordGrantConstants.username, encodeURIComponent(username));\n    }\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */ addPassword(password) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.PasswordGrantConstants.password, encodeURIComponent(password));\n    }\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */ addPopToken(cnfString) {\n        if (cnfString) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.TOKEN_TYPE, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.POP);\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n    /**\r\n     * add SSH JWK and key ID to query params\r\n     */ addSshJwk(sshJwkString) {\n        if (sshJwkString) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.TOKEN_TYPE, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.SSH);\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */ addServerTelemetry(serverTelemetryManager) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */ addThrottling() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_MS_LIB_CAPABILITY, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n    /**\r\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n     */ addLogoutHint(logoutHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n    addBrokerParameters(params) {\n        const brokerParams = {};\n        brokerParams[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_CLIENT_ID] = params.brokerClientId;\n        brokerParams[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_REDIRECT_URI] = params.brokerRedirectUri;\n        this.addExtraQueryParameters(brokerParams);\n    }\n    /**\r\n     * Utility to create a URL from the params map\r\n     */ createQueryString() {\n        const queryParameterArray = new Array();\n        this.parameters.forEach((value, key)=>{\n            queryParameterArray.push(`${key}=${value}`);\n        });\n        instrumentBrokerParams(this.parameters, this.correlationId, this.performanceClient);\n        return queryParameterArray.join(\"&\");\n    }\n}\n //# sourceMappingURL=RequestParameterBuilder.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestValidator: () => (/* binding */ RequestValidator)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Validates server consumable params from the \"request\" objects\r\n */ class RequestValidator {\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */ static validateRedirectUri(redirectUri) {\n        if (!redirectUri) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.redirectUriEmpty);\n        }\n    }\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */ static validatePrompt(prompt) {\n        const promptValues = [];\n        for(const value in _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.PromptValue){\n            promptValues.push(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.PromptValue[value]);\n        }\n        if (promptValues.indexOf(prompt) < 0) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidPromptValue);\n        }\n    }\n    static validateClaims(claims) {\n        try {\n            JSON.parse(claims);\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidClaims);\n        }\n    }\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */ static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        if (!codeChallenge || !codeChallengeMethod) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.pkceParamsMissing);\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */ static validateCodeChallengeMethod(codeChallengeMethod) {\n        if ([\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.PLAIN,\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.S256\n        ].indexOf(codeChallengeMethod) < 0) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidCodeChallengeMethod);\n        }\n    }\n}\n //# sourceMappingURL=RequestValidator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcmVxdWVzdC9SZXF1ZXN0VmFsaWRhdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3VGO0FBQ1A7QUFDZ0Y7QUFFaEs7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNUTtJQUNGOzs7S0FHQyxHQUNELE9BQU9DLG9CQUFvQkMsV0FBVyxFQUFFO1FBQ3BDLElBQUksQ0FBQ0EsYUFBYTtZQUNkLE1BQU1WLG1HQUE4QkEsQ0FBQ0csc0ZBQWdCQTtRQUN6RDtJQUNKO0lBQ0E7OztLQUdDLEdBQ0QsT0FBT1EsZUFBZUMsTUFBTSxFQUFFO1FBQzFCLE1BQU1DLGVBQWUsRUFBRTtRQUN2QixJQUFLLE1BQU1DLFNBQVNaLDZEQUFXQSxDQUFFO1lBQzdCVyxhQUFhRSxJQUFJLENBQUNiLDZEQUFXLENBQUNZLE1BQU07UUFDeEM7UUFDQSxJQUFJRCxhQUFhRyxPQUFPLENBQUNKLFVBQVUsR0FBRztZQUNsQyxNQUFNWixtR0FBOEJBLENBQUNJLHdGQUFrQkE7UUFDM0Q7SUFDSjtJQUNBLE9BQU9hLGVBQWVDLE1BQU0sRUFBRTtRQUMxQixJQUFJO1lBQ0FDLEtBQUtDLEtBQUssQ0FBQ0Y7UUFDZixFQUNBLE9BQU9HLEdBQUc7WUFDTixNQUFNckIsbUdBQThCQSxDQUFDSyxtRkFBYUE7UUFDdEQ7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPaUIsNEJBQTRCQyxhQUFhLEVBQUVDLG1CQUFtQixFQUFFO1FBQ25FLElBQUksQ0FBQ0QsaUJBQWlCLENBQUNDLHFCQUFxQjtZQUN4QyxNQUFNeEIsbUdBQThCQSxDQUFDTSx1RkFBaUJBO1FBQzFELE9BQ0s7WUFDRCxJQUFJLENBQUNtQiwyQkFBMkIsQ0FBQ0Q7UUFDckM7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE9BQU9DLDRCQUE0QkQsbUJBQW1CLEVBQUU7UUFDcEQsSUFBSTtZQUNBdkIsMkVBQXlCQSxDQUFDeUIsS0FBSztZQUMvQnpCLDJFQUF5QkEsQ0FBQzBCLElBQUk7U0FDakMsQ0FBQ1gsT0FBTyxDQUFDUSx1QkFBdUIsR0FBRztZQUNoQyxNQUFNeEIsbUdBQThCQSxDQUFDTyxnR0FBMEJBO1FBQ25FO0lBQ0o7QUFDSjtBQUU0QixDQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9yZXF1ZXN0L1JlcXVlc3RWYWxpZGF0b3IubWpzPzM1OTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRDb25maWd1cmF0aW9uRXJyb3IubWpzJztcbmltcG9ydCB7IENvZGVDaGFsbGVuZ2VNZXRob2RWYWx1ZXMsIFByb21wdFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyByZWRpcmVjdFVyaUVtcHR5LCBpbnZhbGlkUHJvbXB0VmFsdWUsIGludmFsaWRDbGFpbXMsIHBrY2VQYXJhbXNNaXNzaW5nLCBpbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZCB9IGZyb20gJy4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVmFsaWRhdGVzIHNlcnZlciBjb25zdW1hYmxlIHBhcmFtcyBmcm9tIHRoZSBcInJlcXVlc3RcIiBvYmplY3RzXHJcbiAqL1xyXG5jbGFzcyBSZXF1ZXN0VmFsaWRhdG9yIHtcclxuICAgIC8qKlxyXG4gICAgICogVXRpbGl0eSB0byBjaGVjayBpZiB0aGUgYHJlZGlyZWN0VXJpYCBpbiB0aGUgcmVxdWVzdCBpcyBhIG5vbi1udWxsIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0gcmVkaXJlY3RVcmlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHZhbGlkYXRlUmVkaXJlY3RVcmkocmVkaXJlY3RVcmkpIHtcclxuICAgICAgICBpZiAoIXJlZGlyZWN0VXJpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihyZWRpcmVjdFVyaUVtcHR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gdmFsaWRhdGUgcHJvbXB0IHNlbnQgYnkgdGhlIHVzZXIgaW4gdGhlIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSBwcm9tcHRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHZhbGlkYXRlUHJvbXB0KHByb21wdCkge1xyXG4gICAgICAgIGNvbnN0IHByb21wdFZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgaW4gUHJvbXB0VmFsdWUpIHtcclxuICAgICAgICAgICAgcHJvbXB0VmFsdWVzLnB1c2goUHJvbXB0VmFsdWVbdmFsdWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByb21wdFZhbHVlcy5pbmRleE9mKHByb21wdCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihpbnZhbGlkUHJvbXB0VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyB2YWxpZGF0ZUNsYWltcyhjbGFpbXMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBKU09OLnBhcnNlKGNsYWltcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihpbnZhbGlkQ2xhaW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gdmFsaWRhdGUgY29kZV9jaGFsbGVuZ2UgYW5kIGNvZGVfY2hhbGxlbmdlX21ldGhvZFxyXG4gICAgICogQHBhcmFtIGNvZGVDaGFsbGVuZ2VcclxuICAgICAqIEBwYXJhbSBjb2RlQ2hhbGxlbmdlTWV0aG9kXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZUNvZGVDaGFsbGVuZ2VQYXJhbXMoY29kZUNoYWxsZW5nZSwgY29kZUNoYWxsZW5nZU1ldGhvZCkge1xyXG4gICAgICAgIGlmICghY29kZUNoYWxsZW5nZSB8fCAhY29kZUNoYWxsZW5nZU1ldGhvZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IocGtjZVBhcmFtc01pc3NpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUNvZGVDaGFsbGVuZ2VNZXRob2QoY29kZUNoYWxsZW5nZU1ldGhvZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IHRvIHZhbGlkYXRlIGNvZGVfY2hhbGxlbmdlX21ldGhvZFxyXG4gICAgICogQHBhcmFtIGNvZGVDaGFsbGVuZ2VNZXRob2RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHZhbGlkYXRlQ29kZUNoYWxsZW5nZU1ldGhvZChjb2RlQ2hhbGxlbmdlTWV0aG9kKSB7XHJcbiAgICAgICAgaWYgKFtcclxuICAgICAgICAgICAgQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcy5QTEFJTixcclxuICAgICAgICAgICAgQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcy5TMjU2LFxyXG4gICAgICAgIF0uaW5kZXhPZihjb2RlQ2hhbGxlbmdlTWV0aG9kKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKGludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgUmVxdWVzdFZhbGlkYXRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVxdWVzdFZhbGlkYXRvci5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIiwiQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcyIsIlByb21wdFZhbHVlIiwicmVkaXJlY3RVcmlFbXB0eSIsImludmFsaWRQcm9tcHRWYWx1ZSIsImludmFsaWRDbGFpbXMiLCJwa2NlUGFyYW1zTWlzc2luZyIsImludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kIiwiUmVxdWVzdFZhbGlkYXRvciIsInZhbGlkYXRlUmVkaXJlY3RVcmkiLCJyZWRpcmVjdFVyaSIsInZhbGlkYXRlUHJvbXB0IiwicHJvbXB0IiwicHJvbXB0VmFsdWVzIiwidmFsdWUiLCJwdXNoIiwiaW5kZXhPZiIsInZhbGlkYXRlQ2xhaW1zIiwiY2xhaW1zIiwiSlNPTiIsInBhcnNlIiwiZSIsInZhbGlkYXRlQ29kZUNoYWxsZW5nZVBhcmFtcyIsImNvZGVDaGFsbGVuZ2UiLCJjb2RlQ2hhbGxlbmdlTWV0aG9kIiwidmFsaWRhdGVDb2RlQ2hhbGxlbmdlTWV0aG9kIiwiUExBSU4iLCJTMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScopeSet: () => (/* binding */ ScopeSet)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */ class ScopeSet {\n    constructor(inputScopes){\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.StringUtils.trimArrayEntries([\n            ...inputScopes\n        ]) : [];\n        const filteredInput = scopeArr ? _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope)=>this.scopes.add(scope));\n    }\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */ static fromString(inputScopeString) {\n        const scopeString = inputScopeString || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        const inputScopes = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString\r\n     * @returns\r\n     */ static createSearchScopes(inputScopeString) {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        } else {\n            scopeSet.removeScope(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return scopeSet;\n    }\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */ validateInputScopes(inputScopes) {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.emptyInputScopesError);\n        }\n    }\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */ containsScope(scope) {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */ containsScopeSet(scopeSet) {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n        return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every((scope)=>this.containsScope(scope));\n    }\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */ containsOnlyOIDCScopes() {\n        let defaultScopeCount = 0;\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_SCOPES.forEach((defaultScope)=>{\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n        return this.scopes.size === defaultScopeCount;\n    }\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */ appendScope(newScope) {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */ appendScopes(newScopes) {\n        try {\n            newScopes.forEach((newScope)=>this.appendScope(newScope));\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.cannotAppendScopeSet);\n        }\n    }\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */ removeScope(scope) {\n        if (!scope) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.cannotRemoveEmptyScope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */ removeOIDCScopes() {\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_SCOPES.forEach((defaultScope)=>{\n            this.scopes.delete(defaultScope);\n        });\n    }\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */ unionScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.emptyInputScopeSet);\n        }\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */ intersectingScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.emptyInputScopeSet);\n        }\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n    /**\r\n     * Returns size of set of scopes.\r\n     */ getScopeCount() {\n        return this.scopes.size;\n    }\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */ asArray() {\n        const array = [];\n        this.scopes.forEach((val)=>array.push(val));\n        return array;\n    }\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */ printScopes() {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n    }\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */ printScopesLowerCase() {\n        return this.printScopes().toLowerCase();\n    }\n}\n //# sourceMappingURL=ScopeSet.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseHandler: () => (/* binding */ ResponseHandler),\n/* harmony export */   buildAccountToCache: () => (/* binding */ buildAccountToCache)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../request/ScopeSet.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/entities/AccountEntity.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _utils_ProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/ProtocolUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _cache_persistence_TokenCacheContext_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/persistence/TokenCacheContext.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../account/TokenClaims.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../account/AccountInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function parseServerErrorNo(serverResponse) {\n    const errorCodePrefix = \"code=\";\n    const errorCodePrefixIndex = serverResponse.error_uri?.lastIndexOf(errorCodePrefix);\n    return errorCodePrefixIndex && errorCodePrefixIndex >= 0 ? serverResponse.error_uri?.substring(errorCodePrefixIndex + errorCodePrefix.length) : undefined;\n}\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */ class ResponseHandler {\n    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient){\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Function which validates server authorization code response.\r\n     * @param serverResponseHash\r\n     * @param requestState\r\n     * @param cryptoObj\r\n     */ validateServerAuthorizationCodeResponse(serverResponse, requestState) {\n        if (!serverResponse.state || !requestState) {\n            throw serverResponse.state ? (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateNotFound, \"Cached State\") : (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateNotFound, \"Server State\");\n        }\n        let decodedServerResponseState;\n        let decodedRequestState;\n        try {\n            decodedServerResponseState = decodeURIComponent(serverResponse.state);\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidState, serverResponse.state);\n        }\n        try {\n            decodedRequestState = decodeURIComponent(requestState);\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidState, serverResponse.state);\n        }\n        if (decodedServerResponseState !== decodedRequestState) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateMismatch);\n        }\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            const serverErrorNo = parseServerErrorNo(serverResponse);\n            if ((0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionRequiredAuthError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || \"\", serverResponse.trace_id || \"\", serverResponse.correlation_id || \"\", serverResponse.claims || \"\", serverErrorNo);\n            }\n            throw new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverErrorNo);\n        }\n    }\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     * @param refreshAccessToken\r\n     */ validateTokenResponse(serverResponse, refreshAccessToken) {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            const errString = `Error(s): ${serverResponse.error_codes || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Description: ${serverResponse.error_description || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE}`;\n            const serverErrorNo = serverResponse.error_codes?.length ? serverResponse.error_codes[0] : undefined;\n            const serverError = new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\n            // check if 500 error\n            if (refreshAccessToken && serverResponse.status && serverResponse.status >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_START && serverResponse.status <= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            // check if 400 error\n            } else if (refreshAccessToken && serverResponse.status && serverResponse.status >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_START && serverResponse.status <= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            }\n            if ((0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.trace_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.correlation_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.claims || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverErrorNo);\n            }\n            throw serverError;\n        }\n    }\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */ async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\n        // create an idToken object (not entity)\n        let idTokenClaims;\n        if (serverTokenResponse.id_token) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__.extractTokenClaims)(serverTokenResponse.id_token || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && authCodePayload.nonce) {\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nonceMismatch);\n                }\n            }\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n                const authTime = idTokenClaims.auth_time;\n                if (!authTime) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.authTimeNotFound);\n                }\n                (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__.checkMaxAge)(authTime, request.maxAge);\n            }\n        }\n        // generate homeAccountId\n        this.homeAccountIdentifier = _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__.AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n        // save the response tokens\n        let requestStateObj;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = _utils_ProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new _cache_persistence_TokenCacheContext_mjs__WEBPACK_IMPORTED_MODULE_9__.TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n             */ if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key, this.logger);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(cacheRecord, request.storeInCache, request.correlationId);\n        } finally{\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\n    }\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */ generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\n        const env = authority.getPreferredCache();\n        if (!env) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidCacheEnvironment);\n        }\n        const claimsTenantId = (0,_account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_10__.getTenantIdFromIdTokenClaims)(idTokenClaims);\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken;\n        let cachedAccount;\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\n            cachedIdToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createIdTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\n            cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined, this.logger);\n        }\n        // AccessToken\n        let cachedAccessToken = null;\n        if (serverTokenResponse.access_token) {\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(serverTokenResponse.scope) : new _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet(request.scopes || []);\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */ const expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createAccessTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n        }\n        // refreshToken\n        let cachedRefreshToken = null;\n        if (serverTokenResponse.refresh_token) {\n            let rtExpiresOn;\n            if (serverTokenResponse.refresh_token_expires_in) {\n                const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in === \"string\" ? parseInt(serverTokenResponse.refresh_token_expires_in, 10) : serverTokenResponse.refresh_token_expires_in;\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\n            }\n            cachedRefreshToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createRefreshTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\n        }\n        // appMetadata\n        let cachedAppMetadata = null;\n        if (serverTokenResponse.foci) {\n            cachedAppMetadata = {\n                clientId: this.clientId,\n                environment: env,\n                familyId: serverTokenResponse.foci\n            };\n        }\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata\n        };\n    }\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */ static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\n        let accessToken = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;\n        let responseScopes = [];\n        let expiresOn = null;\n        let extExpiresOn;\n        let refreshOn;\n        let familyId = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;\n        if (cacheRecord.accessToken) {\n            /*\r\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n             * the token will be returned unsigned\r\n             */ if (cacheRecord.accessToken.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.POP && !request.popKid) {\n                const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_13__.PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n                if (!keyId) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.keyIdMissing);\n                }\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            if (cacheRecord.accessToken.refreshOn) {\n                refreshOn = new Date(Number(cacheRecord.accessToken.refreshOn) * 1000);\n            }\n        }\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.THE_FAMILY_ID ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.THE_FAMILY_ID : \"\";\n        }\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n        const tid = idTokenClaims?.tid || \"\";\n        // for hybrid + native bridge enablement, send back the native account Id\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n            cacheRecord.account.nativeAccountId = serverTokenResponse?.spa_accountid;\n        }\n        const accountInfo = cacheRecord.account ? (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__.updateAccountTenantProfileData)(cacheRecord.account.getAccountInfo(), undefined, idTokenClaims, cacheRecord.idToken?.secret) : null;\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountInfo,\n            idToken: cacheRecord?.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            refreshOn: refreshOn,\n            correlationId: request.correlationId,\n            requestId: requestId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            code: serverTokenResponse?.spa_code,\n            fromNativeBroker: false\n        };\n    }\n}\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\n    logger?.verbose(\"setCachedAccount called\");\n    // Check if base account is already cached\n    const accountKeys = cacheStorage.getAccountKeys();\n    const baseAccountKey = accountKeys.find((accountKey)=>{\n        return accountKey.startsWith(homeAccountId);\n    });\n    let cachedAccount = null;\n    if (baseAccountKey) {\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, logger);\n    }\n    const baseAccount = cachedAccount || _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__.AccountEntity.createAccount({\n        homeAccountId,\n        idTokenClaims,\n        clientInfo,\n        environment,\n        cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n        msGraphHost: authCodePayload?.msgraph_host,\n        nativeAccountId: nativeAccountId\n    }, authority, base64Decode);\n    const tenantProfiles = baseAccount.tenantProfiles || [];\n    const tenantId = claimsTenantId || baseAccount.realm;\n    if (tenantId && !tenantProfiles.find((tenantProfile)=>{\n        return tenantProfile.tenantId === tenantId;\n    })) {\n        const newTenantProfile = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__.buildTenantProfile)(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\n        tenantProfiles.push(newTenantProfile);\n    }\n    baseAccount.tenantProfiles = tenantProfiles;\n    return baseAccount;\n}\n //# sourceMappingURL=ResponseHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntFields: () => (/* binding */ IntFields),\n/* harmony export */   PerformanceEventAbbreviations: () => (/* binding */ PerformanceEventAbbreviations),\n/* harmony export */   PerformanceEventStatus: () => (/* binding */ PerformanceEventStatus),\n/* harmony export */   PerformanceEvents: () => (/* binding */ PerformanceEvents)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */ const PerformanceEvents = {\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */ AcquireTokenByCode: \"acquireTokenByCode\",\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */ AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */ AcquireTokenSilent: \"acquireTokenSilent\",\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */ AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */ AcquireTokenPopup: \"acquireTokenPopup\",\n    /**\r\n     * acquireTokenPreRedirect (msal-browser).\r\n     * First part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */ AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n    /**\r\n     * acquireTokenRedirect (msal-browser).\r\n     * Second part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */ AcquireTokenRedirect: \"acquireTokenRedirect\",\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */ CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */ CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */ SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */ SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\",\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */ SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */ SsoSilent: \"ssoSilent\",\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */ StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */ FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */ NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */ BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\r\n     * Time spent sending/waiting for the response of a request to the token endpoint\r\n     */ NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\n    RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n    AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */ BrokerHandhshake: \"brokerHandshake\",\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */ AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */ AcquireTokenByBroker: \"acquireTokenByBroker\",\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */ RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */ RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */ RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */ RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */ RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */ AcquireTokenFromCache: \"acquireTokenFromCache\",\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n    SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */ AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */ InitializeBaseRequest: \"initializeBaseRequest\",\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */ InitializeSilentRequest: \"initializeSilentRequest\",\n    InitializeClientApplication: \"initializeClientApplication\",\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */ SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n    /**\r\n     * SilentHandler\r\n     */ SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */ StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n    StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */ GetAuthCodeUrl: \"getAuthCodeUrl\",\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */ HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponse: \"handleCodeResponse\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */ AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */ PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */ HandleServerTokenResponse: \"handleServerTokenResponse\",\n    DeserializeResponse: \"deserializeResponse\",\n    /**\r\n     * Authority functions\r\n     */ AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n    /**\r\n     * Region Discovery functions\r\n     */ RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n    RemoveHiddenIframe: \"removeHiddenIframe\",\n    /**\r\n     * Cache operations\r\n     */ ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n    /**\r\n     * Crypto Operations\r\n     */ GeneratePkceCodes: \"generatePkceCodes\",\n    GenerateCodeVerifier: \"generateCodeVerifier\",\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n    Sha256Digest: \"sha256Digest\",\n    GetRandomValues: \"getRandomValues\"\n};\nconst PerformanceEventAbbreviations = new Map([\n    [\n        PerformanceEvents.AcquireTokenByCode,\n        \"ATByCode\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByRefreshToken,\n        \"ATByRT\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenSilent,\n        \"ATS\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenSilentAsync,\n        \"ATSAsync\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenPopup,\n        \"ATPopup\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenRedirect,\n        \"ATRedirect\"\n    ],\n    [\n        PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\n        \"CryptoGetPKThumb\"\n    ],\n    [\n        PerformanceEvents.CryptoOptsSignJwt,\n        \"CryptoSignJwt\"\n    ],\n    [\n        PerformanceEvents.SilentCacheClientAcquireToken,\n        \"SltCacheClientAT\"\n    ],\n    [\n        PerformanceEvents.SilentIframeClientAcquireToken,\n        \"SltIframeClientAT\"\n    ],\n    [\n        PerformanceEvents.SilentRefreshClientAcquireToken,\n        \"SltRClientAT\"\n    ],\n    [\n        PerformanceEvents.SsoSilent,\n        \"SsoSlt\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n        \"StdIntClientGetDiscAuth\"\n    ],\n    [\n        PerformanceEvents.FetchAccountIdWithNativeBroker,\n        \"FetchAccIdWithNtvBroker\"\n    ],\n    [\n        PerformanceEvents.NativeInteractionClientAcquireToken,\n        \"NtvIntClientAT\"\n    ],\n    [\n        PerformanceEvents.BaseClientCreateTokenRequestHeaders,\n        \"BaseClientCreateTReqHead\"\n    ],\n    [\n        PerformanceEvents.NetworkClientSendPostRequestAsync,\n        \"NetClientSendPost\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\n        \"RTClientExecPost\"\n    ],\n    [\n        PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\n        \"AuthCodeClientExecPost\"\n    ],\n    [\n        PerformanceEvents.BrokerHandhshake,\n        \"BrokerHandshake\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\n        \"ATByRTInBroker\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByBroker,\n        \"ATByBroker\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n        \"RTClientExecTReq\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireToken,\n        \"RTClientAT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n        \"RTClientATWithCachedRT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n        \"RTClientATByRT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n        \"RTClientCreateTReqBody\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenFromCache,\n        \"ATFromCache\"\n    ],\n    [\n        PerformanceEvents.SilentFlowClientAcquireCachedToken,\n        \"SltFlowClientATCached\"\n    ],\n    [\n        PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n        \"SltFlowClientGenResFromCache\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenBySilentIframe,\n        \"ATBySltIframe\"\n    ],\n    [\n        PerformanceEvents.InitializeBaseRequest,\n        \"InitBaseReq\"\n    ],\n    [\n        PerformanceEvents.InitializeSilentRequest,\n        \"InitSltReq\"\n    ],\n    [\n        PerformanceEvents.InitializeClientApplication,\n        \"InitClientApplication\"\n    ],\n    [\n        PerformanceEvents.SilentIframeClientTokenHelper,\n        \"SIClientTHelper\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\n        \"SHandlerInitAuthReq\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\n        \"SltHandlerMonitorIframeForHash\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerLoadFrame,\n        \"SHandlerLoadFrame\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerLoadFrameSync,\n        \"SHandlerLoadFrameSync\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n        \"StdIntClientCreateAuthCodeClient\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n        \"StdIntClientGetClientConf\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n        \"StdIntClientInitAuthReq\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n        \"StdIntClientInitAuthCodeReq\"\n    ],\n    [\n        PerformanceEvents.GetAuthCodeUrl,\n        \"GetAuthCodeUrl\"\n    ],\n    [\n        PerformanceEvents.HandleCodeResponseFromServer,\n        \"HandleCodeResFromServer\"\n    ],\n    [\n        PerformanceEvents.HandleCodeResponse,\n        \"HandleCodeResp\"\n    ],\n    [\n        PerformanceEvents.UpdateTokenEndpointAuthority,\n        \"UpdTEndpointAuth\"\n    ],\n    [\n        PerformanceEvents.AuthClientAcquireToken,\n        \"AuthClientAT\"\n    ],\n    [\n        PerformanceEvents.AuthClientExecuteTokenRequest,\n        \"AuthClientExecTReq\"\n    ],\n    [\n        PerformanceEvents.AuthClientCreateTokenRequestBody,\n        \"AuthClientCreateTReqBody\"\n    ],\n    [\n        PerformanceEvents.AuthClientCreateQueryString,\n        \"AuthClientCreateQueryStr\"\n    ],\n    [\n        PerformanceEvents.PopTokenGenerateCnf,\n        \"PopTGenCnf\"\n    ],\n    [\n        PerformanceEvents.PopTokenGenerateKid,\n        \"PopTGenKid\"\n    ],\n    [\n        PerformanceEvents.HandleServerTokenResponse,\n        \"HandleServerTRes\"\n    ],\n    [\n        PerformanceEvents.DeserializeResponse,\n        \"DeserializeRes\"\n    ],\n    [\n        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n        \"AuthFactCreateDiscInst\"\n    ],\n    [\n        PerformanceEvents.AuthorityResolveEndpointsAsync,\n        \"AuthResolveEndpointsAsync\"\n    ],\n    [\n        PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\n        \"AuthResolveEndpointsFromLocal\"\n    ],\n    [\n        PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\n        \"AuthGetCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\n        \"AuthUpdCDMeta\"\n    ],\n    [\n        PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\n        \"AuthUpdCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateEndpointMetadata,\n        \"AuthUpdEndpointMeta\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n        \"AuthUpdMetaWithRegInfo\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryDetectRegion,\n        \"RegDiscDetectReg\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n        \"RegDiscGetRegFromIMDS\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryGetCurrentVersion,\n        \"RegDiscGetCurrentVer\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByCodeAsync,\n        \"ATByCodeAsync\"\n    ],\n    [\n        PerformanceEvents.GetEndpointMetadataFromNetwork,\n        \"GetEndpointMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\n        \"GetCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.HandleRedirectPromiseMeasurement,\n        \"HandleRedirectPromise\"\n    ],\n    [\n        PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\n        \"HandleNtvRedirectPromise\"\n    ],\n    [\n        PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\n        \"UpdateCDMeta\"\n    ],\n    [\n        PerformanceEvents.UsernamePasswordClientAcquireToken,\n        \"UserPassClientAT\"\n    ],\n    [\n        PerformanceEvents.NativeMessageHandlerHandshake,\n        \"NtvMsgHandlerHandshake\"\n    ],\n    [\n        PerformanceEvents.NativeGenerateAuthResult,\n        \"NtvGenAuthRes\"\n    ],\n    [\n        PerformanceEvents.RemoveHiddenIframe,\n        \"RemoveHiddenIframe\"\n    ],\n    [\n        PerformanceEvents.ClearTokensAndKeysWithClaims,\n        \"ClearTAndKeysWithClaims\"\n    ],\n    [\n        PerformanceEvents.CacheManagerGetRefreshToken,\n        \"CacheManagerGetRT\"\n    ],\n    [\n        PerformanceEvents.GeneratePkceCodes,\n        \"GenPkceCodes\"\n    ],\n    [\n        PerformanceEvents.GenerateCodeVerifier,\n        \"GenCodeVerifier\"\n    ],\n    [\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        \"GenCodeChallengeFromVerifier\"\n    ],\n    [\n        PerformanceEvents.Sha256Digest,\n        \"Sha256Digest\"\n    ],\n    [\n        PerformanceEvents.GetRandomValues,\n        \"GetRandomValues\"\n    ]\n]);\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */ const PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2\n};\nconst IntFields = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n    \"multiMatchedAT\",\n    \"multiMatchedID\",\n    \"multiMatchedRT\"\n]);\n //# sourceMappingURL=PerformanceEvent.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdGVsZW1ldHJ5L3BlcmZvcm1hbmNlL1BlcmZvcm1hbmNlRXZlbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Ozs7Q0FLQyxHQUNELE1BQU1BLG9CQUFvQjtJQUN0Qjs7O0tBR0MsR0FDREMsb0JBQW9CO0lBQ3BCOzs7S0FHQyxHQUNEQyw0QkFBNEI7SUFDNUI7OztLQUdDLEdBQ0RDLG9CQUFvQjtJQUNwQjs7O0tBR0MsR0FDREMseUJBQXlCO0lBQ3pCOzs7S0FHQyxHQUNEQyxtQkFBbUI7SUFDbkI7Ozs7S0FJQyxHQUNEQyx5QkFBeUI7SUFDekI7Ozs7S0FJQyxHQUNEQyxzQkFBc0I7SUFDdEI7OztLQUdDLEdBQ0RDLGtDQUFrQztJQUNsQzs7O0tBR0MsR0FDREMsbUJBQW1CO0lBQ25COzs7S0FHQyxHQUNEQywrQkFBK0I7SUFDL0I7OztLQUdDLEdBQ0RDLGdDQUFnQztJQUNoQ0MsdUJBQXVCO0lBQ3ZCOzs7S0FHQyxHQUNEQyxpQ0FBaUM7SUFDakM7OztLQUdDLEdBQ0RDLFdBQVc7SUFDWDs7O0tBR0MsR0FDREMsaURBQWlEO0lBQ2pEOzs7S0FHQyxHQUNEQyxnQ0FBZ0M7SUFDaEM7OztLQUdDLEdBQ0RDLHFDQUFxQztJQUNyQzs7S0FFQyxHQUNEQyxxQ0FBcUM7SUFDckM7O0tBRUMsR0FDREMsbUNBQW1DO0lBQ25DQyw4Q0FBOEM7SUFDOUNDLG1EQUFtRDtJQUNuRDs7S0FFQyxHQUNEQyxrQkFBa0I7SUFDbEI7O0tBRUMsR0FDREMsb0NBQW9DO0lBQ3BDOztLQUVDLEdBQ0RDLHNCQUFzQjtJQUN0Qjs7S0FFQyxHQUNEQyx1Q0FBdUM7SUFDdkM7O0tBRUMsR0FDREMsZ0NBQWdDO0lBQ2hDOztLQUVDLEdBQ0RDLHNEQUFzRDtJQUN0RDs7S0FFQyxHQUNEQyw4Q0FBOEM7SUFDOUM7O0tBRUMsR0FDREMsMENBQTBDO0lB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SXJFLGtCQUFrQnNFLDhCQUE4QjtRQUNoRDtLQUNIO0lBQ0Q7UUFDSXRFLGtCQUFrQnVFLCtDQUErQztRQUNqRTtLQUNIO0lBQ0Q7UUFDSXZFLGtCQUFrQndFLGdDQUFnQztRQUNsRDtLQUNIO0lBQ0Q7UUFDSXhFLGtCQUFrQnlFLHNDQUFzQztRQUN4RDtLQUNIO0lBQ0Q7UUFDSXpFLGtCQUFrQjBFLHVDQUF1QztRQUN6RDtLQUNIO0lBQ0Q7UUFDSTFFLGtCQUFrQjJFLGtDQUFrQztRQUNwRDtLQUNIO0lBQ0Q7UUFDSTNFLGtCQUFrQjRFLDZCQUE2QjtRQUMvQztLQUNIO0lBQ0Q7UUFBQzVFLGtCQUFrQjZFLHdCQUF3QjtRQUFFO0tBQWdCO0lBQzdEO1FBQUM3RSxrQkFBa0I4RSxrQkFBa0I7UUFBRTtLQUFxQjtJQUM1RDtRQUNJOUUsa0JBQWtCK0UsNEJBQTRCO1FBQzlDO0tBQ0g7SUFDRDtRQUFDL0Usa0JBQWtCZ0YsMkJBQTJCO1FBQUU7S0FBb0I7SUFDcEU7UUFBQ2hGLGtCQUFrQmlGLGlCQUFpQjtRQUFFO0tBQWU7SUFDckQ7UUFBQ2pGLGtCQUFrQmtGLG9CQUFvQjtRQUFFO0tBQWtCO0lBQzNEO1FBQ0lsRixrQkFBa0JtRixpQ0FBaUM7UUFDbkQ7S0FDSDtJQUNEO1FBQUNuRixrQkFBa0JvRixZQUFZO1FBQUU7S0FBZTtJQUNoRDtRQUFDcEYsa0JBQWtCcUYsZUFBZTtRQUFFO0tBQWtCO0NBQ3pEO0FBQ0Q7Ozs7O0NBS0MsR0FDRCxNQUFNRyx5QkFBeUI7SUFDM0JDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxXQUFXO0FBQ2Y7QUFDQSxNQUFNQyxZQUFZLElBQUlDLElBQUk7SUFDdEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFFOEYsQ0FDL0YsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdGVsZW1ldHJ5L3BlcmZvcm1hbmNlL1BlcmZvcm1hbmNlRXZlbnQubWpzP2MzNjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEVudW1lcmF0aW9uIG9mIG9wZXJhdGlvbnMgdGhhdCBhcmUgaW5zdHJ1bWVudGVkIGJ5IGhhdmUgdGhlaXIgcGVyZm9ybWFuY2UgbWVhc3VyZWQgYnkgdGhlIFBlcmZvcm1hbmNlQ2xpZW50LlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBlbnVtIHtudW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBQZXJmb3JtYW5jZUV2ZW50cyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogYWNxdWlyZVRva2VuQnlDb2RlIEFQSSAobXNhbC1icm93c2VyIGFuZCBtc2FsLW5vZGUpLlxyXG4gICAgICogVXNlZCB0byBhY3F1aXJlIHRva2VucyBieSB0cmFkaW5nIGFuIGF1dGhvcml6YXRpb24gY29kZSBhZ2FpbnN0IHRoZSB0b2tlbiBlbmRwb2ludC5cclxuICAgICAqL1xyXG4gICAgQWNxdWlyZVRva2VuQnlDb2RlOiBcImFjcXVpcmVUb2tlbkJ5Q29kZVwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBhY3F1aXJlVG9rZW5CeVJlZnJlc2hUb2tlbiBBUEkgKG1zYWwtYnJvd3NlciBhbmQgbXNhbC1ub2RlKS5cclxuICAgICAqIFVzZWQgdG8gcmVuZXcgYW4gYWNjZXNzIHRva2VuIHVzaW5nIGEgcmVmcmVzaCB0b2tlbiBhZ2FpbnN0IHRoZSB0b2tlbiBlbmRwb2ludC5cclxuICAgICAqL1xyXG4gICAgQWNxdWlyZVRva2VuQnlSZWZyZXNoVG9rZW46IFwiYWNxdWlyZVRva2VuQnlSZWZyZXNoVG9rZW5cIixcclxuICAgIC8qKlxyXG4gICAgICogYWNxdWlyZVRva2VuU2lsZW50IEFQSSAobXNhbC1icm93c2VyIGFuZCBtc2FsLW5vZGUpLlxyXG4gICAgICogVXNlZCB0byBzaWxlbnRseSBhY3F1aXJlIGEgbmV3IGFjY2VzcyB0b2tlbiAoZnJvbSB0aGUgY2FjaGUgb3IgdGhlIG5ldHdvcmspLlxyXG4gICAgICovXHJcbiAgICBBY3F1aXJlVG9rZW5TaWxlbnQ6IFwiYWNxdWlyZVRva2VuU2lsZW50XCIsXHJcbiAgICAvKipcclxuICAgICAqIGFjcXVpcmVUb2tlblNpbGVudEFzeW5jIChtc2FsLWJyb3dzZXIpLlxyXG4gICAgICogSW50ZXJuYWwgQVBJIGZvciBhY3F1aXJlVG9rZW5TaWxlbnQuXHJcbiAgICAgKi9cclxuICAgIEFjcXVpcmVUb2tlblNpbGVudEFzeW5jOiBcImFjcXVpcmVUb2tlblNpbGVudEFzeW5jXCIsXHJcbiAgICAvKipcclxuICAgICAqIGFjcXVpcmVUb2tlblBvcHVwIChtc2FsLWJyb3dzZXIpLlxyXG4gICAgICogVXNlZCB0byBhY3F1aXJlIGEgbmV3IGFjY2VzcyB0b2tlbiBpbnRlcmFjdGl2ZWx5IHRocm91Z2ggcG9wIHVwc1xyXG4gICAgICovXHJcbiAgICBBY3F1aXJlVG9rZW5Qb3B1cDogXCJhY3F1aXJlVG9rZW5Qb3B1cFwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBhY3F1aXJlVG9rZW5QcmVSZWRpcmVjdCAobXNhbC1icm93c2VyKS5cclxuICAgICAqIEZpcnN0IHBhcnQgb2YgdGhlIHJlZGlyZWN0IGZsb3cuXHJcbiAgICAgKiBVc2VkIHRvIGFjcXVpcmUgYSBuZXcgYWNjZXNzIHRva2VuIGludGVyYWN0aXZlbHkgdGhyb3VnaCByZWRpcmVjdHMuXHJcbiAgICAgKi9cclxuICAgIEFjcXVpcmVUb2tlblByZVJlZGlyZWN0OiBcImFjcXVpcmVUb2tlblByZVJlZGlyZWN0XCIsXHJcbiAgICAvKipcclxuICAgICAqIGFjcXVpcmVUb2tlblJlZGlyZWN0IChtc2FsLWJyb3dzZXIpLlxyXG4gICAgICogU2Vjb25kIHBhcnQgb2YgdGhlIHJlZGlyZWN0IGZsb3cuXHJcbiAgICAgKiBVc2VkIHRvIGFjcXVpcmUgYSBuZXcgYWNjZXNzIHRva2VuIGludGVyYWN0aXZlbHkgdGhyb3VnaCByZWRpcmVjdHMuXHJcbiAgICAgKi9cclxuICAgIEFjcXVpcmVUb2tlblJlZGlyZWN0OiBcImFjcXVpcmVUb2tlblJlZGlyZWN0XCIsXHJcbiAgICAvKipcclxuICAgICAqIGdldFB1YmxpY0tleVRodW1icHJpbnQgQVBJIGluIENyeXB0b09wdHMgY2xhc3MgKG1zYWwtYnJvd3NlcikuXHJcbiAgICAgKiBVc2VkIHRvIGdlbmVyYXRlIGEgcHVibGljL3ByaXZhdGUga2V5cGFpciBhbmQgZ2VuZXJhdGUgYSBwdWJsaWMga2V5IHRodW1icHJpbnQgZm9yIHBvcCByZXF1ZXN0cy5cclxuICAgICAqL1xyXG4gICAgQ3J5cHRvT3B0c0dldFB1YmxpY0tleVRodW1icHJpbnQ6IFwiY3J5cHRvT3B0c0dldFB1YmxpY0tleVRodW1icHJpbnRcIixcclxuICAgIC8qKlxyXG4gICAgICogc2lnbkp3dCBBUEkgaW4gQ3J5cHRvT3B0cyBjbGFzcyAobXNhbC1icm93c2VyKS5cclxuICAgICAqIFVzZWQgdG8gc2lnbmVkIGEgcG9wIHRva2VuLlxyXG4gICAgICovXHJcbiAgICBDcnlwdG9PcHRzU2lnbkp3dDogXCJjcnlwdG9PcHRzU2lnbkp3dFwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBhY3F1aXJlVG9rZW4gQVBJIGluIHRoZSBTaWxlbnRDYWNoZUNsaWVudCBjbGFzcyAobXNhbC1icm93c2VyKS5cclxuICAgICAqIFVzZWQgdG8gcmVhZCBhY2Nlc3MgdG9rZW5zIGZyb20gdGhlIGNhY2hlLlxyXG4gICAgICovXHJcbiAgICBTaWxlbnRDYWNoZUNsaWVudEFjcXVpcmVUb2tlbjogXCJzaWxlbnRDYWNoZUNsaWVudEFjcXVpcmVUb2tlblwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBhY3F1aXJlVG9rZW4gQVBJIGluIHRoZSBTaWxlbnRJZnJhbWVDbGllbnQgY2xhc3MgKG1zYWwtYnJvd3NlcikuXHJcbiAgICAgKiBVc2VkIHRvIGFjcXVpcmUgYSBuZXcgc2V0IG9mIHRva2VucyBmcm9tIHRoZSBhdXRob3JpemUgZW5kcG9pbnQgaW4gYSBoaWRkZW4gaWZyYW1lLlxyXG4gICAgICovXHJcbiAgICBTaWxlbnRJZnJhbWVDbGllbnRBY3F1aXJlVG9rZW46IFwic2lsZW50SWZyYW1lQ2xpZW50QWNxdWlyZVRva2VuXCIsXHJcbiAgICBBd2FpdENvbmN1cnJlbnRJZnJhbWU6IFwiYXdhaXRDb25jdXJyZW50SWZyYW1lXCIsXHJcbiAgICAvKipcclxuICAgICAqIGFjcXVpcmVUb2tlbiBBUEkgaW4gU2lsZW50UmVyZXNoQ2xpZW50IChtc2FsLWJyb3dzZXIpLlxyXG4gICAgICogVXNlZCB0byBhY3F1aXJlIGEgbmV3IHNldCBvZiB0b2tlbnMgZnJvbSB0aGUgdG9rZW4gZW5kcG9pbnQgdXNpbmcgYSByZWZyZXNoIHRva2VuLlxyXG4gICAgICovXHJcbiAgICBTaWxlbnRSZWZyZXNoQ2xpZW50QWNxdWlyZVRva2VuOiBcInNpbGVudFJlZnJlc2hDbGllbnRBY3F1aXJlVG9rZW5cIixcclxuICAgIC8qKlxyXG4gICAgICogc3NvU2lsZW50IEFQSSAobXNhbC1icm93c2VyKS5cclxuICAgICAqIFVzZWQgdG8gc2lsZW50bHkgYWNxdWlyZSBhbiBhdXRob3JpemF0aW9uIGNvZGUgYW5kIHNldCBvZiB0b2tlbnMgdXNpbmcgYSBoaWRkZW4gaWZyYW1lLlxyXG4gICAgICovXHJcbiAgICBTc29TaWxlbnQ6IFwic3NvU2lsZW50XCIsXHJcbiAgICAvKipcclxuICAgICAqIGdldERpc2NvdmVyZWRBdXRob3JpdHkgQVBJIGluIFN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnQgY2xhc3MgKG1zYWwtYnJvd3NlcikuXHJcbiAgICAgKiBVc2VkIHRvIGxvYWQgYXV0aG9yaXR5IG1ldGFkYXRhIGZvciBhIHJlcXVlc3QuXHJcbiAgICAgKi9cclxuICAgIFN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXREaXNjb3ZlcmVkQXV0aG9yaXR5OiBcInN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXREaXNjb3ZlcmVkQXV0aG9yaXR5XCIsXHJcbiAgICAvKipcclxuICAgICAqIGFjcXVpcmVUb2tlbiBBUElzIGluIG1zYWwtYnJvd3Nlci5cclxuICAgICAqIFVzZWQgdG8gbWFrZSBhbiAvYXV0aG9yaXplIGVuZHBvaW50IGNhbGwgd2l0aCBuYXRpdmUgYnJva2VyaW5nIGVuYWJsZWQuXHJcbiAgICAgKi9cclxuICAgIEZldGNoQWNjb3VudElkV2l0aE5hdGl2ZUJyb2tlcjogXCJmZXRjaEFjY291bnRJZFdpdGhOYXRpdmVCcm9rZXJcIixcclxuICAgIC8qKlxyXG4gICAgICogYWNxdWlyZVRva2VuIEFQSSBpbiBOYXRpdmVJbnRlcmFjdGlvbkNsaWVudCBjbGFzcyAobXNhbC1icm93c2VyKS5cclxuICAgICAqIFVzZWQgdG8gYWNxdWlyZSBhIHRva2VuIGZyb20gTmF0aXZlIGNvbXBvbmVudCB3aGVuIG5hdGl2ZSBicm9rZXJpbmcgaXMgZW5hYmxlZC5cclxuICAgICAqL1xyXG4gICAgTmF0aXZlSW50ZXJhY3Rpb25DbGllbnRBY3F1aXJlVG9rZW46IFwibmF0aXZlSW50ZXJhY3Rpb25DbGllbnRBY3F1aXJlVG9rZW5cIixcclxuICAgIC8qKlxyXG4gICAgICogVGltZSBzcGVudCBjcmVhdGluZyBkZWZhdWx0IGhlYWRlcnMgZm9yIHJlcXVlc3RzIHRvIHRva2VuIGVuZHBvaW50XHJcbiAgICAgKi9cclxuICAgIEJhc2VDbGllbnRDcmVhdGVUb2tlblJlcXVlc3RIZWFkZXJzOiBcImJhc2VDbGllbnRDcmVhdGVUb2tlblJlcXVlc3RIZWFkZXJzXCIsXHJcbiAgICAvKipcclxuICAgICAqIFRpbWUgc3BlbnQgc2VuZGluZy93YWl0aW5nIGZvciB0aGUgcmVzcG9uc2Ugb2YgYSByZXF1ZXN0IHRvIHRoZSB0b2tlbiBlbmRwb2ludFxyXG4gICAgICovXHJcbiAgICBOZXR3b3JrQ2xpZW50U2VuZFBvc3RSZXF1ZXN0QXN5bmM6IFwibmV0d29ya0NsaWVudFNlbmRQb3N0UmVxdWVzdEFzeW5jXCIsXHJcbiAgICBSZWZyZXNoVG9rZW5DbGllbnRFeGVjdXRlUG9zdFRvVG9rZW5FbmRwb2ludDogXCJyZWZyZXNoVG9rZW5DbGllbnRFeGVjdXRlUG9zdFRvVG9rZW5FbmRwb2ludFwiLFxyXG4gICAgQXV0aG9yaXphdGlvbkNvZGVDbGllbnRFeGVjdXRlUG9zdFRvVG9rZW5FbmRwb2ludDogXCJhdXRob3JpemF0aW9uQ29kZUNsaWVudEV4ZWN1dGVQb3N0VG9Ub2tlbkVuZHBvaW50XCIsXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gbWVhc3VyZSB0aGUgdGltZSB0YWtlbiBmb3IgY29tcGxldGluZyBlbWJlZGRlZC1icm9rZXIgaGFuZHNoYWtlIChQVy1Ccm9rZXIpLlxyXG4gICAgICovXHJcbiAgICBCcm9rZXJIYW5kaHNoYWtlOiBcImJyb2tlckhhbmRzaGFrZVwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBhY3F1aXJlVG9rZW5CeVJlZnJlc2hUb2tlbiBBUEkgaW4gQnJva2VyQ2xpZW50QXBwbGljYXRpb24gKFBXLUJyb2tlcikgLlxyXG4gICAgICovXHJcbiAgICBBY3F1aXJlVG9rZW5CeVJlZnJlc2hUb2tlbkluQnJva2VyOiBcImFjcXVpcmVUb2tlbkJ5UmVmcmVzaFRva2VuSW5Ccm9rZXJcIixcclxuICAgIC8qKlxyXG4gICAgICogVGltZSB0YWtlbiBmb3IgdG9rZW4gYWNxdWlzaXRpb24gYnkgYnJva2VyXHJcbiAgICAgKi9cclxuICAgIEFjcXVpcmVUb2tlbkJ5QnJva2VyOiBcImFjcXVpcmVUb2tlbkJ5QnJva2VyXCIsXHJcbiAgICAvKipcclxuICAgICAqIFRpbWUgc3BlbnQgb24gdGhlIG5ldHdvcmsgZm9yIHJlZnJlc2ggdG9rZW4gYWNxdWlzaXRpb25cclxuICAgICAqL1xyXG4gICAgUmVmcmVzaFRva2VuQ2xpZW50RXhlY3V0ZVRva2VuUmVxdWVzdDogXCJyZWZyZXNoVG9rZW5DbGllbnRFeGVjdXRlVG9rZW5SZXF1ZXN0XCIsXHJcbiAgICAvKipcclxuICAgICAqIFRpbWUgdGFrZW4gZm9yIGFjcXVpcmluZyByZWZyZXNoIHRva2VuICwgcmVjb3JkcyBSVCBzaXplXHJcbiAgICAgKi9cclxuICAgIFJlZnJlc2hUb2tlbkNsaWVudEFjcXVpcmVUb2tlbjogXCJyZWZyZXNoVG9rZW5DbGllbnRBY3F1aXJlVG9rZW5cIixcclxuICAgIC8qKlxyXG4gICAgICogVGltZSB0YWtlbiBmb3IgYWNxdWlyaW5nIGNhY2hlZCByZWZyZXNoIHRva2VuXHJcbiAgICAgKi9cclxuICAgIFJlZnJlc2hUb2tlbkNsaWVudEFjcXVpcmVUb2tlbldpdGhDYWNoZWRSZWZyZXNoVG9rZW46IFwicmVmcmVzaFRva2VuQ2xpZW50QWNxdWlyZVRva2VuV2l0aENhY2hlZFJlZnJlc2hUb2tlblwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBhY3F1aXJlVG9rZW5CeVJlZnJlc2hUb2tlbiBBUEkgaW4gUmVmcmVzaFRva2VuQ2xpZW50IChtc2FsLWNvbW1vbikuXHJcbiAgICAgKi9cclxuICAgIFJlZnJlc2hUb2tlbkNsaWVudEFjcXVpcmVUb2tlbkJ5UmVmcmVzaFRva2VuOiBcInJlZnJlc2hUb2tlbkNsaWVudEFjcXVpcmVUb2tlbkJ5UmVmcmVzaFRva2VuXCIsXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgdG9rZW4gcmVxdWVzdCBib2R5IGluIFJlZnJlc2hUb2tlbkNsaWVudCAobXNhbC1jb21tb24pLlxyXG4gICAgICovXHJcbiAgICBSZWZyZXNoVG9rZW5DbGllbnRDcmVhdGVUb2tlblJlcXVlc3RCb2R5OiBcInJlZnJlc2hUb2tlbkNsaWVudENyZWF0ZVRva2VuUmVxdWVzdEJvZHlcIixcclxuICAgIC8qKlxyXG4gICAgICogYWNxdWlyZVRva2VuRnJvbUNhY2hlIChtc2FsLWJyb3dzZXIpLlxyXG4gICAgICogSW50ZXJuYWwgQVBJIGZvciBhY3F1aXJpbmcgdG9rZW4gZnJvbSBjYWNoZVxyXG4gICAgICovXHJcbiAgICBBY3F1aXJlVG9rZW5Gcm9tQ2FjaGU6IFwiYWNxdWlyZVRva2VuRnJvbUNhY2hlXCIsXHJcbiAgICBTaWxlbnRGbG93Q2xpZW50QWNxdWlyZUNhY2hlZFRva2VuOiBcInNpbGVudEZsb3dDbGllbnRBY3F1aXJlQ2FjaGVkVG9rZW5cIixcclxuICAgIFNpbGVudEZsb3dDbGllbnRHZW5lcmF0ZVJlc3VsdEZyb21DYWNoZVJlY29yZDogXCJzaWxlbnRGbG93Q2xpZW50R2VuZXJhdGVSZXN1bHRGcm9tQ2FjaGVSZWNvcmRcIixcclxuICAgIC8qKlxyXG4gICAgICogYWNxdWlyZVRva2VuQnlTaWxlbnRJZnJhbWUgKG1zYWwtYnJvd3NlcikuXHJcbiAgICAgKiBJbnRlcm5hbCBBUEkgZm9yIGFjcXVpcmluZyB0b2tlbiBieSBzaWxlbnQgSWZyYW1lXHJcbiAgICAgKi9cclxuICAgIEFjcXVpcmVUb2tlbkJ5U2lsZW50SWZyYW1lOiBcImFjcXVpcmVUb2tlbkJ5U2lsZW50SWZyYW1lXCIsXHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIEFQSSBmb3IgaW5pdGlhbGl6aW5nIGJhc2UgcmVxdWVzdCBpbiBCYXNlSW50ZXJhY3Rpb25DbGllbnQgKG1zYWwtYnJvd3NlcilcclxuICAgICAqL1xyXG4gICAgSW5pdGlhbGl6ZUJhc2VSZXF1ZXN0OiBcImluaXRpYWxpemVCYXNlUmVxdWVzdFwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnRlcm5hbCBBUEkgZm9yIGluaXRpYWxpemluZyBzaWxlbnQgcmVxdWVzdCBpbiBTaWxlbnRDYWNoZUNsaWVudCAobXNhbC1icm93c2VyKVxyXG4gICAgICovXHJcbiAgICBJbml0aWFsaXplU2lsZW50UmVxdWVzdDogXCJpbml0aWFsaXplU2lsZW50UmVxdWVzdFwiLFxyXG4gICAgSW5pdGlhbGl6ZUNsaWVudEFwcGxpY2F0aW9uOiBcImluaXRpYWxpemVDbGllbnRBcHBsaWNhdGlvblwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gaW4gU2lsZW50SWZyYW1lQ2xpZW50IGNsYXNzIChtc2FsLWJyb3dzZXIpLlxyXG4gICAgICovXHJcbiAgICBTaWxlbnRJZnJhbWVDbGllbnRUb2tlbkhlbHBlcjogXCJzaWxlbnRJZnJhbWVDbGllbnRUb2tlbkhlbHBlclwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBTaWxlbnRIYW5kbGVyXHJcbiAgICAgKi9cclxuICAgIFNpbGVudEhhbmRsZXJJbml0aWF0ZUF1dGhSZXF1ZXN0OiBcInNpbGVudEhhbmRsZXJJbml0aWF0ZUF1dGhSZXF1ZXN0XCIsXHJcbiAgICBTaWxlbnRIYW5kbGVyTW9uaXRvcklmcmFtZUZvckhhc2g6IFwic2lsZW50SGFuZGxlck1vbml0b3JJZnJhbWVGb3JIYXNoXCIsXHJcbiAgICBTaWxlbnRIYW5kbGVyTG9hZEZyYW1lOiBcInNpbGVudEhhbmRsZXJMb2FkRnJhbWVcIixcclxuICAgIFNpbGVudEhhbmRsZXJMb2FkRnJhbWVTeW5jOiBcInNpbGVudEhhbmRsZXJMb2FkRnJhbWVTeW5jXCIsXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbnMgaW4gU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudCBjbGFzcyAobXNhbC1icm93c2VyKVxyXG4gICAgICovXHJcbiAgICBTdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50Q3JlYXRlQXV0aENvZGVDbGllbnQ6IFwic3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudENyZWF0ZUF1dGhDb2RlQ2xpZW50XCIsXHJcbiAgICBTdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50R2V0Q2xpZW50Q29uZmlndXJhdGlvbjogXCJzdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50R2V0Q2xpZW50Q29uZmlndXJhdGlvblwiLFxyXG4gICAgU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudEluaXRpYWxpemVBdXRob3JpemF0aW9uUmVxdWVzdDogXCJzdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50SW5pdGlhbGl6ZUF1dGhvcml6YXRpb25SZXF1ZXN0XCIsXHJcbiAgICBTdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50SW5pdGlhbGl6ZUF1dGhvcml6YXRpb25Db2RlUmVxdWVzdDogXCJzdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50SW5pdGlhbGl6ZUF1dGhvcml6YXRpb25Db2RlUmVxdWVzdFwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXRBdXRoQ29kZVVybCBBUEkgKG1zYWwtYnJvd3NlciBhbmQgbXNhbC1ub2RlKS5cclxuICAgICAqL1xyXG4gICAgR2V0QXV0aENvZGVVcmw6IFwiZ2V0QXV0aENvZGVVcmxcIixcclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb25zIGZyb20gSW50ZXJhY3Rpb25IYW5kbGVyIChtc2FsLWJyb3dzZXIpXHJcbiAgICAgKi9cclxuICAgIEhhbmRsZUNvZGVSZXNwb25zZUZyb21TZXJ2ZXI6IFwiaGFuZGxlQ29kZVJlc3BvbnNlRnJvbVNlcnZlclwiLFxyXG4gICAgSGFuZGxlQ29kZVJlc3BvbnNlOiBcImhhbmRsZUNvZGVSZXNwb25zZVwiLFxyXG4gICAgVXBkYXRlVG9rZW5FbmRwb2ludEF1dGhvcml0eTogXCJ1cGRhdGVUb2tlbkVuZHBvaW50QXV0aG9yaXR5XCIsXHJcbiAgICAvKipcclxuICAgICAqIEFQSXMgaW4gQXV0aG9yaXphdGlvbiBDb2RlIENsaWVudCAobXNhbC1jb21tb24pXHJcbiAgICAgKi9cclxuICAgIEF1dGhDbGllbnRBY3F1aXJlVG9rZW46IFwiYXV0aENsaWVudEFjcXVpcmVUb2tlblwiLFxyXG4gICAgQXV0aENsaWVudEV4ZWN1dGVUb2tlblJlcXVlc3Q6IFwiYXV0aENsaWVudEV4ZWN1dGVUb2tlblJlcXVlc3RcIixcclxuICAgIEF1dGhDbGllbnRDcmVhdGVUb2tlblJlcXVlc3RCb2R5OiBcImF1dGhDbGllbnRDcmVhdGVUb2tlblJlcXVlc3RCb2R5XCIsXHJcbiAgICBBdXRoQ2xpZW50Q3JlYXRlUXVlcnlTdHJpbmc6IFwiYXV0aENsaWVudENyZWF0ZVF1ZXJ5U3RyaW5nXCIsXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIGZ1bmN0aW9ucyBpbiBQb3BUb2tlbkdlbmVyYXRvciAobXNhbC1jb21tb24pXHJcbiAgICAgKi9cclxuICAgIFBvcFRva2VuR2VuZXJhdGVDbmY6IFwicG9wVG9rZW5HZW5lcmF0ZUNuZlwiLFxyXG4gICAgUG9wVG9rZW5HZW5lcmF0ZUtpZDogXCJwb3BUb2tlbkdlbmVyYXRlS2lkXCIsXHJcbiAgICAvKipcclxuICAgICAqIGhhbmRsZVNlcnZlclRva2VuUmVzcG9uc2UgQVBJIGluIFJlc3BvbnNlSGFuZGxlciAobXNhbC1jb21tb24pXHJcbiAgICAgKi9cclxuICAgIEhhbmRsZVNlcnZlclRva2VuUmVzcG9uc2U6IFwiaGFuZGxlU2VydmVyVG9rZW5SZXNwb25zZVwiLFxyXG4gICAgRGVzZXJpYWxpemVSZXNwb25zZTogXCJkZXNlcmlhbGl6ZVJlc3BvbnNlXCIsXHJcbiAgICAvKipcclxuICAgICAqIEF1dGhvcml0eSBmdW5jdGlvbnNcclxuICAgICAqL1xyXG4gICAgQXV0aG9yaXR5RmFjdG9yeUNyZWF0ZURpc2NvdmVyZWRJbnN0YW5jZTogXCJhdXRob3JpdHlGYWN0b3J5Q3JlYXRlRGlzY292ZXJlZEluc3RhbmNlXCIsXHJcbiAgICBBdXRob3JpdHlSZXNvbHZlRW5kcG9pbnRzQXN5bmM6IFwiYXV0aG9yaXR5UmVzb2x2ZUVuZHBvaW50c0FzeW5jXCIsXHJcbiAgICBBdXRob3JpdHlSZXNvbHZlRW5kcG9pbnRzRnJvbUxvY2FsU291cmNlczogXCJhdXRob3JpdHlSZXNvbHZlRW5kcG9pbnRzRnJvbUxvY2FsU291cmNlc1wiLFxyXG4gICAgQXV0aG9yaXR5R2V0Q2xvdWREaXNjb3ZlcnlNZXRhZGF0YUZyb21OZXR3b3JrOiBcImF1dGhvcml0eUdldENsb3VkRGlzY292ZXJ5TWV0YWRhdGFGcm9tTmV0d29ya1wiLFxyXG4gICAgQXV0aG9yaXR5VXBkYXRlQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YTogXCJhdXRob3JpdHlVcGRhdGVDbG91ZERpc2NvdmVyeU1ldGFkYXRhXCIsXHJcbiAgICBBdXRob3JpdHlHZXRFbmRwb2ludE1ldGFkYXRhRnJvbU5ldHdvcms6IFwiYXV0aG9yaXR5R2V0RW5kcG9pbnRNZXRhZGF0YUZyb21OZXR3b3JrXCIsXHJcbiAgICBBdXRob3JpdHlVcGRhdGVFbmRwb2ludE1ldGFkYXRhOiBcImF1dGhvcml0eVVwZGF0ZUVuZHBvaW50TWV0YWRhdGFcIixcclxuICAgIEF1dGhvcml0eVVwZGF0ZU1ldGFkYXRhV2l0aFJlZ2lvbmFsSW5mb3JtYXRpb246IFwiYXV0aG9yaXR5VXBkYXRlTWV0YWRhdGFXaXRoUmVnaW9uYWxJbmZvcm1hdGlvblwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpb24gRGlzY292ZXJ5IGZ1bmN0aW9uc1xyXG4gICAgICovXHJcbiAgICBSZWdpb25EaXNjb3ZlcnlEZXRlY3RSZWdpb246IFwicmVnaW9uRGlzY292ZXJ5RGV0ZWN0UmVnaW9uXCIsXHJcbiAgICBSZWdpb25EaXNjb3ZlcnlHZXRSZWdpb25Gcm9tSU1EUzogXCJyZWdpb25EaXNjb3ZlcnlHZXRSZWdpb25Gcm9tSU1EU1wiLFxyXG4gICAgUmVnaW9uRGlzY292ZXJ5R2V0Q3VycmVudFZlcnNpb246IFwicmVnaW9uRGlzY292ZXJ5R2V0Q3VycmVudFZlcnNpb25cIixcclxuICAgIEFjcXVpcmVUb2tlbkJ5Q29kZUFzeW5jOiBcImFjcXVpcmVUb2tlbkJ5Q29kZUFzeW5jXCIsXHJcbiAgICBHZXRFbmRwb2ludE1ldGFkYXRhRnJvbU5ldHdvcms6IFwiZ2V0RW5kcG9pbnRNZXRhZGF0YUZyb21OZXR3b3JrXCIsXHJcbiAgICBHZXRDbG91ZERpc2NvdmVyeU1ldGFkYXRhRnJvbU5ldHdvcmtNZWFzdXJlbWVudDogXCJnZXRDbG91ZERpc2NvdmVyeU1ldGFkYXRhRnJvbU5ldHdvcmtNZWFzdXJlbWVudFwiLFxyXG4gICAgSGFuZGxlUmVkaXJlY3RQcm9taXNlTWVhc3VyZW1lbnQ6IFwiaGFuZGxlUmVkaXJlY3RQcm9taXNlXCIsXHJcbiAgICBIYW5kbGVOYXRpdmVSZWRpcmVjdFByb21pc2VNZWFzdXJlbWVudDogXCJoYW5kbGVOYXRpdmVSZWRpcmVjdFByb21pc2VcIixcclxuICAgIFVwZGF0ZUNsb3VkRGlzY292ZXJ5TWV0YWRhdGFNZWFzdXJlbWVudDogXCJ1cGRhdGVDbG91ZERpc2NvdmVyeU1ldGFkYXRhTWVhc3VyZW1lbnRcIixcclxuICAgIFVzZXJuYW1lUGFzc3dvcmRDbGllbnRBY3F1aXJlVG9rZW46IFwidXNlcm5hbWVQYXNzd29yZENsaWVudEFjcXVpcmVUb2tlblwiLFxyXG4gICAgTmF0aXZlTWVzc2FnZUhhbmRsZXJIYW5kc2hha2U6IFwibmF0aXZlTWVzc2FnZUhhbmRsZXJIYW5kc2hha2VcIixcclxuICAgIE5hdGl2ZUdlbmVyYXRlQXV0aFJlc3VsdDogXCJuYXRpdmVHZW5lcmF0ZUF1dGhSZXN1bHRcIixcclxuICAgIFJlbW92ZUhpZGRlbklmcmFtZTogXCJyZW1vdmVIaWRkZW5JZnJhbWVcIixcclxuICAgIC8qKlxyXG4gICAgICogQ2FjaGUgb3BlcmF0aW9uc1xyXG4gICAgICovXHJcbiAgICBDbGVhclRva2Vuc0FuZEtleXNXaXRoQ2xhaW1zOiBcImNsZWFyVG9rZW5zQW5kS2V5c1dpdGhDbGFpbXNcIixcclxuICAgIENhY2hlTWFuYWdlckdldFJlZnJlc2hUb2tlbjogXCJjYWNoZU1hbmFnZXJHZXRSZWZyZXNoVG9rZW5cIixcclxuICAgIC8qKlxyXG4gICAgICogQ3J5cHRvIE9wZXJhdGlvbnNcclxuICAgICAqL1xyXG4gICAgR2VuZXJhdGVQa2NlQ29kZXM6IFwiZ2VuZXJhdGVQa2NlQ29kZXNcIixcclxuICAgIEdlbmVyYXRlQ29kZVZlcmlmaWVyOiBcImdlbmVyYXRlQ29kZVZlcmlmaWVyXCIsXHJcbiAgICBHZW5lcmF0ZUNvZGVDaGFsbGVuZ2VGcm9tVmVyaWZpZXI6IFwiZ2VuZXJhdGVDb2RlQ2hhbGxlbmdlRnJvbVZlcmlmaWVyXCIsXHJcbiAgICBTaGEyNTZEaWdlc3Q6IFwic2hhMjU2RGlnZXN0XCIsXHJcbiAgICBHZXRSYW5kb21WYWx1ZXM6IFwiZ2V0UmFuZG9tVmFsdWVzXCIsXHJcbn07XHJcbmNvbnN0IFBlcmZvcm1hbmNlRXZlbnRBYmJyZXZpYXRpb25zID0gbmV3IE1hcChbXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuQWNxdWlyZVRva2VuQnlDb2RlLCBcIkFUQnlDb2RlXCJdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkFjcXVpcmVUb2tlbkJ5UmVmcmVzaFRva2VuLCBcIkFUQnlSVFwiXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5BY3F1aXJlVG9rZW5TaWxlbnQsIFwiQVRTXCJdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkFjcXVpcmVUb2tlblNpbGVudEFzeW5jLCBcIkFUU0FzeW5jXCJdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkFjcXVpcmVUb2tlblBvcHVwLCBcIkFUUG9wdXBcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuQWNxdWlyZVRva2VuUmVkaXJlY3QsIFwiQVRSZWRpcmVjdFwiXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5DcnlwdG9PcHRzR2V0UHVibGljS2V5VGh1bWJwcmludCxcclxuICAgICAgICBcIkNyeXB0b0dldFBLVGh1bWJcIixcclxuICAgIF0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuQ3J5cHRvT3B0c1NpZ25Kd3QsIFwiQ3J5cHRvU2lnbkp3dFwiXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5TaWxlbnRDYWNoZUNsaWVudEFjcXVpcmVUb2tlbiwgXCJTbHRDYWNoZUNsaWVudEFUXCJdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLlNpbGVudElmcmFtZUNsaWVudEFjcXVpcmVUb2tlbiwgXCJTbHRJZnJhbWVDbGllbnRBVFwiXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5TaWxlbnRSZWZyZXNoQ2xpZW50QWNxdWlyZVRva2VuLCBcIlNsdFJDbGllbnRBVFwiXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5Tc29TaWxlbnQsIFwiU3NvU2x0XCJdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXREaXNjb3ZlcmVkQXV0aG9yaXR5LFxyXG4gICAgICAgIFwiU3RkSW50Q2xpZW50R2V0RGlzY0F1dGhcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuRmV0Y2hBY2NvdW50SWRXaXRoTmF0aXZlQnJva2VyLFxyXG4gICAgICAgIFwiRmV0Y2hBY2NJZFdpdGhOdHZCcm9rZXJcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuTmF0aXZlSW50ZXJhY3Rpb25DbGllbnRBY3F1aXJlVG9rZW4sXHJcbiAgICAgICAgXCJOdHZJbnRDbGllbnRBVFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5CYXNlQ2xpZW50Q3JlYXRlVG9rZW5SZXF1ZXN0SGVhZGVycyxcclxuICAgICAgICBcIkJhc2VDbGllbnRDcmVhdGVUUmVxSGVhZFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5OZXR3b3JrQ2xpZW50U2VuZFBvc3RSZXF1ZXN0QXN5bmMsXHJcbiAgICAgICAgXCJOZXRDbGllbnRTZW5kUG9zdFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5SZWZyZXNoVG9rZW5DbGllbnRFeGVjdXRlUG9zdFRvVG9rZW5FbmRwb2ludCxcclxuICAgICAgICBcIlJUQ2xpZW50RXhlY1Bvc3RcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuQXV0aG9yaXphdGlvbkNvZGVDbGllbnRFeGVjdXRlUG9zdFRvVG9rZW5FbmRwb2ludCxcclxuICAgICAgICBcIkF1dGhDb2RlQ2xpZW50RXhlY1Bvc3RcIixcclxuICAgIF0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuQnJva2VySGFuZGhzaGFrZSwgXCJCcm9rZXJIYW5kc2hha2VcIl0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuQWNxdWlyZVRva2VuQnlSZWZyZXNoVG9rZW5JbkJyb2tlcixcclxuICAgICAgICBcIkFUQnlSVEluQnJva2VyXCIsXHJcbiAgICBdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkFjcXVpcmVUb2tlbkJ5QnJva2VyLCBcIkFUQnlCcm9rZXJcIl0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuUmVmcmVzaFRva2VuQ2xpZW50RXhlY3V0ZVRva2VuUmVxdWVzdCxcclxuICAgICAgICBcIlJUQ2xpZW50RXhlY1RSZXFcIixcclxuICAgIF0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuUmVmcmVzaFRva2VuQ2xpZW50QWNxdWlyZVRva2VuLCBcIlJUQ2xpZW50QVRcIl0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuUmVmcmVzaFRva2VuQ2xpZW50QWNxdWlyZVRva2VuV2l0aENhY2hlZFJlZnJlc2hUb2tlbixcclxuICAgICAgICBcIlJUQ2xpZW50QVRXaXRoQ2FjaGVkUlRcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuUmVmcmVzaFRva2VuQ2xpZW50QWNxdWlyZVRva2VuQnlSZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgXCJSVENsaWVudEFUQnlSVFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5SZWZyZXNoVG9rZW5DbGllbnRDcmVhdGVUb2tlblJlcXVlc3RCb2R5LFxyXG4gICAgICAgIFwiUlRDbGllbnRDcmVhdGVUUmVxQm9keVwiLFxyXG4gICAgXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5BY3F1aXJlVG9rZW5Gcm9tQ2FjaGUsIFwiQVRGcm9tQ2FjaGVcIl0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuU2lsZW50Rmxvd0NsaWVudEFjcXVpcmVDYWNoZWRUb2tlbixcclxuICAgICAgICBcIlNsdEZsb3dDbGllbnRBVENhY2hlZFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5TaWxlbnRGbG93Q2xpZW50R2VuZXJhdGVSZXN1bHRGcm9tQ2FjaGVSZWNvcmQsXHJcbiAgICAgICAgXCJTbHRGbG93Q2xpZW50R2VuUmVzRnJvbUNhY2hlXCIsXHJcbiAgICBdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkFjcXVpcmVUb2tlbkJ5U2lsZW50SWZyYW1lLCBcIkFUQnlTbHRJZnJhbWVcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuSW5pdGlhbGl6ZUJhc2VSZXF1ZXN0LCBcIkluaXRCYXNlUmVxXCJdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkluaXRpYWxpemVTaWxlbnRSZXF1ZXN0LCBcIkluaXRTbHRSZXFcIl0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuSW5pdGlhbGl6ZUNsaWVudEFwcGxpY2F0aW9uLFxyXG4gICAgICAgIFwiSW5pdENsaWVudEFwcGxpY2F0aW9uXCIsXHJcbiAgICBdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLlNpbGVudElmcmFtZUNsaWVudFRva2VuSGVscGVyLCBcIlNJQ2xpZW50VEhlbHBlclwiXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5TaWxlbnRIYW5kbGVySW5pdGlhdGVBdXRoUmVxdWVzdCxcclxuICAgICAgICBcIlNIYW5kbGVySW5pdEF1dGhSZXFcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuU2lsZW50SGFuZGxlck1vbml0b3JJZnJhbWVGb3JIYXNoLFxyXG4gICAgICAgIFwiU2x0SGFuZGxlck1vbml0b3JJZnJhbWVGb3JIYXNoXCIsXHJcbiAgICBdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLlNpbGVudEhhbmRsZXJMb2FkRnJhbWUsIFwiU0hhbmRsZXJMb2FkRnJhbWVcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuU2lsZW50SGFuZGxlckxvYWRGcmFtZVN5bmMsIFwiU0hhbmRsZXJMb2FkRnJhbWVTeW5jXCJdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRDcmVhdGVBdXRoQ29kZUNsaWVudCxcclxuICAgICAgICBcIlN0ZEludENsaWVudENyZWF0ZUF1dGhDb2RlQ2xpZW50XCIsXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXRDbGllbnRDb25maWd1cmF0aW9uLFxyXG4gICAgICAgIFwiU3RkSW50Q2xpZW50R2V0Q2xpZW50Q29uZlwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5TdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50SW5pdGlhbGl6ZUF1dGhvcml6YXRpb25SZXF1ZXN0LFxyXG4gICAgICAgIFwiU3RkSW50Q2xpZW50SW5pdEF1dGhSZXFcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudEluaXRpYWxpemVBdXRob3JpemF0aW9uQ29kZVJlcXVlc3QsXHJcbiAgICAgICAgXCJTdGRJbnRDbGllbnRJbml0QXV0aENvZGVSZXFcIixcclxuICAgIF0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuR2V0QXV0aENvZGVVcmwsIFwiR2V0QXV0aENvZGVVcmxcIl0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuSGFuZGxlQ29kZVJlc3BvbnNlRnJvbVNlcnZlcixcclxuICAgICAgICBcIkhhbmRsZUNvZGVSZXNGcm9tU2VydmVyXCIsXHJcbiAgICBdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkhhbmRsZUNvZGVSZXNwb25zZSwgXCJIYW5kbGVDb2RlUmVzcFwiXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5VcGRhdGVUb2tlbkVuZHBvaW50QXV0aG9yaXR5LCBcIlVwZFRFbmRwb2ludEF1dGhcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuQXV0aENsaWVudEFjcXVpcmVUb2tlbiwgXCJBdXRoQ2xpZW50QVRcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuQXV0aENsaWVudEV4ZWN1dGVUb2tlblJlcXVlc3QsIFwiQXV0aENsaWVudEV4ZWNUUmVxXCJdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLkF1dGhDbGllbnRDcmVhdGVUb2tlblJlcXVlc3RCb2R5LFxyXG4gICAgICAgIFwiQXV0aENsaWVudENyZWF0ZVRSZXFCb2R5XCIsXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLkF1dGhDbGllbnRDcmVhdGVRdWVyeVN0cmluZyxcclxuICAgICAgICBcIkF1dGhDbGllbnRDcmVhdGVRdWVyeVN0clwiLFxyXG4gICAgXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5Qb3BUb2tlbkdlbmVyYXRlQ25mLCBcIlBvcFRHZW5DbmZcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuUG9wVG9rZW5HZW5lcmF0ZUtpZCwgXCJQb3BUR2VuS2lkXCJdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkhhbmRsZVNlcnZlclRva2VuUmVzcG9uc2UsIFwiSGFuZGxlU2VydmVyVFJlc1wiXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5EZXNlcmlhbGl6ZVJlc3BvbnNlLCBcIkRlc2VyaWFsaXplUmVzXCJdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLkF1dGhvcml0eUZhY3RvcnlDcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UsXHJcbiAgICAgICAgXCJBdXRoRmFjdENyZWF0ZURpc2NJbnN0XCIsXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLkF1dGhvcml0eVJlc29sdmVFbmRwb2ludHNBc3luYyxcclxuICAgICAgICBcIkF1dGhSZXNvbHZlRW5kcG9pbnRzQXN5bmNcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuQXV0aG9yaXR5UmVzb2x2ZUVuZHBvaW50c0Zyb21Mb2NhbFNvdXJjZXMsXHJcbiAgICAgICAgXCJBdXRoUmVzb2x2ZUVuZHBvaW50c0Zyb21Mb2NhbFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5BdXRob3JpdHlHZXRDbG91ZERpc2NvdmVyeU1ldGFkYXRhRnJvbU5ldHdvcmssXHJcbiAgICAgICAgXCJBdXRoR2V0Q0RNZXRhRnJvbU5ldFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5BdXRob3JpdHlVcGRhdGVDbG91ZERpc2NvdmVyeU1ldGFkYXRhLFxyXG4gICAgICAgIFwiQXV0aFVwZENETWV0YVwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5BdXRob3JpdHlHZXRFbmRwb2ludE1ldGFkYXRhRnJvbU5ldHdvcmssXHJcbiAgICAgICAgXCJBdXRoVXBkQ0RNZXRhRnJvbU5ldFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5BdXRob3JpdHlVcGRhdGVFbmRwb2ludE1ldGFkYXRhLFxyXG4gICAgICAgIFwiQXV0aFVwZEVuZHBvaW50TWV0YVwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5BdXRob3JpdHlVcGRhdGVNZXRhZGF0YVdpdGhSZWdpb25hbEluZm9ybWF0aW9uLFxyXG4gICAgICAgIFwiQXV0aFVwZE1ldGFXaXRoUmVnSW5mb1wiLFxyXG4gICAgXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5SZWdpb25EaXNjb3ZlcnlEZXRlY3RSZWdpb24sIFwiUmVnRGlzY0RldGVjdFJlZ1wiXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5SZWdpb25EaXNjb3ZlcnlHZXRSZWdpb25Gcm9tSU1EUyxcclxuICAgICAgICBcIlJlZ0Rpc2NHZXRSZWdGcm9tSU1EU1wiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5SZWdpb25EaXNjb3ZlcnlHZXRDdXJyZW50VmVyc2lvbixcclxuICAgICAgICBcIlJlZ0Rpc2NHZXRDdXJyZW50VmVyXCIsXHJcbiAgICBdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkFjcXVpcmVUb2tlbkJ5Q29kZUFzeW5jLCBcIkFUQnlDb2RlQXN5bmNcIl0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuR2V0RW5kcG9pbnRNZXRhZGF0YUZyb21OZXR3b3JrLFxyXG4gICAgICAgIFwiR2V0RW5kcG9pbnRNZXRhRnJvbU5ldFwiLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5HZXRDbG91ZERpc2NvdmVyeU1ldGFkYXRhRnJvbU5ldHdvcmtNZWFzdXJlbWVudCxcclxuICAgICAgICBcIkdldENETWV0YUZyb21OZXRcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuSGFuZGxlUmVkaXJlY3RQcm9taXNlTWVhc3VyZW1lbnQsXHJcbiAgICAgICAgXCJIYW5kbGVSZWRpcmVjdFByb21pc2VcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuSGFuZGxlTmF0aXZlUmVkaXJlY3RQcm9taXNlTWVhc3VyZW1lbnQsXHJcbiAgICAgICAgXCJIYW5kbGVOdHZSZWRpcmVjdFByb21pc2VcIixcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgUGVyZm9ybWFuY2VFdmVudHMuVXBkYXRlQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YU1lYXN1cmVtZW50LFxyXG4gICAgICAgIFwiVXBkYXRlQ0RNZXRhXCIsXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLlVzZXJuYW1lUGFzc3dvcmRDbGllbnRBY3F1aXJlVG9rZW4sXHJcbiAgICAgICAgXCJVc2VyUGFzc0NsaWVudEFUXCIsXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLk5hdGl2ZU1lc3NhZ2VIYW5kbGVySGFuZHNoYWtlLFxyXG4gICAgICAgIFwiTnR2TXNnSGFuZGxlckhhbmRzaGFrZVwiLFxyXG4gICAgXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5OYXRpdmVHZW5lcmF0ZUF1dGhSZXN1bHQsIFwiTnR2R2VuQXV0aFJlc1wiXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5SZW1vdmVIaWRkZW5JZnJhbWUsIFwiUmVtb3ZlSGlkZGVuSWZyYW1lXCJdLFxyXG4gICAgW1xyXG4gICAgICAgIFBlcmZvcm1hbmNlRXZlbnRzLkNsZWFyVG9rZW5zQW5kS2V5c1dpdGhDbGFpbXMsXHJcbiAgICAgICAgXCJDbGVhclRBbmRLZXlzV2l0aENsYWltc1wiLFxyXG4gICAgXSxcclxuICAgIFtQZXJmb3JtYW5jZUV2ZW50cy5DYWNoZU1hbmFnZXJHZXRSZWZyZXNoVG9rZW4sIFwiQ2FjaGVNYW5hZ2VyR2V0UlRcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuR2VuZXJhdGVQa2NlQ29kZXMsIFwiR2VuUGtjZUNvZGVzXCJdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLkdlbmVyYXRlQ29kZVZlcmlmaWVyLCBcIkdlbkNvZGVWZXJpZmllclwiXSxcclxuICAgIFtcclxuICAgICAgICBQZXJmb3JtYW5jZUV2ZW50cy5HZW5lcmF0ZUNvZGVDaGFsbGVuZ2VGcm9tVmVyaWZpZXIsXHJcbiAgICAgICAgXCJHZW5Db2RlQ2hhbGxlbmdlRnJvbVZlcmlmaWVyXCIsXHJcbiAgICBdLFxyXG4gICAgW1BlcmZvcm1hbmNlRXZlbnRzLlNoYTI1NkRpZ2VzdCwgXCJTaGEyNTZEaWdlc3RcIl0sXHJcbiAgICBbUGVyZm9ybWFuY2VFdmVudHMuR2V0UmFuZG9tVmFsdWVzLCBcIkdldFJhbmRvbVZhbHVlc1wiXSxcclxuXSk7XHJcbi8qKlxyXG4gKiBTdGF0ZSBvZiB0aGUgcGVyZm9ybWFuY2UgZXZlbnQuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGVudW0ge251bWJlcn1cclxuICovXHJcbmNvbnN0IFBlcmZvcm1hbmNlRXZlbnRTdGF0dXMgPSB7XHJcbiAgICBOb3RTdGFydGVkOiAwLFxyXG4gICAgSW5Qcm9ncmVzczogMSxcclxuICAgIENvbXBsZXRlZDogMixcclxufTtcclxuY29uc3QgSW50RmllbGRzID0gbmV3IFNldChbXHJcbiAgICBcImFjY2Vzc1Rva2VuU2l6ZVwiLFxyXG4gICAgXCJkdXJhdGlvbk1zXCIsXHJcbiAgICBcImlkVG9rZW5TaXplXCIsXHJcbiAgICBcIm1hdHNTaWxlbnRTdGF0dXNcIixcclxuICAgIFwibWF0c0h0dHBTdGF0dXNcIixcclxuICAgIFwicmVmcmVzaFRva2VuU2l6ZVwiLFxyXG4gICAgXCJxdWV1ZWRUaW1lTXNcIixcclxuICAgIFwic3RhcnRUaW1lTXNcIixcclxuICAgIFwic3RhdHVzXCIsXHJcbiAgICBcIm11bHRpTWF0Y2hlZEFUXCIsXHJcbiAgICBcIm11bHRpTWF0Y2hlZElEXCIsXHJcbiAgICBcIm11bHRpTWF0Y2hlZFJUXCIsXHJcbl0pO1xuXG5leHBvcnQgeyBJbnRGaWVsZHMsIFBlcmZvcm1hbmNlRXZlbnRBYmJyZXZpYXRpb25zLCBQZXJmb3JtYW5jZUV2ZW50U3RhdHVzLCBQZXJmb3JtYW5jZUV2ZW50cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGVyZm9ybWFuY2VFdmVudC5tanMubWFwXG4iXSwibmFtZXMiOlsiUGVyZm9ybWFuY2VFdmVudHMiLCJBY3F1aXJlVG9rZW5CeUNvZGUiLCJBY3F1aXJlVG9rZW5CeVJlZnJlc2hUb2tlbiIsIkFjcXVpcmVUb2tlblNpbGVudCIsIkFjcXVpcmVUb2tlblNpbGVudEFzeW5jIiwiQWNxdWlyZVRva2VuUG9wdXAiLCJBY3F1aXJlVG9rZW5QcmVSZWRpcmVjdCIsIkFjcXVpcmVUb2tlblJlZGlyZWN0IiwiQ3J5cHRvT3B0c0dldFB1YmxpY0tleVRodW1icHJpbnQiLCJDcnlwdG9PcHRzU2lnbkp3dCIsIlNpbGVudENhY2hlQ2xpZW50QWNxdWlyZVRva2VuIiwiU2lsZW50SWZyYW1lQ2xpZW50QWNxdWlyZVRva2VuIiwiQXdhaXRDb25jdXJyZW50SWZyYW1lIiwiU2lsZW50UmVmcmVzaENsaWVudEFjcXVpcmVUb2tlbiIsIlNzb1NpbGVudCIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXREaXNjb3ZlcmVkQXV0aG9yaXR5IiwiRmV0Y2hBY2NvdW50SWRXaXRoTmF0aXZlQnJva2VyIiwiTmF0aXZlSW50ZXJhY3Rpb25DbGllbnRBY3F1aXJlVG9rZW4iLCJCYXNlQ2xpZW50Q3JlYXRlVG9rZW5SZXF1ZXN0SGVhZGVycyIsIk5ldHdvcmtDbGllbnRTZW5kUG9zdFJlcXVlc3RBc3luYyIsIlJlZnJlc2hUb2tlbkNsaWVudEV4ZWN1dGVQb3N0VG9Ub2tlbkVuZHBvaW50IiwiQXV0aG9yaXphdGlvbkNvZGVDbGllbnRFeGVjdXRlUG9zdFRvVG9rZW5FbmRwb2ludCIsIkJyb2tlckhhbmRoc2hha2UiLCJBY3F1aXJlVG9rZW5CeVJlZnJlc2hUb2tlbkluQnJva2VyIiwiQWNxdWlyZVRva2VuQnlCcm9rZXIiLCJSZWZyZXNoVG9rZW5DbGllbnRFeGVjdXRlVG9rZW5SZXF1ZXN0IiwiUmVmcmVzaFRva2VuQ2xpZW50QWNxdWlyZVRva2VuIiwiUmVmcmVzaFRva2VuQ2xpZW50QWNxdWlyZVRva2VuV2l0aENhY2hlZFJlZnJlc2hUb2tlbiIsIlJlZnJlc2hUb2tlbkNsaWVudEFjcXVpcmVUb2tlbkJ5UmVmcmVzaFRva2VuIiwiUmVmcmVzaFRva2VuQ2xpZW50Q3JlYXRlVG9rZW5SZXF1ZXN0Qm9keSIsIkFjcXVpcmVUb2tlbkZyb21DYWNoZSIsIlNpbGVudEZsb3dDbGllbnRBY3F1aXJlQ2FjaGVkVG9rZW4iLCJTaWxlbnRGbG93Q2xpZW50R2VuZXJhdGVSZXN1bHRGcm9tQ2FjaGVSZWNvcmQiLCJBY3F1aXJlVG9rZW5CeVNpbGVudElmcmFtZSIsIkluaXRpYWxpemVCYXNlUmVxdWVzdCIsIkluaXRpYWxpemVTaWxlbnRSZXF1ZXN0IiwiSW5pdGlhbGl6ZUNsaWVudEFwcGxpY2F0aW9uIiwiU2lsZW50SWZyYW1lQ2xpZW50VG9rZW5IZWxwZXIiLCJTaWxlbnRIYW5kbGVySW5pdGlhdGVBdXRoUmVxdWVzdCIsIlNpbGVudEhhbmRsZXJNb25pdG9ySWZyYW1lRm9ySGFzaCIsIlNpbGVudEhhbmRsZXJMb2FkRnJhbWUiLCJTaWxlbnRIYW5kbGVyTG9hZEZyYW1lU3luYyIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRDcmVhdGVBdXRoQ29kZUNsaWVudCIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXRDbGllbnRDb25maWd1cmF0aW9uIiwiU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudEluaXRpYWxpemVBdXRob3JpemF0aW9uUmVxdWVzdCIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRJbml0aWFsaXplQXV0aG9yaXphdGlvbkNvZGVSZXF1ZXN0IiwiR2V0QXV0aENvZGVVcmwiLCJIYW5kbGVDb2RlUmVzcG9uc2VGcm9tU2VydmVyIiwiSGFuZGxlQ29kZVJlc3BvbnNlIiwiVXBkYXRlVG9rZW5FbmRwb2ludEF1dGhvcml0eSIsIkF1dGhDbGllbnRBY3F1aXJlVG9rZW4iLCJBdXRoQ2xpZW50RXhlY3V0ZVRva2VuUmVxdWVzdCIsIkF1dGhDbGllbnRDcmVhdGVUb2tlblJlcXVlc3RCb2R5IiwiQXV0aENsaWVudENyZWF0ZVF1ZXJ5U3RyaW5nIiwiUG9wVG9rZW5HZW5lcmF0ZUNuZiIsIlBvcFRva2VuR2VuZXJhdGVLaWQiLCJIYW5kbGVTZXJ2ZXJUb2tlblJlc3BvbnNlIiwiRGVzZXJpYWxpemVSZXNwb25zZSIsIkF1dGhvcml0eUZhY3RvcnlDcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UiLCJBdXRob3JpdHlSZXNvbHZlRW5kcG9pbnRzQXN5bmMiLCJBdXRob3JpdHlSZXNvbHZlRW5kcG9pbnRzRnJvbUxvY2FsU291cmNlcyIsIkF1dGhvcml0eUdldENsb3VkRGlzY292ZXJ5TWV0YWRhdGFGcm9tTmV0d29yayIsIkF1dGhvcml0eVVwZGF0ZUNsb3VkRGlzY292ZXJ5TWV0YWRhdGEiLCJBdXRob3JpdHlHZXRFbmRwb2ludE1ldGFkYXRhRnJvbU5ldHdvcmsiLCJBdXRob3JpdHlVcGRhdGVFbmRwb2ludE1ldGFkYXRhIiwiQXV0aG9yaXR5VXBkYXRlTWV0YWRhdGFXaXRoUmVnaW9uYWxJbmZvcm1hdGlvbiIsIlJlZ2lvbkRpc2NvdmVyeURldGVjdFJlZ2lvbiIsIlJlZ2lvbkRpc2NvdmVyeUdldFJlZ2lvbkZyb21JTURTIiwiUmVnaW9uRGlzY292ZXJ5R2V0Q3VycmVudFZlcnNpb24iLCJBY3F1aXJlVG9rZW5CeUNvZGVBc3luYyIsIkdldEVuZHBvaW50TWV0YWRhdGFGcm9tTmV0d29yayIsIkdldENsb3VkRGlzY292ZXJ5TWV0YWRhdGFGcm9tTmV0d29ya01lYXN1cmVtZW50IiwiSGFuZGxlUmVkaXJlY3RQcm9taXNlTWVhc3VyZW1lbnQiLCJIYW5kbGVOYXRpdmVSZWRpcmVjdFByb21pc2VNZWFzdXJlbWVudCIsIlVwZGF0ZUNsb3VkRGlzY292ZXJ5TWV0YWRhdGFNZWFzdXJlbWVudCIsIlVzZXJuYW1lUGFzc3dvcmRDbGllbnRBY3F1aXJlVG9rZW4iLCJOYXRpdmVNZXNzYWdlSGFuZGxlckhhbmRzaGFrZSIsIk5hdGl2ZUdlbmVyYXRlQXV0aFJlc3VsdCIsIlJlbW92ZUhpZGRlbklmcmFtZSIsIkNsZWFyVG9rZW5zQW5kS2V5c1dpdGhDbGFpbXMiLCJDYWNoZU1hbmFnZXJHZXRSZWZyZXNoVG9rZW4iLCJHZW5lcmF0ZVBrY2VDb2RlcyIsIkdlbmVyYXRlQ29kZVZlcmlmaWVyIiwiR2VuZXJhdGVDb2RlQ2hhbGxlbmdlRnJvbVZlcmlmaWVyIiwiU2hhMjU2RGlnZXN0IiwiR2V0UmFuZG9tVmFsdWVzIiwiUGVyZm9ybWFuY2VFdmVudEFiYnJldmlhdGlvbnMiLCJNYXAiLCJQZXJmb3JtYW5jZUV2ZW50U3RhdHVzIiwiTm90U3RhcnRlZCIsIkluUHJvZ3Jlc3MiLCJDb21wbGV0ZWQiLCJJbnRGaWVsZHMiLCJTZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StubPerformanceClient: () => (/* binding */ StubPerformanceClient),\n/* harmony export */   StubPerformanceMeasurement: () => (/* binding */ StubPerformanceMeasurement)\n/* harmony export */ });\n/* harmony import */ var _PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class StubPerformanceMeasurement {\n    startMeasurement() {\n        return;\n    }\n    endMeasurement() {\n        return;\n    }\n    flushMeasurement() {\n        return null;\n    }\n}\nclass StubPerformanceClient {\n    generateId() {\n        return \"callback-id\";\n    }\n    startMeasurement(measureName, correlationId) {\n        return {\n            end: ()=>null,\n            discard: ()=>{},\n            add: ()=>{},\n            increment: ()=>{},\n            event: {\n                eventId: this.generateId(),\n                status: _PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEventStatus.InProgress,\n                authority: \"\",\n                libraryName: \"\",\n                libraryVersion: \"\",\n                clientId: \"\",\n                name: measureName,\n                startTimeMs: Date.now(),\n                correlationId: correlationId || \"\"\n            },\n            measurement: new StubPerformanceMeasurement()\n        };\n    }\n    startPerformanceMeasurement() {\n        return new StubPerformanceMeasurement();\n    }\n    calculateQueuedTime() {\n        return 0;\n    }\n    addQueueMeasurement() {\n        return;\n    }\n    setPreQueueTime() {\n        return;\n    }\n    endMeasurement() {\n        return null;\n    }\n    discardMeasurements() {\n        return;\n    }\n    removePerformanceCallback() {\n        return true;\n    }\n    addPerformanceCallback() {\n        return \"\";\n    }\n    emitEvents() {\n        return;\n    }\n    addFields() {\n        return;\n    }\n    incrementFields() {\n        return;\n    }\n    cacheEventByCorrelationId() {\n        return;\n    }\n}\n //# sourceMappingURL=StubPerformanceClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdGVsZW1ldHJ5L3BlcmZvcm1hbmNlL1N0dWJQZXJmb3JtYW5jZUNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ2dFO0FBRWhFOzs7Q0FHQyxHQUNELE1BQU1DO0lBQ0ZDLG1CQUFtQjtRQUNmO0lBQ0o7SUFDQUMsaUJBQWlCO1FBQ2I7SUFDSjtJQUNBQyxtQkFBbUI7UUFDZixPQUFPO0lBQ1g7QUFDSjtBQUNBLE1BQU1DO0lBQ0ZDLGFBQWE7UUFDVCxPQUFPO0lBQ1g7SUFDQUosaUJBQWlCSyxXQUFXLEVBQUVDLGFBQWEsRUFBRTtRQUN6QyxPQUFPO1lBQ0hDLEtBQUssSUFBTTtZQUNYQyxTQUFTLEtBQVE7WUFDakJDLEtBQUssS0FBUTtZQUNiQyxXQUFXLEtBQVE7WUFDbkJDLE9BQU87Z0JBQ0hDLFNBQVMsSUFBSSxDQUFDUixVQUFVO2dCQUN4QlMsUUFBUWYseUVBQXNCQSxDQUFDZ0IsVUFBVTtnQkFDekNDLFdBQVc7Z0JBQ1hDLGFBQWE7Z0JBQ2JDLGdCQUFnQjtnQkFDaEJDLFVBQVU7Z0JBQ1ZDLE1BQU1kO2dCQUNOZSxhQUFhQyxLQUFLQyxHQUFHO2dCQUNyQmhCLGVBQWVBLGlCQUFpQjtZQUNwQztZQUNBaUIsYUFBYSxJQUFJeEI7UUFDckI7SUFDSjtJQUNBeUIsOEJBQThCO1FBQzFCLE9BQU8sSUFBSXpCO0lBQ2Y7SUFDQTBCLHNCQUFzQjtRQUNsQixPQUFPO0lBQ1g7SUFDQUMsc0JBQXNCO1FBQ2xCO0lBQ0o7SUFDQUMsa0JBQWtCO1FBQ2Q7SUFDSjtJQUNBMUIsaUJBQWlCO1FBQ2IsT0FBTztJQUNYO0lBQ0EyQixzQkFBc0I7UUFDbEI7SUFDSjtJQUNBQyw0QkFBNEI7UUFDeEIsT0FBTztJQUNYO0lBQ0FDLHlCQUF5QjtRQUNyQixPQUFPO0lBQ1g7SUFDQUMsYUFBYTtRQUNUO0lBQ0o7SUFDQUMsWUFBWTtRQUNSO0lBQ0o7SUFDQUMsa0JBQWtCO1FBQ2Q7SUFDSjtJQUNBQyw0QkFBNEI7UUFDeEI7SUFDSjtBQUNKO0FBRTZELENBQzdELGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3RlbGVtZXRyeS9wZXJmb3JtYW5jZS9TdHViUGVyZm9ybWFuY2VDbGllbnQubWpzPzMzMWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBQZXJmb3JtYW5jZUV2ZW50U3RhdHVzIH0gZnJvbSAnLi9QZXJmb3JtYW5jZUV2ZW50Lm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBTdHViUGVyZm9ybWFuY2VNZWFzdXJlbWVudCB7XHJcbiAgICBzdGFydE1lYXN1cmVtZW50KCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGVuZE1lYXN1cmVtZW50KCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGZsdXNoTWVhc3VyZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgU3R1YlBlcmZvcm1hbmNlQ2xpZW50IHtcclxuICAgIGdlbmVyYXRlSWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiY2FsbGJhY2staWRcIjtcclxuICAgIH1cclxuICAgIHN0YXJ0TWVhc3VyZW1lbnQobWVhc3VyZU5hbWUsIGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBlbmQ6ICgpID0+IG51bGwsXHJcbiAgICAgICAgICAgIGRpc2NhcmQ6ICgpID0+IHsgfSxcclxuICAgICAgICAgICAgYWRkOiAoKSA9PiB7IH0sXHJcbiAgICAgICAgICAgIGluY3JlbWVudDogKCkgPT4geyB9LFxyXG4gICAgICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRJZDogdGhpcy5nZW5lcmF0ZUlkKCksXHJcbiAgICAgICAgICAgICAgICBzdGF0dXM6IFBlcmZvcm1hbmNlRXZlbnRTdGF0dXMuSW5Qcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgIGF1dGhvcml0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIGxpYnJhcnlOYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgbGlicmFyeVZlcnNpb246IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRJZDogXCJcIixcclxuICAgICAgICAgICAgICAgIG5hbWU6IG1lYXN1cmVOYW1lLFxyXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lTXM6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBjb3JyZWxhdGlvbklkIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1lYXN1cmVtZW50OiBuZXcgU3R1YlBlcmZvcm1hbmNlTWVhc3VyZW1lbnQoKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgc3RhcnRQZXJmb3JtYW5jZU1lYXN1cmVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3R1YlBlcmZvcm1hbmNlTWVhc3VyZW1lbnQoKTtcclxuICAgIH1cclxuICAgIGNhbGN1bGF0ZVF1ZXVlZFRpbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBhZGRRdWV1ZU1lYXN1cmVtZW50KCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNldFByZVF1ZXVlVGltZSgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBlbmRNZWFzdXJlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGRpc2NhcmRNZWFzdXJlbWVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlUGVyZm9ybWFuY2VDYWxsYmFjaygpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGFkZFBlcmZvcm1hbmNlQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcbiAgICBlbWl0RXZlbnRzKCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGFkZEZpZWxkcygpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpbmNyZW1lbnRGaWVsZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY2FjaGVFdmVudEJ5Q29ycmVsYXRpb25JZCgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgU3R1YlBlcmZvcm1hbmNlQ2xpZW50LCBTdHViUGVyZm9ybWFuY2VNZWFzdXJlbWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3R1YlBlcmZvcm1hbmNlQ2xpZW50Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJQZXJmb3JtYW5jZUV2ZW50U3RhdHVzIiwiU3R1YlBlcmZvcm1hbmNlTWVhc3VyZW1lbnQiLCJzdGFydE1lYXN1cmVtZW50IiwiZW5kTWVhc3VyZW1lbnQiLCJmbHVzaE1lYXN1cmVtZW50IiwiU3R1YlBlcmZvcm1hbmNlQ2xpZW50IiwiZ2VuZXJhdGVJZCIsIm1lYXN1cmVOYW1lIiwiY29ycmVsYXRpb25JZCIsImVuZCIsImRpc2NhcmQiLCJhZGQiLCJpbmNyZW1lbnQiLCJldmVudCIsImV2ZW50SWQiLCJzdGF0dXMiLCJJblByb2dyZXNzIiwiYXV0aG9yaXR5IiwibGlicmFyeU5hbWUiLCJsaWJyYXJ5VmVyc2lvbiIsImNsaWVudElkIiwibmFtZSIsInN0YXJ0VGltZU1zIiwiRGF0ZSIsIm5vdyIsIm1lYXN1cmVtZW50Iiwic3RhcnRQZXJmb3JtYW5jZU1lYXN1cmVtZW50IiwiY2FsY3VsYXRlUXVldWVkVGltZSIsImFkZFF1ZXVlTWVhc3VyZW1lbnQiLCJzZXRQcmVRdWV1ZVRpbWUiLCJkaXNjYXJkTWVhc3VyZW1lbnRzIiwicmVtb3ZlUGVyZm9ybWFuY2VDYWxsYmFjayIsImFkZFBlcmZvcm1hbmNlQ2FsbGJhY2siLCJlbWl0RXZlbnRzIiwiYWRkRmllbGRzIiwiaW5jcmVtZW50RmllbGRzIiwiY2FjaGVFdmVudEJ5Q29ycmVsYXRpb25JZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerTelemetryManager: () => (/* binding */ ServerTelemetryManager)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const skuGroupSeparator = \",\";\nconst skuValueSeparator = \"|\";\nfunction makeExtraSkuString(params) {\n    const { skus, libraryName, libraryVersion, extensionName, extensionVersion } = params;\n    const skuMap = new Map([\n        [\n            0,\n            [\n                libraryName,\n                libraryVersion\n            ]\n        ],\n        [\n            2,\n            [\n                extensionName,\n                extensionVersion\n            ]\n        ]\n    ]);\n    let skuArr = [];\n    if (skus?.length) {\n        skuArr = skus.split(skuGroupSeparator);\n        // Ignore invalid input sku param\n        if (skuArr.length < 4) {\n            return skus;\n        }\n    } else {\n        skuArr = Array.from({\n            length: 4\n        }, ()=>skuValueSeparator);\n    }\n    skuMap.forEach((value, key)=>{\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\n            setSku({\n                skuArr,\n                index: key,\n                skuName: value[0],\n                skuVersion: value[1]\n            });\n        }\n    });\n    return skuArr.join(skuGroupSeparator);\n}\nfunction setSku(params) {\n    const { skuArr, index, skuName, skuVersion } = params;\n    if (index >= skuArr.length) {\n        return;\n    }\n    skuArr[index] = [\n        skuName,\n        skuVersion\n    ].join(skuValueSeparator);\n}\n/** @internal */ class ServerTelemetryManager {\n    constructor(telemetryRequest, cacheManager){\n        this.cacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheOutcome.NOT_APPLICABLE;\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.telemetryCacheKey = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n    }\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */ generateCurrentRequestHeaderValue() {\n        const request = `${this.apiId}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFieldsArr = [\n            this.wrapperSKU,\n            this.wrapperVer\n        ];\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\n        if (nativeBrokerErrorCode?.length) {\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\n        }\n        const platformFields = platformFieldsArr.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */ generateLastRequestHeaderValue() {\n        const lastRequests = this.getLastRequests();\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors.slice(0, maxErrors).join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [\n            errorCount,\n            overflow\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */ cacheFailedRequest(error) {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                } else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                } else {\n                    lastRequests.errors.push(error.toString());\n                }\n            } else {\n                lastRequests.errors.push(error.toString());\n            }\n        } else {\n            lastRequests.errors.push(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return;\n    }\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */ incrementCacheHits() {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */ getLastRequests() {\n        const initialValue = {\n            failedRequests: [],\n            errors: [],\n            cacheHits: 0\n        };\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n        return lastRequests || initialValue;\n    }\n    /**\r\n     * Remove server telemetry cache entry\r\n     */ clearTelemetryCache() {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = {\n                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\n                errors: lastRequests.errors.slice(numErrorsFlushed),\n                cacheHits: 0\n            };\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */ static maxErrorsToSend(serverTelemetryEntity) {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for(i = 0; i < errorCount; i++){\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n            if (dataSize < _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n        return maxErrors;\n    }\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */ getRegionDiscoveryFields() {\n        const regionDiscoveryFields = [];\n        regionDiscoveryFields.push(this.regionUsed || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionOutcome || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        return regionDiscoveryFields.join(\",\");\n    }\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */ updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n    /**\r\n     * Set cache outcome\r\n     */ setCacheOutcome(cacheOutcome) {\n        this.cacheOutcome = cacheOutcome;\n    }\n    setNativeBrokerErrorCode(errorCode) {\n        const lastRequests = this.getLastRequests();\n        lastRequests.nativeBrokerErrorCode = errorCode;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    }\n    getNativeBrokerErrorCode() {\n        return this.getLastRequests().nativeBrokerErrorCode;\n    }\n    clearNativeBrokerErrorCode() {\n        const lastRequests = this.getLastRequests();\n        delete lastRequests.nativeBrokerErrorCode;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    }\n    static makeExtraSkuString(params) {\n        return makeExtraSkuString(params);\n    }\n}\n //# sourceMappingURL=ServerTelemetryManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/url/UrlString.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UrlString: () => (/* binding */ UrlString)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_UrlUtils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/UrlUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Url object class which can perform various transformations on url strings.\r\n */ class UrlString {\n    get urlString() {\n        return this._urlString;\n    }\n    constructor(url){\n        this._urlString = url;\n        if (!this._urlString) {\n            // Throws error if url is empty\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlEmptyError);\n        }\n        if (!url.includes(\"#\")) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */ static canonicalizeUri(url) {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n            if (_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            } else if (_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n            if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n            return lowerCaseUrl;\n        }\n        return url;\n    }\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */ validateAsUri() {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Throw error if uri is insecure.\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.authorityUriInsecure);\n        }\n    }\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */ static appendQueryString(url, queryString) {\n        if (!queryString) {\n            return url;\n        }\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n    }\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */ static removeHashFromUrl(url) {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */ replaceTenantPath(tenantId) {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (tenantId && pathArray.length !== 0 && (pathArray[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AADAuthorityConstants.COMMON || pathArray[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AADAuthorityConstants.ORGANIZATIONS)) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */ getUrlComponents() {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7]\n        };\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val)=>val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n        if (urlComponents.QueryString && urlComponents.QueryString.endsWith(\"/\")) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n        }\n        return urlComponents;\n    }\n    static getDomainFromUrl(url) {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n        const match = url.match(regEx);\n        if (!match) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        return match[2];\n    }\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\n        if (relativeUrl[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n        }\n        return relativeUrl;\n    }\n    static constructAuthorityUriFromObject(urlObject) {\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n    }\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     * @deprecated This API will be removed in a future version\r\n     */ static hashContainsKnownProperties(response) {\n        return !!(0,_utils_UrlUtils_mjs__WEBPACK_IMPORTED_MODULE_4__.getDeserializedResponse)(response);\n    }\n}\n //# sourceMappingURL=UrlString.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClientAssertion: () => (/* binding */ getClientAssertion)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ async function getClientAssertion(clientAssertion, clientId, tokenEndpoint) {\n    if (typeof clientAssertion === \"string\") {\n        return clientAssertion;\n    } else {\n        const config = {\n            clientId: clientId,\n            tokenEndpoint: tokenEndpoint\n        };\n        return clientAssertion(config);\n    }\n}\n //# sourceMappingURL=ClientAssertionUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvQ2xpZW50QXNzZXJ0aW9uVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxlQUFlQSxtQkFBbUJDLGVBQWUsRUFBRUMsUUFBUSxFQUFFQyxhQUFhO0lBQ3RFLElBQUksT0FBT0Ysb0JBQW9CLFVBQVU7UUFDckMsT0FBT0E7SUFDWCxPQUNLO1FBQ0QsTUFBTUcsU0FBUztZQUNYRixVQUFVQTtZQUNWQyxlQUFlQTtRQUNuQjtRQUNBLE9BQU9GLGdCQUFnQkc7SUFDM0I7QUFDSjtBQUU4QixDQUM5QixpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC91dGlscy9DbGllbnRBc3NlcnRpb25VdGlscy5tanM/MWIwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRDbGllbnRBc3NlcnRpb24oY2xpZW50QXNzZXJ0aW9uLCBjbGllbnRJZCwgdG9rZW5FbmRwb2ludCkge1xyXG4gICAgaWYgKHR5cGVvZiBjbGllbnRBc3NlcnRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gY2xpZW50QXNzZXJ0aW9uO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xyXG4gICAgICAgICAgICBjbGllbnRJZDogY2xpZW50SWQsXHJcbiAgICAgICAgICAgIHRva2VuRW5kcG9pbnQ6IHRva2VuRW5kcG9pbnQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2xpZW50QXNzZXJ0aW9uKGNvbmZpZyk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgZ2V0Q2xpZW50QXNzZXJ0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbGllbnRBc3NlcnRpb25VdGlscy5tanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0Q2xpZW50QXNzZXJ0aW9uIiwiY2xpZW50QXNzZXJ0aW9uIiwiY2xpZW50SWQiLCJ0b2tlbkVuZHBvaW50IiwiY29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/Constants.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AADAuthorityConstants: () => (/* binding */ AADAuthorityConstants),\n/* harmony export */   APP_METADATA: () => (/* binding */ APP_METADATA),\n/* harmony export */   AUTHORITY_METADATA_CONSTANTS: () => (/* binding */ AUTHORITY_METADATA_CONSTANTS),\n/* harmony export */   AuthenticationScheme: () => (/* binding */ AuthenticationScheme),\n/* harmony export */   AuthorityMetadataSource: () => (/* binding */ AuthorityMetadataSource),\n/* harmony export */   CLIENT_INFO: () => (/* binding */ CLIENT_INFO),\n/* harmony export */   CacheAccountType: () => (/* binding */ CacheAccountType),\n/* harmony export */   CacheOutcome: () => (/* binding */ CacheOutcome),\n/* harmony export */   CacheType: () => (/* binding */ CacheType),\n/* harmony export */   ClaimsRequestKeys: () => (/* binding */ ClaimsRequestKeys),\n/* harmony export */   CodeChallengeMethodValues: () => (/* binding */ CodeChallengeMethodValues),\n/* harmony export */   Constants: () => (/* binding */ Constants),\n/* harmony export */   CredentialType: () => (/* binding */ CredentialType),\n/* harmony export */   DEFAULT_TOKEN_RENEWAL_OFFSET_SEC: () => (/* binding */ DEFAULT_TOKEN_RENEWAL_OFFSET_SEC),\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   GrantType: () => (/* binding */ GrantType),\n/* harmony export */   HeaderNames: () => (/* binding */ HeaderNames),\n/* harmony export */   HttpStatus: () => (/* binding */ HttpStatus),\n/* harmony export */   JsonWebTokenTypes: () => (/* binding */ JsonWebTokenTypes),\n/* harmony export */   OIDC_DEFAULT_SCOPES: () => (/* binding */ OIDC_DEFAULT_SCOPES),\n/* harmony export */   OIDC_SCOPES: () => (/* binding */ OIDC_SCOPES),\n/* harmony export */   ONE_DAY_IN_MS: () => (/* binding */ ONE_DAY_IN_MS),\n/* harmony export */   PasswordGrantConstants: () => (/* binding */ PasswordGrantConstants),\n/* harmony export */   PersistentCacheKeys: () => (/* binding */ PersistentCacheKeys),\n/* harmony export */   PromptValue: () => (/* binding */ PromptValue),\n/* harmony export */   RegionDiscoveryOutcomes: () => (/* binding */ RegionDiscoveryOutcomes),\n/* harmony export */   RegionDiscoverySources: () => (/* binding */ RegionDiscoverySources),\n/* harmony export */   ResponseCodes: () => (/* binding */ ResponseCodes),\n/* harmony export */   ResponseMode: () => (/* binding */ ResponseMode),\n/* harmony export */   SERVER_TELEM_CONSTANTS: () => (/* binding */ SERVER_TELEM_CONSTANTS),\n/* harmony export */   Separators: () => (/* binding */ Separators),\n/* harmony export */   ServerResponseType: () => (/* binding */ ServerResponseType),\n/* harmony export */   THE_FAMILY_ID: () => (/* binding */ THE_FAMILY_ID),\n/* harmony export */   ThrottlingConstants: () => (/* binding */ ThrottlingConstants)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    DSTS: \"dstsv2\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // CIAM URL\n    CIAM_AUTH_URL: \".ciamlogin.com\",\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    NOT_APPLICABLE: \"N/A\",\n    NOT_AVAILABLE: \"Not Available\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\n        \"login.microsoftonline.com\",\n        \"login.windows.net\",\n        \"login.microsoft.com\",\n        \"sts.windows.net\"\n    ],\n    TOKEN_RESPONSE_TYPE: \"token\",\n    ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n    SHR_NONCE_VALIDITY: 240,\n    INVALID_INSTANCE: \"invalid_instance\"\n};\nconst HttpStatus = {\n    SUCCESS: 200,\n    SUCCESS_RANGE_START: 200,\n    SUCCESS_RANGE_END: 299,\n    REDIRECT: 302,\n    CLIENT_ERROR: 400,\n    CLIENT_ERROR_RANGE_START: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    REQUEST_TIMEOUT: 408,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_ERROR_RANGE_END: 499,\n    SERVER_ERROR: 500,\n    SERVER_ERROR_RANGE_START: 500,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504,\n    SERVER_ERROR_RANGE_END: 599,\n    MULTI_SIDED_ERROR: 600\n};\nconst OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE\n];\nconst OIDC_SCOPES = [\n    ...OIDC_DEFAULT_SCOPES,\n    Constants.EMAIL_SCOPE\n];\n/**\r\n * Request header names\r\n */ const HeaderNames = {\n    CONTENT_TYPE: \"Content-Type\",\n    CONTENT_LENGTH: \"Content-Length\",\n    RETRY_AFTER: \"Retry-After\",\n    CCS_HEADER: \"X-AnchorMailbox\",\n    WWWAuthenticate: \"WWW-Authenticate\",\n    AuthenticationInfo: \"Authentication-Info\",\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\n    X_MS_HTTP_VERSION: \"x-ms-httpver\"\n};\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */ const PersistentCacheKeys = {\n    ID_TOKEN: \"idtoken\",\n    CLIENT_INFO: \"client.info\",\n    ADAL_ID_TOKEN: \"adal.idtoken\",\n    ERROR: \"error\",\n    ERROR_DESC: \"error.description\",\n    ACTIVE_ACCOUNT: \"active-account\",\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\"\n};\n/**\r\n * String constants related to AAD Authority\r\n */ const AADAuthorityConstants = {\n    COMMON: \"common\",\n    ORGANIZATIONS: \"organizations\",\n    CONSUMERS: \"consumers\"\n};\n/**\r\n * Claims request keys\r\n */ const ClaimsRequestKeys = {\n    ACCESS_TOKEN: \"access_token\",\n    XMS_CC: \"xms_cc\"\n};\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */ const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\",\n    NO_SESSION: \"no_session\"\n};\n/**\r\n * allowed values for codeVerifier\r\n */ const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\"\n};\n/**\r\n * allowed values for server response type\r\n */ const ServerResponseType = {\n    QUERY: \"query\",\n    FRAGMENT: \"fragment\"\n};\n/**\r\n * allowed values for response_mode\r\n */ const ResponseMode = {\n    ...ServerResponseType,\n    FORM_POST: \"form_post\"\n};\n/**\r\n * allowed grant_type\r\n */ const GrantType = {\n    IMPLICIT_GRANT: \"implicit\",\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\n    DEVICE_CODE_GRANT: \"device_code\",\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n};\n/**\r\n * Account types in Cache\r\n */ const CacheAccountType = {\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\n    GENERIC_ACCOUNT_TYPE: \"Generic\"\n};\n/**\r\n * Separators used in cache\r\n */ const Separators = {\n    CACHE_KEY_SEPARATOR: \"-\",\n    CLIENT_INFO_SEPARATOR: \".\"\n};\n/**\r\n * Credential Type stored in the cache\r\n */ const CredentialType = {\n    ID_TOKEN: \"IdToken\",\n    ACCESS_TOKEN: \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN: \"RefreshToken\"\n};\n/**\r\n * Combine all cache types\r\n */ const CacheType = {\n    ADFS: 1001,\n    MSA: 1002,\n    MSSTS: 1003,\n    GENERIC: 1004,\n    ACCESS_TOKEN: 2001,\n    REFRESH_TOKEN: 2002,\n    ID_TOKEN: 2003,\n    APP_METADATA: 3001,\n    UNDEFINED: 9999\n};\n/**\r\n * More Cache related constants\r\n */ const APP_METADATA = \"appmetadata\";\nconst CLIENT_INFO = \"client_info\";\nconst THE_FAMILY_ID = \"1\";\nconst AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24\n};\nconst AuthorityMetadataSource = {\n    CONFIG: \"config\",\n    CACHE: \"cache\",\n    NETWORK: \"network\",\n    HARDCODED_VALUES: \"hardcoded_values\"\n};\nconst SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80,\n    MAX_LAST_HEADER_BYTES: 330,\n    MAX_CACHED_ERRORS: 50,\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */ const AuthenticationScheme = {\n    BEARER: \"Bearer\",\n    POP: \"pop\",\n    SSH: \"ssh-cert\"\n};\n/**\r\n * Constants related to throttling\r\n */ const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nconst Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */ const PasswordGrantConstants = {\n    username: \"username\",\n    password: \"password\"\n};\n/**\r\n * Response codes\r\n */ const ResponseCodes = {\n    httpSuccess: 200,\n    httpBadRequest: 400\n};\n/**\r\n * Region Discovery Sources\r\n */ const RegionDiscoverySources = {\n    FAILED_AUTO_DETECTION: \"1\",\n    INTERNAL_CACHE: \"2\",\n    ENVIRONMENT_VARIABLE: \"3\",\n    IMDS: \"4\"\n};\n/**\r\n * Region Discovery Outcomes\r\n */ const RegionDiscoveryOutcomes = {\n    CONFIGURED_MATCHES_DETECTED: \"1\",\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\n    CONFIGURED_NOT_DETECTED: \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\"\n};\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */ const CacheOutcome = {\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\n    NOT_APPLICABLE: \"0\",\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\n    // When the token request goes to the identity provider because no cached access token exists\n    NO_CACHED_ACCESS_TOKEN: \"2\",\n    // When the token request goes to the identity provider because cached access token expired\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n    PROACTIVELY_REFRESHED: \"4\"\n};\nconst JsonWebTokenTypes = {\n    Jwt: \"JWT\",\n    Jwk: \"JWK\",\n    Pop: \"pop\"\n};\nconst ONE_DAY_IN_MS = 86400000;\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n //# sourceMappingURL=Constants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   invokeAsync: () => (/* binding */ invokeAsync)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId)=>{\n    return (...args)=>{\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields({\n                [eventCount]: 1\n            }, correlationId);\n        }\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        } catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false\n            }, e);\n            throw e;\n        }\n    };\n};\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId)=>{\n    return (...args)=>{\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields({\n                [eventCount]: 1\n            }, correlationId);\n        }\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args).then((response)=>{\n            logger.trace(`Returning result from ${eventName}`);\n            inProgressEvent?.end({\n                success: true\n            });\n            return response;\n        }).catch((e)=>{\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false\n            }, e);\n            throw e;\n        });\n    };\n};\n //# sourceMappingURL=FunctionWrappers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvRnVuY3Rpb25XcmFwcGVycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Ozs7Ozs7OztDQVVDLEdBQ0QsOERBQThEO0FBQzlELE1BQU1BLFNBQVMsQ0FBQ0MsVUFBVUMsV0FBV0MsUUFBUUMsaUJBQWlCQztJQUMxRCxPQUFPLENBQUMsR0FBR0M7UUFDUEgsT0FBT0ksS0FBSyxDQUFDLENBQUMsbUJBQW1CLEVBQUVMLFVBQVUsQ0FBQztRQUM5QyxNQUFNTSxrQkFBa0JKLGlCQUFpQkssaUJBQWlCUCxXQUFXRztRQUNyRSxJQUFJQSxlQUFlO1lBQ2YsK0RBQStEO1lBQy9ELE1BQU1LLGFBQWFSLFlBQVk7WUFDL0JFLGlCQUFpQk8sZ0JBQWdCO2dCQUFFLENBQUNELFdBQVcsRUFBRTtZQUFFLEdBQUdMO1FBQzFEO1FBQ0EsSUFBSTtZQUNBLE1BQU1PLFNBQVNYLFlBQVlLO1lBQzNCRSxpQkFBaUJLLElBQUk7Z0JBQ2pCQyxTQUFTO1lBQ2I7WUFDQVgsT0FBT0ksS0FBSyxDQUFDLENBQUMsc0JBQXNCLEVBQUVMLFVBQVUsQ0FBQztZQUNqRCxPQUFPVTtRQUNYLEVBQ0EsT0FBT0csR0FBRztZQUNOWixPQUFPSSxLQUFLLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUwsVUFBVSxDQUFDO1lBQzdDLElBQUk7Z0JBQ0FDLE9BQU9JLEtBQUssQ0FBQ1MsS0FBS0MsU0FBUyxDQUFDRjtZQUNoQyxFQUNBLE9BQU9BLEdBQUc7Z0JBQ05aLE9BQU9JLEtBQUssQ0FBQztZQUNqQjtZQUNBQyxpQkFBaUJLLElBQUk7Z0JBQ2pCQyxTQUFTO1lBQ2IsR0FBR0M7WUFDSCxNQUFNQTtRQUNWO0lBQ0o7QUFDSjtBQUNBOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsOERBQThEO0FBQzlELE1BQU1HLGNBQWMsQ0FBQ2pCLFVBQVVDLFdBQVdDLFFBQVFDLGlCQUFpQkM7SUFDL0QsT0FBTyxDQUFDLEdBQUdDO1FBQ1BILE9BQU9JLEtBQUssQ0FBQyxDQUFDLG1CQUFtQixFQUFFTCxVQUFVLENBQUM7UUFDOUMsTUFBTU0sa0JBQWtCSixpQkFBaUJLLGlCQUFpQlAsV0FBV0c7UUFDckUsSUFBSUEsZUFBZTtZQUNmLCtEQUErRDtZQUMvRCxNQUFNSyxhQUFhUixZQUFZO1lBQy9CRSxpQkFBaUJPLGdCQUFnQjtnQkFBRSxDQUFDRCxXQUFXLEVBQUU7WUFBRSxHQUFHTDtRQUMxRDtRQUNBRCxpQkFBaUJlLGdCQUFnQmpCLFdBQVdHO1FBQzVDLE9BQU9KLFlBQVlLLE1BQ2RjLElBQUksQ0FBQyxDQUFDQztZQUNQbEIsT0FBT0ksS0FBSyxDQUFDLENBQUMsc0JBQXNCLEVBQUVMLFVBQVUsQ0FBQztZQUNqRE0saUJBQWlCSyxJQUFJO2dCQUNqQkMsU0FBUztZQUNiO1lBQ0EsT0FBT087UUFDWCxHQUNLQyxLQUFLLENBQUMsQ0FBQ1A7WUFDUlosT0FBT0ksS0FBSyxDQUFDLENBQUMsa0JBQWtCLEVBQUVMLFVBQVUsQ0FBQztZQUM3QyxJQUFJO2dCQUNBQyxPQUFPSSxLQUFLLENBQUNTLEtBQUtDLFNBQVMsQ0FBQ0Y7WUFDaEMsRUFDQSxPQUFPQSxHQUFHO2dCQUNOWixPQUFPSSxLQUFLLENBQUM7WUFDakI7WUFDQUMsaUJBQWlCSyxJQUFJO2dCQUNqQkMsU0FBUztZQUNiLEdBQUdDO1lBQ0gsTUFBTUE7UUFDVjtJQUNKO0FBQ0o7QUFFK0IsQ0FDL0IsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvRnVuY3Rpb25XcmFwcGVycy5tanM/ZDRiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogV3JhcHMgYSBmdW5jdGlvbiB3aXRoIGEgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQuXHJcbiAqIFVzYWdlOiBpbnZva2UoZnVuY3Rpb25Ub0NhbGwsIHBlcmZvcm1hbmNlQ2xpZW50LCBcIkV2ZW50TmFtZVwiLCBcImNvcnJlbGF0aW9uSWRcIikoLi4uYXJnc1RvUGFzc1RvRnVuY3Rpb24pXHJcbiAqIEBwYXJhbSBjYWxsYmFja1xyXG4gKiBAcGFyYW0gZXZlbnROYW1lXHJcbiAqIEBwYXJhbSBsb2dnZXJcclxuICogQHBhcmFtIHRlbGVtZXRyeUNsaWVudFxyXG4gKiBAcGFyYW0gY29ycmVsYXRpb25JZFxyXG4gKiBAcmV0dXJuc1xyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmNvbnN0IGludm9rZSA9IChjYWxsYmFjaywgZXZlbnROYW1lLCBsb2dnZXIsIHRlbGVtZXRyeUNsaWVudCwgY29ycmVsYXRpb25JZCkgPT4ge1xyXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgbG9nZ2VyLnRyYWNlKGBFeGVjdXRpbmcgZnVuY3Rpb24gJHtldmVudE5hbWV9YCk7XHJcbiAgICAgICAgY29uc3QgaW5Qcm9ncmVzc0V2ZW50ID0gdGVsZW1ldHJ5Q2xpZW50Py5zdGFydE1lYXN1cmVtZW50KGV2ZW50TmFtZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgaWYgKGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICAgICAgLy8gVHJhY2sgbnVtYmVyIG9mIHRpbWVzIHRoaXMgQVBJIGlzIGNhbGxlZCBpbiBhIHNpbmdsZSByZXF1ZXN0XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50Q291bnQgPSBldmVudE5hbWUgKyBcIkNhbGxDb3VudFwiO1xyXG4gICAgICAgICAgICB0ZWxlbWV0cnlDbGllbnQ/LmluY3JlbWVudEZpZWxkcyh7IFtldmVudENvdW50XTogMSB9LCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2soLi4uYXJncyk7XHJcbiAgICAgICAgICAgIGluUHJvZ3Jlc3NFdmVudD8uZW5kKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsb2dnZXIudHJhY2UoYFJldHVybmluZyByZXN1bHQgZnJvbSAke2V2ZW50TmFtZX1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKGBFcnJvciBvY2N1cnJlZCBpbiAke2V2ZW50TmFtZX1gKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShKU09OLnN0cmluZ2lmeShlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcIlVuYWJsZSB0byBwcmludCBlcnJvciBtZXNzYWdlLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpblByb2dyZXNzRXZlbnQ/LmVuZCh7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgfSwgZSk7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqIFdyYXBzIGFuIGFzeW5jIGZ1bmN0aW9uIHdpdGggYSBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudC5cclxuICogVXNhZ2U6IGludm9rZUFzeW5jKGZ1bmN0aW9uVG9DYWxsLCBwZXJmb3JtYW5jZUNsaWVudCwgXCJFdmVudE5hbWVcIiwgXCJjb3JyZWxhdGlvbklkXCIpKC4uLmFyZ3NUb1Bhc3NUb0Z1bmN0aW9uKVxyXG4gKiBAcGFyYW0gY2FsbGJhY2tcclxuICogQHBhcmFtIGV2ZW50TmFtZVxyXG4gKiBAcGFyYW0gbG9nZ2VyXHJcbiAqIEBwYXJhbSB0ZWxlbWV0cnlDbGllbnRcclxuICogQHBhcmFtIGNvcnJlbGF0aW9uSWRcclxuICogQHJldHVybnNcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5jb25zdCBpbnZva2VBc3luYyA9IChjYWxsYmFjaywgZXZlbnROYW1lLCBsb2dnZXIsIHRlbGVtZXRyeUNsaWVudCwgY29ycmVsYXRpb25JZCkgPT4ge1xyXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgbG9nZ2VyLnRyYWNlKGBFeGVjdXRpbmcgZnVuY3Rpb24gJHtldmVudE5hbWV9YCk7XHJcbiAgICAgICAgY29uc3QgaW5Qcm9ncmVzc0V2ZW50ID0gdGVsZW1ldHJ5Q2xpZW50Py5zdGFydE1lYXN1cmVtZW50KGV2ZW50TmFtZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgaWYgKGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICAgICAgLy8gVHJhY2sgbnVtYmVyIG9mIHRpbWVzIHRoaXMgQVBJIGlzIGNhbGxlZCBpbiBhIHNpbmdsZSByZXF1ZXN0XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50Q291bnQgPSBldmVudE5hbWUgKyBcIkNhbGxDb3VudFwiO1xyXG4gICAgICAgICAgICB0ZWxlbWV0cnlDbGllbnQ/LmluY3JlbWVudEZpZWxkcyh7IFtldmVudENvdW50XTogMSB9LCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGVsZW1ldHJ5Q2xpZW50Py5zZXRQcmVRdWV1ZVRpbWUoZXZlbnROYW1lLCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICByZXR1cm4gY2FsbGJhY2soLi4uYXJncylcclxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgIGxvZ2dlci50cmFjZShgUmV0dXJuaW5nIHJlc3VsdCBmcm9tICR7ZXZlbnROYW1lfWApO1xyXG4gICAgICAgICAgICBpblByb2dyZXNzRXZlbnQ/LmVuZCh7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xyXG4gICAgICAgICAgICBsb2dnZXIudHJhY2UoYEVycm9yIG9jY3VycmVkIGluICR7ZXZlbnROYW1lfWApO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKEpTT04uc3RyaW5naWZ5KGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKFwiVW5hYmxlIHRvIHByaW50IGVycm9yIG1lc3NhZ2UuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluUHJvZ3Jlc3NFdmVudD8uZW5kKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICB9LCBlKTtcclxuICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn07XG5cbmV4cG9ydCB7IGludm9rZSwgaW52b2tlQXN5bmMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZ1bmN0aW9uV3JhcHBlcnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImludm9rZSIsImNhbGxiYWNrIiwiZXZlbnROYW1lIiwibG9nZ2VyIiwidGVsZW1ldHJ5Q2xpZW50IiwiY29ycmVsYXRpb25JZCIsImFyZ3MiLCJ0cmFjZSIsImluUHJvZ3Jlc3NFdmVudCIsInN0YXJ0TWVhc3VyZW1lbnQiLCJldmVudENvdW50IiwiaW5jcmVtZW50RmllbGRzIiwicmVzdWx0IiwiZW5kIiwic3VjY2VzcyIsImUiLCJKU09OIiwic3RyaW5naWZ5IiwiaW52b2tlQXN5bmMiLCJzZXRQcmVRdWV1ZVRpbWUiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProtocolUtils: () => (/* binding */ ProtocolUtils)\n/* harmony export */ });\n/* harmony import */ var _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */ class ProtocolUtils {\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */ static setRequestState(cryptoObj, userState, meta) {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return userState ? `${libraryState}${_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM}${userState}` : libraryState;\n    }\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */ static generateLibraryState(cryptoObj, meta) {\n        if (!cryptoObj) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noCryptoObject);\n        }\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj = {\n            id: cryptoObj.createNewGuid()\n        };\n        if (meta) {\n            stateObj.meta = meta;\n        }\n        const stateString = JSON.stringify(stateObj);\n        return cryptoObj.base64Encode(stateString);\n    }\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */ static parseRequestState(cryptoObj, state) {\n        if (!cryptoObj) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noCryptoObject);\n        }\n        if (!state) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n        }\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1 ? splitState.slice(1).join(_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM) : _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString);\n            return {\n                userRequestState: userState || _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n                libraryState: libraryStateObj\n            };\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n        }\n    }\n}\n //# sourceMappingURL=ProtocolUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvUHJvdG9jb2xVdGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUM0QztBQUN5QjtBQUNZO0FBRWpGOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUk7SUFDRjs7OztLQUlDLEdBQ0QsT0FBT0MsZ0JBQWdCQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxFQUFFO1FBQy9DLE1BQU1DLGVBQWVMLGNBQWNNLG9CQUFvQixDQUFDSixXQUFXRTtRQUNuRSxPQUFPRCxZQUNELENBQUMsRUFBRUUsYUFBYSxFQUFFVCxxREFBU0EsQ0FBQ1csY0FBYyxDQUFDLEVBQUVKLFVBQVUsQ0FBQyxHQUN4REU7SUFDVjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPQyxxQkFBcUJKLFNBQVMsRUFBRUUsSUFBSSxFQUFFO1FBQ3pDLElBQUksQ0FBQ0YsV0FBVztZQUNaLE1BQU1MLGlGQUFxQkEsQ0FBQ0MsMkVBQWNBO1FBQzlDO1FBQ0EseUZBQXlGO1FBQ3pGLE1BQU1VLFdBQVc7WUFDYkMsSUFBSVAsVUFBVVEsYUFBYTtRQUMvQjtRQUNBLElBQUlOLE1BQU07WUFDTkksU0FBU0osSUFBSSxHQUFHQTtRQUNwQjtRQUNBLE1BQU1PLGNBQWNDLEtBQUtDLFNBQVMsQ0FBQ0w7UUFDbkMsT0FBT04sVUFBVVksWUFBWSxDQUFDSDtJQUNsQztJQUNBOzs7O0tBSUMsR0FDRCxPQUFPSSxrQkFBa0JiLFNBQVMsRUFBRWMsS0FBSyxFQUFFO1FBQ3ZDLElBQUksQ0FBQ2QsV0FBVztZQUNaLE1BQU1MLGlGQUFxQkEsQ0FBQ0MsMkVBQWNBO1FBQzlDO1FBQ0EsSUFBSSxDQUFDa0IsT0FBTztZQUNSLE1BQU1uQixpRkFBcUJBLENBQUNFLHlFQUFZQTtRQUM1QztRQUNBLElBQUk7WUFDQSx5RkFBeUY7WUFDekYsTUFBTWtCLGFBQWFELE1BQU1FLEtBQUssQ0FBQ3RCLHFEQUFTQSxDQUFDVyxjQUFjO1lBQ3ZELE1BQU1GLGVBQWVZLFVBQVUsQ0FBQyxFQUFFO1lBQ2xDLE1BQU1kLFlBQVljLFdBQVdFLE1BQU0sR0FBRyxJQUNoQ0YsV0FBV0csS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQ3pCLHFEQUFTQSxDQUFDVyxjQUFjLElBQ2pEWCxxREFBU0EsQ0FBQzBCLFlBQVk7WUFDNUIsTUFBTUMscUJBQXFCckIsVUFBVXNCLFlBQVksQ0FBQ25CO1lBQ2xELE1BQU1vQixrQkFBa0JiLEtBQUtjLEtBQUssQ0FBQ0g7WUFDbkMsT0FBTztnQkFDSEksa0JBQWtCeEIsYUFBYVAscURBQVNBLENBQUMwQixZQUFZO2dCQUNyRGpCLGNBQWNvQjtZQUNsQjtRQUNKLEVBQ0EsT0FBT0csR0FBRztZQUNOLE1BQU0vQixpRkFBcUJBLENBQUNFLHlFQUFZQTtRQUM1QztJQUNKO0FBQ0o7QUFFeUIsQ0FDekIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvUHJvdG9jb2xVdGlscy5tanM/YzBlMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4vQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IG5vQ3J5cHRvT2JqZWN0LCBpbnZhbGlkU3RhdGUgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENsYXNzIHdoaWNoIHByb3ZpZGVzIGhlbHBlcnMgZm9yIE9BdXRoIDIuMCBwcm90b2NvbCBzcGVjaWZpYyB2YWx1ZXNcclxuICovXHJcbmNsYXNzIFByb3RvY29sVXRpbHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBlbmRzIHVzZXIgc3RhdGUgd2l0aCByYW5kb20gZ3VpZCwgb3IgcmV0dXJucyByYW5kb20gZ3VpZC5cclxuICAgICAqIEBwYXJhbSB1c2VyU3RhdGVcclxuICAgICAqIEBwYXJhbSByYW5kb21HdWlkXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXRSZXF1ZXN0U3RhdGUoY3J5cHRvT2JqLCB1c2VyU3RhdGUsIG1ldGEpIHtcclxuICAgICAgICBjb25zdCBsaWJyYXJ5U3RhdGUgPSBQcm90b2NvbFV0aWxzLmdlbmVyYXRlTGlicmFyeVN0YXRlKGNyeXB0b09iaiwgbWV0YSk7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJTdGF0ZVxyXG4gICAgICAgICAgICA/IGAke2xpYnJhcnlTdGF0ZX0ke0NvbnN0YW50cy5SRVNPVVJDRV9ERUxJTX0ke3VzZXJTdGF0ZX1gXHJcbiAgICAgICAgICAgIDogbGlicmFyeVN0YXRlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgdGhlIHN0YXRlIHZhbHVlIHVzZWQgYnkgdGhlIGNvbW1vbiBsaWJyYXJ5LlxyXG4gICAgICogQHBhcmFtIHJhbmRvbUd1aWRcclxuICAgICAqIEBwYXJhbSBjcnlwdG9PYmpcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdlbmVyYXRlTGlicmFyeVN0YXRlKGNyeXB0b09iaiwgbWV0YSkge1xyXG4gICAgICAgIGlmICghY3J5cHRvT2JqKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihub0NyeXB0b09iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENyZWF0ZSBhIHN0YXRlIG9iamVjdCBjb250YWluaW5nIGEgdW5pcXVlIGlkIGFuZCB0aGUgdGltZXN0YW1wIG9mIHRoZSByZXF1ZXN0IGNyZWF0aW9uXHJcbiAgICAgICAgY29uc3Qgc3RhdGVPYmogPSB7XHJcbiAgICAgICAgICAgIGlkOiBjcnlwdG9PYmouY3JlYXRlTmV3R3VpZCgpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgc3RhdGVPYmoubWV0YSA9IG1ldGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHN0YXRlU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoc3RhdGVPYmopO1xyXG4gICAgICAgIHJldHVybiBjcnlwdG9PYmouYmFzZTY0RW5jb2RlKHN0YXRlU3RyaW5nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIHRoZSBzdGF0ZSBpbnRvIHRoZSBSZXF1ZXN0U3RhdGVPYmplY3QsIHdoaWNoIGNvbnRhaW5zIHRoZSBMaWJyYXJ5U3RhdGUgaW5mbyBhbmQgdGhlIHN0YXRlIHBhc3NlZCBieSB0aGUgdXNlci5cclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICogQHBhcmFtIGNyeXB0b09ialxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcGFyc2VSZXF1ZXN0U3RhdGUoY3J5cHRvT2JqLCBzdGF0ZSkge1xyXG4gICAgICAgIGlmICghY3J5cHRvT2JqKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihub0NyeXB0b09iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc3RhdGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKGludmFsaWRTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFNwbGl0IHRoZSBzdGF0ZSBiZXR3ZWVuIGxpYnJhcnkgc3RhdGUgYW5kIHVzZXIgcGFzc2VkIHN0YXRlIGFuZCBkZWNvZGUgdGhlbSBzZXBhcmF0ZWx5XHJcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0U3RhdGUgPSBzdGF0ZS5zcGxpdChDb25zdGFudHMuUkVTT1VSQ0VfREVMSU0pO1xyXG4gICAgICAgICAgICBjb25zdCBsaWJyYXJ5U3RhdGUgPSBzcGxpdFN0YXRlWzBdO1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyU3RhdGUgPSBzcGxpdFN0YXRlLmxlbmd0aCA+IDFcclxuICAgICAgICAgICAgICAgID8gc3BsaXRTdGF0ZS5zbGljZSgxKS5qb2luKENvbnN0YW50cy5SRVNPVVJDRV9ERUxJTSlcclxuICAgICAgICAgICAgICAgIDogQ29uc3RhbnRzLkVNUFRZX1NUUklORztcclxuICAgICAgICAgICAgY29uc3QgbGlicmFyeVN0YXRlU3RyaW5nID0gY3J5cHRvT2JqLmJhc2U2NERlY29kZShsaWJyYXJ5U3RhdGUpO1xyXG4gICAgICAgICAgICBjb25zdCBsaWJyYXJ5U3RhdGVPYmogPSBKU09OLnBhcnNlKGxpYnJhcnlTdGF0ZVN0cmluZyk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB1c2VyUmVxdWVzdFN0YXRlOiB1c2VyU3RhdGUgfHwgQ29uc3RhbnRzLkVNUFRZX1NUUklORyxcclxuICAgICAgICAgICAgICAgIGxpYnJhcnlTdGF0ZTogbGlicmFyeVN0YXRlT2JqLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoaW52YWxpZFN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgUHJvdG9jb2xVdGlscyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJvdG9jb2xVdGlscy5tanMubWFwXG4iXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwibm9DcnlwdG9PYmplY3QiLCJpbnZhbGlkU3RhdGUiLCJQcm90b2NvbFV0aWxzIiwic2V0UmVxdWVzdFN0YXRlIiwiY3J5cHRvT2JqIiwidXNlclN0YXRlIiwibWV0YSIsImxpYnJhcnlTdGF0ZSIsImdlbmVyYXRlTGlicmFyeVN0YXRlIiwiUkVTT1VSQ0VfREVMSU0iLCJzdGF0ZU9iaiIsImlkIiwiY3JlYXRlTmV3R3VpZCIsInN0YXRlU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImJhc2U2NEVuY29kZSIsInBhcnNlUmVxdWVzdFN0YXRlIiwic3RhdGUiLCJzcGxpdFN0YXRlIiwic3BsaXQiLCJsZW5ndGgiLCJzbGljZSIsImpvaW4iLCJFTVBUWV9TVFJJTkciLCJsaWJyYXJ5U3RhdGVTdHJpbmciLCJiYXNlNjREZWNvZGUiLCJsaWJyYXJ5U3RhdGVPYmoiLCJwYXJzZSIsInVzZXJSZXF1ZXN0U3RhdGUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringUtils: () => (/* binding */ StringUtils)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * @hidden\r\n */ class StringUtils {\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */ static isEmptyObj(strObj) {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n    static startsWith(str, search) {\n        return str.indexOf(search) === 0;\n    }\n    static endsWith(str, search) {\n        return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n    }\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */ static queryStringToObject(query) {\n        const obj = {};\n        const params = query.split(\"&\");\n        const decode = (s)=>decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair)=>{\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj;\n    }\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */ static trimArrayEntries(arr) {\n        return arr.map((entry)=>entry.trim());\n    }\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */ static removeEmptyStringsFromArray(arr) {\n        return arr.filter((entry)=>{\n            return !!entry;\n        });\n    }\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */ static jsonParseHelper(str) {\n        try {\n            return JSON.parse(str);\n        } catch (e) {\n            return null;\n        }\n    }\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */ static matchPattern(pattern, input) {\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */ // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n        return regex.test(input);\n    }\n}\n //# sourceMappingURL=StringUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvU3RyaW5nVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Q0FFQyxHQUNELE1BQU1BO0lBQ0Y7OztLQUdDLEdBQ0QsT0FBT0MsV0FBV0MsTUFBTSxFQUFFO1FBQ3RCLElBQUlBLFFBQVE7WUFDUixJQUFJO2dCQUNBLE1BQU1DLE1BQU1DLEtBQUtDLEtBQUssQ0FBQ0g7Z0JBQ3ZCLE9BQU9JLE9BQU9DLElBQUksQ0FBQ0osS0FBS0ssTUFBTSxLQUFLO1lBQ3ZDLEVBQ0EsT0FBT0MsR0FBRyxDQUFFO1FBQ2hCO1FBQ0EsT0FBTztJQUNYO0lBQ0EsT0FBT0MsV0FBV0MsR0FBRyxFQUFFQyxNQUFNLEVBQUU7UUFDM0IsT0FBT0QsSUFBSUUsT0FBTyxDQUFDRCxZQUFZO0lBQ25DO0lBQ0EsT0FBT0UsU0FBU0gsR0FBRyxFQUFFQyxNQUFNLEVBQUU7UUFDekIsT0FBUUQsSUFBSUgsTUFBTSxJQUFJSSxPQUFPSixNQUFNLElBQy9CRyxJQUFJSSxXQUFXLENBQUNILFlBQVlELElBQUlILE1BQU0sR0FBR0ksT0FBT0osTUFBTTtJQUM5RDtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPUSxvQkFBb0JDLEtBQUssRUFBRTtRQUM5QixNQUFNZCxNQUFNLENBQUM7UUFDYixNQUFNZSxTQUFTRCxNQUFNRSxLQUFLLENBQUM7UUFDM0IsTUFBTUMsU0FBUyxDQUFDQyxJQUFNQyxtQkFBbUJELEVBQUVFLE9BQU8sQ0FBQyxPQUFPO1FBQzFETCxPQUFPTSxPQUFPLENBQUMsQ0FBQ0M7WUFDWixJQUFJQSxLQUFLQyxJQUFJLElBQUk7Z0JBQ2IsTUFBTSxDQUFDQyxLQUFLQyxNQUFNLEdBQUdILEtBQUtOLEtBQUssQ0FBQyxVQUFVLElBQUksb0RBQW9EO2dCQUNsRyxJQUFJUSxPQUFPQyxPQUFPO29CQUNkekIsR0FBRyxDQUFDaUIsT0FBT08sS0FBSyxHQUFHUCxPQUFPUTtnQkFDOUI7WUFDSjtRQUNKO1FBQ0EsT0FBT3pCO0lBQ1g7SUFDQTs7OztLQUlDLEdBQ0QsT0FBTzBCLGlCQUFpQkMsR0FBRyxFQUFFO1FBQ3pCLE9BQU9BLElBQUlDLEdBQUcsQ0FBQyxDQUFDQyxRQUFVQSxNQUFNTixJQUFJO0lBQ3hDO0lBQ0E7OztLQUdDLEdBQ0QsT0FBT08sNEJBQTRCSCxHQUFHLEVBQUU7UUFDcEMsT0FBT0EsSUFBSUksTUFBTSxDQUFDLENBQUNGO1lBQ2YsT0FBTyxDQUFDLENBQUNBO1FBQ2I7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE9BQU9HLGdCQUFnQnhCLEdBQUcsRUFBRTtRQUN4QixJQUFJO1lBQ0EsT0FBT1AsS0FBS0MsS0FBSyxDQUFDTTtRQUN0QixFQUNBLE9BQU9GLEdBQUc7WUFDTixPQUFPO1FBQ1g7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPMkIsYUFBYUMsT0FBTyxFQUFFQyxLQUFLLEVBQUU7UUFDaEM7OztTQUdDLEdBQ0QsOERBQThEO1FBQzlELE1BQU1DLFFBQVEsSUFBSUMsT0FBT0gsUUFDcEJkLE9BQU8sQ0FBQyxPQUFPLFFBQ2ZBLE9BQU8sQ0FBQyxPQUFPLFNBQ2ZBLE9BQU8sQ0FBQyxPQUFPO1FBQ3BCLE9BQU9nQixNQUFNRSxJQUFJLENBQUNIO0lBQ3RCO0FBQ0o7QUFFdUIsQ0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvU3RyaW5nVXRpbHMubWpzPzgxMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmNsYXNzIFN0cmluZ1V0aWxzIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgc3RyaW5naWZpZWQgb2JqZWN0IGlzIGVtcHR5XHJcbiAgICAgKiBAcGFyYW0gc3RyT2JqXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0VtcHR5T2JqKHN0ck9iaikge1xyXG4gICAgICAgIGlmIChzdHJPYmopIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2Uoc3RyT2JqKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gpIHtcclxuICAgICAgICByZXR1cm4gc3RyLmluZGV4T2Yoc2VhcmNoKSA9PT0gMDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBlbmRzV2l0aChzdHIsIHNlYXJjaCkge1xyXG4gICAgICAgIHJldHVybiAoc3RyLmxlbmd0aCA+PSBzZWFyY2gubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIHN0ci5sYXN0SW5kZXhPZihzZWFyY2gpID09PSBzdHIubGVuZ3RoIC0gc2VhcmNoLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBzdHJpbmcgaW50byBhbiBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBxdWVyeVN0cmluZ1RvT2JqZWN0KHF1ZXJ5KSB7XHJcbiAgICAgICAgY29uc3Qgb2JqID0ge307XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gcXVlcnkuc3BsaXQoXCImXCIpO1xyXG4gICAgICAgIGNvbnN0IGRlY29kZSA9IChzKSA9PiBkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcclxuICAgICAgICBwYXJhbXMuZm9yRWFjaCgocGFpcikgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGFpci50cmltKCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHBhaXIuc3BsaXQoLz0oLispL2csIDIpOyAvLyBTcGxpdCBvbiB0aGUgZmlyc3Qgb2NjdXJlbmNlIG9mIHRoZSAnPScgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICYmIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW2RlY29kZShrZXkpXSA9IGRlY29kZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmltcyBlbnRyaWVzIGluIGFuIGFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhcnJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHRyaW1BcnJheUVudHJpZXMoYXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyci5tYXAoKGVudHJ5KSA9PiBlbnRyeS50cmltKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGVtcHR5IHN0cmluZ3MgZnJvbSBhcnJheVxyXG4gICAgICogQHBhcmFtIGFyclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmVtb3ZlRW1wdHlTdHJpbmdzRnJvbUFycmF5KGFycikge1xyXG4gICAgICAgIHJldHVybiBhcnIuZmlsdGVyKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gISFlbnRyeTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQXR0ZW1wdHMgdG8gcGFyc2UgYSBzdHJpbmcgaW50byBKU09OXHJcbiAgICAgKiBAcGFyYW0gc3RyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBqc29uUGFyc2VIZWxwZXIoc3RyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiBhIGdpdmVuIHN0cmluZyBtYXRjaGVzIGEgZ2l2ZW4gcGF0dGVybiwgd2l0aCBzdXBwb3J0IGZvciB3aWxkY2FyZHMgYW5kIHF1ZXJpZXMuXHJcbiAgICAgKiBAcGFyYW0gcGF0dGVybiBXaWxkY2FyZCBwYXR0ZXJuIHRvIHN0cmluZyBtYXRjaC4gU3VwcG9ydHMgXCIqXCIgZm9yIHdpbGRjYXJkcyBhbmQgXCI/XCIgZm9yIHF1ZXJpZXNcclxuICAgICAqIEBwYXJhbSBpbnB1dCBTdHJpbmcgdG8gbWF0Y2ggYWdhaW5zdFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbWF0Y2hQYXR0ZXJuKHBhdHRlcm4sIGlucHV0KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2lsZGNhcmQgc3VwcG9ydDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMxMTcyNDgvNDg4ODU1OVxyXG4gICAgICAgICAqIFF1ZXJpZXM6IHJlcGxhY2VzIFwiP1wiIGluIHN0cmluZyB3aXRoIGVzY2FwZWQgXCJcXD9cIiBmb3IgcmVnZXggdGVzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWN1cml0eS9kZXRlY3Qtbm9uLWxpdGVyYWwtcmVnZXhwXHJcbiAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm5cclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFwvZywgXCJcXFxcXFxcXFwiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwqL2csIFwiW14gXSpcIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcPy9nLCBcIlxcXFw/XCIpKTtcclxuICAgICAgICByZXR1cm4gcmVnZXgudGVzdChpbnB1dCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgU3RyaW5nVXRpbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0cmluZ1V0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsImlzRW1wdHlPYmoiLCJzdHJPYmoiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZSIsInN0YXJ0c1dpdGgiLCJzdHIiLCJzZWFyY2giLCJpbmRleE9mIiwiZW5kc1dpdGgiLCJsYXN0SW5kZXhPZiIsInF1ZXJ5U3RyaW5nVG9PYmplY3QiLCJxdWVyeSIsInBhcmFtcyIsInNwbGl0IiwiZGVjb2RlIiwicyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJmb3JFYWNoIiwicGFpciIsInRyaW0iLCJrZXkiLCJ2YWx1ZSIsInRyaW1BcnJheUVudHJpZXMiLCJhcnIiLCJtYXAiLCJlbnRyeSIsInJlbW92ZUVtcHR5U3RyaW5nc0Zyb21BcnJheSIsImZpbHRlciIsImpzb25QYXJzZUhlbHBlciIsIm1hdGNoUGF0dGVybiIsInBhdHRlcm4iLCJpbnB1dCIsInJlZ2V4IiwiUmVnRXhwIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   isTokenExpired: () => (/* binding */ isTokenExpired),\n/* harmony export */   nowSeconds: () => (/* binding */ nowSeconds),\n/* harmony export */   wasClockTurnedBack: () => (/* binding */ wasClockTurnedBack)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Utility functions for managing date and time operations.\r\n */ /**\r\n * return the current time in Unix time (seconds).\r\n */ function nowSeconds() {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n}\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */ function isTokenExpired(expiresOn, offset) {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = nowSeconds() + offset;\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n}\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */ function wasClockTurnedBack(cachedAt) {\n    const cachedAtSec = Number(cachedAt);\n    return cachedAtSec > nowSeconds();\n}\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */ function delay(t, value) {\n    return new Promise((resolve)=>setTimeout(()=>resolve(value), t));\n}\n //# sourceMappingURL=TimeUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvVGltZVV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRDs7Q0FFQyxHQUNELFNBQVNBO0lBQ0wsMENBQTBDO0lBQzFDLE9BQU9DLEtBQUtDLEtBQUssQ0FBQyxJQUFJQyxPQUFPQyxPQUFPLEtBQUs7QUFDN0M7QUFDQTs7O0NBR0MsR0FDRCxTQUFTQyxlQUFlQyxTQUFTLEVBQUVDLE1BQU07SUFDckMsZ0NBQWdDO0lBQ2hDLE1BQU1DLGdCQUFnQkMsT0FBT0gsY0FBYztJQUMzQyxNQUFNSSx1QkFBdUJWLGVBQWVPO0lBQzVDLHlGQUF5RjtJQUN6RixPQUFPRyx1QkFBdUJGO0FBQ2xDO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTRyxtQkFBbUJDLFFBQVE7SUFDaEMsTUFBTUMsY0FBY0osT0FBT0c7SUFDM0IsT0FBT0MsY0FBY2I7QUFDekI7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU2MsTUFBTUMsQ0FBQyxFQUFFQyxLQUFLO0lBQ25CLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxVQUFZQyxXQUFXLElBQU1ELFFBQVFGLFFBQVFEO0FBQ3JFO0FBRWlFLENBQ2pFLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3V0aWxzL1RpbWVVdGlscy5tanM/YTc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGRhdGUgYW5kIHRpbWUgb3BlcmF0aW9ucy5cclxuICovXHJcbi8qKlxyXG4gKiByZXR1cm4gdGhlIGN1cnJlbnQgdGltZSBpbiBVbml4IHRpbWUgKHNlY29uZHMpLlxyXG4gKi9cclxuZnVuY3Rpb24gbm93U2Vjb25kcygpIHtcclxuICAgIC8vIERhdGUuZ2V0VGltZSgpIHJldHVybnMgaW4gbWlsbGlzZWNvbmRzLlxyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwLjApO1xyXG59XHJcbi8qKlxyXG4gKiBjaGVjayBpZiBhIHRva2VuIGlzIGV4cGlyZWQgYmFzZWQgb24gZ2l2ZW4gVVRDIHRpbWUgaW4gc2Vjb25kcy5cclxuICogQHBhcmFtIGV4cGlyZXNPblxyXG4gKi9cclxuZnVuY3Rpb24gaXNUb2tlbkV4cGlyZWQoZXhwaXJlc09uLCBvZmZzZXQpIHtcclxuICAgIC8vIGNoZWNrIGZvciBhY2Nlc3MgdG9rZW4gZXhwaXJ5XHJcbiAgICBjb25zdCBleHBpcmF0aW9uU2VjID0gTnVtYmVyKGV4cGlyZXNPbikgfHwgMDtcclxuICAgIGNvbnN0IG9mZnNldEN1cnJlbnRUaW1lU2VjID0gbm93U2Vjb25kcygpICsgb2Zmc2V0O1xyXG4gICAgLy8gSWYgY3VycmVudCB0aW1lICsgb2Zmc2V0IGlzIGdyZWF0ZXIgdGhhbiB0b2tlbiBleHBpcmF0aW9uIHRpbWUsIHRoZW4gdG9rZW4gaXMgZXhwaXJlZC5cclxuICAgIHJldHVybiBvZmZzZXRDdXJyZW50VGltZVNlYyA+IGV4cGlyYXRpb25TZWM7XHJcbn1cclxuLyoqXHJcbiAqIElmIHRoZSBjdXJyZW50IHRpbWUgaXMgZWFybGllciB0aGFuIHRoZSB0aW1lIHRoYXQgYSB0b2tlbiB3YXMgY2FjaGVkIGF0LCB3ZSBtdXN0IGRpc2NhcmQgdGhlIHRva2VuXHJcbiAqIGkuZS4gVGhlIHN5c3RlbSBjbG9jayB3YXMgdHVybmVkIGJhY2sgYWZ0ZXIgYWNxdWlyaW5nIHRoZSBjYWNoZWQgdG9rZW5cclxuICogQHBhcmFtIGNhY2hlZEF0XHJcbiAqIEBwYXJhbSBvZmZzZXRcclxuICovXHJcbmZ1bmN0aW9uIHdhc0Nsb2NrVHVybmVkQmFjayhjYWNoZWRBdCkge1xyXG4gICAgY29uc3QgY2FjaGVkQXRTZWMgPSBOdW1iZXIoY2FjaGVkQXQpO1xyXG4gICAgcmV0dXJuIGNhY2hlZEF0U2VjID4gbm93U2Vjb25kcygpO1xyXG59XHJcbi8qKlxyXG4gKiBXYWl0cyBmb3IgdCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzXHJcbiAqIEBwYXJhbSB0IG51bWJlclxyXG4gKiBAcGFyYW0gdmFsdWUgVFxyXG4gKi9cclxuZnVuY3Rpb24gZGVsYXkodCwgdmFsdWUpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHZhbHVlKSwgdCkpO1xyXG59XG5cbmV4cG9ydCB7IGRlbGF5LCBpc1Rva2VuRXhwaXJlZCwgbm93U2Vjb25kcywgd2FzQ2xvY2tUdXJuZWRCYWNrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW1lVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5vd1NlY29uZHMiLCJNYXRoIiwicm91bmQiLCJEYXRlIiwiZ2V0VGltZSIsImlzVG9rZW5FeHBpcmVkIiwiZXhwaXJlc09uIiwib2Zmc2V0IiwiZXhwaXJhdGlvblNlYyIsIk51bWJlciIsIm9mZnNldEN1cnJlbnRUaW1lU2VjIiwid2FzQ2xvY2tUdXJuZWRCYWNrIiwiY2FjaGVkQXQiLCJjYWNoZWRBdFNlYyIsImRlbGF5IiwidCIsInZhbHVlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDeserializedResponse: () => (/* binding */ getDeserializedResponse),\n/* harmony export */   stripLeadingHashOrQuery: () => (/* binding */ stripLeadingHashOrQuery)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */ function stripLeadingHashOrQuery(responseString) {\n    if (responseString.startsWith(\"#/\")) {\n        return responseString.substring(2);\n    } else if (responseString.startsWith(\"#\") || responseString.startsWith(\"?\")) {\n        return responseString.substring(1);\n    }\n    return responseString;\n}\n/**\r\n * Returns URL hash as server auth code response object.\r\n */ function getDeserializedResponse(responseString) {\n    // Check if given hash is empty\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\n        return null;\n    }\n    try {\n        // Strip the # or ? symbol if present\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\n        // Check for known response properties\n        if (deserializedHash.code || deserializedHash.error || deserializedHash.error_description || deserializedHash.state) {\n            return deserializedHash;\n        }\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.hashNotDeserialized);\n    }\n    return null;\n}\n //# sourceMappingURL=UrlUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvVXJsVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDcUU7QUFDRztBQUV4RTs7O0NBR0MsR0FDRDs7O0NBR0MsR0FDRCxTQUFTRSx3QkFBd0JDLGNBQWM7SUFDM0MsSUFBSUEsZUFBZUMsVUFBVSxDQUFDLE9BQU87UUFDakMsT0FBT0QsZUFBZUUsU0FBUyxDQUFDO0lBQ3BDLE9BQ0ssSUFBSUYsZUFBZUMsVUFBVSxDQUFDLFFBQy9CRCxlQUFlQyxVQUFVLENBQUMsTUFBTTtRQUNoQyxPQUFPRCxlQUFlRSxTQUFTLENBQUM7SUFDcEM7SUFDQSxPQUFPRjtBQUNYO0FBQ0E7O0NBRUMsR0FDRCxTQUFTRyx3QkFBd0JILGNBQWM7SUFDM0MsK0JBQStCO0lBQy9CLElBQUksQ0FBQ0Esa0JBQWtCQSxlQUFlSSxPQUFPLENBQUMsT0FBTyxHQUFHO1FBQ3BELE9BQU87SUFDWDtJQUNBLElBQUk7UUFDQSxxQ0FBcUM7UUFDckMsTUFBTUMscUJBQXFCTix3QkFBd0JDO1FBQ25ELDJGQUEyRjtRQUMzRixNQUFNTSxtQkFBbUJDLE9BQU9DLFdBQVcsQ0FBQyxJQUFJQyxnQkFBZ0JKO1FBQ2hFLHNDQUFzQztRQUN0QyxJQUFJQyxpQkFBaUJJLElBQUksSUFDckJKLGlCQUFpQkssS0FBSyxJQUN0QkwsaUJBQWlCTSxpQkFBaUIsSUFDbENOLGlCQUFpQk8sS0FBSyxFQUFFO1lBQ3hCLE9BQU9QO1FBQ1g7SUFDSixFQUNBLE9BQU9RLEdBQUc7UUFDTixNQUFNakIsaUZBQXFCQSxDQUFDQyxnRkFBbUJBO0lBQ25EO0lBQ0EsT0FBTztBQUNYO0FBRTRELENBQzVELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3V0aWxzL1VybFV0aWxzLm1qcz84YjMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50QXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBoYXNoTm90RGVzZXJpYWxpemVkIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQYXJzZXMgaGFzaCBzdHJpbmcgZnJvbSBnaXZlbiBzdHJpbmcuIFJldHVybnMgZW1wdHkgc3RyaW5nIGlmIG5vIGhhc2ggc3ltYm9sIGlzIGZvdW5kLlxyXG4gKiBAcGFyYW0gaGFzaFN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nSGFzaE9yUXVlcnkocmVzcG9uc2VTdHJpbmcpIHtcclxuICAgIGlmIChyZXNwb25zZVN0cmluZy5zdGFydHNXaXRoKFwiIy9cIikpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2VTdHJpbmcuc3Vic3RyaW5nKDIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocmVzcG9uc2VTdHJpbmcuc3RhcnRzV2l0aChcIiNcIikgfHxcclxuICAgICAgICByZXNwb25zZVN0cmluZy5zdGFydHNXaXRoKFwiP1wiKSkge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZVN0cmluZy5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzcG9uc2VTdHJpbmc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgVVJMIGhhc2ggYXMgc2VydmVyIGF1dGggY29kZSByZXNwb25zZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXREZXNlcmlhbGl6ZWRSZXNwb25zZShyZXNwb25zZVN0cmluZykge1xyXG4gICAgLy8gQ2hlY2sgaWYgZ2l2ZW4gaGFzaCBpcyBlbXB0eVxyXG4gICAgaWYgKCFyZXNwb25zZVN0cmluZyB8fCByZXNwb25zZVN0cmluZy5pbmRleE9mKFwiPVwiKSA8IDApIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gU3RyaXAgdGhlICMgb3IgPyBzeW1ib2wgaWYgcHJlc2VudFxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRSZXNwb25zZSA9IHN0cmlwTGVhZGluZ0hhc2hPclF1ZXJ5KHJlc3BvbnNlU3RyaW5nKTtcclxuICAgICAgICAvLyBJZiAjIHN5bWJvbCB3YXMgbm90IHByZXNlbnQsIGFib3ZlIHdpbGwgcmV0dXJuIGVtcHR5IHN0cmluZywgc28gZ2l2ZSBvcmlnaW5hbCBoYXNoIHZhbHVlXHJcbiAgICAgICAgY29uc3QgZGVzZXJpYWxpemVkSGFzaCA9IE9iamVjdC5mcm9tRW50cmllcyhuZXcgVVJMU2VhcmNoUGFyYW1zKG5vcm1hbGl6ZWRSZXNwb25zZSkpO1xyXG4gICAgICAgIC8vIENoZWNrIGZvciBrbm93biByZXNwb25zZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaWYgKGRlc2VyaWFsaXplZEhhc2guY29kZSB8fFxyXG4gICAgICAgICAgICBkZXNlcmlhbGl6ZWRIYXNoLmVycm9yIHx8XHJcbiAgICAgICAgICAgIGRlc2VyaWFsaXplZEhhc2guZXJyb3JfZGVzY3JpcHRpb24gfHxcclxuICAgICAgICAgICAgZGVzZXJpYWxpemVkSGFzaC5zdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzZXJpYWxpemVkSGFzaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihoYXNoTm90RGVzZXJpYWxpemVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbmV4cG9ydCB7IGdldERlc2VyaWFsaXplZFJlc3BvbnNlLCBzdHJpcExlYWRpbmdIYXNoT3JRdWVyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXJsVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsImhhc2hOb3REZXNlcmlhbGl6ZWQiLCJzdHJpcExlYWRpbmdIYXNoT3JRdWVyeSIsInJlc3BvbnNlU3RyaW5nIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImdldERlc2VyaWFsaXplZFJlc3BvbnNlIiwiaW5kZXhPZiIsIm5vcm1hbGl6ZWRSZXNwb25zZSIsImRlc2VyaWFsaXplZEhhc2giLCJPYmplY3QiLCJmcm9tRW50cmllcyIsIlVSTFNlYXJjaFBhcmFtcyIsImNvZGUiLCJlcnJvciIsImVycm9yX2Rlc2NyaXB0aW9uIiwic3RhdGUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/MsalContext.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/MsalContext.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalConsumer: () => (/* binding */ MsalConsumer),\n/* harmony export */   MsalContext: () => (/* binding */ MsalContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/app/IPublicClientApplication.mjs\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /*\r\n * Stubbed context implementation\r\n * Only used when there is no provider, which is an unsupported scenario\r\n */ const defaultMsalContext = {\n    instance: _azure_msal_browser__WEBPACK_IMPORTED_MODULE_1__.stubbedPublicClientApplication,\n    inProgress: _azure_msal_browser__WEBPACK_IMPORTED_MODULE_2__.InteractionStatus.None,\n    accounts: [],\n    logger: new _azure_msal_browser__WEBPACK_IMPORTED_MODULE_3__.Logger({})\n};\nconst MsalContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(defaultMsalContext);\nconst MsalConsumer = MsalContext.Consumer;\n //# sourceMappingURL=MsalContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9Nc2FsQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDK0I7QUFDaUU7QUFFaEc7OztDQUdDLEdBQ0Q7OztDQUdDLEdBQ0QsTUFBTUkscUJBQXFCO0lBQ3ZCQyxVQUFVSiwrRUFBOEJBO0lBQ3hDSyxZQUFZSixrRUFBaUJBLENBQUNLLElBQUk7SUFDbENDLFVBQVUsRUFBRTtJQUNaQyxRQUFRLElBQUlOLHVEQUFNQSxDQUFDLENBQUM7QUFDeEI7QUFDQSxNQUFNTyw0QkFBY1YsZ0RBQW1CLENBQUNJO0FBQ3hDLE1BQU1RLGVBQWVGLFlBQVlHLFFBQVE7QUFFSixDQUNyQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1yZWFjdC9kaXN0L01zYWxDb250ZXh0LmpzP2I0NDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLXJlYWN0IHYyLjIuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb24sIEludGVyYWN0aW9uU3RhdHVzLCBMb2dnZXIgfSBmcm9tICdAYXp1cmUvbXNhbC1icm93c2VyJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qXHJcbiAqIFN0dWJiZWQgY29udGV4dCBpbXBsZW1lbnRhdGlvblxyXG4gKiBPbmx5IHVzZWQgd2hlbiB0aGVyZSBpcyBubyBwcm92aWRlciwgd2hpY2ggaXMgYW4gdW5zdXBwb3J0ZWQgc2NlbmFyaW9cclxuICovXHJcbmNvbnN0IGRlZmF1bHRNc2FsQ29udGV4dCA9IHtcclxuICAgIGluc3RhbmNlOiBzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb24sXHJcbiAgICBpblByb2dyZXNzOiBJbnRlcmFjdGlvblN0YXR1cy5Ob25lLFxyXG4gICAgYWNjb3VudHM6IFtdLFxyXG4gICAgbG9nZ2VyOiBuZXcgTG9nZ2VyKHt9KSxcclxufTtcclxuY29uc3QgTXNhbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRNc2FsQ29udGV4dCk7XHJcbmNvbnN0IE1zYWxDb25zdW1lciA9IE1zYWxDb250ZXh0LkNvbnN1bWVyO1xuXG5leHBvcnQgeyBNc2FsQ29uc3VtZXIsIE1zYWxDb250ZXh0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Nc2FsQ29udGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInN0dWJiZWRQdWJsaWNDbGllbnRBcHBsaWNhdGlvbiIsIkludGVyYWN0aW9uU3RhdHVzIiwiTG9nZ2VyIiwiZGVmYXVsdE1zYWxDb250ZXh0IiwiaW5zdGFuY2UiLCJpblByb2dyZXNzIiwiTm9uZSIsImFjY291bnRzIiwibG9nZ2VyIiwiTXNhbENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiTXNhbENvbnN1bWVyIiwiQ29uc3VtZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/MsalContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/MsalProvider.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/MsalProvider.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalProvider: () => (/* binding */ MsalProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventMessage.mjs\");\n/* harmony import */ var _MsalContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MsalContext.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/MsalContext.js\");\n/* harmony import */ var _utils_utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utilities.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js\");\n/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./packageMetadata.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/packageMetadata.js\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const MsalProviderActionType = {\n    UNBLOCK_INPROGRESS: \"UNBLOCK_INPROGRESS\",\n    EVENT: \"EVENT\"\n};\n/**\r\n * Returns the next inProgress and accounts state based on event message\r\n * @param previousState\r\n * @param action\r\n */ const reducer = (previousState, action)=>{\n    const { type, payload } = action;\n    let newInProgress = previousState.inProgress;\n    switch(type){\n        case MsalProviderActionType.UNBLOCK_INPROGRESS:\n            if (previousState.inProgress === _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__.InteractionStatus.Startup) {\n                newInProgress = _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__.InteractionStatus.None;\n                payload.logger.info(\"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\");\n            }\n            break;\n        case MsalProviderActionType.EVENT:\n            const message = payload.message;\n            const status = _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.EventMessageUtils.getInteractionStatusFromEvent(message, previousState.inProgress);\n            if (status) {\n                payload.logger.info(`MsalProvider - ${message.eventType} results in setting inProgress from ${previousState.inProgress} to ${status}`);\n                newInProgress = status;\n            }\n            break;\n        default:\n            throw new Error(`Unknown action type: ${type}`);\n    }\n    const currentAccounts = payload.instance.getAllAccounts();\n    if (newInProgress !== previousState.inProgress && !(0,_utils_utilities_js__WEBPACK_IMPORTED_MODULE_2__.accountArraysAreEqual)(currentAccounts, previousState.accounts)) {\n        // Both inProgress and accounts changed\n        return {\n            ...previousState,\n            inProgress: newInProgress,\n            accounts: currentAccounts\n        };\n    } else if (newInProgress !== previousState.inProgress) {\n        // Only only inProgress changed\n        return {\n            ...previousState,\n            inProgress: newInProgress\n        };\n    } else if (!(0,_utils_utilities_js__WEBPACK_IMPORTED_MODULE_2__.accountArraysAreEqual)(currentAccounts, previousState.accounts)) {\n        // Only accounts changed\n        return {\n            ...previousState,\n            accounts: currentAccounts\n        };\n    } else {\n        // Nothing changed\n        return previousState;\n    }\n};\n/**\r\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\r\n */ function MsalProvider({ instance, children }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        instance.initializeWrapperLibrary(_azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__.WrapperSKU.React, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_3__.version);\n    }, [\n        instance\n    ]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return instance.getLogger().clone(_packageMetadata_js__WEBPACK_IMPORTED_MODULE_3__.name, _packageMetadata_js__WEBPACK_IMPORTED_MODULE_3__.version);\n    }, [\n        instance\n    ]);\n    const [state, updateState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, undefined, ()=>{\n        // Lazy initialization of the initial state\n        return {\n            inProgress: _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__.InteractionStatus.Startup,\n            accounts: instance.getAllAccounts()\n        };\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const callbackId = instance.addEventCallback((message)=>{\n            updateState({\n                payload: {\n                    instance,\n                    logger,\n                    message\n                },\n                type: MsalProviderActionType.EVENT\n            });\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n        instance.initialize().then(()=>{\n            instance.handleRedirectPromise().catch(()=>{\n                // Errors should be handled by listening to the LOGIN_FAILURE event\n                return;\n            }).finally(()=>{\n                /*\r\n                 * If handleRedirectPromise returns a cached promise the necessary events may not be fired\r\n                 * This is a fallback to prevent inProgress from getting stuck in 'startup'\r\n                 */ updateState({\n                    payload: {\n                        instance,\n                        logger\n                    },\n                    type: MsalProviderActionType.UNBLOCK_INPROGRESS\n                });\n            });\n        }).catch(()=>{\n            // Errors should be handled by listening to the LOGIN_FAILURE event\n            return;\n        });\n        return ()=>{\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [\n        instance,\n        logger\n    ]);\n    const contextValue = {\n        instance,\n        inProgress: state.inProgress,\n        accounts: state.accounts,\n        logger\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_MsalContext_js__WEBPACK_IMPORTED_MODULE_1__.MsalContext.Provider, {\n        value: contextValue\n    }, children);\n}\n //# sourceMappingURL=MsalProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/MsalProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/components/AuthenticatedTemplate.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/components/AuthenticatedTemplate.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticatedTemplate: () => (/* binding */ AuthenticatedTemplate)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_utilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utilities.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js\");\n/* harmony import */ var _hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/* harmony import */ var _hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useIsAuthenticated.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Renders child components if user is authenticated\r\n * @param props\r\n */ function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children }) {\n    const context = (0,_hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_2__.useMsal)();\n    const accountIdentifier = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [\n        username,\n        homeAccountId,\n        localAccountId\n    ]);\n    const isAuthenticated = (0,_hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_3__.useIsAuthenticated)(accountIdentifier);\n    if (isAuthenticated && context.inProgress !== _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__.InteractionStatus.Startup) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_utils_utilities_js__WEBPACK_IMPORTED_MODULE_1__.getChildrenOrFunction)(children, context));\n    }\n    return null;\n}\n //# sourceMappingURL=AuthenticatedTemplate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9jb21wb25lbnRzL0F1dGhlbnRpY2F0ZWRUZW1wbGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDZ0Q7QUFDYztBQUNoQjtBQUNzQjtBQUNaO0FBRXhEOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNELFNBQVNNLHNCQUFzQixFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRUMsY0FBYyxFQUFFQyxRQUFRLEVBQUc7SUFDakYsTUFBTUMsVUFBVVIsMERBQU9BO0lBQ3ZCLE1BQU1TLG9CQUFvQlgsOENBQU9BLENBQUM7UUFDOUIsT0FBTztZQUNITTtZQUNBQztZQUNBQztRQUNKO0lBQ0osR0FBRztRQUFDRjtRQUFVQztRQUFlQztLQUFlO0lBQzVDLE1BQU1JLGtCQUFrQlQsZ0ZBQWtCQSxDQUFDUTtJQUMzQyxJQUFJQyxtQkFBbUJGLFFBQVFHLFVBQVUsS0FBS1Qsa0VBQWlCQSxDQUFDVSxPQUFPLEVBQUU7UUFDckUscUJBQVFmLGdEQUE0QixDQUFDQSwyQ0FBdUIsRUFBRSxNQUFNRSwwRUFBcUJBLENBQUNRLFVBQVVDO0lBQ3hHO0lBQ0EsT0FBTztBQUNYO0FBRWlDLENBQ2pDLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLXJlYWN0L2Rpc3QvY29tcG9uZW50cy9BdXRoZW50aWNhdGVkVGVtcGxhdGUuanM/ZTM5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtcmVhY3QgdjIuMi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0Q2hpbGRyZW5PckZ1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbHMvdXRpbGl0aWVzLmpzJztcbmltcG9ydCB7IHVzZU1zYWwgfSBmcm9tICcuLi9ob29rcy91c2VNc2FsLmpzJztcbmltcG9ydCB7IHVzZUlzQXV0aGVudGljYXRlZCB9IGZyb20gJy4uL2hvb2tzL3VzZUlzQXV0aGVudGljYXRlZC5qcyc7XG5pbXBvcnQgeyBJbnRlcmFjdGlvblN0YXR1cyB9IGZyb20gJ0BhenVyZS9tc2FsLWJyb3dzZXInO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJlbmRlcnMgY2hpbGQgY29tcG9uZW50cyBpZiB1c2VyIGlzIGF1dGhlbnRpY2F0ZWRcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5mdW5jdGlvbiBBdXRoZW50aWNhdGVkVGVtcGxhdGUoeyB1c2VybmFtZSwgaG9tZUFjY291bnRJZCwgbG9jYWxBY2NvdW50SWQsIGNoaWxkcmVuLCB9KSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlTXNhbCgpO1xyXG4gICAgY29uc3QgYWNjb3VudElkZW50aWZpZXIgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VybmFtZSxcclxuICAgICAgICAgICAgaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgbG9jYWxBY2NvdW50SWQsXHJcbiAgICAgICAgfTtcclxuICAgIH0sIFt1c2VybmFtZSwgaG9tZUFjY291bnRJZCwgbG9jYWxBY2NvdW50SWRdKTtcclxuICAgIGNvbnN0IGlzQXV0aGVudGljYXRlZCA9IHVzZUlzQXV0aGVudGljYXRlZChhY2NvdW50SWRlbnRpZmllcik7XHJcbiAgICBpZiAoaXNBdXRoZW50aWNhdGVkICYmIGNvbnRleHQuaW5Qcm9ncmVzcyAhPT0gSW50ZXJhY3Rpb25TdGF0dXMuU3RhcnR1cCkge1xyXG4gICAgICAgIHJldHVybiAoUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChSZWFjdF9fZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgZ2V0Q2hpbGRyZW5PckZ1bmN0aW9uKGNoaWxkcmVuLCBjb250ZXh0KSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuZXhwb3J0IHsgQXV0aGVudGljYXRlZFRlbXBsYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRoZW50aWNhdGVkVGVtcGxhdGUuanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJ1c2VNZW1vIiwiZ2V0Q2hpbGRyZW5PckZ1bmN0aW9uIiwidXNlTXNhbCIsInVzZUlzQXV0aGVudGljYXRlZCIsIkludGVyYWN0aW9uU3RhdHVzIiwiQXV0aGVudGljYXRlZFRlbXBsYXRlIiwidXNlcm5hbWUiLCJob21lQWNjb3VudElkIiwibG9jYWxBY2NvdW50SWQiLCJjaGlsZHJlbiIsImNvbnRleHQiLCJhY2NvdW50SWRlbnRpZmllciIsImlzQXV0aGVudGljYXRlZCIsImluUHJvZ3Jlc3MiLCJTdGFydHVwIiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/components/AuthenticatedTemplate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/components/MsalAuthenticationTemplate.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/components/MsalAuthenticationTemplate.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalAuthenticationTemplate: () => (/* binding */ MsalAuthenticationTemplate)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_utilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utilities.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js\");\n/* harmony import */ var _hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/* harmony import */ var _hooks_useMsalAuthentication_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useMsalAuthentication.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsalAuthentication.js\");\n/* harmony import */ var _hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hooks/useIsAuthenticated.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Attempts to authenticate user if not already authenticated, then renders child components\r\n * @param props\r\n */ function MsalAuthenticationTemplate({ interactionType, username, homeAccountId, localAccountId, authenticationRequest, loadingComponent: LoadingComponent, errorComponent: ErrorComponent, children }) {\n    const accountIdentifier = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [\n        username,\n        homeAccountId,\n        localAccountId\n    ]);\n    const context = (0,_hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_2__.useMsal)();\n    const msalAuthResult = (0,_hooks_useMsalAuthentication_js__WEBPACK_IMPORTED_MODULE_3__.useMsalAuthentication)(interactionType, authenticationRequest, accountIdentifier);\n    const isAuthenticated = (0,_hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_4__.useIsAuthenticated)(accountIdentifier);\n    if (msalAuthResult.error && context.inProgress === _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionStatus.None) {\n        if (!!ErrorComponent) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorComponent, {\n                ...msalAuthResult\n            });\n        }\n        throw msalAuthResult.error;\n    }\n    if (isAuthenticated) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_utils_utilities_js__WEBPACK_IMPORTED_MODULE_1__.getChildrenOrFunction)(children, msalAuthResult));\n    }\n    if (!!LoadingComponent && context.inProgress !== _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionStatus.None) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LoadingComponent, {\n            ...context\n        });\n    }\n    return null;\n}\n //# sourceMappingURL=MsalAuthenticationTemplate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9jb21wb25lbnRzL01zYWxBdXRoZW50aWNhdGlvblRlbXBsYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDZ0Q7QUFDYztBQUNoQjtBQUM0QjtBQUNOO0FBQ1o7QUFFeEQ7OztDQUdDLEdBQ0Q7OztDQUdDLEdBQ0QsU0FBU08sMkJBQTJCLEVBQUVDLGVBQWUsRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLGNBQWMsRUFBRUMscUJBQXFCLEVBQUVDLGtCQUFrQkMsZ0JBQWdCLEVBQUVDLGdCQUFnQkMsY0FBYyxFQUFFQyxRQUFRLEVBQUc7SUFDbE0sTUFBTUMsb0JBQW9CakIsOENBQU9BLENBQUM7UUFDOUIsT0FBTztZQUNIUTtZQUNBQztZQUNBQztRQUNKO0lBQ0osR0FBRztRQUFDRjtRQUFVQztRQUFlQztLQUFlO0lBQzVDLE1BQU1RLFVBQVVoQiwwREFBT0E7SUFDdkIsTUFBTWlCLGlCQUFpQmhCLHNGQUFxQkEsQ0FBQ0ksaUJBQWlCSSx1QkFBdUJNO0lBQ3JGLE1BQU1HLGtCQUFrQmhCLGdGQUFrQkEsQ0FBQ2E7SUFDM0MsSUFBSUUsZUFBZUUsS0FBSyxJQUFJSCxRQUFRSSxVQUFVLEtBQUtqQixrRUFBaUJBLENBQUNrQixJQUFJLEVBQUU7UUFDdkUsSUFBSSxDQUFDLENBQUNSLGdCQUFnQjtZQUNsQixxQkFBT2hCLGdEQUE0QixDQUFDZ0IsZ0JBQWdCO2dCQUFFLEdBQUdJLGNBQWM7WUFBQztRQUM1RTtRQUNBLE1BQU1BLGVBQWVFLEtBQUs7SUFDOUI7SUFDQSxJQUFJRCxpQkFBaUI7UUFDakIscUJBQVFyQixnREFBNEIsQ0FBQ0EsMkNBQXVCLEVBQUUsTUFBTUUsMEVBQXFCQSxDQUFDZSxVQUFVRztJQUN4RztJQUNBLElBQUksQ0FBQyxDQUFDTixvQkFBb0JLLFFBQVFJLFVBQVUsS0FBS2pCLGtFQUFpQkEsQ0FBQ2tCLElBQUksRUFBRTtRQUNyRSxxQkFBT3hCLGdEQUE0QixDQUFDYyxrQkFBa0I7WUFBRSxHQUFHSyxPQUFPO1FBQUM7SUFDdkU7SUFDQSxPQUFPO0FBQ1g7QUFFc0MsQ0FDdEMsc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9jb21wb25lbnRzL01zYWxBdXRoZW50aWNhdGlvblRlbXBsYXRlLmpzP2UzNDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLXJlYWN0IHYyLjIuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldENoaWxkcmVuT3JGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzL3V0aWxpdGllcy5qcyc7XG5pbXBvcnQgeyB1c2VNc2FsIH0gZnJvbSAnLi4vaG9va3MvdXNlTXNhbC5qcyc7XG5pbXBvcnQgeyB1c2VNc2FsQXV0aGVudGljYXRpb24gfSBmcm9tICcuLi9ob29rcy91c2VNc2FsQXV0aGVudGljYXRpb24uanMnO1xuaW1wb3J0IHsgdXNlSXNBdXRoZW50aWNhdGVkIH0gZnJvbSAnLi4vaG9va3MvdXNlSXNBdXRoZW50aWNhdGVkLmpzJztcbmltcG9ydCB7IEludGVyYWN0aW9uU3RhdHVzIH0gZnJvbSAnQGF6dXJlL21zYWwtYnJvd3Nlcic7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQXR0ZW1wdHMgdG8gYXV0aGVudGljYXRlIHVzZXIgaWYgbm90IGFscmVhZHkgYXV0aGVudGljYXRlZCwgdGhlbiByZW5kZXJzIGNoaWxkIGNvbXBvbmVudHNcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5mdW5jdGlvbiBNc2FsQXV0aGVudGljYXRpb25UZW1wbGF0ZSh7IGludGVyYWN0aW9uVHlwZSwgdXNlcm5hbWUsIGhvbWVBY2NvdW50SWQsIGxvY2FsQWNjb3VudElkLCBhdXRoZW50aWNhdGlvblJlcXVlc3QsIGxvYWRpbmdDb21wb25lbnQ6IExvYWRpbmdDb21wb25lbnQsIGVycm9yQ29tcG9uZW50OiBFcnJvckNvbXBvbmVudCwgY2hpbGRyZW4sIH0pIHtcclxuICAgIGNvbnN0IGFjY291bnRJZGVudGlmaWVyID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlcm5hbWUsXHJcbiAgICAgICAgICAgIGhvbWVBY2NvdW50SWQsXHJcbiAgICAgICAgICAgIGxvY2FsQWNjb3VudElkLFxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbdXNlcm5hbWUsIGhvbWVBY2NvdW50SWQsIGxvY2FsQWNjb3VudElkXSk7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlTXNhbCgpO1xyXG4gICAgY29uc3QgbXNhbEF1dGhSZXN1bHQgPSB1c2VNc2FsQXV0aGVudGljYXRpb24oaW50ZXJhY3Rpb25UeXBlLCBhdXRoZW50aWNhdGlvblJlcXVlc3QsIGFjY291bnRJZGVudGlmaWVyKTtcclxuICAgIGNvbnN0IGlzQXV0aGVudGljYXRlZCA9IHVzZUlzQXV0aGVudGljYXRlZChhY2NvdW50SWRlbnRpZmllcik7XHJcbiAgICBpZiAobXNhbEF1dGhSZXN1bHQuZXJyb3IgJiYgY29udGV4dC5pblByb2dyZXNzID09PSBJbnRlcmFjdGlvblN0YXR1cy5Ob25lKSB7XHJcbiAgICAgICAgaWYgKCEhRXJyb3JDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXJyb3JDb21wb25lbnQsIHsgLi4ubXNhbEF1dGhSZXN1bHQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG1zYWxBdXRoUmVzdWx0LmVycm9yO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXV0aGVudGljYXRlZCkge1xyXG4gICAgICAgIHJldHVybiAoUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChSZWFjdF9fZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgZ2V0Q2hpbGRyZW5PckZ1bmN0aW9uKGNoaWxkcmVuLCBtc2FsQXV0aFJlc3VsdCkpKTtcclxuICAgIH1cclxuICAgIGlmICghIUxvYWRpbmdDb21wb25lbnQgJiYgY29udGV4dC5pblByb2dyZXNzICE9PSBJbnRlcmFjdGlvblN0YXR1cy5Ob25lKSB7XHJcbiAgICAgICAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0NvbXBvbmVudCwgeyAuLi5jb250ZXh0IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuZXhwb3J0IHsgTXNhbEF1dGhlbnRpY2F0aW9uVGVtcGxhdGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1zYWxBdXRoZW50aWNhdGlvblRlbXBsYXRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwidXNlTWVtbyIsImdldENoaWxkcmVuT3JGdW5jdGlvbiIsInVzZU1zYWwiLCJ1c2VNc2FsQXV0aGVudGljYXRpb24iLCJ1c2VJc0F1dGhlbnRpY2F0ZWQiLCJJbnRlcmFjdGlvblN0YXR1cyIsIk1zYWxBdXRoZW50aWNhdGlvblRlbXBsYXRlIiwiaW50ZXJhY3Rpb25UeXBlIiwidXNlcm5hbWUiLCJob21lQWNjb3VudElkIiwibG9jYWxBY2NvdW50SWQiLCJhdXRoZW50aWNhdGlvblJlcXVlc3QiLCJsb2FkaW5nQ29tcG9uZW50IiwiTG9hZGluZ0NvbXBvbmVudCIsImVycm9yQ29tcG9uZW50IiwiRXJyb3JDb21wb25lbnQiLCJjaGlsZHJlbiIsImFjY291bnRJZGVudGlmaWVyIiwiY29udGV4dCIsIm1zYWxBdXRoUmVzdWx0IiwiaXNBdXRoZW50aWNhdGVkIiwiZXJyb3IiLCJpblByb2dyZXNzIiwiTm9uZSIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/components/MsalAuthenticationTemplate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/components/UnauthenticatedTemplate.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/components/UnauthenticatedTemplate.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnauthenticatedTemplate: () => (/* binding */ UnauthenticatedTemplate)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hooks/useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/* harmony import */ var _hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useIsAuthenticated.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js\");\n/* harmony import */ var _utils_utilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utilities.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Renders child components if user is unauthenticated\r\n * @param props\r\n */ function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children }) {\n    const context = (0,_hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_1__.useMsal)();\n    const accountIdentifier = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [\n        username,\n        homeAccountId,\n        localAccountId\n    ]);\n    const isAuthenticated = (0,_hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_2__.useIsAuthenticated)(accountIdentifier);\n    if (!isAuthenticated && context.inProgress !== _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__.InteractionStatus.Startup && context.inProgress !== _azure_msal_browser__WEBPACK_IMPORTED_MODULE_4__.InteractionStatus.HandleRedirect) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_utils_utilities_js__WEBPACK_IMPORTED_MODULE_3__.getChildrenOrFunction)(children, context));\n    }\n    return null;\n}\n //# sourceMappingURL=UnauthenticatedTemplate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9jb21wb25lbnRzL1VuYXV0aGVudGljYXRlZFRlbXBsYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUNnRDtBQUNGO0FBQ3NCO0FBQ047QUFDTjtBQUV4RDs7O0NBR0MsR0FDRDs7O0NBR0MsR0FDRCxTQUFTTSx3QkFBd0IsRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLGNBQWMsRUFBRUMsUUFBUSxFQUFHO0lBQ25GLE1BQU1DLFVBQVVULDBEQUFPQTtJQUN2QixNQUFNVSxvQkFBb0JYLDhDQUFPQSxDQUFDO1FBQzlCLE9BQU87WUFDSE07WUFDQUM7WUFDQUM7UUFDSjtJQUNKLEdBQUc7UUFBQ0Y7UUFBVUM7UUFBZUM7S0FBZTtJQUM1QyxNQUFNSSxrQkFBa0JWLGdGQUFrQkEsQ0FBQ1M7SUFDM0MsSUFBSSxDQUFDQyxtQkFDREYsUUFBUUcsVUFBVSxLQUFLVCxrRUFBaUJBLENBQUNVLE9BQU8sSUFDaERKLFFBQVFHLFVBQVUsS0FBS1Qsa0VBQWlCQSxDQUFDVyxjQUFjLEVBQUU7UUFDekQscUJBQVFoQixnREFBNEIsQ0FBQ0EsMkNBQXVCLEVBQUUsTUFBTUksMEVBQXFCQSxDQUFDTSxVQUFVQztJQUN4RztJQUNBLE9BQU87QUFDWDtBQUVtQyxDQUNuQyxtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1yZWFjdC9kaXN0L2NvbXBvbmVudHMvVW5hdXRoZW50aWNhdGVkVGVtcGxhdGUuanM/NjRkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtcmVhY3QgdjIuMi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTXNhbCB9IGZyb20gJy4uL2hvb2tzL3VzZU1zYWwuanMnO1xuaW1wb3J0IHsgdXNlSXNBdXRoZW50aWNhdGVkIH0gZnJvbSAnLi4vaG9va3MvdXNlSXNBdXRoZW50aWNhdGVkLmpzJztcbmltcG9ydCB7IGdldENoaWxkcmVuT3JGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzL3V0aWxpdGllcy5qcyc7XG5pbXBvcnQgeyBJbnRlcmFjdGlvblN0YXR1cyB9IGZyb20gJ0BhenVyZS9tc2FsLWJyb3dzZXInO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJlbmRlcnMgY2hpbGQgY29tcG9uZW50cyBpZiB1c2VyIGlzIHVuYXV0aGVudGljYXRlZFxyXG4gKiBAcGFyYW0gcHJvcHNcclxuICovXHJcbmZ1bmN0aW9uIFVuYXV0aGVudGljYXRlZFRlbXBsYXRlKHsgdXNlcm5hbWUsIGhvbWVBY2NvdW50SWQsIGxvY2FsQWNjb3VudElkLCBjaGlsZHJlbiwgfSkge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHVzZU1zYWwoKTtcclxuICAgIGNvbnN0IGFjY291bnRJZGVudGlmaWVyID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlcm5hbWUsXHJcbiAgICAgICAgICAgIGhvbWVBY2NvdW50SWQsXHJcbiAgICAgICAgICAgIGxvY2FsQWNjb3VudElkLFxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbdXNlcm5hbWUsIGhvbWVBY2NvdW50SWQsIGxvY2FsQWNjb3VudElkXSk7XHJcbiAgICBjb25zdCBpc0F1dGhlbnRpY2F0ZWQgPSB1c2VJc0F1dGhlbnRpY2F0ZWQoYWNjb3VudElkZW50aWZpZXIpO1xyXG4gICAgaWYgKCFpc0F1dGhlbnRpY2F0ZWQgJiZcclxuICAgICAgICBjb250ZXh0LmluUHJvZ3Jlc3MgIT09IEludGVyYWN0aW9uU3RhdHVzLlN0YXJ0dXAgJiZcclxuICAgICAgICBjb250ZXh0LmluUHJvZ3Jlc3MgIT09IEludGVyYWN0aW9uU3RhdHVzLkhhbmRsZVJlZGlyZWN0KSB7XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlYWN0X19kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBnZXRDaGlsZHJlbk9yRnVuY3Rpb24oY2hpbGRyZW4sIGNvbnRleHQpKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxuXG5leHBvcnQgeyBVbmF1dGhlbnRpY2F0ZWRUZW1wbGF0ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5hdXRoZW50aWNhdGVkVGVtcGxhdGUuanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJ1c2VNZW1vIiwidXNlTXNhbCIsInVzZUlzQXV0aGVudGljYXRlZCIsImdldENoaWxkcmVuT3JGdW5jdGlvbiIsIkludGVyYWN0aW9uU3RhdHVzIiwiVW5hdXRoZW50aWNhdGVkVGVtcGxhdGUiLCJ1c2VybmFtZSIsImhvbWVBY2NvdW50SWQiLCJsb2NhbEFjY291bnRJZCIsImNoaWxkcmVuIiwiY29udGV4dCIsImFjY291bnRJZGVudGlmaWVyIiwiaXNBdXRoZW50aWNhdGVkIiwiaW5Qcm9ncmVzcyIsIlN0YXJ0dXAiLCJIYW5kbGVSZWRpcmVjdCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/components/UnauthenticatedTemplate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/components/withMsal.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/components/withMsal.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withMsal: () => (/* binding */ withMsal)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hooks/useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props\r\n * @param Component\r\n */ const withMsal = (Component)=>{\n    const ComponentWithMsal = (props)=>{\n        const msal = (0,_hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_1__.useMsal)();\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n            ...props,\n            msalContext: msal\n        });\n    };\n    const componentName = Component.displayName || Component.name || \"Component\";\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\n    return ComponentWithMsal;\n};\n //# sourceMappingURL=withMsal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9jb21wb25lbnRzL3dpdGhNc2FsLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUNtQztBQUNXO0FBRTlDOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNELE1BQU1FLFdBQVcsQ0FBQ0M7SUFDZCxNQUFNQyxvQkFBb0IsQ0FBQ0M7UUFDdkIsTUFBTUMsT0FBT0wsMERBQU9BO1FBQ3BCLHFCQUFPRCxnREFBNEIsQ0FBQ0csV0FBVztZQUFFLEdBQUdFLEtBQUs7WUFBRUcsYUFBYUY7UUFBSztJQUNqRjtJQUNBLE1BQU1HLGdCQUFnQk4sVUFBVU8sV0FBVyxJQUFJUCxVQUFVUSxJQUFJLElBQUk7SUFDakVQLGtCQUFrQk0sV0FBVyxHQUFHLENBQUMsU0FBUyxFQUFFRCxjQUFjLENBQUMsQ0FBQztJQUM1RCxPQUFPTDtBQUNYO0FBRW9CLENBQ3BCLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLXJlYWN0L2Rpc3QvY29tcG9uZW50cy93aXRoTXNhbC5qcz82ZWIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1yZWFjdCB2Mi4yLjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZU1zYWwgfSBmcm9tICcuLi9ob29rcy91c2VNc2FsLmpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBIaWdoZXIgb3JkZXIgY29tcG9uZW50IHdyYXBzIHByb3ZpZGVkIGNvbXBvbmVudCB3aXRoIG1zYWwgYnkgaW5qZWN0aW5nIG1zYWwgY29udGV4dCB2YWx1ZXMgaW50byB0aGUgY29tcG9uZW50J3MgcHJvcHNcclxuICogQHBhcmFtIENvbXBvbmVudFxyXG4gKi9cclxuY29uc3Qgd2l0aE1zYWwgPSAoQ29tcG9uZW50KSA9PiB7XHJcbiAgICBjb25zdCBDb21wb25lbnRXaXRoTXNhbCA9IChwcm9wcykgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1zYWwgPSB1c2VNc2FsKCk7XHJcbiAgICAgICAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB7IC4uLnByb3BzLCBtc2FsQ29udGV4dDogbXNhbCB9KTtcclxuICAgIH07XHJcbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IFwiQ29tcG9uZW50XCI7XHJcbiAgICBDb21wb25lbnRXaXRoTXNhbC5kaXNwbGF5TmFtZSA9IGB3aXRoTXNhbCgke2NvbXBvbmVudE5hbWV9KWA7XHJcbiAgICByZXR1cm4gQ29tcG9uZW50V2l0aE1zYWw7XHJcbn07XG5cbmV4cG9ydCB7IHdpdGhNc2FsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoTXNhbC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdF9fZGVmYXVsdCIsInVzZU1zYWwiLCJ3aXRoTXNhbCIsIkNvbXBvbmVudCIsIkNvbXBvbmVudFdpdGhNc2FsIiwicHJvcHMiLCJtc2FsIiwiY3JlYXRlRWxlbWVudCIsIm1zYWxDb250ZXh0IiwiY29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/components/withMsal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/error/ReactAuthError.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/error/ReactAuthError.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactAuthError: () => (/* binding */ ReactAuthError),\n/* harmony export */   ReactAuthErrorMessage: () => (/* binding */ ReactAuthErrorMessage)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const ReactAuthErrorMessage = {\n    invalidInteractionType: {\n        code: \"invalid_interaction_type\",\n        desc: \"The provided interaction type is invalid.\"\n    },\n    unableToFallbackToInteraction: {\n        code: \"unable_to_fallback_to_interaction\",\n        desc: \"Interaction is required but another interaction is already in progress. Please try again when the current interaction is complete.\"\n    }\n};\nclass ReactAuthError extends _azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        Object.setPrototypeOf(this, ReactAuthError.prototype);\n        this.name = \"ReactAuthError\";\n    }\n    static createInvalidInteractionTypeError() {\n        return new ReactAuthError(ReactAuthErrorMessage.invalidInteractionType.code, ReactAuthErrorMessage.invalidInteractionType.desc);\n    }\n    static createUnableToFallbackToInteractionError() {\n        return new ReactAuthError(ReactAuthErrorMessage.unableToFallbackToInteraction.code, ReactAuthErrorMessage.unableToFallbackToInteraction.desc);\n    }\n}\n //# sourceMappingURL=ReactAuthError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9lcnJvci9SZWFjdEF1dGhFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDZ0Q7QUFFaEQ7OztDQUdDLEdBQ0QsTUFBTUMsd0JBQXdCO0lBQzFCQyx3QkFBd0I7UUFDcEJDLE1BQU07UUFDTkMsTUFBTTtJQUNWO0lBQ0FDLCtCQUErQjtRQUMzQkYsTUFBTTtRQUNOQyxNQUFNO0lBQ1Y7QUFDSjtBQUNBLE1BQU1FLHVCQUF1Qk4sMERBQVNBO0lBQ2xDTyxZQUFZQyxTQUFTLEVBQUVDLFlBQVksQ0FBRTtRQUNqQyxLQUFLLENBQUNELFdBQVdDO1FBQ2pCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFTCxlQUFlTSxTQUFTO1FBQ3BELElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2hCO0lBQ0EsT0FBT0Msb0NBQW9DO1FBQ3ZDLE9BQU8sSUFBSVIsZUFBZUwsc0JBQXNCQyxzQkFBc0IsQ0FBQ0MsSUFBSSxFQUFFRixzQkFBc0JDLHNCQUFzQixDQUFDRSxJQUFJO0lBQ2xJO0lBQ0EsT0FBT1csMkNBQTJDO1FBQzlDLE9BQU8sSUFBSVQsZUFBZUwsc0JBQXNCSSw2QkFBNkIsQ0FBQ0YsSUFBSSxFQUFFRixzQkFBc0JJLDZCQUE2QixDQUFDRCxJQUFJO0lBQ2hKO0FBQ0o7QUFFaUQsQ0FDakQsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9lcnJvci9SZWFjdEF1dGhFcnJvci5qcz85MWJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1yZWFjdCB2Mi4yLjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yIH0gZnJvbSAnQGF6dXJlL21zYWwtYnJvd3Nlcic7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBSZWFjdEF1dGhFcnJvck1lc3NhZ2UgPSB7XHJcbiAgICBpbnZhbGlkSW50ZXJhY3Rpb25UeXBlOiB7XHJcbiAgICAgICAgY29kZTogXCJpbnZhbGlkX2ludGVyYWN0aW9uX3R5cGVcIixcclxuICAgICAgICBkZXNjOiBcIlRoZSBwcm92aWRlZCBpbnRlcmFjdGlvbiB0eXBlIGlzIGludmFsaWQuXCIsXHJcbiAgICB9LFxyXG4gICAgdW5hYmxlVG9GYWxsYmFja1RvSW50ZXJhY3Rpb246IHtcclxuICAgICAgICBjb2RlOiBcInVuYWJsZV90b19mYWxsYmFja190b19pbnRlcmFjdGlvblwiLFxyXG4gICAgICAgIGRlc2M6IFwiSW50ZXJhY3Rpb24gaXMgcmVxdWlyZWQgYnV0IGFub3RoZXIgaW50ZXJhY3Rpb24gaXMgYWxyZWFkeSBpbiBwcm9ncmVzcy4gUGxlYXNlIHRyeSBhZ2FpbiB3aGVuIHRoZSBjdXJyZW50IGludGVyYWN0aW9uIGlzIGNvbXBsZXRlLlwiLFxyXG4gICAgfSxcclxufTtcclxuY2xhc3MgUmVhY3RBdXRoRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlYWN0QXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZWFjdEF1dGhFcnJvclwiO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNyZWF0ZUludmFsaWRJbnRlcmFjdGlvblR5cGVFcnJvcigpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJlYWN0QXV0aEVycm9yKFJlYWN0QXV0aEVycm9yTWVzc2FnZS5pbnZhbGlkSW50ZXJhY3Rpb25UeXBlLmNvZGUsIFJlYWN0QXV0aEVycm9yTWVzc2FnZS5pbnZhbGlkSW50ZXJhY3Rpb25UeXBlLmRlc2MpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNyZWF0ZVVuYWJsZVRvRmFsbGJhY2tUb0ludGVyYWN0aW9uRXJyb3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWFjdEF1dGhFcnJvcihSZWFjdEF1dGhFcnJvck1lc3NhZ2UudW5hYmxlVG9GYWxsYmFja1RvSW50ZXJhY3Rpb24uY29kZSwgUmVhY3RBdXRoRXJyb3JNZXNzYWdlLnVuYWJsZVRvRmFsbGJhY2tUb0ludGVyYWN0aW9uLmRlc2MpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFJlYWN0QXV0aEVycm9yLCBSZWFjdEF1dGhFcnJvck1lc3NhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlYWN0QXV0aEVycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhFcnJvciIsIlJlYWN0QXV0aEVycm9yTWVzc2FnZSIsImludmFsaWRJbnRlcmFjdGlvblR5cGUiLCJjb2RlIiwiZGVzYyIsInVuYWJsZVRvRmFsbGJhY2tUb0ludGVyYWN0aW9uIiwiUmVhY3RBdXRoRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwibmFtZSIsImNyZWF0ZUludmFsaWRJbnRlcmFjdGlvblR5cGVFcnJvciIsImNyZWF0ZVVuYWJsZVRvRmFsbGJhY2tUb0ludGVyYWN0aW9uRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/error/ReactAuthError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/hooks/useAccount.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/hooks/useAccount.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAccount: () => (/* binding */ useAccount)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _useMsal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/* harmony import */ var _utils_utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utilities.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function getAccount(instance, accountIdentifiers) {\n    if (!accountIdentifiers || !accountIdentifiers.homeAccountId && !accountIdentifiers.localAccountId && !accountIdentifiers.username) {\n        // If no account identifiers are provided, return active account\n        return instance.getActiveAccount();\n    }\n    return (0,_utils_utilities_js__WEBPACK_IMPORTED_MODULE_2__.getAccountByIdentifiers)(instance.getAllAccounts(), accountIdentifiers);\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */ function useAccount(accountIdentifiers) {\n    const { instance, inProgress, logger } = (0,_useMsal_js__WEBPACK_IMPORTED_MODULE_1__.useMsal)();\n    const [account, setAccount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>getAccount(instance, accountIdentifiers));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setAccount((currentAccount)=>{\n            const nextAccount = getAccount(instance, accountIdentifiers);\n            if (!_azure_msal_browser__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.accountInfoIsEqual(currentAccount, nextAccount, true)) {\n                logger.info(\"useAccount - Updating account\");\n                return nextAccount;\n            }\n            return currentAccount;\n        });\n    }, [\n        inProgress,\n        accountIdentifiers,\n        instance,\n        logger\n    ]);\n    return account;\n}\n //# sourceMappingURL=useAccount.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9ob29rcy91c2VBY2NvdW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsd0NBQXdDLEdBQ3hDO0FBQzRDO0FBQ1E7QUFDYjtBQUN5QjtBQUVoRTs7O0NBR0MsR0FDRCxTQUFTSyxXQUFXQyxRQUFRLEVBQUVDLGtCQUFrQjtJQUM1QyxJQUFJLENBQUNBLHNCQUNBLENBQUNBLG1CQUFtQkMsYUFBYSxJQUM5QixDQUFDRCxtQkFBbUJFLGNBQWMsSUFDbEMsQ0FBQ0YsbUJBQW1CRyxRQUFRLEVBQUc7UUFDbkMsZ0VBQWdFO1FBQ2hFLE9BQU9KLFNBQVNLLGdCQUFnQjtJQUNwQztJQUNBLE9BQU9QLDRFQUF1QkEsQ0FBQ0UsU0FBU00sY0FBYyxJQUFJTDtBQUM5RDtBQUNBOzs7Q0FHQyxHQUNELFNBQVNNLFdBQVdOLGtCQUFrQjtJQUNsQyxNQUFNLEVBQUVELFFBQVEsRUFBRVEsVUFBVSxFQUFFQyxNQUFNLEVBQUUsR0FBR1osb0RBQU9BO0lBQ2hELE1BQU0sQ0FBQ2EsU0FBU0MsV0FBVyxHQUFHakIsK0NBQVFBLENBQUMsSUFBTUssV0FBV0MsVUFBVUM7SUFDbEVOLGdEQUFTQSxDQUFDO1FBQ05nQixXQUFXLENBQUNDO1lBQ1IsTUFBTUMsY0FBY2QsV0FBV0MsVUFBVUM7WUFDekMsSUFBSSxDQUFDTCw4REFBYUEsQ0FBQ2tCLGtCQUFrQixDQUFDRixnQkFBZ0JDLGFBQWEsT0FBTztnQkFDdEVKLE9BQU9NLElBQUksQ0FBQztnQkFDWixPQUFPRjtZQUNYO1lBQ0EsT0FBT0Q7UUFDWDtJQUNKLEdBQUc7UUFBQ0o7UUFBWVA7UUFBb0JEO1FBQVVTO0tBQU87SUFDckQsT0FBT0M7QUFDWDtBQUVzQixDQUN0QixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1yZWFjdC9kaXN0L2hvb2tzL3VzZUFjY291bnQuanM/NjExMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtcmVhY3QgdjIuMi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBY2NvdW50RW50aXR5IH0gZnJvbSAnQGF6dXJlL21zYWwtYnJvd3Nlcic7XG5pbXBvcnQgeyB1c2VNc2FsIH0gZnJvbSAnLi91c2VNc2FsLmpzJztcbmltcG9ydCB7IGdldEFjY291bnRCeUlkZW50aWZpZXJzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbGl0aWVzLmpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEFjY291bnQoaW5zdGFuY2UsIGFjY291bnRJZGVudGlmaWVycykge1xyXG4gICAgaWYgKCFhY2NvdW50SWRlbnRpZmllcnMgfHxcclxuICAgICAgICAoIWFjY291bnRJZGVudGlmaWVycy5ob21lQWNjb3VudElkICYmXHJcbiAgICAgICAgICAgICFhY2NvdW50SWRlbnRpZmllcnMubG9jYWxBY2NvdW50SWQgJiZcclxuICAgICAgICAgICAgIWFjY291bnRJZGVudGlmaWVycy51c2VybmFtZSkpIHtcclxuICAgICAgICAvLyBJZiBubyBhY2NvdW50IGlkZW50aWZpZXJzIGFyZSBwcm92aWRlZCwgcmV0dXJuIGFjdGl2ZSBhY2NvdW50XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmdldEFjdGl2ZUFjY291bnQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRBY2NvdW50QnlJZGVudGlmaWVycyhpbnN0YW5jZS5nZXRBbGxBY2NvdW50cygpLCBhY2NvdW50SWRlbnRpZmllcnMpO1xyXG59XHJcbi8qKlxyXG4gKiBHaXZlbiAxIG9yIG1vcmUgYWNjb3VudElkZW50aWZpZXJzLCByZXR1cm5zIHRoZSBBY2NvdW50IG9iamVjdCBpZiB0aGUgdXNlciBpcyBzaWduZWQtaW5cclxuICogQHBhcmFtIGFjY291bnRJZGVudGlmaWVyc1xyXG4gKi9cclxuZnVuY3Rpb24gdXNlQWNjb3VudChhY2NvdW50SWRlbnRpZmllcnMpIHtcclxuICAgIGNvbnN0IHsgaW5zdGFuY2UsIGluUHJvZ3Jlc3MsIGxvZ2dlciB9ID0gdXNlTXNhbCgpO1xyXG4gICAgY29uc3QgW2FjY291bnQsIHNldEFjY291bnRdID0gdXNlU3RhdGUoKCkgPT4gZ2V0QWNjb3VudChpbnN0YW5jZSwgYWNjb3VudElkZW50aWZpZXJzKSk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldEFjY291bnQoKGN1cnJlbnRBY2NvdW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRBY2NvdW50ID0gZ2V0QWNjb3VudChpbnN0YW5jZSwgYWNjb3VudElkZW50aWZpZXJzKTtcclxuICAgICAgICAgICAgaWYgKCFBY2NvdW50RW50aXR5LmFjY291bnRJbmZvSXNFcXVhbChjdXJyZW50QWNjb3VudCwgbmV4dEFjY291bnQsIHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhcInVzZUFjY291bnQgLSBVcGRhdGluZyBhY2NvdW50XCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRBY2NvdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50QWNjb3VudDtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFtpblByb2dyZXNzLCBhY2NvdW50SWRlbnRpZmllcnMsIGluc3RhbmNlLCBsb2dnZXJdKTtcclxuICAgIHJldHVybiBhY2NvdW50O1xyXG59XG5cbmV4cG9ydCB7IHVzZUFjY291bnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUFjY291bnQuanMubWFwXG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJBY2NvdW50RW50aXR5IiwidXNlTXNhbCIsImdldEFjY291bnRCeUlkZW50aWZpZXJzIiwiZ2V0QWNjb3VudCIsImluc3RhbmNlIiwiYWNjb3VudElkZW50aWZpZXJzIiwiaG9tZUFjY291bnRJZCIsImxvY2FsQWNjb3VudElkIiwidXNlcm5hbWUiLCJnZXRBY3RpdmVBY2NvdW50IiwiZ2V0QWxsQWNjb3VudHMiLCJ1c2VBY2NvdW50IiwiaW5Qcm9ncmVzcyIsImxvZ2dlciIsImFjY291bnQiLCJzZXRBY2NvdW50IiwiY3VycmVudEFjY291bnQiLCJuZXh0QWNjb3VudCIsImFjY291bnRJbmZvSXNFcXVhbCIsImluZm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/hooks/useAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsAuthenticated: () => (/* binding */ useIsAuthenticated)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _useMsal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _utils_utilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utilities.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isAuthenticated(allAccounts, matchAccount) {\n    if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n        return !!(0,_utils_utilities_js__WEBPACK_IMPORTED_MODULE_2__.getAccountByIdentifiers)(allAccounts, matchAccount);\n    }\n    return allAccounts.length > 0;\n}\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */ function useIsAuthenticated(matchAccount) {\n    const { accounts: allAccounts, inProgress } = (0,_useMsal_js__WEBPACK_IMPORTED_MODULE_1__.useMsal)();\n    const isUserAuthenticated = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (inProgress === _azure_msal_browser__WEBPACK_IMPORTED_MODULE_3__.InteractionStatus.Startup) {\n            return false;\n        }\n        return isAuthenticated(allAccounts, matchAccount);\n    }, [\n        allAccounts,\n        inProgress,\n        matchAccount\n    ]);\n    return isUserAuthenticated;\n}\n //# sourceMappingURL=useIsAuthenticated.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9ob29rcy91c2VJc0F1dGhlbnRpY2F0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDZ0M7QUFDTztBQUNpQjtBQUNRO0FBRWhFOzs7Q0FHQyxHQUNELFNBQVNJLGdCQUFnQkMsV0FBVyxFQUFFQyxZQUFZO0lBQzlDLElBQUlBLGdCQUNDQSxDQUFBQSxhQUFhQyxRQUFRLElBQ2xCRCxhQUFhRSxhQUFhLElBQzFCRixhQUFhRyxjQUFjLEdBQUc7UUFDbEMsT0FBTyxDQUFDLENBQUNOLDRFQUF1QkEsQ0FBQ0UsYUFBYUM7SUFDbEQ7SUFDQSxPQUFPRCxZQUFZSyxNQUFNLEdBQUc7QUFDaEM7QUFDQTs7O0NBR0MsR0FDRCxTQUFTQyxtQkFBbUJMLFlBQVk7SUFDcEMsTUFBTSxFQUFFTSxVQUFVUCxXQUFXLEVBQUVRLFVBQVUsRUFBRSxHQUFHWixvREFBT0E7SUFDckQsTUFBTWEsc0JBQXNCZCw4Q0FBT0EsQ0FBQztRQUNoQyxJQUFJYSxlQUFlWCxrRUFBaUJBLENBQUNhLE9BQU8sRUFBRTtZQUMxQyxPQUFPO1FBQ1g7UUFDQSxPQUFPWCxnQkFBZ0JDLGFBQWFDO0lBQ3hDLEdBQUc7UUFBQ0Q7UUFBYVE7UUFBWVA7S0FBYTtJQUMxQyxPQUFPUTtBQUNYO0FBRThCLENBQzlCLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLXJlYWN0L2Rpc3QvaG9va3MvdXNlSXNBdXRoZW50aWNhdGVkLmpzPzUwODQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLXJlYWN0IHYyLjIuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTXNhbCB9IGZyb20gJy4vdXNlTXNhbC5qcyc7XG5pbXBvcnQgeyBJbnRlcmFjdGlvblN0YXR1cyB9IGZyb20gJ0BhenVyZS9tc2FsLWJyb3dzZXInO1xuaW1wb3J0IHsgZ2V0QWNjb3VudEJ5SWRlbnRpZmllcnMgfSBmcm9tICcuLi91dGlscy91dGlsaXRpZXMuanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKGFsbEFjY291bnRzLCBtYXRjaEFjY291bnQpIHtcclxuICAgIGlmIChtYXRjaEFjY291bnQgJiZcclxuICAgICAgICAobWF0Y2hBY2NvdW50LnVzZXJuYW1lIHx8XHJcbiAgICAgICAgICAgIG1hdGNoQWNjb3VudC5ob21lQWNjb3VudElkIHx8XHJcbiAgICAgICAgICAgIG1hdGNoQWNjb3VudC5sb2NhbEFjY291bnRJZCkpIHtcclxuICAgICAgICByZXR1cm4gISFnZXRBY2NvdW50QnlJZGVudGlmaWVycyhhbGxBY2NvdW50cywgbWF0Y2hBY2NvdW50KTtcclxuICAgIH1cclxuICAgIHJldHVybiBhbGxBY2NvdW50cy5sZW5ndGggPiAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGEgdXNlciBpcyBjdXJyZW50bHkgc2lnbmVkLWluLiBPcHRpb25hbGx5IHByb3ZpZGUgMSBvciBtb3JlIGFjY291bnRJZGVudGlmaWVycyB0byBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyB1c2VyIGlzIHNpZ25lZC1pblxyXG4gKiBAcGFyYW0gbWF0Y2hBY2NvdW50XHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VJc0F1dGhlbnRpY2F0ZWQobWF0Y2hBY2NvdW50KSB7XHJcbiAgICBjb25zdCB7IGFjY291bnRzOiBhbGxBY2NvdW50cywgaW5Qcm9ncmVzcyB9ID0gdXNlTXNhbCgpO1xyXG4gICAgY29uc3QgaXNVc2VyQXV0aGVudGljYXRlZCA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgICAgIGlmIChpblByb2dyZXNzID09PSBJbnRlcmFjdGlvblN0YXR1cy5TdGFydHVwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzQXV0aGVudGljYXRlZChhbGxBY2NvdW50cywgbWF0Y2hBY2NvdW50KTtcclxuICAgIH0sIFthbGxBY2NvdW50cywgaW5Qcm9ncmVzcywgbWF0Y2hBY2NvdW50XSk7XHJcbiAgICByZXR1cm4gaXNVc2VyQXV0aGVudGljYXRlZDtcclxufVxuXG5leHBvcnQgeyB1c2VJc0F1dGhlbnRpY2F0ZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUlzQXV0aGVudGljYXRlZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VNZW1vIiwidXNlTXNhbCIsIkludGVyYWN0aW9uU3RhdHVzIiwiZ2V0QWNjb3VudEJ5SWRlbnRpZmllcnMiLCJpc0F1dGhlbnRpY2F0ZWQiLCJhbGxBY2NvdW50cyIsIm1hdGNoQWNjb3VudCIsInVzZXJuYW1lIiwiaG9tZUFjY291bnRJZCIsImxvY2FsQWNjb3VudElkIiwibGVuZ3RoIiwidXNlSXNBdXRoZW50aWNhdGVkIiwiYWNjb3VudHMiLCJpblByb2dyZXNzIiwiaXNVc2VyQXV0aGVudGljYXRlZCIsIlN0YXJ0dXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/hooks/useMsal.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMsal: () => (/* binding */ useMsal)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _MsalContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../MsalContext.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/MsalContext.js\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Returns Msal Context values\r\n */ const useMsal = ()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_MsalContext_js__WEBPACK_IMPORTED_MODULE_1__.MsalContext);\n //# sourceMappingURL=useMsal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9ob29rcy91c2VNc2FsLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUNtQztBQUNhO0FBRWhEOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUUsVUFBVSxJQUFNRixpREFBVUEsQ0FBQ0Msd0RBQVdBO0FBRXpCLENBQ25CLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLXJlYWN0L2Rpc3QvaG9va3MvdXNlTXNhbC5qcz85ZmQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1yZWFjdCB2Mi4yLjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1zYWxDb250ZXh0IH0gZnJvbSAnLi4vTXNhbENvbnRleHQuanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgTXNhbCBDb250ZXh0IHZhbHVlc1xyXG4gKi9cclxuY29uc3QgdXNlTXNhbCA9ICgpID0+IHVzZUNvbnRleHQoTXNhbENvbnRleHQpO1xuXG5leHBvcnQgeyB1c2VNc2FsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VNc2FsLmpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZUNvbnRleHQiLCJNc2FsQ29udGV4dCIsInVzZU1zYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsalAuthentication.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/hooks/useMsalAuthentication.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMsalAuthentication: () => (/* binding */ useMsalAuthentication)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-browser */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useIsAuthenticated.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js\");\n/* harmony import */ var _useMsal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/* harmony import */ var _useAccount_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useAccount.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useAccount.js\");\n/* harmony import */ var _error_ReactAuthError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ReactAuthError.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/error/ReactAuthError.js\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * If a user is not currently signed in this hook invokes a login. Failed logins can be retried using the login callback returned.\r\n * If a user is currently signed in this hook attempts to acquire a token. Subsequent token requests can use the acquireToken callback returned.\r\n * Optionally provide a request object to be used in the login/acquireToken call.\r\n * Optionally provide a specific user that should be logged in.\r\n * @param interactionType\r\n * @param authenticationRequest\r\n * @param accountIdentifiers\r\n */ function useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {\n    const { instance, inProgress, logger } = (0,_useMsal_js__WEBPACK_IMPORTED_MODULE_2__.useMsal)();\n    const isAuthenticated = (0,_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_1__.useIsAuthenticated)(accountIdentifiers);\n    const account = (0,_useAccount_js__WEBPACK_IMPORTED_MODULE_3__.useAccount)(accountIdentifiers);\n    const [[result, error], setResponse] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        null,\n        null\n    ]);\n    // Used to prevent state updates after unmount\n    const mounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            mounted.current = false;\n        };\n    }, []);\n    // Boolean used to check if interaction is in progress in acquireTokenSilent fallback. Use Ref instead of state to prevent acquireToken function from being regenerated on each change to interactionInProgress value\n    const interactionInProgress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(inProgress !== _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionStatus.None);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        interactionInProgress.current = inProgress !== _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionStatus.None;\n    }, [\n        inProgress\n    ]);\n    // Flag used to control when the hook calls login/acquireToken\n    const shouldAcquireToken = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!!error) {\n            // Errors should be handled by consuming component\n            shouldAcquireToken.current = false;\n            return;\n        }\n        if (!!result) {\n            // Token has already been acquired, consuming component/application is responsible for renewing\n            shouldAcquireToken.current = false;\n            return;\n        }\n    }, [\n        error,\n        result\n    ]);\n    const login = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (callbackInteractionType, callbackRequest)=>{\n        const loginType = callbackInteractionType || interactionType;\n        const loginRequest = callbackRequest || authenticationRequest;\n        switch(loginType){\n            case _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionType.Popup:\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n                return instance.loginPopup(loginRequest);\n            case _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionType.Redirect:\n                // This promise is not expected to resolve due to full frame redirect\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n                return instance.loginRedirect(loginRequest).then(null);\n            case _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionType.Silent:\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n                return instance.ssoSilent(loginRequest);\n            default:\n                throw _error_ReactAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ReactAuthError.createInvalidInteractionTypeError();\n        }\n    }, [\n        instance,\n        interactionType,\n        authenticationRequest,\n        logger\n    ]);\n    const acquireToken = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (callbackInteractionType, callbackRequest)=>{\n        const fallbackInteractionType = callbackInteractionType || interactionType;\n        let tokenRequest;\n        if (callbackRequest) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the callback\");\n            tokenRequest = {\n                ...callbackRequest\n            };\n        } else if (authenticationRequest) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the hook\");\n            tokenRequest = {\n                ...authenticationRequest,\n                scopes: authenticationRequest.scopes || _azure_msal_browser__WEBPACK_IMPORTED_MODULE_6__.OIDC_DEFAULT_SCOPES\n            };\n        } else {\n            logger.trace(\"useMsalAuthentication - acquireToken - No request object provided, using default request.\");\n            tokenRequest = {\n                scopes: _azure_msal_browser__WEBPACK_IMPORTED_MODULE_6__.OIDC_DEFAULT_SCOPES\n            };\n        }\n        if (!tokenRequest.account && account) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Attaching account to request\");\n            tokenRequest.account = account;\n        }\n        const getToken = async ()=>{\n            logger.verbose(\"useMsalAuthentication - Calling acquireTokenSilent\");\n            return instance.acquireTokenSilent(tokenRequest).catch(async (e)=>{\n                if (e instanceof _azure_msal_browser__WEBPACK_IMPORTED_MODULE_7__.InteractionRequiredAuthError) {\n                    if (!interactionInProgress.current) {\n                        logger.error(\"useMsalAuthentication - Interaction required, falling back to interaction\");\n                        return login(fallbackInteractionType, tokenRequest);\n                    } else {\n                        logger.error(\"useMsalAuthentication - Interaction required but is already in progress. Please try again, if needed, after interaction completes.\");\n                        throw _error_ReactAuthError_js__WEBPACK_IMPORTED_MODULE_4__.ReactAuthError.createUnableToFallbackToInteractionError();\n                    }\n                }\n                throw e;\n            });\n        };\n        return getToken().then((response)=>{\n            if (mounted.current) {\n                setResponse([\n                    response,\n                    null\n                ]);\n            }\n            return response;\n        }).catch((e)=>{\n            if (mounted.current) {\n                setResponse([\n                    null,\n                    e\n                ]);\n            }\n            throw e;\n        });\n    }, [\n        instance,\n        interactionType,\n        authenticationRequest,\n        logger,\n        account,\n        login\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const callbackId = instance.addEventCallback((message)=>{\n            switch(message.eventType){\n                case _azure_msal_browser__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_SUCCESS:\n                case _azure_msal_browser__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_SUCCESS:\n                    if (message.payload) {\n                        setResponse([\n                            message.payload,\n                            null\n                        ]);\n                    }\n                    break;\n                case _azure_msal_browser__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_FAILURE:\n                case _azure_msal_browser__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_FAILURE:\n                    if (message.error) {\n                        setResponse([\n                            null,\n                            message.error\n                        ]);\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n        return ()=>{\n            if (callbackId) {\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [\n        instance,\n        logger\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (shouldAcquireToken.current && inProgress === _azure_msal_browser__WEBPACK_IMPORTED_MODULE_5__.InteractionStatus.None) {\n            shouldAcquireToken.current = false;\n            if (!isAuthenticated) {\n                logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n                login().catch(()=>{\n                    // Errors are saved in state above\n                    return;\n                });\n            } else if (account) {\n                logger.info(\"useMsalAuthentication - User is authenticated, attempting to acquire token\");\n                acquireToken().catch(()=>{\n                    // Errors are saved in state above\n                    return;\n                });\n            }\n        }\n    }, [\n        isAuthenticated,\n        account,\n        inProgress,\n        login,\n        acquireToken,\n        logger\n    ]);\n    return {\n        login,\n        acquireToken,\n        result,\n        error\n    };\n}\n //# sourceMappingURL=useMsalAuthentication.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsalAuthentication.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticatedTemplate: () => (/* reexport safe */ _components_AuthenticatedTemplate_js__WEBPACK_IMPORTED_MODULE_2__.AuthenticatedTemplate),\n/* harmony export */   MsalAuthenticationTemplate: () => (/* reexport safe */ _components_MsalAuthenticationTemplate_js__WEBPACK_IMPORTED_MODULE_4__.MsalAuthenticationTemplate),\n/* harmony export */   MsalConsumer: () => (/* reexport safe */ _MsalContext_js__WEBPACK_IMPORTED_MODULE_0__.MsalConsumer),\n/* harmony export */   MsalContext: () => (/* reexport safe */ _MsalContext_js__WEBPACK_IMPORTED_MODULE_0__.MsalContext),\n/* harmony export */   MsalProvider: () => (/* reexport safe */ _MsalProvider_js__WEBPACK_IMPORTED_MODULE_1__.MsalProvider),\n/* harmony export */   UnauthenticatedTemplate: () => (/* reexport safe */ _components_UnauthenticatedTemplate_js__WEBPACK_IMPORTED_MODULE_3__.UnauthenticatedTemplate),\n/* harmony export */   useAccount: () => (/* reexport safe */ _hooks_useAccount_js__WEBPACK_IMPORTED_MODULE_7__.useAccount),\n/* harmony export */   useIsAuthenticated: () => (/* reexport safe */ _hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_8__.useIsAuthenticated),\n/* harmony export */   useMsal: () => (/* reexport safe */ _hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_6__.useMsal),\n/* harmony export */   useMsalAuthentication: () => (/* reexport safe */ _hooks_useMsalAuthentication_js__WEBPACK_IMPORTED_MODULE_9__.useMsalAuthentication),\n/* harmony export */   version: () => (/* reexport safe */ _packageMetadata_js__WEBPACK_IMPORTED_MODULE_10__.version),\n/* harmony export */   withMsal: () => (/* reexport safe */ _components_withMsal_js__WEBPACK_IMPORTED_MODULE_5__.withMsal)\n/* harmony export */ });\n/* harmony import */ var _MsalContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MsalContext.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/MsalContext.js\");\n/* harmony import */ var _MsalProvider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MsalProvider.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/MsalProvider.js\");\n/* harmony import */ var _components_AuthenticatedTemplate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/AuthenticatedTemplate.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/components/AuthenticatedTemplate.js\");\n/* harmony import */ var _components_UnauthenticatedTemplate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/UnauthenticatedTemplate.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/components/UnauthenticatedTemplate.js\");\n/* harmony import */ var _components_MsalAuthenticationTemplate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/MsalAuthenticationTemplate.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/components/MsalAuthenticationTemplate.js\");\n/* harmony import */ var _components_withMsal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/withMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/components/withMsal.js\");\n/* harmony import */ var _hooks_useMsal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useMsal.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsal.js\");\n/* harmony import */ var _hooks_useAccount_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hooks/useAccount.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useAccount.js\");\n/* harmony import */ var _hooks_useIsAuthenticated_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hooks/useIsAuthenticated.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useIsAuthenticated.js\");\n/* harmony import */ var _hooks_useMsalAuthentication_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hooks/useMsalAuthentication.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/hooks/useMsalAuthentication.js\");\n/* harmony import */ var _packageMetadata_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./packageMetadata.js */ \"(ssr)/./node_modules/@azure/msal-react/dist/packageMetadata.js\");\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUM2RDtBQUNaO0FBQzZCO0FBQ0k7QUFDTTtBQUNwQztBQUNQO0FBQ007QUFDZ0I7QUFDTTtBQUMxQixDQUMvQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1yZWFjdC9kaXN0L2luZGV4LmpzPzgzNjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLXJlYWN0IHYyLjIuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5leHBvcnQgeyBNc2FsQ29uc3VtZXIsIE1zYWxDb250ZXh0IH0gZnJvbSAnLi9Nc2FsQ29udGV4dC5qcyc7XG5leHBvcnQgeyBNc2FsUHJvdmlkZXIgfSBmcm9tICcuL01zYWxQcm92aWRlci5qcyc7XG5leHBvcnQgeyBBdXRoZW50aWNhdGVkVGVtcGxhdGUgfSBmcm9tICcuL2NvbXBvbmVudHMvQXV0aGVudGljYXRlZFRlbXBsYXRlLmpzJztcbmV4cG9ydCB7IFVuYXV0aGVudGljYXRlZFRlbXBsYXRlIH0gZnJvbSAnLi9jb21wb25lbnRzL1VuYXV0aGVudGljYXRlZFRlbXBsYXRlLmpzJztcbmV4cG9ydCB7IE1zYWxBdXRoZW50aWNhdGlvblRlbXBsYXRlIH0gZnJvbSAnLi9jb21wb25lbnRzL01zYWxBdXRoZW50aWNhdGlvblRlbXBsYXRlLmpzJztcbmV4cG9ydCB7IHdpdGhNc2FsIH0gZnJvbSAnLi9jb21wb25lbnRzL3dpdGhNc2FsLmpzJztcbmV4cG9ydCB7IHVzZU1zYWwgfSBmcm9tICcuL2hvb2tzL3VzZU1zYWwuanMnO1xuZXhwb3J0IHsgdXNlQWNjb3VudCB9IGZyb20gJy4vaG9va3MvdXNlQWNjb3VudC5qcyc7XG5leHBvcnQgeyB1c2VJc0F1dGhlbnRpY2F0ZWQgfSBmcm9tICcuL2hvb2tzL3VzZUlzQXV0aGVudGljYXRlZC5qcyc7XG5leHBvcnQgeyB1c2VNc2FsQXV0aGVudGljYXRpb24gfSBmcm9tICcuL2hvb2tzL3VzZU1zYWxBdXRoZW50aWNhdGlvbi5qcyc7XG5leHBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi9wYWNrYWdlTWV0YWRhdGEuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTXNhbENvbnN1bWVyIiwiTXNhbENvbnRleHQiLCJNc2FsUHJvdmlkZXIiLCJBdXRoZW50aWNhdGVkVGVtcGxhdGUiLCJVbmF1dGhlbnRpY2F0ZWRUZW1wbGF0ZSIsIk1zYWxBdXRoZW50aWNhdGlvblRlbXBsYXRlIiwid2l0aE1zYWwiLCJ1c2VNc2FsIiwidXNlQWNjb3VudCIsInVzZUlzQXV0aGVudGljYXRlZCIsInVzZU1zYWxBdXRoZW50aWNhdGlvbiIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/packageMetadata.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/packageMetadata.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n/* eslint-disable header/header */ const name = \"@azure/msal-react\";\nconst version = \"2.2.0\";\n //# sourceMappingURL=packageMetadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC9wYWNrYWdlTWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDQSxnQ0FBZ0MsR0FDaEMsTUFBTUEsT0FBTztBQUNiLE1BQU1DLFVBQVU7QUFFUyxDQUN6QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1yZWFjdC9kaXN0L3BhY2thZ2VNZXRhZGF0YS5qcz9jYjNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1yZWFjdCB2Mi4yLjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgaGVhZGVyL2hlYWRlciAqL1xyXG5jb25zdCBuYW1lID0gXCJAYXp1cmUvbXNhbC1yZWFjdFwiO1xyXG5jb25zdCB2ZXJzaW9uID0gXCIyLjIuMFwiO1xuXG5leHBvcnQgeyBuYW1lLCB2ZXJzaW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWNrYWdlTWV0YWRhdGEuanMubWFwXG4iXSwibmFtZXMiOlsibmFtZSIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/packageMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-react/dist/utils/utilities.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accountArraysAreEqual: () => (/* binding */ accountArraysAreEqual),\n/* harmony export */   getAccountByIdentifiers: () => (/* binding */ getAccountByIdentifiers),\n/* harmony export */   getChildrenOrFunction: () => (/* binding */ getChildrenOrFunction)\n/* harmony export */ });\n/*! @azure/msal-react v2.2.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function getChildrenOrFunction(children, args) {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n/**\r\n * Helper function to determine whether 2 arrays are equal\r\n * Used to avoid unnecessary state updates\r\n * @param arrayA\r\n * @param arrayB\r\n */ function accountArraysAreEqual(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n    const comparisonArray = [\n        ...arrayB\n    ];\n    return arrayA.every((elementA)=>{\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n        return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;\n    });\n}\nfunction getAccountByIdentifiers(allAccounts, accountIdentifiers) {\n    if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter((accountObj)=>{\n            if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        return matchedAccounts[0] || null;\n    } else {\n        return null;\n    }\n}\n //# sourceMappingURL=utilities.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC91dGlscy91dGlsaXRpZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0NBQXdDLEdBQ3hDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0Esc0JBQXNCQyxRQUFRLEVBQUVDLElBQUk7SUFDekMsSUFBSSxPQUFPRCxhQUFhLFlBQVk7UUFDaEMsT0FBT0EsU0FBU0M7SUFDcEI7SUFDQSxPQUFPRDtBQUNYO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTRSxzQkFBc0JDLE1BQU0sRUFBRUMsTUFBTTtJQUN6QyxJQUFJRCxPQUFPRSxNQUFNLEtBQUtELE9BQU9DLE1BQU0sRUFBRTtRQUNqQyxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxrQkFBa0I7V0FBSUY7S0FBTztJQUNuQyxPQUFPRCxPQUFPSSxLQUFLLENBQUMsQ0FBQ0M7UUFDakIsTUFBTUMsV0FBV0gsZ0JBQWdCSSxLQUFLO1FBQ3RDLElBQUksQ0FBQ0YsWUFBWSxDQUFDQyxVQUFVO1lBQ3hCLE9BQU87UUFDWDtRQUNBLE9BQVFELFNBQVNHLGFBQWEsS0FBS0YsU0FBU0UsYUFBYSxJQUNyREgsU0FBU0ksY0FBYyxLQUFLSCxTQUFTRyxjQUFjLElBQ25ESixTQUFTSyxRQUFRLEtBQUtKLFNBQVNJLFFBQVE7SUFDL0M7QUFDSjtBQUNBLFNBQVNDLHdCQUF3QkMsV0FBVyxFQUFFQyxrQkFBa0I7SUFDNUQsSUFBSUQsWUFBWVYsTUFBTSxHQUFHLEtBQ3BCVyxDQUFBQSxtQkFBbUJMLGFBQWEsSUFDN0JLLG1CQUFtQkosY0FBYyxJQUNqQ0ksbUJBQW1CSCxRQUFRLEdBQUc7UUFDbEMsTUFBTUksa0JBQWtCRixZQUFZRyxNQUFNLENBQUMsQ0FBQ0M7WUFDeEMsSUFBSUgsbUJBQW1CSCxRQUFRLElBQzNCRyxtQkFBbUJILFFBQVEsQ0FBQ08sV0FBVyxPQUNuQ0QsV0FBV04sUUFBUSxDQUFDTyxXQUFXLElBQUk7Z0JBQ3ZDLE9BQU87WUFDWDtZQUNBLElBQUlKLG1CQUFtQkwsYUFBYSxJQUNoQ0ssbUJBQW1CTCxhQUFhLENBQUNTLFdBQVcsT0FDeENELFdBQVdSLGFBQWEsQ0FBQ1MsV0FBVyxJQUFJO2dCQUM1QyxPQUFPO1lBQ1g7WUFDQSxJQUFJSixtQkFBbUJKLGNBQWMsSUFDakNJLG1CQUFtQkosY0FBYyxDQUFDUSxXQUFXLE9BQ3pDRCxXQUFXUCxjQUFjLENBQUNRLFdBQVcsSUFBSTtnQkFDN0MsT0FBTztZQUNYO1lBQ0EsT0FBTztRQUNYO1FBQ0EsT0FBT0gsZUFBZSxDQUFDLEVBQUUsSUFBSTtJQUNqQyxPQUNLO1FBQ0QsT0FBTztJQUNYO0FBQ0o7QUFFaUYsQ0FDakYscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbW9uaXRvci1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtcmVhY3QvZGlzdC91dGlscy91dGlsaXRpZXMuanM/NmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtcmVhY3QgdjIuMi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDaGlsZHJlbk9yRnVuY3Rpb24oY2hpbGRyZW4sIGFyZ3MpIHtcclxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBjaGlsZHJlbihhcmdzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjaGlsZHJlbjtcclxufVxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGV0aGVyIDIgYXJyYXlzIGFyZSBlcXVhbFxyXG4gKiBVc2VkIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHN0YXRlIHVwZGF0ZXNcclxuICogQHBhcmFtIGFycmF5QVxyXG4gKiBAcGFyYW0gYXJyYXlCXHJcbiAqL1xyXG5mdW5jdGlvbiBhY2NvdW50QXJyYXlzQXJlRXF1YWwoYXJyYXlBLCBhcnJheUIpIHtcclxuICAgIGlmIChhcnJheUEubGVuZ3RoICE9PSBhcnJheUIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29tcGFyaXNvbkFycmF5ID0gWy4uLmFycmF5Ql07XHJcbiAgICByZXR1cm4gYXJyYXlBLmV2ZXJ5KChlbGVtZW50QSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRCID0gY29tcGFyaXNvbkFycmF5LnNoaWZ0KCk7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50QSB8fCAhZWxlbWVudEIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKGVsZW1lbnRBLmhvbWVBY2NvdW50SWQgPT09IGVsZW1lbnRCLmhvbWVBY2NvdW50SWQgJiZcclxuICAgICAgICAgICAgZWxlbWVudEEubG9jYWxBY2NvdW50SWQgPT09IGVsZW1lbnRCLmxvY2FsQWNjb3VudElkICYmXHJcbiAgICAgICAgICAgIGVsZW1lbnRBLnVzZXJuYW1lID09PSBlbGVtZW50Qi51c2VybmFtZSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRBY2NvdW50QnlJZGVudGlmaWVycyhhbGxBY2NvdW50cywgYWNjb3VudElkZW50aWZpZXJzKSB7XHJcbiAgICBpZiAoYWxsQWNjb3VudHMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgIChhY2NvdW50SWRlbnRpZmllcnMuaG9tZUFjY291bnRJZCB8fFxyXG4gICAgICAgICAgICBhY2NvdW50SWRlbnRpZmllcnMubG9jYWxBY2NvdW50SWQgfHxcclxuICAgICAgICAgICAgYWNjb3VudElkZW50aWZpZXJzLnVzZXJuYW1lKSkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoZWRBY2NvdW50cyA9IGFsbEFjY291bnRzLmZpbHRlcigoYWNjb3VudE9iaikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYWNjb3VudElkZW50aWZpZXJzLnVzZXJuYW1lICYmXHJcbiAgICAgICAgICAgICAgICBhY2NvdW50SWRlbnRpZmllcnMudXNlcm5hbWUudG9Mb3dlckNhc2UoKSAhPT1cclxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50T2JqLnVzZXJuYW1lLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWNjb3VudElkZW50aWZpZXJzLmhvbWVBY2NvdW50SWQgJiZcclxuICAgICAgICAgICAgICAgIGFjY291bnRJZGVudGlmaWVycy5ob21lQWNjb3VudElkLnRvTG93ZXJDYXNlKCkgIT09XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudE9iai5ob21lQWNjb3VudElkLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWNjb3VudElkZW50aWZpZXJzLmxvY2FsQWNjb3VudElkICYmXHJcbiAgICAgICAgICAgICAgICBhY2NvdW50SWRlbnRpZmllcnMubG9jYWxBY2NvdW50SWQudG9Mb3dlckNhc2UoKSAhPT1cclxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50T2JqLmxvY2FsQWNjb3VudElkLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlZEFjY291bnRzWzBdIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBhY2NvdW50QXJyYXlzQXJlRXF1YWwsIGdldEFjY291bnRCeUlkZW50aWZpZXJzLCBnZXRDaGlsZHJlbk9yRnVuY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxpdGllcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJnZXRDaGlsZHJlbk9yRnVuY3Rpb24iLCJjaGlsZHJlbiIsImFyZ3MiLCJhY2NvdW50QXJyYXlzQXJlRXF1YWwiLCJhcnJheUEiLCJhcnJheUIiLCJsZW5ndGgiLCJjb21wYXJpc29uQXJyYXkiLCJldmVyeSIsImVsZW1lbnRBIiwiZWxlbWVudEIiLCJzaGlmdCIsImhvbWVBY2NvdW50SWQiLCJsb2NhbEFjY291bnRJZCIsInVzZXJuYW1lIiwiZ2V0QWNjb3VudEJ5SWRlbnRpZmllcnMiLCJhbGxBY2NvdW50cyIsImFjY291bnRJZGVudGlmaWVycyIsIm1hdGNoZWRBY2NvdW50cyIsImZpbHRlciIsImFjY291bnRPYmoiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-react/dist/utils/utilities.js\n");

/***/ })

};
;